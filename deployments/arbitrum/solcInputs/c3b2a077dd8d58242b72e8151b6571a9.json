{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "contracts/deployment/arbitrum/ArbBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 67471c167ea4dcee4590ca5d8289a47373be90e3;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract ArbBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/ArbDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 67471c167ea4dcee4590ca5d8289a47373be90e3;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract ArbDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/ArbPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 67471c167ea4dcee4590ca5d8289a47373be90e3;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title `ArbPool`\n * @dev Contract allowing user to deposit to and borrow ARB from a dedicated user account\n */\ncontract ArbPool is Pool {\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeArbibtrum\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPARB\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/arbitrum/ArbPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 67471c167ea4dcee4590ca5d8289a47373be90e3;\npragma solidity 0.8.17;\n\nimport \"./ArbPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract ArbPoolFactory {\n    function deployPool() public {\n        ArbPool pool = new ArbPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/ArbVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: de0a4e9ee653d2aade275c436805bb3217a8979d;\npragma solidity 0.8.17;\n\nimport \"./WethVariableUtilisationRatesCalculator.sol\";\n/**\n * @title ArbVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract ArbVariableUtilisationRatesCalculator is WethVariableUtilisationRatesCalculator{\n}"
    },
    "contracts/deployment/arbitrum/WethVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title WethVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract WethVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4= 29.8e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 26.7e18;\n\n    uint256 public constant MAX_RATE = 3.1e18;\n\n\n\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/interfaces/IBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IBorrowersRegistry\n * Keeps a registry of created trading accounts to verify their borrowing rights\n */\ninterface IBorrowersRegistry {\n    function canBorrow(address _account) external view returns (bool);\n\n    function getLoanForOwner(address _owner) external view returns (address);\n\n    function getOwnerOfLoan(address _loan) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\ninterface IIndex {\n\n    function setRate(uint256 _rate) external;\n\n    function updateUser(address user) external;\n\n    function getIndex() external view returns (uint256);\n\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IPoolRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\ninterface IPoolRewarder {\n\n    function stakeFor(uint _amount, address _stakeFor) external;\n\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\n\n    function getRewardsFor(address _user) external;\n\n    function earned(address _account) external view returns (uint);\n\n    function balanceOf(address _account) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IRatesCalculator\n * @dev Interface defining base method for contracts implementing interest rates calculation.\n * The calculated value could be based on the relation between funds borrowed and deposited.\n */\ninterface IRatesCalculator {\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n}\n"
    },
    "contracts/LinearIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./interfaces/IIndex.sol\";\n\n/**\n * LinearIndex\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\n * It could be used as a base building block for any index-based entities like deposits and loans.\n * The index is updated on a linear basis to the compounding happens when a user decide to accumulate the interests\n **/\ncontract LinearIndex is IIndex, OwnableUpgradeable {\n\n    uint256 private constant SECONDS_IN_YEAR = 365 days;\n    uint256 private constant BASE_RATE = 1e18;\n\n    uint256 public index;\n    uint256 public indexUpdateTime;\n\n    mapping(uint256 => uint256) prevIndex;\n    mapping(address => uint256) userUpdateTime;\n\n    uint256 public rate;\n\n    function initialize(address owner_) external initializer {\n        index = BASE_RATE;\n        indexUpdateTime = block.timestamp;\n\n        __Ownable_init();\n        if (address(owner_) != address(0)) {\n            transferOwnership(owner_);\n        }\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * Sets the new rate\n     * Before the new rate is set, the index is updated accumulating interest\n     * @dev _rate the value of updated rate\n   **/\n    function setRate(uint256 _rate) public override onlyOwner {\n        updateIndex();\n        rate = _rate;\n        emit RateUpdated(rate, block.timestamp);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * Updates user index\n     * It persists the update time and the update index time->index mapping\n     * @dev user address of the index owner\n   **/\n    function updateUser(address user) public override onlyOwner {\n        userUpdateTime[user] = block.timestamp;\n        prevIndex[block.timestamp] = getIndex();\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Gets current value of the linear index\n     * It recalculates the value on-demand without updating the storage\n     **/\n    function getIndex() public view override returns (uint256) {\n        uint256 period = block.timestamp - indexUpdateTime;\n        if (period > 0) {\n            return index * getLinearFactor(period) / 1e27;\n        } else {\n            return index;\n        }\n    }\n\n    /**\n     * Gets the user value recalculated to the current index\n     * It recalculates the value on-demand without updating the storage\n     * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\n     * of 1 Wei)\n     **/\n    function getIndexedValue(uint256 value, address user) public view override returns (uint256) {\n        uint256 userTime = userUpdateTime[user];\n        uint256 prevUserIndex = userTime == 0 ? getIndex() : prevIndex[userTime];\n\n        return value * getIndex() / prevUserIndex;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function updateIndex() internal {\n        prevIndex[indexUpdateTime] = index;\n\n        index = getIndex();\n        indexUpdateTime = block.timestamp;\n    }\n\n    /**\n     * Returns a linear factor in Ray\n     **/\n    function getLinearFactor(uint256 period) virtual internal view returns (uint256) {\n        return rate * period * 1e9 / SECONDS_IN_YEAR + 1e27;\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev Emitted after updating the current rate\n     * @param updatedRate the value of updated rate\n     * @param timestamp of the rate update\n     **/\n    event RateUpdated(uint256 updatedRate, uint256 timestamp);\n}"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 67471c167ea4dcee4590ca5d8289a47373be90e3;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./interfaces/IIndex.sol\";\nimport \"./interfaces/IRatesCalculator.sol\";\nimport \"./interfaces/IBorrowersRegistry.sol\";\nimport \"./interfaces/IPoolRewarder.sol\";\nimport \"./VestingDistributor.sol\";\n\n\n/**\n * @title Pool\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\n * Depositors are rewarded with the interest rates collected from borrowers.\n * The interest rates calculation is delegated to an external calculator contract.\n */\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\n    using TransferHelper for address payable;\n\n    uint256 public totalSupplyCap;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n    mapping(address => uint256) internal _deposited;\n\n    mapping(address => uint256) public borrowed;\n\n    IRatesCalculator public ratesCalculator;\n    IBorrowersRegistry public borrowersRegistry;\n    IPoolRewarder public poolRewarder;\n\n    IIndex public depositIndex;\n    IIndex public borrowIndex;\n\n    address payable public tokenAddress;\n\n    VestingDistributor public vestingDistributor;\n\n    uint8 internal _decimals;\n\n\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\n            && AddressUpgradeable.isContract(address(depositIndex_))\n            && AddressUpgradeable.isContract(address(borrowIndex_))\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \"Wrong init arguments\");\n\n        borrowersRegistry = borrowersRegistry_;\n        ratesCalculator = ratesCalculator_;\n        depositIndex = depositIndex_;\n        borrowIndex = borrowIndex_;\n        poolRewarder = poolRewarder_;\n        tokenAddress = tokenAddress_;\n        totalSupplyCap = _totalSupplyCap;\n\n        _decimals = IERC20Metadata(tokenAddress_).decimals();\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _updateRates();\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\n     * Only the owner of the Contract can execute this function.\n     * @dev _newTotalSupplyCap new deposit cap\n    **/\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\n        totalSupplyCap = _newTotalSupplyCap;\n    }\n\n    /**\n     * Sets the new Pool Rewarder.\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\n     * Only the owner of the Contract can execute this function.\n     * @dev _poolRewarder the address of PoolRewarder\n    **/\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\n        poolRewarder = _poolRewarder;\n\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\n    }\n\n    /**\n     * Sets the new rate calculator.\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\n     * Only the owner of the Contract can execute this function.\n     * @dev ratesCalculator the address of rates calculator\n     **/\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\n        // setting address(0) ratesCalculator_ freezes the pool\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\n        ratesCalculator = ratesCalculator_;\n        if (address(ratesCalculator_) != address(0)) {\n            _updateRates();\n        }\n\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\n    }\n\n    /**\n     * Sets the new borrowers registry contract.\n     * The borrowers registry decides if an account can borrow funds.\n     * Only the owner of the Contract can execute this function.\n     * @dev borrowersRegistry the address of borrowers registry\n     **/\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\n\n        borrowersRegistry = borrowersRegistry_;\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\n    }\n\n    /**\n     * Sets the new Pool Rewarder.\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\n     * Only the owner of the Contract can execute this function.\n     * @dev _poolRewarder the address of PoolRewarder\n    **/\n    function setVestingDistributor(address _distributor) external onlyOwner {\n        if(!AddressUpgradeable.isContract(_distributor) && _distributor != address(0)) revert NotAContract(_distributor);\n        vestingDistributor = VestingDistributor(_distributor);\n\n        emit VestingDistributorChanged(_distributor, block.timestamp);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    function transfer(address recipient, uint256 amount) external override nonReentrant returns (bool) {\n        if(recipient == address(0)) revert TransferToZeroAddress();\n\n        if(recipient == address(this)) revert TransferToPoolAddress();\n\n        address account = msg.sender;\n        _accumulateDepositInterest(account);\n\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\n\n        _updateWithdrawn(account, amount, lockedAmount);\n\n        // (this is verified in \"require\" above)\n        unchecked {\n            _deposited[account] -= amount;\n        }\n\n        _accumulateDepositInterest(recipient);\n        _deposited[recipient] += amount;\n\n        // Handle rewards\n        if(address(poolRewarder) != address(0) && amount != 0){\n            uint256 unstaked = poolRewarder.withdrawFor(amount, account);\n            if(unstaked > 0) {\n                poolRewarder.stakeFor(unstaked, recipient);\n            }\n        }\n\n        emit Transfer(account, recipient, amount);\n\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        if(spender == address(0)) revert SpenderZeroAddress();\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\n        _allowed[msg.sender][spender] = newAllowance;\n\n        emit Approval(msg.sender, spender, newAllowance);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        if(spender == address(0)) revert SpenderZeroAddress();\n        uint256 currentAllowance = _allowed[msg.sender][spender];\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\n\n        uint256 newAllowance = currentAllowance - subtractedValue;\n        _allowed[msg.sender][spender] = newAllowance;\n\n        emit Approval(msg.sender, spender, newAllowance);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        if(spender == address(0)) revert SpenderZeroAddress();\n        _allowed[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override nonReentrant returns (bool) {\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\n\n        if(recipient == address(0)) revert TransferToZeroAddress();\n\n        if(recipient == address(this)) revert TransferToPoolAddress();\n\n        _accumulateDepositInterest(sender);\n\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(sender);\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\n\n        _updateWithdrawn(sender, amount, lockedAmount);\n\n        _deposited[sender] -= amount;\n        _allowed[sender][msg.sender] -= amount;\n\n        _accumulateDepositInterest(recipient);\n        _deposited[recipient] += amount;\n\n        // Handle rewards\n        if(address(poolRewarder) != address(0) && amount != 0){\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\n            if(unstaked > 0) {\n                poolRewarder.stakeFor(unstaked, recipient);\n            }\n        }\n\n        emit Transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n\n    /**\n     * Deposits the amount\n     * It updates user deposited balance, total deposited and rates\n     **/\n    function deposit(uint256 _amount) public virtual {\n        depositOnBehalf(_amount, msg.sender);\n    }\n\n    /**\n     * Deposits the amount on behalf of `_of` user.\n     * It updates `_of` user deposited balance, total deposited and rates\n     **/\n    function depositOnBehalf(uint256 _amount, address _of) public virtual nonReentrant {\n        if(_amount == 0) revert ZeroDepositAmount();\n        require(_of != address(0), \"Address zero\");\n        require(_of != address(this), \"Cannot deposit on behalf of pool\");\n\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\n\n        _accumulateDepositInterest(_of);\n\n        if(totalSupplyCap != 0){\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\n        }\n\n        _transferToPool(msg.sender, _amount);\n\n        _mint(_of, _amount);\n        _deposited[address(this)] += _amount;\n        _updateRates();\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.stakeFor(_amount, _of);\n        }\n\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\n    }\n\n    function _transferToPool(address from, uint256 amount) internal virtual {\n        tokenAddress.safeTransferFrom(from, address(this), amount);\n    }\n\n    function _transferFromPool(address to, uint256 amount) internal virtual {\n        tokenAddress.safeTransfer(to, amount);\n    }\n\n    /**\n     * Withdraws selected amount from the user deposits\n     * @dev _amount the amount to be withdrawn\n     **/\n    function withdraw(uint256 _amount) external nonReentrant {\n        _accumulateDepositInterest(msg.sender);\n        _amount = Math.min(_amount, _deposited[msg.sender]);\n\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\n\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\n        // verified in \"require\" above\n        unchecked {\n            _deposited[address(this)] -= _amount;\n        }\n        _burn(msg.sender, _amount);\n\n        _updateRates();\n\n        _transferFromPool(msg.sender, _amount);\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.withdrawFor(_amount, msg.sender);\n        }\n\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * Borrows the specified amount\n     * It updates user borrowed balance, total borrowed amount and rates\n     * @dev _amount the amount to be borrowed\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\n     **/\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\n\n        _accumulateBorrowingInterest(msg.sender);\n\n        borrowed[msg.sender] += _amount;\n        borrowed[address(this)] += _amount;\n\n        _transferFromPool(msg.sender, _amount);\n\n        _updateRates();\n\n        emit Borrowing(msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * Repays the amount\n     * It updates user borrowed balance, total borrowed amount and rates\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\n     **/\n    function repay(uint256 amount) external nonReentrant {\n        _accumulateBorrowingInterest(msg.sender);\n\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\n        _transferToPool(msg.sender, amount);\n\n        borrowed[msg.sender] -= amount;\n        borrowed[address(this)] -= amount;\n\n        _updateRates();\n\n        emit Repayment(msg.sender, amount, block.timestamp);\n    }\n\n    /* =========\n\n\n    /**\n     * Returns the current borrowed amount for the given user\n     * The value includes the interest rates owned at the current moment\n     * @dev _user the address of queried borrower\n    **/\n    function getBorrowed(address _user) public view returns (uint256) {\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\n    }\n\n    function name() public virtual pure returns(string memory _name){\n        _name = \"\";\n    }\n\n    function symbol() public virtual pure returns(string memory _symbol){\n        _symbol = \"\";\n    }\n\n    function decimals() public virtual view returns(uint8){\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return balanceOf(address(this));\n    }\n\n    function totalBorrowed() public view returns (uint256) {\n        return getBorrowed(address(this));\n    }\n\n\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\n    function getRewards() external {\n        poolRewarder.getRewardsFor(msg.sender);\n    }\n\n    // Returns number of pending rewards for msg.sender\n    function checkRewards() external view returns (uint256) {\n        return poolRewarder.earned(msg.sender);\n    }\n\n    // Returns max. acceptable pool utilisation after borrow action\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    /**\n     * Returns the current deposited amount for the given user\n     * The value includes the interest rates earned at the current moment\n     * @dev _user the address of queried depositor\n     **/\n    function balanceOf(address user) public view override returns (uint256) {\n        return depositIndex.getIndexedValue(_deposited[user], user);\n    }\n\n    /**\n     * Returns the current interest rate for deposits\n     **/\n    function getDepositRate() public view returns (uint256) {\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\n    }\n\n    /**\n     * Returns the current interest rate for borrowings\n     **/\n    function getBorrowingRate() public view returns (uint256) {\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\n    }\n\n    /**\n     * Returns full pool status\n     */\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\n        return [\n            totalSupply(),\n            getDepositRate(),\n            getBorrowingRate(),\n            totalBorrowed(),\n            getMaxPoolUtilisationForBorrowing()\n        ];\n    }\n\n    /**\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\n     **/\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\n\n        if(amount > balance) revert InsufficientPoolFunds();\n        if(surplus < amount) revert InsufficientSurplus();\n\n        _transferFromPool(account, amount);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _mint(address to, uint256 amount) internal {\n        if(to == address(0)) revert MintToAddressZero();\n\n        _deposited[to] += amount;\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\n        if(amount > transferrableAmount) revert BurnAmountExceedsAvailableForUser();\n\n        _updateWithdrawn(account, amount, lockedAmount);\n\n        // verified in \"require\" above\n        unchecked {\n            _deposited[account] -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _getAmounts(address account) internal view returns (uint256 lockedAmount, uint256 transferrableAmount) {\n        if (address(vestingDistributor) != address(0)) {\n            lockedAmount = vestingDistributor.locked(account);\n            if (lockedAmount > 0) {\n                transferrableAmount = _deposited[account] - (lockedAmount - vestingDistributor.availableToWithdraw(account));\n            } else {\n                transferrableAmount = _deposited[account];\n            }\n        } else {\n            transferrableAmount = _deposited[account];\n        }\n    }\n\n    function _updateWithdrawn(address account, uint256 amount, uint256 lockedAmount) internal {\n        uint256 availableUnvested = _deposited[account] - lockedAmount;\n        if (amount > availableUnvested && address(vestingDistributor) != address(0)) {\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\n        }\n    }\n\n    function _updateRates() internal {\n        uint256 _totalBorrowed = totalBorrowed();\n        uint256 _totalSupply = totalSupply();\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\n    }\n\n    function _accumulateDepositInterest(address user) internal {\n        uint256 interest = balanceOf(user) - _deposited[user];\n\n        _mint(user, interest);\n        _deposited[address(this)] = balanceOf(address(this));\n\n        emit InterestCollected(user, interest, block.timestamp);\n\n        depositIndex.updateUser(user);\n        depositIndex.updateUser(address(this));\n    }\n\n    function _accumulateBorrowingInterest(address user) internal {\n        borrowed[user] = getBorrowed(user);\n        borrowed[address(this)] = getBorrowed(address(this));\n\n        borrowIndex.updateUser(user);\n        borrowIndex.updateUser(address(this));\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== MODIFIERS ========== */\n\n    modifier canBorrow() {\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\n        _;\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after the user deposits funds\n     * @param user the address performing the deposit\n     * @param value the amount deposited\n     * @param timestamp of the deposit\n     **/\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user deposits funds on behalf of other user\n     * @param user the address performing the deposit\n     * @param _of the address on behalf of which the deposit is being performed\n     * @param value the amount deposited\n     * @param timestamp of the deposit\n     **/\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user withdraws funds\n     * @param user the address performing the withdrawal\n     * @param value the amount withdrawn\n     * @param timestamp of the withdrawal\n     **/\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user borrows funds\n     * @param user the address that borrows\n     * @param value the amount borrowed\n     * @param timestamp time of the borrowing\n     **/\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user repays debt\n     * @param user the address that repays debt\n     * @param value the amount repaid\n     * @param timestamp of the repayment\n     **/\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after accumulating deposit interest\n     * @param user the address that the deposit interest is accumulated for\n     * @param value the amount that interest is calculated from\n     * @param timestamp of the interest accumulation\n     **/\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing borrowers registry\n    * @param registry an address of the newly set borrowers registry\n    * @param timestamp of the borrowers registry change\n    **/\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing rates calculator\n    * @param calculator an address of the newly set rates calculator\n    * @param timestamp of the borrowers registry change\n    **/\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing pool rewarder\n    * @param poolRewarder an address of the newly set pool rewarder\n    * @param timestamp of the pool rewarder change\n    **/\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing vesting distributor\n    * @param distributor an address of the newly set distributor\n    * @param timestamp of the distributor change\n    **/\n    event VestingDistributorChanged(address indexed distributor, uint256 timestamp);\n\n    /* ========== ERRORS ========== */\n\n    // Only authorized accounts may borrow\n    error NotAuthorizedToBorrow();\n\n    // Borrowers registry is not configured\n    error BorrowersRegistryNotConfigured();\n\n    // Pool is frozen\n    error PoolFrozen();\n\n    // Not enough funds in the pool.\n    error InsufficientPoolFunds();\n\n    // Insufficient pool surplus to cover the requested recover amount\n    error InsufficientSurplus();\n\n    // Address (`target`) must be a contract\n    // @param target target address that must be a contract\n    error NotAContract(address target);\n\n    //  ERC20: Spender cannot be a zero address\n    error SpenderZeroAddress();\n\n    //  ERC20: cannot transfer to the zero address\n    error TransferToZeroAddress();\n\n    //  ERC20: cannot transfer to the pool address\n    error TransferToPoolAddress();\n\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\n    /// @param amount transfer amount\n    /// @param balance available balance\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\n\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\n    /// @param requested requested transfer amount\n    /// @param allowance current allowance\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\n\n    //  This deposit operation would result in a breach of the totalSupplyCap\n    error TotalSupplyCapBreached();\n\n    // The deposit amount must be > 0\n    error ZeroDepositAmount();\n\n    // ERC20: cannot mint to the zero address\n    error MintToAddressZero();\n\n    // ERC20: burn amount exceeds current pool indexed balance\n    error BurnAmountExceedsBalance();\n\n    // ERC20: burn amount exceeds current amount available (including vesting)\n    error BurnAmountExceedsAvailableForUser();\n\n    // Trying to repay more than was borrowed\n    error RepayingMoreThanWasBorrowed();\n\n    // getMaxPoolUtilisationForBorrowing was breached\n    error MaxPoolUtilisationBreached();\n}"
    },
    "contracts/proxies/tup/arbitrum/ArbBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract ArbBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/ArbDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract ArbDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/ArbPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 67471c167ea4dcee4590ca5d8289a47373be90e3;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract ArbPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/VestingDistributor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"./Pool.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @title VestingDistributor\n * @dev Contract distributing pool's spread among vesting participants.\n */\ncontract VestingDistributor {\n\n    Pool immutable pool;\n    IERC20Metadata immutable poolToken;\n    address keeper;\n    address pendingKeeper;\n\n    uint256 totalLockedMultiplied;\n    address[] public participants;\n    mapping(address => uint256) public locked;\n    mapping(address => uint256) public withdrawn;\n    mapping(address => uint256) public unvestingTime;\n    mapping(address => uint256) public unlockTimestamp;\n    mapping(address => uint256) public multiplier;\n    mapping(uint256 => uint256) rewardAmount;\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\n    mapping(uint256 => uint256) numRewardDistributed;\n\n    uint256 lastUpdated;\n    uint256 updateInterval = 6 hours;\n\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\n\n    modifier onlyPool() {\n        require(msg.sender == address(pool), \"Unauthorized: onlyPool\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(msg.sender == keeper, \"Unauthorized: onlyKeeper\");\n        _;\n    }\n\n    modifier onlyPendingKeeper() {\n        require(msg.sender == pendingKeeper, \"Unauthorized: onlyPendingKeeper\");\n        _;\n    }\n\n    constructor(address poolAddress, address keeperAddress) {\n        pool = Pool(poolAddress);\n        poolToken = IERC20Metadata(pool.tokenAddress());\n        keeper = keeperAddress;\n        lastUpdated = block.timestamp;\n    }\n\n    function transferKeeper(address keeperAddress) external onlyKeeper {\n        pendingKeeper = keeperAddress;\n    }\n\n    function acceptKeeper() external onlyPendingKeeper {\n        keeper = pendingKeeper;\n        pendingKeeper = address(0);\n    }\n\n    /**\n     * Add vesting participant (msg.sender)\n     **/\n    function startVesting(uint256 amount, uint256 time) public {\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\n\n        participants.push(msg.sender);\n        locked[msg.sender] = amount;\n        unvestingTime[msg.sender] = time;\n        uint256 _multiplier = getMultiplier(time);\n        multiplier[msg.sender] = _multiplier;\n\n        totalLockedMultiplied += amount * _multiplier / 1e18;\n    }\n\n    /**\n     * Increase vesting of msg.sender\n     **/\n    function increaseVesting(uint256 amount) public {\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\n\n        locked[msg.sender] += amount;\n\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\n    }\n\n    /**\n     * Unlock funds - start of unvesting\n     **/\n    function unlock() public {\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\n\n        unlockTimestamp[msg.sender] = block.timestamp;\n    }\n\n    /**\n     * Check how much user can withdraw\n     **/\n    function availableToWithdraw(address account) public view returns (uint256) {\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\n        if (unlockTimestamp[account] == 0) revert UserLocked();\n\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\n\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\n    }\n\n    /**\n     * Gets pool's spread and distributes among vesting participants.\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    //TODO: run periodically by bots\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\n\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\n\n        if (rewardAmount[lastUpdated] == 0) {\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\n        }\n        uint256 rewards = rewardAmount[lastUpdated];\n\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\n            address participant = participants[i];\n            if (rewardDistributed[lastUpdated][participant]) {\n                continue;\n            }\n\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\n\n            pool.transfer(participant, participantReward);\n\n            rewardDistributed[lastUpdated][participant] = true;\n            ++numRewardDistributed[lastUpdated];\n            if (numRewardDistributed[lastUpdated] == participants.length) {\n                lastUpdated = block.timestamp;\n            }\n        }\n    }\n\n    //TODO: run periodically by bots\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\n        for (uint256 i = fromIndex; i <= toIndex;) {\n            address participant = participants[i];\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\n\n                unvestingTime[participant] = 0;\n                locked[participant] = 0;\n                unlockTimestamp[participant] = 0;\n                withdrawn[participant] = 0;\n                multiplier[participant] = 0;\n\n                participants[i] = participants[participants.length - 1];\n                participants.pop();\n                --toIndex;\n            } else {\n                ++i;\n            }\n        }\n    }\n\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\n        withdrawn[account] += amount;\n        if (withdrawn[account] > locked[account]) {\n            revert WithdrawMoreThanLocked();\n        }\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\n    }\n\n    function getMultiplier(uint256 time) public pure returns (uint256){\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\n\n        return 1e18;\n    }\n\n\n    // Trying to distribute before the update interval has been reached\n    error DistributeTooEarly();\n\n    // Already participates in vesting\n    error AlreadyLocked();\n\n    // Vesting time is out of range\n    error InvalidVestingTime();\n\n    // Insufficient user balance of pool's tokens\n    error InsufficientPoolBalance();\n\n    // User not locked\n    error UserNotLocked();\n\n    // User funds are locked\n    error UserLocked();\n\n    // Too late\n    error TooLate();\n\n    // Withdraw amount is more than locked\n    error WithdrawMoreThanLocked();\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}