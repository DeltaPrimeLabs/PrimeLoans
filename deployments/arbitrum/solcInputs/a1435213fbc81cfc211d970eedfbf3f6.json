{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializating the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        assert(_IMPLEMENTATION_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.implementation\")) - 1));\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/transparent/TransparentUpgradeableProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC1967/ERC1967Proxy.sol\";\n\n/**\n * @dev This contract implements a proxy that is upgradeable by an admin.\n *\n * To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy selector\n * clashing], which can potentially be used in an attack, this contract uses the\n * https://blog.openzeppelin.com/the-transparent-proxy-pattern/[transparent proxy pattern]. This pattern implies two\n * things that go hand in hand:\n *\n * 1. If any account other than the admin calls the proxy, the call will be forwarded to the implementation, even if\n * that call matches one of the admin functions exposed by the proxy itself.\n * 2. If the admin calls the proxy, it can access the admin functions, but its calls will never be forwarded to the\n * implementation. If the admin tries to call a function on the implementation it will fail with an error that says\n * \"admin cannot fallback to proxy target\".\n *\n * These properties mean that the admin account can only be used for admin actions like upgrading the proxy or changing\n * the admin, so it's best if it's a dedicated account that is not used for anything else. This will avoid headaches due\n * to sudden errors when trying to call a function from the proxy implementation.\n *\n * Our recommendation is for the dedicated account to be an instance of the {ProxyAdmin} contract. If set up this way,\n * you should think of the `ProxyAdmin` instance as the real administrative interface of your proxy.\n */\ncontract TransparentUpgradeableProxy is ERC1967Proxy {\n    /**\n     * @dev Initializes an upgradeable proxy managed by `_admin`, backed by the implementation at `_logic`, and\n     * optionally initialized with `_data` as explained in {ERC1967Proxy-constructor}.\n     */\n    constructor(\n        address _logic,\n        address admin_,\n        bytes memory _data\n    ) payable ERC1967Proxy(_logic, _data) {\n        assert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1));\n        _changeAdmin(admin_);\n    }\n\n    /**\n     * @dev Modifier used internally that will delegate the call to the implementation unless the sender is the admin.\n     */\n    modifier ifAdmin() {\n        if (msg.sender == _getAdmin()) {\n            _;\n        } else {\n            _fallback();\n        }\n    }\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyAdmin}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function admin() external ifAdmin returns (address admin_) {\n        admin_ = _getAdmin();\n    }\n\n    /**\n     * @dev Returns the current implementation.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-getProxyImplementation}.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using the\n     * https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc`\n     */\n    function implementation() external ifAdmin returns (address implementation_) {\n        implementation_ = _implementation();\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-changeProxyAdmin}.\n     */\n    function changeAdmin(address newAdmin) external virtual ifAdmin {\n        _changeAdmin(newAdmin);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgrade}.\n     */\n    function upgradeTo(address newImplementation) external ifAdmin {\n        _upgradeToAndCall(newImplementation, bytes(\"\"), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy, and then call a function from the new implementation as specified\n     * by `data`, which should be an encoded function call. This is useful to initialize new storage variables in the\n     * proxied contract.\n     *\n     * NOTE: Only the admin can call this function. See {ProxyAdmin-upgradeAndCall}.\n     */\n    function upgradeToAndCall(address newImplementation, bytes calldata data) external payable ifAdmin {\n        _upgradeToAndCall(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _admin() internal view virtual returns (address) {\n        return _getAdmin();\n    }\n\n    /**\n     * @dev Makes sure the admin cannot access the fallback function. See {Proxy-_beforeFallback}.\n     */\n    function _beforeFallback() internal virtual override {\n        require(msg.sender != _getAdmin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy target\");\n        super._beforeFallback();\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = _allowances[owner][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./RedstoneConstants.sol\";\n\n/**\n * @title The base contract with the main logic of data extraction from calldata\n * @author The Redstone Oracles team\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\n * and the ProxyConnector contracts\n */\ncontract CalldataExtractor is RedstoneConstants {\n  using SafeMath for uint256;\n\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\n    // Checking if the calldata ends with the RedStone marker\n    bool hasValidRedstoneMarker;\n    assembly {\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\n      hasValidRedstoneMarker := eq(\n        REDSTONE_MARKER_MASK,\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\n      )\n    }\n    if (!hasValidRedstoneMarker) {\n      revert CalldataMustHaveValidPayload();\n    }\n\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\n    uint24 unsignedMetadataByteSize;\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\n      revert CalldataOverOrUnderFlow();\n    }\n    assembly {\n      unsignedMetadataByteSize := calldataload(\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\n      )\n    }\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\n      + UNSGINED_METADATA_BYTE_SIZE_BS\n      + REDSTONE_MARKER_BS;\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\n      revert IncorrectUnsignedMetadataSize();\n    }\n    return calldataNegativeOffset;\n  }\n\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\n    internal\n    pure\n    returns (uint16 dataPackagesCount)\n  {\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\n      revert CalldataOverOrUnderFlow();\n    }\n    assembly {\n      dataPackagesCount := calldataload(\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\n      )\n    }\n    return dataPackagesCount;\n  }\n\n  function _extractDataPointValueAndDataFeedId(\n    uint256 calldataNegativeOffsetForDataPackage,\n    uint256 defaultDataPointValueByteSize,\n    uint256 dataPointIndex\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\n    );\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\n    assembly {\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\n    }\n  }\n\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\n    internal\n    pure\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\n  {\n    // Using uint24, because data points count byte size number has 3 bytes\n    uint24 dataPointsCount_;\n\n    // Using uint32, because data point value byte size has 4 bytes\n    uint32 eachDataPointValueByteSize_;\n\n    // Extract data points count\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\n    assembly {\n      dataPointsCount_ := calldataload(calldataOffset)\n    }\n\n    // Extract each data point value size\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\n    assembly {\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\n    }\n\n    // Prepare returned values\n    dataPointsCount = dataPointsCount_;\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"./RedstoneConstants.sol\";\nimport \"./CalldataExtractor.sol\";\n\n/**\n * @title The base contract for forwarding redstone payload to other contracts\n * @author The Redstone Oracles team\n */\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\n  error ProxyCalldataFailedWithoutErrMsg();\n  error ProxyCalldataFailedWithStringMessage(string message);\n  error ProxyCalldataFailedWithCustomError(bytes result);\n\n  function proxyCalldata(\n    address contractAddress,\n    bytes memory encodedFunction,\n    bool forwardValue\n  ) internal returns (bytes memory) {\n    bytes memory message = _prepareMessage(encodedFunction);\n\n    (bool success, bytes memory result) =\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\n\n    return _prepareReturnValue(success, result);\n  }\n\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\n    internal\n    returns (bytes memory)\n  {\n    bytes memory message = _prepareMessage(encodedFunction);\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\n    return _prepareReturnValue(success, result);\n  }\n\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\n    internal\n    view\n    returns (bytes memory)\n  {\n    bytes memory message = _prepareMessage(encodedFunction);\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\n    return _prepareReturnValue(success, result);\n  }\n\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\n\n    if (redstonePayloadByteSize > msg.data.length) {\n      revert CalldataOverOrUnderFlow();\n    }\n\n    bytes memory message;\n\n    assembly {\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\n\n      // Saving the byte size of the result message (it's a standard in EVM)\n      mstore(message, resultMessageByteSize)\n\n      // Copying function and its arguments\n      for {\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\n        let fromEnd := add(from, encodedFunctionBytesCount)\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\n      } lt (from, fromEnd) {\n        from := add(from, STANDARD_SLOT_BS)\n        to := add(to, STANDARD_SLOT_BS)\n      } {\n        // Copying data from encodedFunction to message (32 bytes at a time)\n        mstore(to, mload(from))\n      }\n\n      // Copying redstone payload to the message bytes\n      calldatacopy(\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\n        sub(calldatasize(), redstonePayloadByteSize), // offset\n        redstonePayloadByteSize // bytes length to copy\n      )\n\n      // Updating free memory pointer\n      mstore(\n        FREE_MEMORY_PTR,\n        add(\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\n          BYTES_ARR_LEN_VAR_BS\n        )\n      )\n    }\n\n    return message;\n  }\n\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\n      calldataNegativeOffset += dataPackageByteSize;\n    }\n\n    return calldataNegativeOffset;\n  }\n\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\n    (\n      uint256 dataPointsCount,\n      uint256 eachDataPointValueByteSize\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\n\n    return\n      dataPointsCount *\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\n  }\n\n\n  function _prepareReturnValue(bool success, bytes memory result)\n    internal\n    pure\n    returns (bytes memory)\n  {\n    if (!success) {\n\n      if (result.length == 0) {\n        revert ProxyCalldataFailedWithoutErrMsg();\n      } else {\n        bool isStringErrorMessage;\n        assembly {\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\n        }\n\n        if (isStringErrorMessage) {\n          string memory receivedErrMsg;\n          assembly {\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\n          }\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\n        } else {\n          revert ProxyCalldataFailedWithCustomError(result);\n        }\n      }\n    }\n\n    return result;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\n/**\n * @title The base contract with helpful constants\n * @author The Redstone Oracles team\n * @dev It mainly contains redstone-related values, which improve readability\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\n */\ncontract RedstoneConstants {\n  // === Abbreviations ===\n  // BS - Bytes size\n  // PTR - Pointer (memory location)\n  // SIG - Signature\n\n  // Solidity and YUL constants\n  uint256 internal constant STANDARD_SLOT_BS = 32;\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n\n  // RedStone protocol consts\n  uint256 internal constant SIG_BS = 65;\n  uint256 internal constant TIMESTAMP_BS = 6;\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\n\n  // Derived values (based on consts)\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\n\n  // Error messages\n  error CalldataOverOrUnderFlow();\n  error IncorrectUnsignedMetadataSize();\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\n  error EachSignerMustProvideTheSameValue();\n  error EmptyCalldataPointersArr();\n  error InvalidCalldataPointer();\n  error CalldataMustHaveValidPayload();\n  error SignerNotAuthorised(address receivedSigner);\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./RedstoneConstants.sol\";\nimport \"./RedstoneDefaultsLib.sol\";\nimport \"./CalldataExtractor.sol\";\nimport \"../libs/BitmapLib.sol\";\nimport \"../libs/SignatureLib.sol\";\n\n/**\n * @title The base contract with the main Redstone logic\n * @author The Redstone Oracles team\n * @dev Do not use this contract directly in consumer contracts, take a\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\n */\nabstract contract RedstoneConsumerBase is CalldataExtractor {\n  using SafeMath for uint256;\n\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\n\n  /**\n   * @dev This function must be implemented by the child consumer contract.\n   * It should return a unique index for a given signer address if the signer\n   * is authorised, otherwise it should revert\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\n   * @return Unique index for a signer in the range [0..255]\n   */\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\n\n  /**\n   * @dev This function may be overriden by the child consumer contract.\n   * It should validate the timestamp against the current time (block.timestamp)\n   * It should revert with a helpful message if the timestamp is not valid\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\n   */\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\n  }\n\n  /**\n   * @dev This function should be overriden by the child consumer contract.\n   * @return The minimum required value of unique authorised signers\n   */\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\n    return 1;\n  }\n\n  /**\n   * @dev This function may be overriden by the child consumer contract.\n   * It should aggregate values from different signers to a single uint value.\n   * By default, it calculates the median value\n   * @param values An array of uint256 values from different signers\n   * @return Result of the aggregation in the form of a single number\n   */\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\n    return RedstoneDefaultsLib.aggregateValues(values);\n  }\n\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\n\n  /**\n   * @dev This is an internal helpful function for secure extraction oracle values\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\n   * validation, and aggregating values from different authorised signers into a\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\n   * insufficient number of autorised signers) do not match, the function will revert.\n   *\n   * Note! You should not call this function in a consumer contract. You can use\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\n   *\n   * @param dataFeedIds An array of unique data feed identifiers\n   * @return An array of the extracted and verified oracle values in the same order\n   * as they are requested in dataFeedIds array\n   */\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\n    internal\n    view\n    returns (uint256[] memory)\n  {\n    // Initializing helpful variables and allocating memory\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\n      // The line below is commented because newly allocated arrays are filled with zeros\n      // But we left it for better readability\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\n    }\n\n    // Extracting the number of data packages from calldata\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\n\n    // Saving current free memory pointer\n    uint256 freeMemPtr;\n    assembly {\n      freeMemPtr := mload(FREE_MEMORY_PTR)\n    }\n\n    // Data packages extraction in a loop\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\n      // Extract data package details and update calldata offset\n      uint256 dataPackageByteSize = _extractDataPackage(\n        dataFeedIds,\n        uniqueSignerCountForDataFeedIds,\n        signersBitmapForDataFeedIds,\n        valuesForDataFeeds,\n        calldataNegativeOffset\n      );\n      calldataNegativeOffset += dataPackageByteSize;\n\n      // Shifting memory pointer back to the \"safe\" value\n      assembly {\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\n      }\n    }\n\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\n  }\n\n  /**\n   * @dev This is a private helpful function, which extracts data for a data package based\n   * on the given negative calldata offset, verifies them, and in the case of successful\n   * verification updates the corresponding data package values in memory\n   *\n   * @param dataFeedIds an array of unique data feed identifiers\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\n   * for each data feed\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\n   * j-th value for the i-th data feed\n   * @param calldataNegativeOffset negative calldata offset for the given data package\n   *\n   * @return An array of the aggregated values\n   */\n  function _extractDataPackage(\n    bytes32[] memory dataFeedIds,\n    uint256[] memory uniqueSignerCountForDataFeedIds,\n    uint256[] memory signersBitmapForDataFeedIds,\n    uint256[][] memory valuesForDataFeeds,\n    uint256 calldataNegativeOffset\n  ) private view returns (uint256) {\n    uint256 signerIndex;\n\n    (\n      uint256 dataPointsCount,\n      uint256 eachDataPointValueByteSize\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\n\n    // We use scopes to resolve problem with too deep stack\n    {\n      uint48 extractedTimestamp;\n      address signerAddress;\n      bytes32 signedHash;\n      bytes memory signedMessage;\n      uint256 signedMessageBytesCount;\n\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\n\n      uint256 timestampCalldataOffset = msg.data.length.sub(\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\n\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\n\n      assembly {\n        // Extracting the signed message\n        signedMessage := extractBytesFromCalldata(\n          signedMessageCalldataOffset,\n          signedMessageBytesCount\n        )\n\n        // Hashing the signed message\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\n\n        // Extracting timestamp\n        extractedTimestamp := calldataload(timestampCalldataOffset)\n\n        function initByteArray(bytesCount) -> ptr {\n          ptr := mload(FREE_MEMORY_PTR)\n          mstore(ptr, bytesCount)\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\n        }\n\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\n          let extractedBytesStartPtr := initByteArray(bytesCount)\n          calldatacopy(\n            extractedBytesStartPtr,\n            offset,\n            bytesCount\n          )\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\n        }\n      }\n\n      // Validating timestamp\n      validateTimestamp(extractedTimestamp);\n\n      // Verifying the off-chain signature against on-chain hashed data\n      signerAddress = SignatureLib.recoverSignerAddress(\n        signedHash,\n        calldataNegativeOffset + SIG_BS\n      );\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\n    }\n\n    // Updating helpful arrays\n    {\n      bytes32 dataPointDataFeedId;\n      uint256 dataPointValue;\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\n        // Extracting data feed id and value for the current data point\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\n          calldataNegativeOffset,\n          eachDataPointValueByteSize,\n          dataPointIndex\n        );\n\n        for (\n          uint256 dataFeedIdIndex = 0;\n          dataFeedIdIndex < dataFeedIds.length;\n          dataFeedIdIndex++\n        ) {\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\n\n            if (\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\n            ) {\n              // Increase unique signer counter\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\n\n              // Add new value\n              valuesForDataFeeds[dataFeedIdIndex][\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\n              ] = dataPointValue;\n\n              // Update signers bitmap\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\n                bitmapSignersForDataFeedId,\n                signerIndex\n              );\n            }\n\n            // Breaking, as there couldn't be several indexes for the same feed ID\n            break;\n          }\n        }\n      }\n    }\n\n    // Return total data package byte size\n    return\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\n      dataPointsCount;\n  }\n\n  /**\n   * @dev This is a private helpful function, which aggregates values from different\n   * authorised signers for the given arrays of values for each data feed\n   *\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\n   * j-th value for the i-th data feed\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\n   * for each data feed\n   *\n   * @return An array of the aggregated values\n   */\n  function _getAggregatedValues(\n    uint256[][] memory valuesForDataFeeds,\n    uint256[] memory uniqueSignerCountForDataFeedIds\n  ) private view returns (uint256[] memory) {\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\n\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\n        revert InsufficientNumberOfUniqueSigners(\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\n          uniqueSignersThreshold);\n      }\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\n    }\n\n    return aggregatedValues;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"./RedstoneConsumerBase.sol\";\n\n/**\n * @title The base contract for Redstone consumers' contracts that allows to\n * securely calculate numeric redstone oracle values\n * @author The Redstone Oracles team\n * @dev This contract can extend other contracts to allow them\n * securely fetch Redstone oracle data from transactions calldata\n */\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\n  /**\n   * @dev This function can be used in a consumer contract to securely extract an\n   * oracle value for a given data feed id. Security is achieved by\n   * signatures verification, timestamp validation, and aggregating values\n   * from different authorised signers into a single numeric value. If any of the\n   * required conditions do not match, the function will revert.\n   * Note! This function expects that tx calldata contains redstone payload in the end\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\n   * @return Extracted and verified numeric oracle value for the given data feed id\n   */\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\n    internal\n    view\n    virtual\n    returns (uint256)\n  {\n    bytes32[] memory dataFeedIds = new bytes32[](1);\n    dataFeedIds[0] = dataFeedId;\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\n  }\n\n  /**\n   * @dev This function can be used in a consumer contract to securely extract several\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\n   * signatures verification, timestamp validation, and aggregating values\n   * from different authorised signers into a single numeric value. If any of the\n   * required conditions do not match, the function will revert.\n   * Note! This function expects that tx calldata contains redstone payload in the end\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\n   * @param dataFeedIds An array of unique data feed identifiers\n   * @return An array of the extracted and verified oracle values in the same order\n   * as they are requested in the dataFeedIds array\n   */\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\n    internal\n    view\n    virtual\n    returns (uint256[] memory)\n  {\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\n  }\n\n  /**\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\n   * only difference that it allows to request oracle data for an array of data feeds\n   * that may contain duplicates\n   * \n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\n   * @return An array of the extracted and verified oracle values in the same order\n   * as they are requested in the dataFeedIdsWithDuplicates array\n   */\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\n    // Building an array without duplicates\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\n    bool alreadyIncluded;\n    uint256 uniqueDataFeedIdsCount = 0;\n\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\n      alreadyIncluded = false;\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\n          alreadyIncluded = true;\n          break;\n        }\n      }\n\n      // Adding if not included\n      if (!alreadyIncluded) {\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\n        uniqueDataFeedIdsCount++;\n      }\n    }\n\n    // Overriding dataFeedIdsWithoutDuplicates.length\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\n    assembly {\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\n    }\n\n    // Requesting oracle values (without duplicates)\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\n\n    // Preparing result values array\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\n          break;\n        }\n      }\n    }\n\n    return valuesWithDuplicates;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"../libs/NumericArrayLib.sol\";\n\n/**\n * @title Default implementations of virtual redstone consumer base functions\n * @author The Redstone Oracles team\n */\nlibrary RedstoneDefaultsLib {\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\n\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\n\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\n    // Getting data timestamp from future seems quite unlikely\n    // But we've already spent too much time with different cases\n    // Where block.timestamp was less than dataPackage.timestamp.\n    // Some blockchains may case this problem as well.\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\n    // and allow data \"from future\" but with a small delay\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\n\n    if (block.timestamp < receivedTimestampSeconds) {\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\n      }\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\n    }\n  }\n\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\n    return NumericArrayLib.pickMedian(values);\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"../core/RedstoneConsumerNumericBase.sol\";\n\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\n    return 3;\n  }\n\n  function getAuthorisedSignerIndex(\n    address signerAddress\n  ) public view virtual override returns (uint8) {\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\n      return 0;\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\n      return 1;\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\n      return 2;\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\n      return 3;\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\n      return 4;\n    } else {\n      revert SignerNotAuthorised(signerAddress);\n    }\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary BitmapLib {\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\n    return bitmap | (1 << bitIndex);\n  }\n\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\n    return bitAtIndex > 0;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nlibrary NumericArrayLib {\n  // This function sort array in memory using bubble sort algorithm,\n  // which performs even better than quick sort for small arrays\n\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\n  uint256 constant UINT256_VALUE_BS = 32;\n\n  error CanNotPickMedianOfEmptyArray();\n\n  // This function modifies the array\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\n    if (arr.length == 0) {\n      revert CanNotPickMedianOfEmptyArray();\n    }\n    sort(arr);\n    uint256 middleIndex = arr.length / 2;\n    if (arr.length % 2 == 0) {\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\n      return sum / 2;\n    } else {\n      return arr[middleIndex];\n    }\n  }\n\n  function sort(uint256[] memory arr) internal pure {\n    assembly {\n      let arrLength := mload(arr)\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\n      for {\n        let arrIPtr := valuesPtr\n      } lt(arrIPtr, endPtr) {\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\n      } {\n        for {\n          let arrJPtr := valuesPtr\n        } lt(arrJPtr, arrIPtr) {\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\n        } {\n          let arrI := mload(arrIPtr)\n          let arrJ := mload(arrJPtr)\n          if lt(arrI, arrJ) {\n            mstore(arrIPtr, arrJ)\n            mstore(arrJPtr, arrI)\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SignatureLib {\n  uint256 constant ECDSA_SIG_R_BS = 32;\n  uint256 constant ECDSA_SIG_S_BS = 32;\n\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    assembly {\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\n      r := calldataload(signatureCalldataStartPos)\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\n      s := calldataload(signatureCalldataStartPos)\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\n    }\n    return ecrecover(signedHash, v, r, s);\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/mocks/AuthorisedMockSignersBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../core/RedstoneConstants.sol\";\n\nabstract contract AuthorisedMockSignersBase is RedstoneConstants {\n  function getAuthorisedMockSignerIndex(address signerAddress)\n    public\n    view\n    virtual\n    returns (uint8)\n  {\n    return getAllMockExceptLastOneAuthorised(signerAddress);\n  }\n\n  function getAllMockExceptLastOneAuthorised(address signerAddress)\n    public\n    view\n    virtual\n    returns (uint8)\n  {\n    if (signerAddress == 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199) {\n      revert SignerNotAuthorised(signerAddress);\n    } else {\n      return getAllMockAuthorised(signerAddress);\n    }\n  }\n\n  function getAllMockAuthorised(address signerAddress) public view virtual returns (uint8) {\n    // Looks like an array but consumes less gas\n    if (signerAddress == 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) {\n      return 0;\n    } else if (signerAddress == 0x70997970C51812dc3A010C7d01b50e0d17dc79C8) {\n      return 1;\n    } else if (signerAddress == 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC) {\n      return 2;\n    } else if (signerAddress == 0x90F79bf6EB2c4f870365E785982E1f101E93b906) {\n      return 3;\n    } else if (signerAddress == 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65) {\n      return 4;\n    } else if (signerAddress == 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc) {\n      return 5;\n    } else if (signerAddress == 0x976EA74026E726554dB657fA54763abd0C3a0aa9) {\n      return 6;\n    } else if (signerAddress == 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955) {\n      return 7;\n    } else if (signerAddress == 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f) {\n      return 8;\n    } else if (signerAddress == 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720) {\n      return 9;\n    } else if (signerAddress == 0xBcd4042DE499D14e55001CcbB24a551F3b954096) {\n      return 10;\n    } else if (signerAddress == 0x71bE63f3384f5fb98995898A86B02Fb2426c5788) {\n      return 11;\n    } else if (signerAddress == 0xFABB0ac9d68B0B445fB7357272Ff202C5651694a) {\n      return 12;\n    } else if (signerAddress == 0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec) {\n      return 13;\n    } else if (signerAddress == 0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097) {\n      return 14;\n    } else if (signerAddress == 0xcd3B766CCDd6AE721141F452C550Ca635964ce71) {\n      return 15;\n    } else if (signerAddress == 0x2546BcD3c84621e976D8185a91A922aE77ECEc30) {\n      return 16;\n    } else if (signerAddress == 0xbDA5747bFD65F08deb54cb465eB87D40e51B197E) {\n      return 17;\n    } else if (signerAddress == 0xdD2FD4581271e230360230F9337D5c0430Bf44C0) {\n      return 18;\n    } else if (signerAddress == 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199) {\n      return 19;\n    } else {\n      revert SignerNotAuthorised(signerAddress);\n    }\n  }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "contracts/aave_v3/flashloan/base/FlashLoanReceiverBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\nimport {IFlashLoanReceiver} from \"../interfaces/IFlashLoanReceiver.sol\";\nimport {IPoolAddressesProvider} from \"../../interfaces/IPoolAddressesProvider.sol\";\nimport {IPool} from \"../../interfaces/IPool.sol\";\n\n/**\n * @title FlashLoanReceiverBase\n * @author Aave\n * @notice Base contract to develop a flashloan-receiver contract.\n */\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\n    IPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\n    IPool public immutable override POOL;\n\n    constructor(IPoolAddressesProvider provider) {\n        ADDRESSES_PROVIDER = provider;\n        POOL = IPool(provider.getPool());\n    }\n}\n"
    },
    "contracts/aave_v3/flashloan/interfaces/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\nimport {IPoolAddressesProvider} from \"../../interfaces/IPoolAddressesProvider.sol\";\nimport {IPool} from \"../../interfaces/IPool.sol\";\n\n/**\n * @title IFlashLoanReceiver\n * @author Aave\n * @notice Defines the basic interface of a flashloan-receiver contract.\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n    /**\n     * @notice Executes an operation after receiving the flash-borrowed assets\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\n     *      enough funds to repay and has approved the Pool to pull the total amount\n     * @param assets The addresses of the flash-borrowed assets\n     * @param amounts The amounts of the flash-borrowed assets\n     * @param premiums The fee of each flash-borrowed asset\n     * @param initiator The address of the flashloan initiator\n     * @param params The byte-encoded params passed when initiating the flashloan\n     * @return True if the execution of the operation succeeds, false otherwise\n     */\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        returns (IPoolAddressesProvider);\n\n    function POOL() external view returns (IPool);\n}\n"
    },
    "contracts/aave_v3/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\nimport {IPoolAddressesProvider} from \"./IPoolAddressesProvider.sol\";\nimport {DataTypes} from \"../protocol/libraries/types/DataTypes.sol\";\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n **/\ninterface IPool {\n    /**\n     * @dev Emitted on mintUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n     * @param amount The amount of supplied assets\n     * @param referralCode The referral code used\n     **/\n    event MintUnbacked(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on backUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param backer The address paying for the backing\n     * @param amount The amount added as backing\n     * @param fee The amount paid in fees\n     **/\n    event BackUnbacked(\n        address indexed reserve,\n        address indexed backer,\n        uint256 amount,\n        uint256 fee\n    );\n\n    /**\n     * @dev Emitted on supply()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n     * @param amount The amount supplied\n     * @param referralCode The referral code used\n     **/\n    event Supply(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlying asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to The address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(\n        address indexed reserve,\n        address indexed user,\n        address indexed to,\n        uint256 amount\n    );\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n     * @param referralCode The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 borrowRate,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n     **/\n    event Repay(\n        address indexed reserve,\n        address indexed user,\n        address indexed repayer,\n        uint256 amount,\n        bool useATokens\n    );\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     **/\n    event SwapBorrowRateMode(\n        address indexed reserve,\n        address indexed user,\n        DataTypes.InterestRateMode interestRateMode\n    );\n\n    /**\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n     * @param asset The address of the underlying asset of the reserve\n     * @param totalDebt The total isolation mode debt for the reserve\n     */\n    event IsolationModeTotalDebtUpdated(\n        address indexed asset,\n        uint256 totalDebt\n    );\n\n    /**\n     * @dev Emitted when the user selects a certain asset category for eMode\n     * @param user The address of the user\n     * @param categoryId The category id\n     **/\n    event UserEModeSet(address indexed user, uint8 categoryId);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address initiator,\n        address indexed asset,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 premium,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted when a borrower is liquidated.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated.\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The next liquidity rate\n     * @param stableBorrowRate The next stable borrow rate\n     * @param variableBorrowRate The next variable borrow rate\n     * @param liquidityIndex The next liquidity index\n     * @param variableBorrowIndex The next variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n     * @param reserve The address of the reserve\n     * @param amountMinted The amount minted to the treasury\n     **/\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n    /**\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\n     * @param asset The address of the underlying asset to mint\n     * @param amount The amount to mint\n     * @param onBehalfOf The address that will receive the aTokens\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function mintUnbacked(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\n     * @param asset The address of the underlying asset to back\n     * @param amount The amount to back\n     * @param fee The amount paid in fees\n     **/\n    function backUnbacked(\n        address asset,\n        uint256 amount,\n        uint256 fee\n    ) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     **/\n    function supplyWithPermit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     * @return The final amount repaid\n     **/\n    function repayWithPermit(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external returns (uint256);\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n     * equivalent debt tokens\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n     * balance is not enough to cover the whole debt\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @return The final amount repaid\n     **/\n    function repayWithATokens(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n     * @param asset The address of the underlying asset borrowed\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     **/\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\n        external;\n\n    /**\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n     * @param asset The address of the underlying asset supplied\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\n        external;\n\n    /**\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts of the assets being flash-borrowed\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n     * @param asset The address of the asset being flash-borrowed\n     * @param amount The amount of the asset being flash-borrowed\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n     * @return currentLiquidationThreshold The liquidation threshold of the user\n     * @return ltv The loan to value of The user\n     * @return healthFactor The current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    /**\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n     * interest rate strategy\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\n     **/\n    function initReserve(\n        address asset,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Drop a reserve\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     **/\n    function dropReserve(address asset) external;\n\n    /**\n     * @notice Updates the address of the interest rate strategy contract\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param rateStrategyAddress The address of the interest rate strategy contract\n     **/\n    function setReserveInterestRateStrategyAddress(\n        address asset,\n        address rateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Sets the configuration bitmap of the reserve as a whole\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param configuration The new configuration bitmap\n     **/\n    function setConfiguration(\n        address asset,\n        DataTypes.ReserveConfigurationMap calldata configuration\n    ) external;\n\n    /**\n     * @notice Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset)\n        external\n        view\n        returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @notice Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user)\n        external\n        view\n        returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @notice Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     **/\n    function getReserveData(address asset)\n        external\n        view\n        returns (DataTypes.ReserveData memory);\n\n    /**\n     * @notice Validates and finalizes an aToken transfer\n     * @dev Only callable by the overlying aToken of the `asset`\n     * @param asset The address of the underlying asset of the aToken\n     * @param from The user from which the aTokens are transferred\n     * @param to The user receiving the aTokens\n     * @param amount The amount being transferred/withdrawn\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\n     */\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromBefore,\n        uint256 balanceToBefore\n    ) external;\n\n    /**\n     * @notice Returns the list of the underlying assets of all the initialized reserves\n     * @dev It does not include dropped reserves\n     * @return The addresses of the underlying assets of the initialized reserves\n     **/\n    function getReservesList() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\n     * @return The address of the reserve associated with id\n     **/\n    function getReserveAddressById(uint16 id) external view returns (address);\n\n    /**\n     * @notice Returns the PoolAddressesProvider connected to this contract\n     * @return The address of the PoolAddressesProvider\n     **/\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        returns (IPoolAddressesProvider);\n\n    /**\n     * @notice Updates the protocol fee on the bridging\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n     */\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n    /**\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n     * - A part is sent to aToken holders as extra, one time accumulated interest\n     * - A part is collected by the protocol treasury\n     * @dev The total premium is calculated on the total borrowed amount\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n     * @dev Only callable by the PoolConfigurator contract\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n     */\n    function updateFlashloanPremiums(\n        uint128 flashLoanPremiumTotal,\n        uint128 flashLoanPremiumToProtocol\n    ) external;\n\n    /**\n     * @notice Configures a new category for the eMode.\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n     * The category 0 is reserved as it's the default for volatile assets\n     * @param id The id of the category\n     * @param config The configuration of the category\n     */\n    function configureEModeCategory(\n        uint8 id,\n        DataTypes.EModeCategory memory config\n    ) external;\n\n    /**\n     * @notice Returns the data of an eMode category\n     * @param id The id of the category\n     * @return The configuration data of the category\n     */\n    function getEModeCategoryData(uint8 id)\n        external\n        view\n        returns (DataTypes.EModeCategory memory);\n\n    /**\n     * @notice Allows a user to use the protocol in eMode\n     * @param categoryId The id of the category\n     */\n    function setUserEMode(uint8 categoryId) external;\n\n    /**\n     * @notice Returns the eMode the user is using\n     * @param user The address of the user\n     * @return The eMode id\n     */\n    function getUserEMode(address user) external view returns (uint256);\n\n    /**\n     * @notice Resets the isolation mode total debt of the given asset to zero\n     * @dev It requires the given asset has zero debt ceiling\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n     */\n    function resetIsolationModeTotalDebt(address asset) external;\n\n    /**\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n     * @return The percentage of available liquidity to borrow, expressed in bps\n     */\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the total fee on flash loans\n     * @return The total fee on flashloans\n     */\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n    /**\n     * @notice Returns the part of the bridge fees sent to protocol\n     * @return The bridge fee sent to the protocol treasury\n     */\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n    /**\n     * @notice Returns the part of the flashloan fees sent to protocol\n     * @return The flashloan fee sent to the protocol treasury\n     */\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n    /**\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\n     * @return The maximum number of reserves supported\n     */\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n    /**\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n     * @param assets The list of reserves for which the minting needs to be executed\n     **/\n    function mintToTreasury(address[] calldata assets) external;\n\n    /**\n     * @notice Rescue and transfer tokens locked in this contract\n     * @param token The address of the token\n     * @param to The address of the recipient\n     * @param amount The amount of token to transfer\n     */\n    function rescueTokens(\n        address token,\n        address to,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @dev Deprecated: Use the `supply` function instead\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n}\n"
    },
    "contracts/aave_v3/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n **/\ninterface IPoolAddressesProvider {\n    /**\n     * @dev Emitted when the market identifier is updated.\n     * @param oldMarketId The old id of the market\n     * @param newMarketId The new id of the market\n     */\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n    /**\n     * @dev Emitted when the pool is updated.\n     * @param oldAddress The old address of the Pool\n     * @param newAddress The new address of the Pool\n     */\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool configurator is updated.\n     * @param oldAddress The old address of the PoolConfigurator\n     * @param newAddress The new address of the PoolConfigurator\n     */\n    event PoolConfiguratorUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the price oracle is updated.\n     * @param oldAddress The old address of the PriceOracle\n     * @param newAddress The new address of the PriceOracle\n     */\n    event PriceOracleUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the ACL manager is updated.\n     * @param oldAddress The old address of the ACLManager\n     * @param newAddress The new address of the ACLManager\n     */\n    event ACLManagerUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the ACL admin is updated.\n     * @param oldAddress The old address of the ACLAdmin\n     * @param newAddress The new address of the ACLAdmin\n     */\n    event ACLAdminUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the price oracle sentinel is updated.\n     * @param oldAddress The old address of the PriceOracleSentinel\n     * @param newAddress The new address of the PriceOracleSentinel\n     */\n    event PriceOracleSentinelUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the pool data provider is updated.\n     * @param oldAddress The old address of the PoolDataProvider\n     * @param newAddress The new address of the PoolDataProvider\n     */\n    event PoolDataProviderUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when a new proxy is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationAddress The address of the implementation contract\n     */\n    event ProxyCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed implementationAddress\n    );\n\n    /**\n     * @dev Emitted when a new non-proxied contract address is registered.\n     * @param id The identifier of the contract\n     * @param oldAddress The address of the old contract\n     * @param newAddress The address of the new contract\n     */\n    event AddressSet(\n        bytes32 indexed id,\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the implementation of the proxy registered with id is updated\n     * @param id The identifier of the contract\n     * @param proxyAddress The address of the proxy contract\n     * @param oldImplementationAddress The address of the old implementation contract\n     * @param newImplementationAddress The address of the new implementation contract\n     */\n    event AddressSetAsProxy(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address oldImplementationAddress,\n        address indexed newImplementationAddress\n    );\n\n    /**\n     * @notice Returns the id of the Aave market to which this contract points to.\n     * @return The market id\n     **/\n    function getMarketId() external view returns (string memory);\n\n    /**\n     * @notice Associates an id with a specific PoolAddressesProvider.\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n     * identify and validate multiple Aave markets.\n     * @param newMarketId The market id\n     */\n    function setMarketId(string calldata newMarketId) external;\n\n    /**\n     * @notice Returns an address by its identifier.\n     * @dev The returned address might be an EOA or a contract, potentially proxied\n     * @dev It returns ZERO if there is no registered address with the given id\n     * @param id The id\n     * @return The address of the registered for the specified id\n     */\n    function getAddress(bytes32 id) external view returns (address);\n\n    /**\n     * @notice General function to update the implementation of a proxy registered with\n     * certain `id`. If there is no proxy registered, it will instantiate one and\n     * set as implementation the `newImplementationAddress`.\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n     * setter function, in order to avoid unexpected consequences\n     * @param id The id\n     * @param newImplementationAddress The address of the new implementation\n     */\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\n        external;\n\n    /**\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n     * @param id The id\n     * @param newAddress The address to set\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     **/\n    function getPool() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the Pool, or creates a proxy\n     * setting the new `pool` implementation when the function is called for the first time.\n     * @param newPoolImpl The new Pool implementation\n     **/\n    function setPoolImpl(address newPoolImpl) external;\n\n    /**\n     * @notice Returns the address of the PoolConfigurator proxy.\n     * @return The PoolConfigurator proxy address\n     **/\n    function getPoolConfigurator() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n     **/\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n    /**\n     * @notice Returns the address of the price oracle.\n     * @return The address of the PriceOracle\n     */\n    function getPriceOracle() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle.\n     * @param newPriceOracle The address of the new PriceOracle\n     */\n    function setPriceOracle(address newPriceOracle) external;\n\n    /**\n     * @notice Returns the address of the ACL manager.\n     * @return The address of the ACLManager\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL manager.\n     * @param newAclManager The address of the new ACLManager\n     **/\n    function setACLManager(address newAclManager) external;\n\n    /**\n     * @notice Returns the address of the ACL admin.\n     * @return The address of the ACL admin\n     */\n    function getACLAdmin() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL admin.\n     * @param newAclAdmin The address of the new ACL admin\n     */\n    function setACLAdmin(address newAclAdmin) external;\n\n    /**\n     * @notice Returns the address of the price oracle sentinel.\n     * @return The address of the PriceOracleSentinel\n     */\n    function getPriceOracleSentinel() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle sentinel.\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n     **/\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n    /**\n     * @notice Returns the address of the data provider.\n     * @return The address of the DataProvider\n     */\n    function getPoolDataProvider() external view returns (address);\n\n    /**\n     * @notice Updates the address of the data provider.\n     * @param newDataProvider The address of the new DataProvider\n     **/\n    function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "contracts/aave_v3/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.4;\n\nlibrary DataTypes {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62-63: reserved\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        /**\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\n         * asset is borrowed by the user.\n         */\n        uint256 data;\n    }\n\n    struct EModeCategory {\n        // each eMode category has a custom ltv and liquidation threshold\n        uint16 ltv;\n        uint16 liquidationThreshold;\n        uint16 liquidationBonus;\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n        address priceSource;\n        string label;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n\n    struct ReserveCache {\n        uint256 currScaledVariableDebt;\n        uint256 nextScaledVariableDebt;\n        uint256 currPrincipalStableDebt;\n        uint256 currAvgStableBorrowRate;\n        uint256 currTotalStableDebt;\n        uint256 nextAvgStableBorrowRate;\n        uint256 nextTotalStableDebt;\n        uint256 currLiquidityIndex;\n        uint256 nextLiquidityIndex;\n        uint256 currVariableBorrowIndex;\n        uint256 nextVariableBorrowIndex;\n        uint256 currLiquidityRate;\n        uint256 currVariableBorrowRate;\n        uint256 reserveFactor;\n        ReserveConfigurationMap reserveConfiguration;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        uint40 reserveLastUpdateTimestamp;\n        uint40 stableDebtLastUpdateTimestamp;\n    }\n\n    struct ExecuteLiquidationCallParams {\n        uint256 reservesCount;\n        uint256 debtToCover;\n        address collateralAsset;\n        address debtAsset;\n        address user;\n        bool receiveAToken;\n        address priceOracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteSupplyParams {\n        address asset;\n        uint256 amount;\n        address onBehalfOf;\n        uint16 referralCode;\n    }\n\n    struct ExecuteBorrowParams {\n        address asset;\n        address user;\n        address onBehalfOf;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint16 referralCode;\n        bool releaseUnderlying;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteRepayParams {\n        address asset;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        address onBehalfOf;\n        bool useATokens;\n    }\n\n    struct ExecuteWithdrawParams {\n        address asset;\n        uint256 amount;\n        address to;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ExecuteSetUserEModeParams {\n        uint256 reservesCount;\n        address oracle;\n        uint8 categoryId;\n    }\n\n    struct FinalizeTransferParams {\n        address asset;\n        address from;\n        address to;\n        uint256 amount;\n        uint256 balanceFromBefore;\n        uint256 balanceToBefore;\n        uint256 reservesCount;\n        address oracle;\n        uint8 fromEModeCategory;\n    }\n\n    struct FlashloanParams {\n        address receiverAddress;\n        address[] assets;\n        uint256[] amounts;\n        uint256[] interestRateModes;\n        address onBehalfOf;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address addressesProvider;\n        uint8 userEModeCategory;\n        bool isAuthorizedFlashBorrower;\n    }\n\n    struct FlashloanSimpleParams {\n        address receiverAddress;\n        address asset;\n        uint256 amount;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n    }\n\n    struct FlashLoanRepaymentParams {\n        uint256 amount;\n        uint256 totalPremium;\n        uint256 flashLoanPremiumToProtocol;\n        address asset;\n        address receiverAddress;\n        uint16 referralCode;\n    }\n\n    struct CalculateUserAccountDataParams {\n        UserConfigurationMap userConfig;\n        uint256 reservesCount;\n        address user;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ValidateBorrowParams {\n        ReserveCache reserveCache;\n        UserConfigurationMap userConfig;\n        address asset;\n        address userAddress;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint256 maxStableLoanPercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n        bool isolationModeActive;\n        address isolationModeCollateralAddress;\n        uint256 isolationModeDebtCeiling;\n    }\n\n    struct ValidateLiquidationCallParams {\n        ReserveCache debtReserveCache;\n        uint256 totalDebt;\n        uint256 healthFactor;\n        address priceOracleSentinel;\n    }\n\n    struct CalculateInterestRatesParams {\n        uint256 unbacked;\n        uint256 liquidityAdded;\n        uint256 liquidityTaken;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 averageStableBorrowRate;\n        uint256 reserveFactor;\n        address reserve;\n        address aToken;\n    }\n\n    struct InitReserveParams {\n        address asset;\n        address aTokenAddress;\n        address stableDebtAddress;\n        address variableDebtAddress;\n        address interestRateStrategyAddress;\n        uint16 reservesCount;\n        uint16 maxNumberReserves;\n    }\n}\n"
    },
    "contracts/abstract/ECDSAVerify.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract ECDSAVerify {\n    using ECDSA for bytes32;\n\n    function verifyMessage(address signer, string memory message, bytes memory signature) public pure returns (bool) {\n        bytes32 messageHash = keccak256(bytes(message));\n        address signerAddress = messageHash.toEthSignedMessageHash().recover(signature);\n\n        return signerAddress == signer;\n    }\n}\n"
    },
    "contracts/abstract/NFTAccess.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nabstract contract NFTAccess is OwnableUpgradeable {\n    bytes32 internal constant ACCESS_NFT_SLOT = bytes32(uint256(keccak256('ACCESS_NFT_SLOT')) - 1);\n\n    function setAccessNFT(ERC721 nftAddress) external onlyOwner {\n        // Setting nftAddress to a address(0) removes the lock\n        if (address(nftAddress) != address(0)) {\n            require(AddressUpgradeable.isContract(address(nftAddress)), \"Cannot set nftAddress to a non-contract instance\");\n            (bool success, bytes memory result) = address(nftAddress).call(\n                abi.encodeWithSignature(\"balanceOf(address)\", msg.sender)\n            );\n            require(success && result.length > 0, \"Contract has to support the ERC721 balanceOf() interface\");\n        }\n\n        bytes32 slot = ACCESS_NFT_SLOT;\n        assembly {\n            sstore(slot, nftAddress)\n        }\n    }\n\n    function getAccessNFT() external view returns (ERC721 accessNFT) {\n        bytes32 slot = ACCESS_NFT_SLOT;\n        assembly {\n            accessNFT := sload(slot)\n        }\n    }\n\n    modifier hasAccessNFT {\n        bytes32 slot = ACCESS_NFT_SLOT;\n        ERC721 accessNFT;\n        assembly {\n            accessNFT := sload(slot)\n        }\n        if (address(accessNFT) != address(0)) {\n            require(accessNFT.balanceOf(msg.sender) > 0, \"Access NFT required\");\n        }\n        _;\n    }\n}\n"
    },
    "contracts/AddressProvider.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/// @title DeltaPrime Address Provider\ncontract AddressProvider is OwnableUpgradeable {\n    mapping(bytes32 => address) private addresses;\n\n    bytes32 public constant RECOVERY_CONTRACT = \"RECOVERY_CONTRACT\";\n\n    event RecoveryContractUpdated(address indexed rc);\n\n    function initialize() external initializer {\n        __Ownable_init();\n    }\n\n    /// @notice Set recovery contract address\n    /// @param rc New recovery contract address\n    function setRecoveryContract(address rc) external onlyOwner {\n        _setAddress(RECOVERY_CONTRACT, rc);\n\n        emit RecoveryContractUpdated(rc);\n    }\n\n    /// @notice Get recovery contract address\n    function getRecoveryContract() external view returns (address) {\n        return _getAddress(RECOVERY_CONTRACT);\n    }\n\n    /// @dev Set address\n    /// @param key Key used to store address\n    /// @param addr Address to set\n    function _setAddress(bytes32 key, address addr) internal {\n        addresses[key] = addr;\n    }\n\n    /// @dev Get address\n    /// @param key Key used to get address\n    function _getAddress(bytes32 key) internal view returns (address) {\n        return addresses[key];\n    }\n}\n"
    },
    "contracts/deployment/arbitrum/BtcBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract BtcBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/BtcDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract BtcDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/BtcPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: d511a90d3722e4a323de89435179465e006f8335;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title BtcPool\n * @dev Contract allowing user to deposit to and borrow BTC.b from a dedicated user account\n */\ncontract BtcPool is Pool {\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeBitcoin\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPBTCb\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 8;\n    }\n}"
    },
    "contracts/deployment/arbitrum/BtcPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"./BtcPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract BtcPoolFactory {\n    function deployPool() public {\n        BtcPool pool = new BtcPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/BtcVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"./WethVariableUtilisationRatesCalculator.sol\";\n/**\n * @title BtcVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract BtcVariableUtilisationRatesCalculator is WethVariableUtilisationRatesCalculator{\n}"
    },
    "contracts/deployment/arbitrum/DaiBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract DaiBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/DaiDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract DaiDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/DaiPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title DaiPool\n * @dev Contract allowing user to deposit to and borrow DAI from a dedicated user account\n */\ncontract DaiPool is Pool {\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeDAIToken\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPDAI\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/arbitrum/DaiPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"./DaiPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract DaiPoolFactory {\n    function deployPool() public {\n        DaiPool pool = new DaiPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/DaiVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title DaiVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract DaiVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4 = 7.800e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 6.9e18;\n\n    uint256 public constant MAX_RATE = 0.9e18;\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/EthBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract EthBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/EthDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract EthDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/EthPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: d511a90d3722e4a323de89435179465e006f8335;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title EthPool\n * @dev Contract allowing user to deposit to and borrow WETH.e from a dedicated user account\n */\ncontract EthPool is Pool {\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeWrappedEther\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPWETHe\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/arbitrum/EthPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"./EthPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract EthPoolFactory {\n    function deployPool() public {\n        EthPool pool = new EthPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/EthVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"./WethVariableUtilisationRatesCalculator.sol\";\n/**\n * @title EthVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract EthVariableUtilisationRatesCalculator is WethVariableUtilisationRatesCalculator {\n}"
    },
    "contracts/deployment/arbitrum/FraxBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract FraxBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/FraxDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract FraxDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/FraxPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title FraxPool\n * @dev Contract allowing user to deposit to and borrow FRAX from a dedicated user account\n */\ncontract FraxPool is Pool {\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeFraxToken\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPFRAX\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/arbitrum/FraxPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"./FraxPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract FraxPoolFactory {\n    function deployPool() public {\n        FraxPool pool = new FraxPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/FraxVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title FraxVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract FraxVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4 = 7.800e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 6.9e18;\n\n    uint256 public constant MAX_RATE = 0.9e18;\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/UsdcBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdcBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/UsdcDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdcDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/UsdcPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title UsdcPool\n * @dev Contract allowing user to deposit to and borrow USDC from a dedicated user account\n */\ncontract UsdcPool is Pool {\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeUSDCoin\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPUSDC\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 6;\n    }\n}"
    },
    "contracts/deployment/arbitrum/UsdcPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./UsdcPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract UsdcPoolFactory {\n    function deployPool() public {\n        UsdcPool pool = new UsdcPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/UsdcVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9331e1dc457b940b0afd98019e171a23dff020bd;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title UsdcVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract UsdcVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4 = 7.800e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 6.9e18;\n\n    uint256 public constant MAX_RATE = 0.9e18;\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/UsdtBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdtBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/UsdtDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdtDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/UsdtPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title UsdtPool\n * @dev Contract allowing user to deposit to and borrow USDT from a dedicated user account\n */\ncontract UsdtPool is Pool {\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeTetherToken\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPUSDt\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 6;\n    }\n}"
    },
    "contracts/deployment/arbitrum/UsdtPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"./UsdtPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract UsdtPoolFactory {\n    function deployPool() public {\n        UsdtPool pool = new UsdtPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/UsdtVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title UsdtVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract UsdtVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4 = 7.800e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 6.9e18;\n\n    uint256 public constant MAX_RATE = 0.9e18;\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/WethBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract WethBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/WethDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract WethDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/arbitrum/WethPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../../WrappedNativeTokenPool.sol\";\n\n\n/**\n * @title WethPool\n * @dev Contract allowing user to deposit to and borrow WETH from a dedicated user account\n */\ncontract WethPool is WrappedNativeTokenPool {\n    // Returns max. acceptable pool utilisation after borrow action\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeWrappedETH\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPWETH\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/arbitrum/WethPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./WethPool.sol\";\n\n\n/**\n * @title WethPoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract WethPoolFactory {\n    function deployPool() public {\n        WethPool pool = new WethPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/arbitrum/WethVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title WethVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract WethVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4= 29.8e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 26.7e18;\n\n    uint256 public constant MAX_RATE = 3.1e18;\n\n\n\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/BtcBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract BtcBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/BtcDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract BtcDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/BtcPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: d511a90d3722e4a323de89435179465e006f8335;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title BtcPool\n * @dev Contract allowing user to deposit to and borrow BTC.b from a dedicated user account\n */\ncontract BtcPool is Pool {\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeBitcoin\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPBTCb\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 8;\n    }\n}"
    },
    "contracts/deployment/avalanche/BtcPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"./BtcPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract BtcPoolFactory {\n    function deployPool() public {\n        BtcPool pool = new BtcPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/BtcVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"./WavaxVariableUtilisationRatesCalculator.sol\";\n/**\n * @title BtcVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract BtcVariableUtilisationRatesCalculator is WavaxVariableUtilisationRatesCalculator{\n}"
    },
    "contracts/deployment/avalanche/EthBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract EthBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/EthDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract EthDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/EthPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: d511a90d3722e4a323de89435179465e006f8335;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title EthPool\n * @dev Contract allowing user to deposit to and borrow WETH.e from a dedicated user account\n */\ncontract EthPool is Pool {\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeWrappedEther\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPWETHe\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/avalanche/EthPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"./EthPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract EthPoolFactory {\n    function deployPool() public {\n        EthPool pool = new EthPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/EthVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"./WavaxVariableUtilisationRatesCalculator.sol\";\n/**\n * @title EthVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract EthVariableUtilisationRatesCalculator is WavaxVariableUtilisationRatesCalculator {\n}"
    },
    "contracts/deployment/avalanche/UsdcBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdcBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/UsdcDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdcDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/UsdcPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: d511a90d3722e4a323de89435179465e006f8335;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title UsdcPool\n * @dev Contract allowing user to deposit to and borrow USDC from a dedicated user account\n */\ncontract UsdcPool is Pool {\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeUSDCoin\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPUSDC\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 6;\n    }\n}"
    },
    "contracts/deployment/avalanche/UsdcPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"./UsdcPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract UsdcPoolFactory {\n    function deployPool() public {\n        UsdcPool pool = new UsdcPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/UsdcVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title UsdcVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract UsdcVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4 = 7.800e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 6.9e18;\n\n    uint256 public constant MAX_RATE = 0.9e18;\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/UsdtBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdtBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/UsdtDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract UsdtDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/UsdtPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"../../Pool.sol\";\n\n\n/**\n * @title UsdtPool\n * @dev Contract allowing user to deposit to and borrow USDT from a dedicated user account\n */\ncontract UsdtPool is Pool {\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeTetherToken\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPUSDt\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 6;\n    }\n}"
    },
    "contracts/deployment/avalanche/UsdtPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"./UsdtPool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract UsdtPoolFactory {\n    function deployPool() public {\n        UsdtPool pool = new UsdtPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/UsdtVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title UsdtVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract UsdtVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4 = 7.800e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 6.9e18;\n\n    uint256 public constant MAX_RATE = 0.9e18;\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/WavaxBorrowIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract WavaxBorrowIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/WavaxDepositIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../../LinearIndex.sol\";\n\ncontract WavaxDepositIndex is LinearIndex {}"
    },
    "contracts/deployment/avalanche/WavaxPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../../WrappedNativeTokenPool.sol\";\n\n\n/**\n * @title WavaxPool\n * @dev Contract allowing user to deposit to and borrow WAVAX from a dedicated user account\n */\ncontract WavaxPool is WrappedNativeTokenPool {\n    // Returns max. acceptable pool utilisation after borrow action\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    function name() public virtual override pure returns(string memory _name){\n        _name = \"DeltaPrimeWrappedAVAX\";\n    }\n\n    function symbol() public virtual override pure returns(string memory _symbol){\n        _symbol = \"DPWAVAX\";\n    }\n\n    function decimals() public virtual override pure returns(uint8 decimals){\n        decimals = 18;\n    }\n}"
    },
    "contracts/deployment/avalanche/WavaxPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\npragma solidity 0.8.17;\n\nimport \"./WavaxPool.sol\";\n\n\n/**\n * @title WavaxPoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract WavaxPoolFactory {\n    function deployPool() public {\n        WavaxPool pool = new WavaxPool();\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\n    }\n\n    /**\n     * @dev emitted after pool is deployed by any user\n     * @param user the address initiating the deployment\n     * @param poolAddress of deployed pool\n     * @param timestamp of the deployment\n     **/\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\n}"
    },
    "contracts/deployment/avalanche/WavaxVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 83717555c511b82ae0d517b5f6fd5e09b7728852;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title WavaxVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract WavaxVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0.05e18;\n    uint256 public constant OFFSET_1 = 0;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.2e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.09e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 0.5e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 0.33e18;\n\n    // BREAKPOINT must be lower than 1e18\n\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\n\n    uint256 public constant SLOPE_4= 29.8e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_4 = 26.7e18;\n\n    uint256 public constant MAX_RATE = 3.1e18;\n\n\n\n\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\n    //profit generation\n    uint256 public spread = 1e12;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else if (poolUtilisation <= BREAKPOINT_3) {\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/DepositSwap.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./interfaces/facets/IYieldYakRouter.sol\";\nimport \"./Pool.sol\";\n\ncontract DepositSwap {\n    address public constant WAVAX_POOL_TUP = 0xD26E504fc642B96751fD55D3E68AF295806542f5;\n    address public constant USDC_POOL_TUP = 0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b;\n    address public constant USDT_POOL_TUP = 0xd222e10D7Fe6B7f9608F14A8B5Cf703c74eFBcA1;\n    address public constant ETH_POOL_TUP = 0xD7fEB276ba254cD9b34804A986CE9a8C3E359148;\n    address public constant BTC_POOL_TUP = 0x475589b0Ed87591A893Df42EC6076d2499bB63d0;\n\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address public constant WETH = 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB;\n    address public constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\n    address public constant USDT = 0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7;\n    address public constant BTC = 0x152b9d0FdC40C096757F570A51E494bd4b943E50;\n\n    function _isTokenSupported(address token) private pure returns (bool) {\n        if(\n            token == WAVAX ||\n            token == WETH ||\n            token == USDC ||\n            token == USDT ||\n            token == BTC\n        ){\n            return true;\n        }\n        return false;\n    }\n\n    function _tokenToPoolTUPMapping(address token) private pure returns (Pool){\n        if(token == WAVAX){\n            return Pool(WAVAX_POOL_TUP);\n        } else if (token == WETH){\n            return Pool(ETH_POOL_TUP);\n        } else if (token == USDC){\n            return Pool(USDC_POOL_TUP);\n        } else if (token == USDT){\n            return Pool(USDT_POOL_TUP);\n        } else if (token == BTC){\n            return Pool(BTC_POOL_TUP);\n        }\n        revert(\"Pool not supported\");\n    }\n\n    function _withdrawFromPool(Pool pool, IERC20 token, uint256 amount, address user) private {\n        uint256 userInitialFromTokenDepositBalance = pool.balanceOf(user);\n\n        require(userInitialFromTokenDepositBalance >= amount, \"Insufficient fromToken deposit balance\");\n        require(pool.balanceOf(address(this)) == 0, \"Contract initial deposit balance should be 0\");\n        require(token.balanceOf(address(this)) == 0, \"Contract initial fromToken balance must be 0\");\n\n        pool.transferFrom(user, address(this), amount);\n        require(pool.balanceOf(address(this)) == amount, \"amountFromToken and post-transfer contract balance mismatch\");\n        require(pool.balanceOf(user) == userInitialFromTokenDepositBalance - amount, \"user post-transfer balance is incorrect\");\n\n        pool.withdraw(amount);\n\n        require(pool.balanceOf(address(this)) == 0, \"Post-withdrawal contract deposit balance must be 0\");\n        require(token.balanceOf(address(this)) == amount, \"Post-withdrawal contract fromToken balance is incorrect\");\n    }\n\n    function _depositToPool(Pool pool, IERC20 token, uint256 amount, address user) private {\n        uint256 contractInitialToTokenBalance = token.balanceOf(address(this));\n        uint256 userInitialToTokenDepositBalance = pool.balanceOf(user);\n\n        require(contractInitialToTokenBalance >= amount, \"Insufficient contract toToken balance\");\n\n        token.approve(address(pool), amount);\n        pool.deposit(amount);\n\n        require(token.balanceOf(address(this)) == 0, \"Post-deposit contract toToken balance must be 0\");\n        require(pool.balanceOf(address(this)) == amount, \"Post-deposit contract deposit balance is incorrect\");\n\n        pool.transfer(user, amount);\n\n        require(token.balanceOf(address(this)) == 0, \"Post-transfer contract deposit balance must be 0\");\n        require(pool.balanceOf(user) == userInitialToTokenDepositBalance + amount, \"Post-transfer user deposit balance is incorrect\");\n    }\n\n    function _yakSwap(address[] calldata path, address[] calldata adapters, uint256 amountIn, uint256 amountOut) private {\n        IERC20(path[0]).approve(YY_ROUTER(), amountIn);\n\n        IYieldYakRouter router = IYieldYakRouter(YY_ROUTER());\n\n\n        IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\n            amountIn: amountIn,\n            amountOut: amountOut,\n            path: path,\n            adapters: adapters\n        });\n\n        router.swapNoSplit(trade, address(this), 0);\n    }\n\n\n    // Needs approval on the fromToken Pool\n    function depositSwap(uint256 amountFromToken, uint256 minAmountToToken, address[] calldata path, address[] calldata adapters) public {\n        address fromToken = path[0];\n        address toToken = path[path.length - 1];\n\n        require(_isTokenSupported(fromToken), \"fromToken not supported\");\n        require(_isTokenSupported(toToken), \"toToken not supported\");\n\n        Pool fromPool = _tokenToPoolTUPMapping(fromToken);\n        Pool toPool = _tokenToPoolTUPMapping(toToken);\n\n        address user = msg.sender;\n        amountFromToken = Math.min(fromPool.balanceOf(user), amountFromToken);\n\n        _withdrawFromPool(fromPool, IERC20(fromToken), amountFromToken, user);\n\n        _yakSwap(path, adapters, amountFromToken, minAmountToToken);\n\n        _depositToPool(toPool, IERC20(toToken), IERC20(toToken).balanceOf(address(this)), user);\n    }\n\n    function YY_ROUTER() internal virtual pure returns (address) {\n        return 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\n    }\n}\n"
    },
    "contracts/DepositSwapArbitrum.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./DepositSwap.sol\";\n\ncontract DepositSwapArbitrum is DepositSwap {\n    function YY_ROUTER() internal override pure returns (address) {\n        return 0xb32C79a25291265eF240Eb32E9faBbc6DcEE3cE3;\n    }\n}\n"
    },
    "contracts/DiamondHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\npragma solidity 0.8.17;\n\nimport \"./interfaces/IDiamondBeacon.sol\";\n\n//This path is updated during deployment\nimport \"./lib/local/DeploymentConstants.sol\";\n\n/**\n * DiamondHelper\n * Helper methods\n **/\ncontract DiamondHelper {\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\n    }\n}"
    },
    "contracts/facets/arbitrum/AssetsOperationsArbitrumFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 4da64a8a04844045e51b88c6202064e16ea118aa;\npragma solidity 0.8.17;\n\nimport \"../AssetsOperationsFacet.sol\";\n\ncontract AssetsOperationsArbitrumFacet is AssetsOperationsFacet {\n    function YY_ROUTER() internal override pure returns (address) {\n        return 0xb32C79a25291265eF240Eb32E9faBbc6DcEE3cE3;\n    }\n}\n"
    },
    "contracts/facets/arbitrum/ConvexFacetArbi.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\nimport \"../../interfaces/arbitrum/IConvexPool.sol\";\nimport \"../../interfaces/arbitrum/IConvexRewarder.sol\";\n\ncontract ConvexFacetArbi is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address;\n\n    // Curve\n    // TODO: Add to TokenManager\n    address public constant CRV_USD_BTC_ETH_LP_TOKEN_ADDRESS = 0x8e0B8c8BB9db49a46697F3a5Bb8A308e744821D2;\n    // TODO: Add to TokenManager\n    address public constant CRV_TOKEN_ADDRESS = 0x11cDb42B0EB46D95f990BeDD4695A6e3fA034978;\n\n    // Convex\n    // TODO: Add to TokenManager\n    address public constant CVX_TOKEN_ADDRESS = 0xb952A807345991BD529FDded05009F5e80Fe8F45;\n    // TODO: Add to TokenManager\n    address public constant CVX_USD_BTC_ETH_LP_TOKEN_ADDRESS = 0xA9249f8667cb120F065D9dA1dCb37AD28E1E8FF0;\n\n    address public constant DEPOSIT_CONTRACT_USD_BTC_ETH_ADDRESS = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31;\n    uint256 public constant USD_BTC_ETH_POOL_ID = 8;\n\n    function depositAndStakeUsdBtcEth(uint256 lpTokensAmount) external returns (uint256){\n        return _depositAndStake(IConvexPool.DepositDetails({\n            crvLpTokenAmount: lpTokensAmount,\n            depositPoolId: USD_BTC_ETH_POOL_ID,\n            depositPoolAddress: DEPOSIT_CONTRACT_USD_BTC_ETH_ADDRESS,\n            crvLpTokenAddress: CRV_USD_BTC_ETH_LP_TOKEN_ADDRESS,\n            crvLpTokenIdentifier: \"CRV_USD_BTC_ETH\",\n            cvxPoolLPTokenAddress: CVX_USD_BTC_ETH_LP_TOKEN_ADDRESS,\n            cvxPoolIdentifier: \"CVX_USD_BTC_ETH\"\n        }));\n\n    }\n\n    function withdrawAndClaimUsdBtcEth(uint256 receiptTokenAmount) external returns(uint256){\n        return _withdrawAndClaim(IConvexPool.WithdrawalDetails({\n            receiptTokenAmount: receiptTokenAmount,\n            crvLpTokenAddress: CRV_USD_BTC_ETH_LP_TOKEN_ADDRESS,\n            crvLpTokenIdentifier: \"CRV_USD_BTC_ETH\",\n            cvxPoolLPTokenAddress: CVX_USD_BTC_ETH_LP_TOKEN_ADDRESS,\n            cvxPoolIdentifier: \"CVX_USD_BTC_ETH\"\n        }));\n    }\n\n    function _depositAndStake(IConvexPool.DepositDetails memory depositDetails) internal onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent returns (uint256){\n        IERC20Metadata crvLpToken = IERC20Metadata(depositDetails.crvLpTokenAddress);\n        IERC20Metadata cvxLpToken = IERC20Metadata(depositDetails.cvxPoolLPTokenAddress);\n        IConvexPool cvxPool = IConvexPool(depositDetails.depositPoolAddress);\n\n        uint256 initialReceiptTokenBalance = cvxLpToken.balanceOf(address(this));\n\n        depositDetails.crvLpTokenAmount = Math.min(crvLpToken.balanceOf(address(this)), depositDetails.crvLpTokenAmount);\n        require(depositDetails.crvLpTokenAmount > 0, \"Cannot stake 0 tokens\");\n\n        address(crvLpToken).safeApprove(address(cvxPool), 0);\n        address(crvLpToken).safeApprove(address(cvxPool), depositDetails.crvLpTokenAmount);\n\n        cvxPool.deposit(depositDetails.depositPoolId, depositDetails.crvLpTokenAmount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(depositDetails.cvxPoolIdentifier, depositDetails.cvxPoolLPTokenAddress);\n        if(crvLpToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(depositDetails.crvLpTokenIdentifier);\n        }\n\n        uint256 receiptTokenReceivedAmount = cvxLpToken.balanceOf(address(this)) - initialReceiptTokenBalance;\n        emit Staked(\n            msg.sender,\n            depositDetails.crvLpTokenIdentifier,\n            depositDetails.depositPoolAddress,\n            depositDetails.crvLpTokenAmount,\n            receiptTokenReceivedAmount,\n            block.timestamp);\n\n        return receiptTokenReceivedAmount;\n    }\n\n    function _withdrawAndClaim(IConvexPool.WithdrawalDetails memory withdrawalDetails) internal onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent returns (uint256){\n        IERC20Metadata crvLpToken = IERC20Metadata(withdrawalDetails.crvLpTokenAddress);\n        IConvexRewarder cvxRewarder = IConvexRewarder(withdrawalDetails.cvxPoolLPTokenAddress);\n        IERC20Metadata crvToken = IERC20Metadata(CRV_TOKEN_ADDRESS);\n        IERC20Metadata cvxToken = IERC20Metadata(CVX_TOKEN_ADDRESS);\n\n        uint256 initialDepositTokenBalance = crvLpToken.balanceOf(address(this));\n        withdrawalDetails.receiptTokenAmount = Math.min(cvxRewarder.balanceOf(address(this)), withdrawalDetails.receiptTokenAmount);\n\n        // Always claim (true) rewards upon withdrawal\n        cvxRewarder.withdraw(withdrawalDetails.receiptTokenAmount, true);\n\n        // Curve LP token\n        DiamondStorageLib.addOwnedAsset(withdrawalDetails.crvLpTokenIdentifier, withdrawalDetails.crvLpTokenAddress);\n\n        // Add reward tokens if any were claimed\n        if(crvToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(\"CRV\", CRV_TOKEN_ADDRESS);\n        }\n        if(cvxToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(\"CVX\", CVX_TOKEN_ADDRESS);\n        }\n\n        // Convex LP token and rewarder are the same contract\n        if(cvxRewarder.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(withdrawalDetails.cvxPoolIdentifier);\n        }\n\n        uint256 depositTokenReceivedAmount = crvLpToken.balanceOf(address(this)) - initialDepositTokenBalance;\n\n        emit Unstaked(\n            msg.sender,\n            withdrawalDetails.crvLpTokenIdentifier,\n            withdrawalDetails.cvxPoolLPTokenAddress,\n            depositTokenReceivedAmount,\n            withdrawalDetails.receiptTokenAmount,\n            block.timestamp);\n\n\n        return depositTokenReceivedAmount;\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of the vault token\n        * @param depositTokenAmount how much of deposit token was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of the vault token\n        * @param depositTokenAmount how much deposit token was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n}\n"
    },
    "contracts/facets/arbitrum/YieldYakSwapArbitrumFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: e9e05b6e564514c1bcd1b5e49f5e45250e72bf98;\npragma solidity 0.8.17;\n\nimport \"../avalanche/YieldYakSwapFacet.sol\";\n\ncontract YieldYakSwapArbitrumFacet is YieldYakSwapFacet {\n    function YY_ROUTER() internal override pure returns (address) {\n        return 0xb32C79a25291265eF240Eb32E9faBbc6DcEE3cE3;\n    }\n}\n"
    },
    "contracts/facets/AssetsExposureController.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/ITokenManager.sol\";\nimport \"../interfaces/IStakingPositions.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract AssetsExposureController {\n\n    function resetPrimeAccountAssetsExposure() external {\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        for(uint i=0; i<ownedAssets.length; i++){\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\n        }\n        for(uint i=0; i<positions.length; i++){\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\n            }\n        }\n    }\n\n    function setPrimeAccountAssetsExposure() external {\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        for(uint i=0; i<ownedAssets.length; i++){\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\n        }\n        for(uint i=0; i<positions.length; i++){\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\n            }\n        }\n    }\n}\n"
    },
    "contracts/facets/AssetsOperationsFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 4da64a8a04844045e51b88c6202064e16ea118aa;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../interfaces/ITokenManager.sol\";\nimport \"../interfaces/facets/IYieldYakRouter.sol\";\n\n//this path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract AssetsOperationsFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    /**\n    * Funds the loan with a specified amount of a defined token\n    * @dev Requires approval for ERC20 token on frontend side\n    * @param _fundedAsset asset to be funded\n    * @param _amount to be funded\n    **/\n    function fund(bytes32 _fundedAsset, uint256 _amount) public virtual {\n        IERC20Metadata token = getERC20TokenInstance(_fundedAsset, false);\n        _amount = Math.min(_amount, token.balanceOf(msg.sender));\n\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\n        if (token.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_fundedAsset, address(token));\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.increaseProtocolExposure(_fundedAsset, _amount * 1e18 / 10 ** token.decimals());\n\n        emit Funded(msg.sender, _fundedAsset, _amount, block.timestamp);\n    }\n\n    /**\n    * Funds the loan with a specified amount of a GLP\n    * @dev Requires approval for stakedGLP token on frontend side\n    * @param _amount to be funded\n    **/\n    function fundGLP(uint256 _amount) public virtual {\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\n        _amount = Math.min(_amount, stakedGlpToken.balanceOf(msg.sender));\n        address(stakedGlpToken).safeTransferFrom(msg.sender, address(this), _amount);\n        if (stakedGlpToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(\"GLP\", address(stakedGlpToken));\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.increaseProtocolExposure(\"GLP\", _amount);\n\n        emit Funded(msg.sender, \"GLP\", _amount, block.timestamp);\n    }\n\n    /**\n    * Withdraws an amount of a defined asset from the loan\n    * This method could be used to cash out profits from investments\n    * The loan needs to remain solvent after the withdrawal\n    * @dev This function uses the redstone-evm-connector\n    * @param _withdrawnAsset asset to be withdrawn\n    * @param _amount to be withdrawn\n    **/\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\n        IERC20Metadata token = getERC20TokenInstance(_withdrawnAsset, true);\n        _amount = Math.min(_amount, token.balanceOf(address(this)));\n\n        address(token).safeTransfer(msg.sender, _amount);\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_withdrawnAsset);\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.decreaseProtocolExposure(_withdrawnAsset, _amount * 1e18 / 10 ** token.decimals());\n\n        emit Withdrawn(msg.sender, _withdrawnAsset, _amount, block.timestamp);\n    }\n\n    /**\n        * Withdraws specified amount of a GLP\n        * @param _amount to be withdrawn\n    **/\n    function withdrawGLP(uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\n        IERC20Metadata token = getERC20TokenInstance(\"GLP\", true);\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\n        _amount = Math.min(token.balanceOf(address(this)), _amount);\n\n        address(stakedGlpToken).safeTransfer(msg.sender, _amount);\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(\"GLP\");\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.decreaseProtocolExposure(\"GLP\", _amount * 1e18 / 10 ** token.decimals());\n\n        emit Withdrawn(msg.sender, \"GLP\", _amount, block.timestamp);\n    }\n\n    /**\n    * Borrows funds from the pool\n    * @dev This function uses the redstone-evm-connector\n    * @param _asset to be borrowed\n    * @param _amount of funds to borrow\n    **/\n    function borrow(bytes32 _asset, uint256 _amount) external onlyOwner remainsSolvent {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        ds._lastBorrowTimestamp = block.timestamp;\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        Pool pool = Pool(tokenManager.getPoolAddress(_asset));\n        pool.borrow(_amount);\n\n        IERC20Metadata token = getERC20TokenInstance(_asset, false);\n        if (token.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_asset, address(token));\n        }\n\n        emit Borrowed(msg.sender, _asset, _amount, block.timestamp);\n    }\n\n\n    /**\n     * Repays funds to the pool\n     * @dev This function uses the redstone-evm-connector\n     * @param _asset to be repaid\n     * @param _amount of funds to repay\n     **/\n    function repay(bytes32 _asset, uint256 _amount) public payable {\n        IERC20Metadata token = getERC20TokenInstance(_asset, true);\n\n        if (_isSolvent()) {\n            DiamondStorageLib.enforceIsContractOwner();\n        }\n\n        Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(_asset));\n\n        _amount = Math.min(_amount, pool.getBorrowed(address(this)));\n        require(token.balanceOf(address(this)) >= _amount, \"There is not enough funds to repay\");\n\n        address(token).safeApprove(address(pool), 0);\n        address(token).safeApprove(address(pool), _amount);\n\n        pool.repay(_amount);\n\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_asset);\n        }\n\n        emit Repaid(msg.sender, _asset, _amount, block.timestamp);\n    }\n\n    /**\n     * Swap existing debt to another debt\n    * @dev This function uses the redstone-evm-connector\n    * @dev _repayAmount and __borrowAmount can be used to control the slippage.\n     * @param _fromAsset existing debt asset\n     * @param _toAsset new debt asset\n     * @param _repayAmount debt repay amount\n     * @param _borrowAmount debt borrow amount\n     * @param _path yield yak swap path\n     * @param _adapters yield yak swap adapters\n     */\n    function swapDebt(bytes32 _fromAsset, bytes32 _toAsset, uint256 _repayAmount, uint256 _borrowAmount, address[] calldata _path, address[] calldata _adapters) external onlyOwner remainsSolvent nonReentrant {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        Pool fromAssetPool = Pool(tokenManager.getPoolAddress(_fromAsset));\n        _repayAmount = Math.min(_repayAmount, fromAssetPool.getBorrowed(address(this)));\n\n        IERC20Metadata toToken = getERC20TokenInstance(_toAsset, false);\n        IERC20Metadata fromToken = getERC20TokenInstance(_fromAsset, false);\n\n        Pool toAssetPool = Pool(tokenManager.getPoolAddress(_toAsset));\n        toAssetPool.borrow(_borrowAmount);\n\n        {\n            // swap toAsset to fromAsset\n            address(toToken).safeApprove(YY_ROUTER(), 0);\n            address(toToken).safeApprove(YY_ROUTER(), _borrowAmount);\n\n            IYieldYakRouter router = IYieldYakRouter(YY_ROUTER());\n\n            IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\n                amountIn: _borrowAmount,\n                amountOut: _repayAmount,\n                path: _path,\n                adapters: _adapters\n            });\n\n            router.swapNoSplit(trade, address(this), 0);\n        }\n        \n        address(fromToken).safeApprove(address(fromAssetPool), 0);\n        address(fromToken).safeApprove(address(fromAssetPool), _repayAmount);\n        fromAssetPool.repay(_repayAmount);\n\n        if (fromToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_fromAsset, address(fromToken));\n        } else {\n            DiamondStorageLib.removeOwnedAsset(_fromAsset);\n        }\n\n        emit DebtSwap(msg.sender, address(fromToken), address(toToken), _repayAmount, _borrowAmount, block.timestamp);\n    }\n\n    /* ======= VIEW FUNCTIONS ======*/\n\n    /**\n    * Returns a current balance of the asset held by the smart loan\n    * @param _asset the code of an asset\n    **/\n    function getBalance(bytes32 _asset) internal view returns (uint256) {\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\n        return token.balanceOf(address(this));\n    }\n\n    function YY_ROUTER() internal virtual pure returns (address) {\n        return 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after a debt swap\n     * @param user the address which performed the debt swap\n     * @param fromToken token that was repaid\n     * @param toToken token that was borrowed\n     * @param repayAmount the amount of fromToken that was repaid\n     * @param borrowAmount the amount of toToken that was borrowed\n     * @param timestamp time of debt swap\n     **/\n    event DebtSwap(address indexed user, address indexed fromToken, address indexed toToken, uint256 repayAmount, uint256 borrowAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after a loan is funded\n     * @param user the address which funded the loan\n     * @param asset funded by a user\n     * @param amount the amount of funds\n     * @param timestamp time of funding\n     **/\n    event Funded(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted after the funds are withdrawn from the loan\n     * @param user the address which withdraws funds from the loan\n     * @param asset withdrawn by a user\n     * @param amount of funds withdrawn\n     * @param timestamp of the withdrawal\n     **/\n    event Withdrawn(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are borrowed from the pool\n     * @param user the address of borrower\n     * @param asset borrowed by an= user\n     * @param amount of the borrowed funds\n     * @param timestamp time of the borrowing\n     **/\n    event Borrowed(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are repaid to the pool\n     * @param user the address initiating repayment\n     * @param asset asset repaid by a user\n     * @param amount of repaid funds\n     * @param timestamp of the repayment\n     **/\n    event Repaid(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n}"
    },
    "contracts/facets/avalanche/BeefyFinanceAvalancheFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/facets/avalanche/IBeefyFinance.sol\";\n\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\nimport \"../../interfaces/facets/avalanche/IBeefyFinance.sol\";\n\ncontract BeefyFinanceAvalancheFacet is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    // Vaults\n    address private constant MOO_PNG_AVAX_USDC_LP = 0xf3340EdF16563D52C7E7C576F2fCC8f3D52464aB;\n    address private constant MOO_PNG_AVAX_USDCe_LP = 0x9B02209a331c072637C6eBd34cdCD6b6A16987a9;\n    address private constant MOO_TJ_AVAX_USDC_LP = 0x7E5bC7088aB3Da3e7fa1Aa7ceF1dC73F5B00681c;\n\n    // LPs\n    address private constant PNG_AVAX_USDC_LP = 0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665;\n    address private constant PNG_AVAX_USDCe_LP = 0xbd918Ed441767fe7924e99F6a0E0B568ac1970D9;\n    address private constant TJ_AVAX_USDC_LP = 0xf4003F4efBE8691B60249E6afbD307aBE7758adb;\n\n    // ----- STAKE -----\n\n    /**\n      * Stakes PNG_AVAX_USDC_LP in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDC_LP to be staked\n    **/\n    function stakePngUsdcAvaxLpBeefy(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure remainsSolvent {\n        _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n            lpTokenAddress: PNG_AVAX_USDC_LP,\n            vaultAddress: MOO_PNG_AVAX_USDC_LP,\n            lpTokenSymbol: \"PNG_AVAX_USDC_LP\",\n            vaultTokenSymbol: \"MOO_PNG_AVAX_USDC_LP\",\n            amount: amount\n        }));\n    }\n\n    /**\n      * Stakes PNG_AVAX_USDCe_LP in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDCe_LP to be staked\n    **/\n    function stakePngUsdceAvaxLpBeefy(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure remainsSolvent {\n        _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: PNG_AVAX_USDCe_LP,\n        vaultAddress: MOO_PNG_AVAX_USDCe_LP,\n        lpTokenSymbol: \"PNG_AVAX_USDCe_LP\",\n        vaultTokenSymbol: \"MOO_PNG_AVAX_USDCe_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes TJ_AVAX_USDC_LP in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC_LP to be staked\n    **/\n    function stakeTjUsdcAvaxLpBeefy(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure remainsSolvent {\n        _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: TJ_AVAX_USDC_LP,\n        vaultAddress: MOO_TJ_AVAX_USDC_LP,\n        lpTokenSymbol: \"TJ_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"MOO_TJ_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    // ----- UNSTAKE -----\n\n    /**\n      * Unstakes PNG_AVAX_USDC_LP from the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDC_LP to be unstaked\n    **/\n    function unstakePngUsdcAvaxLpBeefy(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure remainsSolvent {\n        _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: PNG_AVAX_USDC_LP,\n        vaultAddress: MOO_PNG_AVAX_USDC_LP,\n        lpTokenSymbol: \"PNG_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"MOO_PNG_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes PNG_AVAX_USDCe_LP from the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDCe_LP to be unstaked\n    **/\n    function unstakePngUsdceAvaxLpBeefy(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure remainsSolvent {\n        _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: PNG_AVAX_USDCe_LP,\n        vaultAddress: MOO_PNG_AVAX_USDCe_LP,\n        lpTokenSymbol: \"PNG_AVAX_USDCe_LP\",\n        vaultTokenSymbol: \"MOO_PNG_AVAX_USDCe_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Untakes TJ_AVAX_USDC_LP from the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC_LP to be unstaked\n    **/\n    function unstakeTjUsdcAvaxLpBeefy(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure remainsSolvent {\n        _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: TJ_AVAX_USDC_LP,\n        vaultAddress: MOO_TJ_AVAX_USDC_LP,\n        lpTokenSymbol: \"TJ_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"MOO_TJ_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    // ----- PRIVATE METHODS -----\n\n\n    /**\n      * Stakes {stakingDetails.lpTokenAddress} LP token in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param stakingDetails IBeefyFinance.BeefyStakingDetails staking details\n    **/\n    function _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails memory stakingDetails) private {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        require(stakingDetails.amount > 0, \"Cannot stake 0 tokens\");\n        // _ACTIVE = 2\n        require(tokenManager.tokenToStatus(stakingDetails.lpTokenAddress) == 2, \"LP token not supported\");\n        require(tokenManager.tokenToStatus(stakingDetails.vaultAddress) == 2, \"Vault token not supported\");\n        require(IERC20(stakingDetails.lpTokenAddress).balanceOf(address(this)) >= stakingDetails.amount, \"Not enough LP token available\");\n\n        stakingDetails.lpTokenAddress.safeApprove(stakingDetails.vaultAddress, 0);\n        stakingDetails.lpTokenAddress.safeApprove(stakingDetails.vaultAddress, stakingDetails.amount);\n\n        IBeefyFinance vaultContract = IBeefyFinance(stakingDetails.vaultAddress);\n\n        vaultContract.deposit(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        if(vaultContract.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, stakingDetails.vaultAddress);\n        }\n        if(IERC20(stakingDetails.lpTokenAddress).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.lpTokenSymbol);\n        }\n\n        emit Staked(msg.sender, stakingDetails.lpTokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\n    }\n\n    /**\n              * Unstakes {stakingDetails.lpTokenAddress} LP token in the Beefy protocol\n              * @dev This function uses the redstone-evm-connector\n              * @param stakingDetails IBeefyFinance.BeefyStakingDetails staking details\n    **/\n    function _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails memory stakingDetails) private {\n        IBeefyFinance vaultContract = IBeefyFinance(stakingDetails.vaultAddress);\n        uint256 initialStakedBalance = vaultContract.balanceOf(address(this));\n\n        require(initialStakedBalance >= stakingDetails.amount, \"Cannot unstake more than was initially staked\");\n\n        vaultContract.withdraw(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        if(IERC20(stakingDetails.lpTokenAddress).balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(stakingDetails.lpTokenSymbol, stakingDetails.lpTokenAddress);\n        }\n        if(vaultContract.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.vaultTokenSymbol);\n        }\n\n        emit Unstaked(msg.sender, stakingDetails.lpTokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\n    }\n\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of the vault token\n        * @param amount of the asset that was staked\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of the vault token\n        * @param amount of the asset that was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n}"
    },
    "contracts/facets/avalanche/CurveFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 799a1765b64edc5c158198ef84f785af79e234ae;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\nimport \"../../interfaces/ICurvePool.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract CurveFacet is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address;\n\n    // Used to deposit/withdraw tokens\n    address private constant CURVE_POOL_ADDRESS = 0x58e57cA18B7A47112b877E31929798Cd3D703b0f;\n    // crvUSDBTCETH\n    bytes32 private constant CURVE_TOKEN_SYMBOL = \"crvUSDBTCETH\";\n\n    /**\n     * Stakes tokens in Curve atricrypto pool\n     * @param amounts amounts of tokens to be staked\n     **/\n    function stakeCurve(uint256[5] memory amounts) external nonReentrant onlyOwner recalculateAssetsExposure remainsSolvent {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        address curveTokenAddress = DeploymentConstants.getTokenManager().getAssetAddress(CURVE_TOKEN_SYMBOL, false);\n        IERC20 curveToken = IERC20(curveTokenAddress);\n        uint256 initialCurveBalance = curveToken.balanceOf(address(this));\n\n        bool allZero = true;\n        uint256 numStakeTokens;\n        for (uint256 i; i < 5; ++i ) {\n            IERC20 token = IERC20(tokenManager.getAssetAddress(getTokenSymbol(i), false));\n            amounts[i] = Math.min(token.balanceOf(address(this)), amounts[i]);\n            if (amounts[i] > 0) {\n                allZero = false;\n                address(token).safeApprove(CURVE_POOL_ADDRESS, 0);\n                address(token).safeApprove(CURVE_POOL_ADDRESS, amounts[i]);\n                ++numStakeTokens;\n            }\n        }\n        require(!allZero, \"Cannot stake 0 tokens\");\n\n        bytes32[] memory stakedAssets = new bytes32[](numStakeTokens);\n        uint256[] memory stakedAmounts = new uint256[](numStakeTokens);\n        uint256 idx;\n        for (uint256 i; i < 5; ++i ) {\n            if (amounts[i] > 0) {\n                stakedAssets[idx] = getTokenSymbol(i);\n                stakedAmounts[idx++] = amounts[i];\n            }\n        }\n\n        ICurvePool(CURVE_POOL_ADDRESS).add_liquidity(amounts, 0);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(CURVE_TOKEN_SYMBOL, curveTokenAddress);\n        for (uint256 i; i < 5; ++i ) {\n            IERC20 token = IERC20(tokenManager.getAssetAddress(getTokenSymbol(i), false));\n            if (amounts[i] > 0 && token.balanceOf(address(this)) == 0) {\n                DiamondStorageLib.removeOwnedAsset(getTokenSymbol(i));\n            }\n        }\n\n        emit Staked(\n            msg.sender,\n            stakedAssets,\n            curveTokenAddress,\n            stakedAmounts,\n            curveToken.balanceOf(address(this)) - initialCurveBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n     * Unstakes tokens from Curve atricrypto pool\n     * @param amount amount of token to be unstaked\n     **/\n    function unstakeCurve(uint256 amount, uint256[5] memory min_amounts) external nonReentrant onlyOwnerOrInsolvent recalculateAssetsExposure {\n        ICurvePool pool = ICurvePool(CURVE_POOL_ADDRESS);\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        address curveTokenAddress = tokenManager.getAssetAddress(CURVE_TOKEN_SYMBOL, true);\n        IERC20 curveToken = IERC20(curveTokenAddress);\n        uint256 curveTokenBalance = curveToken.balanceOf(address(this));\n        uint256[5] memory initialDepositTokenBalances;\n        for (uint256 i; i < 5; ++i) {\n            IERC20 depositToken = IERC20(tokenManager.getAssetAddress(getTokenSymbol(i), true));\n            initialDepositTokenBalances[i] = depositToken.balanceOf(address(this));\n        }\n        amount = Math.min(curveTokenBalance, amount);\n\n        curveTokenAddress.safeApprove(CURVE_POOL_ADDRESS, 0);\n        curveTokenAddress.safeApprove(CURVE_POOL_ADDRESS, amount);\n        pool.remove_liquidity(amount, min_amounts);\n\n        // Add/remove owned tokens\n        uint256[5] memory unstakedAmounts;\n        for (uint256 i; i < 5; ++i) {\n            IERC20 depositToken = IERC20(tokenManager.getAssetAddress(getTokenSymbol(i), true));\n            unstakedAmounts[i] = depositToken.balanceOf(address(this)) - initialDepositTokenBalances[i];\n            DiamondStorageLib.addOwnedAsset(getTokenSymbol(i), address(depositToken));\n        }\n        uint256 newCurveTokenBalance = curveToken.balanceOf(address(this));\n        if(newCurveTokenBalance == 0) {\n            DiamondStorageLib.removeOwnedAsset(CURVE_TOKEN_SYMBOL);\n        }\n\n        emit Unstaked(\n            msg.sender,\n            getTokenSymbols(),\n            curveTokenAddress,\n            unstakedAmounts,\n            curveTokenBalance - newCurveTokenBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n     * Unstakes one token from Curve atricrypto pool\n     * @param i index of token to be unstaked\n     * @param amount amount of token to be unstaked\n     **/\n    function unstakeOneTokenCurve(uint256 i, uint256 amount) external nonReentrant onlyOwnerOrInsolvent recalculateAssetsExposure {\n        require(i < 5, \"Invalid token index\");\n        ICurvePool pool = ICurvePool(CURVE_POOL_ADDRESS);\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        address curveTokenAddress = tokenManager.getAssetAddress(CURVE_TOKEN_SYMBOL, true);\n        IERC20 curveToken = IERC20(curveTokenAddress);\n        IERC20 depositToken = IERC20(tokenManager.getAssetAddress(getTokenSymbol(i), true));\n        uint256 initialDepositTokenBalance = depositToken.balanceOf(address(this));\n        uint256 curveTokenBalance = curveToken.balanceOf(address(this));\n        uint256 maxWithdrawAmount = pool.calc_withdraw_one_coin(curveTokenBalance, i);\n        amount = Math.min(maxWithdrawAmount, amount);\n\n        uint256 burnAmount = curveTokenBalance * amount / maxWithdrawAmount;\n        curveTokenAddress.safeApprove(CURVE_POOL_ADDRESS, 0);\n        curveTokenAddress.safeApprove(CURVE_POOL_ADDRESS, burnAmount);\n        pool.remove_liquidity_one_coin(burnAmount, i, 0);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(getTokenSymbol(i), address(depositToken));\n        uint256 newCurveTokenBalance = curveToken.balanceOf(address(this));\n        if(newCurveTokenBalance == 0) {\n            DiamondStorageLib.removeOwnedAsset(CURVE_TOKEN_SYMBOL);\n        }\n\n        emit UnstakedOneToken(\n            msg.sender,\n            getTokenSymbol(i),\n            curveTokenAddress,\n            depositToken.balanceOf(address(this)) - initialDepositTokenBalance,\n            curveTokenBalance - newCurveTokenBalance,\n            block.timestamp\n        );\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function getTokenSymbols() internal pure returns (bytes32[5] memory tokenSymbols) {\n        tokenSymbols = [\n            bytes32(\"DAIe\"),\n            bytes32(\"USDCe\"),\n            bytes32(\"USDT.e\"),\n            bytes32(\"WBTCe\"),\n            bytes32(\"ETH\")\n        ];\n    }\n\n    function getTokenSymbol(uint256 i) internal pure returns (bytes32) {\n        return getTokenSymbols()[i];\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes assets\n        * @param user the address executing staking\n        * @param assets the assets that were staked\n        * @param vault address of the vault token\n        * @param depositTokenAmounts how much of deposit tokens was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32[] assets, address indexed vault, uint256[] depositTokenAmounts, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes assets\n        * @param user the address executing staking\n        * @param assets the assets that were unstaked\n        * @param vault address of the vault token\n        * @param depositTokenAmounts how much of deposit tokens was received\n        * @param receiptTokenAmount how much of receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32[5] assets, address indexed vault, uint256[5] depositTokenAmounts, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param vault address of the vault token\n        * @param asset the asset that was unstaked\n        * @param depositTokenAmount how much deposit token was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event UnstakedOneToken(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/GLPFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 799a1765b64edc5c158198ef84f785af79e234ae;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../../interfaces/facets/avalanche/IGLPRewarder.sol\";\nimport \"../../interfaces/facets/avalanche/IRewardRouterV2.sol\";\nimport \"../../interfaces/facets/avalanche/IRewardTracker.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract GLPFacet is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address;\n\n    // Used to claim GLP fees\n    address private constant REWARD_ROUTER_ADDRESS = 0x82147C5A7E850eA4E28155DF107F2590fD4ba327;\n    // Used to mint/redeem GLP\n    address private constant GLP_REWARD_ROUTER_ADDRESS = 0xB70B91CE0771d3f4c81D87660f71Da31d48eB3B3;\n    // Used to approve tokens to mint GLP with\n    address private constant GLP_MANAGER_ADDRESS = 0xD152c7F25db7F4B95b7658323c5F33d176818EE4;\n    // fsGLP\n    address private constant GLP_TOKEN_ADDRESS = 0x9e295B5B976a184B14aD8cd72413aD846C299660;\n\n    function claimGLpFees() external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent {\n        IRewardRouterV2 rewardRouter = IRewardRouterV2(REWARD_ROUTER_ADDRESS);\n        IRewardTracker rewardTracker = IRewardTracker(rewardRouter.feeGlpTracker());\n\n        require(rewardTracker.claimable(address(this)) > 0, \"There are no claimable fees\");\n\n        IERC20Metadata wavaxToken = getERC20TokenInstance(\"AVAX\", false);\n        uint256 initialWavaxBalance = wavaxToken.balanceOf(address(this));\n\n        rewardRouter.claimFees();\n\n        uint256 postClaimingWavaxBalance = wavaxToken.balanceOf(address(this));\n\n        // Add asset to ownedAssets\n        if ((initialWavaxBalance == 0) && (postClaimingWavaxBalance > 0)) {\n            DiamondStorageLib.addOwnedAsset(\"AVAX\", address(wavaxToken));\n        }\n\n        emit GLPFeesClaim(msg.sender, postClaimingWavaxBalance-initialWavaxBalance, block.timestamp);\n    }\n\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent{\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        require(tokenManager.isTokenAssetActive(GLP_TOKEN_ADDRESS), \"GLP not supported.\");\n        require(tokenManager.isTokenAssetActive(_token), \"Asset not supported.\");\n\n        require(_amount > 0, \"Amount of GLP to mint  has to be greater than 0\");\n\n        IERC20Metadata tokenToMintWith = IERC20Metadata(_token);\n        bytes32 tokenToMintWithSymbol = tokenManager.tokenAddressToSymbol(_token);\n        IGLPRewarder glpRewarder = IGLPRewarder(GLP_REWARD_ROUTER_ADDRESS);\n        IERC20Metadata glpToken = IERC20Metadata(GLP_TOKEN_ADDRESS);\n\n        uint256 glpInitialBalance = glpToken.balanceOf(address(this));\n\n        _amount = Math.min(tokenToMintWith.balanceOf(address(this)), _amount);\n\n        _token.safeApprove(GLP_MANAGER_ADDRESS, 0);\n        _token.safeApprove(GLP_MANAGER_ADDRESS, _amount);\n\n        uint256 glpOutputAmount = glpRewarder.mintAndStakeGlp(_token, _amount, _minUsdg, _minGlp);\n\n        require((glpToken.balanceOf(address(this)) - glpInitialBalance) == glpOutputAmount, \"GLP minted and balance difference mismatch\");\n        require(glpOutputAmount >=_minGlp, \"Insufficient output amount\");\n\n        // Add asset to ownedAssets\n        if (glpToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(\"GLP\", GLP_TOKEN_ADDRESS);\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the mint\n        if (tokenToMintWith.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(tokenToMintWithSymbol);\n        }\n\n        emit GLPMint(\n            msg.sender,\n            tokenToMintWithSymbol,\n            _amount,\n            glpOutputAmount,\n            block.timestamp\n        );\n\n    }\n\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut) external nonReentrant onlyOwnerOrInsolvent noBorrowInTheSameBlock recalculateAssetsExposure    {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        require(tokenManager.isTokenAssetActive(_tokenOut), \"Asset not supported.\");\n\n        require(_glpAmount > 0, \"Amount of GLP to redeem has to be greater than 0\");\n\n        IERC20Metadata redeemedToken = IERC20Metadata(_tokenOut);\n        bytes32 redeemedTokenSymbol = tokenManager.tokenAddressToSymbol(_tokenOut);\n        IGLPRewarder glpRewarder = IGLPRewarder(GLP_REWARD_ROUTER_ADDRESS);\n        IERC20Metadata glpToken = IERC20Metadata(GLP_TOKEN_ADDRESS);\n\n        uint256 redeemedTokenInitialBalance = redeemedToken.balanceOf(address(this));\n        _glpAmount = Math.min(glpToken.balanceOf(address(this)), _glpAmount);\n\n        uint256 redeemedAmount = glpRewarder.unstakeAndRedeemGlp(_tokenOut, _glpAmount, _minOut, address(this));\n\n        require((redeemedToken.balanceOf(address(this)) - redeemedTokenInitialBalance) == redeemedAmount, \"Redeemed token amount and balance difference mismatch\");\n        require(redeemedAmount >= _minOut, \"Insufficient output amount\");\n\n        // Add asset to ownedAssets\n        if (redeemedToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(redeemedTokenSymbol, _tokenOut);\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the redemption\n        if (glpToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(\"GLP\");\n        }\n\n        emit GLPRedemption(\n            msg.sender,\n            redeemedTokenSymbol,\n            _glpAmount,\n            redeemedAmount,\n            block.timestamp\n        );\n\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after a GLP token mint\n     * @param user the address of user minting GLP\n     * @param tokenToMintWith token which GLP was minted with\n     * @param tokenToMintWithAmount amount of token used to mint GLP\n     * @param glpOutputAmount amount of GLP minted\n     * @param timestamp time of the mint\n     **/\n    event GLPMint(address indexed user, bytes32 indexed tokenToMintWith, uint256 tokenToMintWithAmount, uint256 glpOutputAmount, uint256 timestamp);\n\n    /**\n  * @dev emitted after a GLP token redemption\n  * @param user the address of user redeeming GLP\n  * @param redeemedToken token which GLP was redeemed into\n  * @param glpRedeemedAmount amount of GLP redeemed\n  * @param redeemedTokenAmount amount of redeemedToken redeemed\n  * @param timestamp time of the redemption\n  **/\n    event GLPRedemption(address indexed user, bytes32 indexed redeemedToken, uint256 glpRedeemedAmount, uint256 redeemedTokenAmount, uint256 timestamp);\n\n    /**\n    * @dev emitted after claiming GLP fees\n    * @param user the address of user claiming fees\n    * @param wavaxAmountClaimed amount of wavax fees that were claimed\n    * @param timestamp time of claiming the fees\n    **/\n    event GLPFeesClaim(address indexed user, uint256 wavaxAmountClaimed, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/GMDFacet.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/facets/avalanche/IGMDFacet.sol\";\nimport \"../../interfaces/facets/IGMDVault.sol\";\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract GMDFacet is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent{\n    using TransferHelper for address;\n\n    // CONSTANTS\n\n    address private constant GMDVaultAddress = 0x5517c5F22177BcF7b320A2A5daF2334344eFb38C;\n\n    // PUBLIC FUNCTIONS\n\n    function gmdStakeUSDC(uint256 amountStaked, uint256 minSharesOut) public {\n        IGMDFacet.StakingDetails memory position = IGMDFacet.StakingDetails({\n            asset : 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E,\n            receiptToken: 0x33f0a866d9024d44de2E0602f4C9B94755944B6F,\n            symbol : \"USDC\",\n            identifier : \"gmdUSDC\",\n            amountStaked: amountStaked,\n            minSharesOut: minSharesOut,\n            pid: 0\n        });\n        gmdStakeToken(position);\n    }\n\n    function gmdStakeAVAX(uint256 amountStaked, uint256 minSharesOut) public {\n        IGMDFacet.StakingDetails memory position = IGMDFacet.StakingDetails({\n            asset : 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            receiptToken: 0x13AF25f924056d4D4668705C33aB9b70D505050e,\n            symbol : \"AVAX\",\n            identifier : \"gmdWAVAX\",\n            amountStaked: amountStaked,\n            minSharesOut: minSharesOut,\n            pid: 1\n        });\n        gmdStakeToken(position);\n    }\n\n    function gmdStakeBTCb(uint256 amountStaked, uint256 minSharesOut) public {\n        IGMDFacet.StakingDetails memory position = IGMDFacet.StakingDetails({\n            asset : 0x152b9d0FdC40C096757F570A51E494bd4b943E50,\n            receiptToken: 0x8fe3024351B9a51a3439183e940c2aF3994DD52F,\n            symbol : \"BTC\",\n            identifier : \"gmdBTCb\",\n            amountStaked: amountStaked,\n            minSharesOut: minSharesOut,\n            pid: 2\n        });\n        gmdStakeToken(position);\n    }\n\n    function gmdStakeWETHe(uint256 amountStaked, uint256 minSharesOut) public {\n        IGMDFacet.StakingDetails memory position = IGMDFacet.StakingDetails({\n            asset : 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB,\n            receiptToken: 0xE28c95e9EB0f6D16b05D265cAa4BcEE9E5C2e625,\n            symbol : \"ETH\",\n            identifier : \"gmdWETHe\",\n            amountStaked: amountStaked,\n            minSharesOut: minSharesOut,\n            pid: 3\n        });\n        gmdStakeToken(position);\n    }\n\n    // PUBLIC FUNCTIONS\n\n    function gmdUnstakeUSDC(uint256 amountUnstaked, uint256 minTokenOut) public {\n        IGMDFacet.UnstakingDetails memory position = IGMDFacet.UnstakingDetails({\n            asset : 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E,\n            receiptToken: 0x33f0a866d9024d44de2E0602f4C9B94755944B6F,\n            symbol : \"USDC\",\n            identifier : \"gmdUSDC\",\n            amountUnstaked: amountUnstaked,\n            minTokenOut: minTokenOut,\n            pid: 0\n        });\n        gmdUnstakeToken(position);\n    }\n\n    function gmdUnstakeAVAX(uint256 amountUnstaked, uint256 minTokenOut) public {\n        IGMDFacet.UnstakingDetails memory position = IGMDFacet.UnstakingDetails({\n            asset : 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            receiptToken: 0x13AF25f924056d4D4668705C33aB9b70D505050e,\n            symbol : \"AVAX\",\n            identifier : \"gmdWAVAX\",\n            amountUnstaked: amountUnstaked,\n            minTokenOut: minTokenOut,\n            pid: 1\n            });\n        gmdUnstakeToken(position);\n    }\n\n    function gmdUnstakeBTCb(uint256 amountUnstaked, uint256 minTokenOut) public {\n        IGMDFacet.UnstakingDetails memory position = IGMDFacet.UnstakingDetails({\n            asset : 0x152b9d0FdC40C096757F570A51E494bd4b943E50,\n            receiptToken: 0x8fe3024351B9a51a3439183e940c2aF3994DD52F,\n            symbol : \"BTC\",\n            identifier : \"gmdBTCb\",\n            amountUnstaked: amountUnstaked,\n            minTokenOut: minTokenOut,\n            pid: 2\n        });\n        gmdUnstakeToken(position);\n    }\n\n    function gmdUnstakeWETHe(uint256 amountUnstaked, uint256 minTokenOut) public {\n        IGMDFacet.UnstakingDetails memory position = IGMDFacet.UnstakingDetails({\n        asset : 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB,\n        receiptToken: 0xE28c95e9EB0f6D16b05D265cAa4BcEE9E5C2e625,\n        symbol : \"ETH\",\n        identifier : \"gmdWETHe\",\n        amountUnstaked: amountUnstaked,\n        minTokenOut: minTokenOut,\n        pid: 3\n        });\n        gmdUnstakeToken(position);\n    }\n\n    // INTERNAL FUNCTIONS\n    /**\n    * Stakes token in GMD\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function gmdStakeToken(IGMDFacet.StakingDetails memory position) internal\n    onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent {\n        IGMDVault vault = IGMDVault(GMDVaultAddress);\n        IERC20Metadata stakedToken = getERC20TokenInstance(position.symbol, false);\n        IERC20Metadata receiptToken = IERC20Metadata(position.receiptToken);\n        uint256 initialReceiptTokenBalance = receiptToken.balanceOf(address(this));\n\n        uint256 amountStaked = Math.min(stakedToken.balanceOf(address(this)), position.amountStaked);\n        require(amountStaked > 0, \"Cannot stake 0 tokens\");\n\n        address(stakedToken).safeApprove(GMDVaultAddress, 0);\n        address(stakedToken).safeApprove(GMDVaultAddress, amountStaked);\n\n        vault.enter(amountStaked, position.pid);\n\n        uint256 sharesReceived = receiptToken.balanceOf(address(this)) - initialReceiptTokenBalance;\n        require(sharesReceived >= position.minSharesOut, \"Insufficient shares output\");\n\n        DiamondStorageLib.addOwnedAsset(position.identifier, position.receiptToken);\n        if (stakedToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(position.symbol);\n        }\n\n        emit Staked(\n            msg.sender,\n            position.symbol,\n            address(position.receiptToken),\n            amountStaked,\n            sharesReceived,\n            block.timestamp\n        );\n    }\n\n    /**\n    * Unstakes token from GMD\n    * IMPORTANT: This method can be used by anyone when a loan is insolvent. This operation can be gas-costly, that is why\n    * it may be necessary to perform it in a separate transaction to liquidation\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function gmdUnstakeToken(IGMDFacet.UnstakingDetails memory position) internal\n    onlyOwnerOrInsolvent recalculateAssetsExposure nonReentrant {\n        IGMDVault vault = IGMDVault(GMDVaultAddress);\n        IERC20Metadata unstakedToken = getERC20TokenInstance(position.symbol, false);\n        IERC20Metadata receiptToken = IERC20Metadata(position.receiptToken);\n\n        uint256 amountUnstaked = Math.min(receiptToken.balanceOf(address(this)), position.amountUnstaked);\n        require(amountUnstaked > 0, \"Cannot unstake 0 tokens\");\n\n        uint256 initialUnstakedTokenBalance = unstakedToken.balanceOf(address(this));\n\n        vault.leave(amountUnstaked, position.pid);\n\n        uint256 receivedUnstakedToken = unstakedToken.balanceOf(address(this)) - initialUnstakedTokenBalance;\n        require(receivedUnstakedToken >= position.minTokenOut, \"Insufficient staked token output\");\n\n        if (receiptToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(position.identifier);\n        }\n        DiamondStorageLib.addOwnedAsset(position.symbol, address(unstakedToken));\n\n        emit Unstaked(\n            msg.sender,\n            position.symbol,\n            address(position.receiptToken),\n            receivedUnstakedToken,\n            amountUnstaked,\n            block.timestamp\n        );\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much of deposit token was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much deposit token was unstaked\n        * @param receiptTokenAmount how much receipt token was redeemed\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/PangolinDEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 71813826f564de63a2462d95b5c15944fcdf686e;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2DEXFacet.sol\";\n\ncontract PangolinDEXFacet is UniswapV2DEXFacet {\n    function getProtocolID() pure internal override returns (bytes32) {\n        return \"PNG\";\n    }\n\n    /**\n      * Swaps one asset to another\n      * @dev This function uses the redstone-evm-connector\n      * @param _soldAsset asset to be sold\n      * @param _boughtAsset asset to be bought\n      * @param _exactSold exact amount of asset to be sold\n      * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapPangolin(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public noBorrowInTheSameBlock onlyOwner returns (uint256[] memory) {\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\n    }\n\n    function addLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\n    }\n\n    //onlOwnerOrInsolvent inside UniswapDexFacet\n    function removeLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public {\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public override returns (address) {\n        return 0x19cEcCd6942ad38562Ee10bAfd44776ceB67e923;\n    }\n}"
    },
    "contracts/facets/avalanche/ParaSwapFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: e9e05b6e564514c1bcd1b5e49f5e45250e72bf98;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/facets/avalanche/IParaSwapRouter.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract ParaSwapFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address;\n\n    address private constant PARA_TRANSFER_PROXY = 0x216B4B4Ba9F3e719726886d34a177484278Bfcae;\n    address private constant PARA_ROUTER = 0xDEF171Fe48CF0115B1d80b88dc8eAB59176FEe57;\n\n    struct SwapTokensDetails {\n        bytes32 tokenSoldSymbol;\n        bytes32 tokenBoughtSymbol;\n        IERC20Metadata soldToken;\n        IERC20Metadata boughtToken;\n        uint256 initialSoldTokenBalance;\n        uint256 initialBoughtTokenBalance;\n    }\n\n    function getInitialTokensDetails(address _soldTokenAddress, address _boughtTokenAddress) internal view returns (SwapTokensDetails memory){\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        if (_boughtTokenAddress == 0xaE64d55a6f09E4263421737397D1fdFA71896a69) {\n            _boughtTokenAddress = 0x9e295B5B976a184B14aD8cd72413aD846C299660;\n        }\n\n        if (_soldTokenAddress == 0xaE64d55a6f09E4263421737397D1fdFA71896a69) {\n            _soldTokenAddress = 0x9e295B5B976a184B14aD8cd72413aD846C299660;\n        }\n\n        bytes32 _tokenSoldSymbol = tokenManager.tokenAddressToSymbol(_soldTokenAddress);\n        bytes32 _tokenBoughtSymbol = tokenManager.tokenAddressToSymbol(_boughtTokenAddress);\n\n        require(tokenManager.isTokenAssetActive(_boughtTokenAddress), \"Asset not supported.\");\n\n        IERC20Metadata _soldToken = IERC20Metadata(_soldTokenAddress);\n        IERC20Metadata _boughtToken = IERC20Metadata(_boughtTokenAddress);\n\n        return SwapTokensDetails({\n            tokenSoldSymbol: _tokenSoldSymbol,\n            tokenBoughtSymbol: _tokenBoughtSymbol,\n            soldToken: _soldToken,\n            boughtToken: _boughtToken,\n            initialSoldTokenBalance: _soldToken.balanceOf(address(this)),\n            initialBoughtTokenBalance: _boughtToken.balanceOf(address(this))\n        });\n    }\n\n    function paraSwap(IParaSwapRouter.SimpleData memory data) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent{\n        SwapTokensDetails memory swapTokensDetails = getInitialTokensDetails(data.fromToken, data.toToken);\n\n        uint256 amount = Math.min(swapTokensDetails.soldToken.balanceOf(address(this)), data.fromAmount);\n        require(amount > 0, \"Amount of tokens to sell has to be greater than 0\");\n\n        address(swapTokensDetails.soldToken).safeApprove(PARA_TRANSFER_PROXY, 0);\n        address(swapTokensDetails.soldToken).safeApprove(PARA_TRANSFER_PROXY, amount);\n\n        IParaSwapRouter router = IParaSwapRouter(PARA_ROUTER);\n\n        router.simpleSwap(data);\n\n        // Add asset to ownedAssets\n        if (swapTokensDetails.boughtToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(swapTokensDetails.tokenBoughtSymbol, address(swapTokensDetails.boughtToken));\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\n        if (swapTokensDetails.soldToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(swapTokensDetails.tokenSoldSymbol);\n        }\n\n        uint256 boughtTokenFinalAmount = swapTokensDetails.boughtToken.balanceOf(address(this)) - swapTokensDetails.initialBoughtTokenBalance;\n\n        emit Swap(\n            msg.sender,\n            swapTokensDetails.tokenSoldSymbol,\n            swapTokensDetails.tokenBoughtSymbol,\n            swapTokensDetails.initialSoldTokenBalance - swapTokensDetails.soldToken.balanceOf(address(this)),\n            boughtTokenFinalAmount,\n            block.timestamp\n        );\n\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after a swap of assets\n     * @param user the address of user making the purchase\n     * @param soldAsset sold by the user\n     * @param boughtAsset bought by the user\n     * @param amountSold amount of tokens sold\n     * @param amountBought amount of tokens bought\n     * @param timestamp time of the swap\n     **/\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 amountSold, uint256 amountBought, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/SteakHutFinanceFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2fb058fa4d8089fcdc61eecc5d098914722a8f02;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\nimport \"../../interfaces/facets/avalanche/ISteakHutPool.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract SteakHutFinanceFacet is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address;\n\n    /**\n     * Stakes in SteakHut JOE/AVAX balanced-wide pool\n     * @param amount0Desired amount of JOE to be staked\n     * @param amount1Desired amount of AVAX to be staked\n     * @param amount0Min minimum amount of JOE to be staked\n     * @param amount1Min minimum amount of AVAX to be staked\n     **/\n    function stakeSteakHutJOEAVAX(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external {\n        _stakeTokenSteakHut(ISteakHutPool.StakingDetails({\n            token0Symbol: \"JOE\",\n            token1Symbol: \"AVAX\",\n            vaultTokenSymbol: \"SHLB_JOE-AVAX_B\",\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Unstakes from SteakHut JOE/AVAX balanced-wide pool\n     * @param liquidity amount of shares to be unstaked\n     * @param amount0Min minimum amount of JOE to be unstaked\n     * @param amount1Min minimum amount of AVAX to be unstaked\n     **/\n    function unstakeSteakHutJOEAVAX(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external {\n        _unstakeTokenSteakHut(ISteakHutPool.UnstakingDetails({\n            token0Symbol: \"JOE\",\n            token1Symbol: \"AVAX\",\n            vaultTokenSymbol: \"SHLB_JOE-AVAX_B\",\n            liquidity: liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Stakes in SteakHut EUROC/USDC balanced-wide pool\n     * @param amount0Desired amount of EUROC to be staked\n     * @param amount1Desired amount of USDC to be staked\n     * @param amount0Min minimum amount of EUROC to be staked\n     * @param amount1Min minimum amount of USDC to be staked\n     **/\n    function stakeSteakHutEUROCUSDC(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external {\n        _stakeTokenSteakHut(ISteakHutPool.StakingDetails({\n            token0Symbol: \"EUROC\",\n            token1Symbol: \"USDC\",\n            vaultTokenSymbol: \"SHLB_EUROC-USDC_V2_1_B\",\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Unstakes from SteakHut EUROC/USDC balanced-wide pool\n     * @param liquidity amount of shares to be unstaked\n     * @param amount0Min minimum amount of EUROC to be unstaked\n     * @param amount1Min minimum amount of USDC to be unstaked\n     **/\n    function unstakeSteakHutEUROCUSDC(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external {\n        _unstakeTokenSteakHut(ISteakHutPool.UnstakingDetails({\n            token0Symbol: \"EUROC\",\n            token1Symbol: \"USDC\",\n            vaultTokenSymbol: \"SHLB_EUROC-USDC_V2_1_B\",\n            liquidity: liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Stakes in SteakHut AVAX/USDC balanced-wide pool\n     * @param amount0Desired amount of AVAX to be staked\n     * @param amount1Desired amount of USDC to be staked\n     * @param amount0Min minimum amount of AVAX to be staked\n     * @param amount1Min minimum amount of USDC to be staked\n     **/\n    function stakeSteakHutAVAXUSDC(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external {\n        _stakeTokenSteakHut(ISteakHutPool.StakingDetails({\n            token0Symbol: \"AVAX\",\n            token1Symbol: \"USDC\",\n            vaultTokenSymbol: \"SHLB_AVAX-USDC_B\",\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Unstakes from SteakHut AVAX/USDC balanced-wide pool\n     * @param liquidity amount of shares to be unstaked\n     * @param amount0Min minimum amount of AVAX to be unstaked\n     * @param amount1Min minimum amount of USDC to be unstaked\n     **/\n    function unstakeSteakHutAVAXUSDC(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external {\n        _unstakeTokenSteakHut(ISteakHutPool.UnstakingDetails({\n            token0Symbol: \"AVAX\",\n            token1Symbol: \"USDC\",\n            vaultTokenSymbol: \"SHLB_AVAX-USDC_B\",\n            liquidity: liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Stakes in SteakHut BTC/AVAX balanced-wide pool\n     * @param amount0Desired amount of BTC to be staked\n     * @param amount1Desired amount of AVAX to be staked\n     * @param amount0Min minimum amount of BTC to be staked\n     * @param amount1Min minimum amount of AVAX to be staked\n     **/\n    function stakeSteakHutBTCAVAX(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external {\n        _stakeTokenSteakHut(ISteakHutPool.StakingDetails({\n            token0Symbol: \"BTC\",\n            token1Symbol: \"AVAX\",\n            vaultTokenSymbol: \"SHLB_BTC.b-AVAX_B\",\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Unstakes from SteakHut BTC/AVAX balanced-wide pool\n     * @param liquidity amount of shares to be unstaked\n     * @param amount0Min minimum amount of BTC to be unstaked\n     * @param amount1Min minimum amount of AVAX to be unstaked\n     **/\n    function unstakeSteakHutBTCAVAX(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external {\n        _unstakeTokenSteakHut(ISteakHutPool.UnstakingDetails({\n            token0Symbol: \"BTC\",\n            token1Symbol: \"AVAX\",\n            vaultTokenSymbol: \"SHLB_BTC.b-AVAX_B\",\n            liquidity: liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Stakes in SteakHut USDT.e/USDT concentrated pool\n     * @param amount0Desired amount of USDT.e to be staked\n     * @param amount1Desired amount of USDT to be staked\n     * @param amount0Min minimum amount of USDT.e to be staked\n     * @param amount1Min minimum amount of USDT to be staked\n     **/\n    function stakeSteakHutUSDTeUSDT(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external {\n        _stakeTokenSteakHut(ISteakHutPool.StakingDetails({\n            token0Symbol: \"USDT.e\",\n            token1Symbol: \"USDT\",\n            vaultTokenSymbol: \"SHLB_USDT.e-USDt_C\",\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Unstakes from SteakHut USDT.e/USDT concentrated pool\n     * @param liquidity amount of shares to be unstaked\n     * @param amount0Min minimum amount of USDT.e to be unstaked\n     * @param amount1Min minimum amount of USDT to be unstaked\n     **/\n    function unstakeSteakHutUSDTeUSDT(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external {\n        _unstakeTokenSteakHut(ISteakHutPool.UnstakingDetails({\n            token0Symbol: \"USDT.e\",\n            token1Symbol: \"USDT\",\n            vaultTokenSymbol: \"SHLB_USDT.e-USDt_C\",\n            liquidity: liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    // ----- PRIVATE METHODS -----\n\n    /**\n     * Stakes {stakingDetails.token0Address}, {stakingDetails.token1Address} token in the SteakHut pool\n     * @param stakingDetails ISteakHutPool.StakingDetails staking details\n     **/\n    function _stakeTokenSteakHut(ISteakHutPool.StakingDetails memory stakingDetails) private nonReentrant onlyOwner recalculateAssetsExposure remainsSolvent {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        address vaultAddress = tokenManager.getAssetAddress(stakingDetails.vaultTokenSymbol, false);\n        IERC20 vaultToken = IERC20(vaultAddress);\n        uint256 initialVaultBalance = vaultToken.balanceOf(address(this));\n\n        IERC20 token0 = IERC20(tokenManager.getAssetAddress(stakingDetails.token0Symbol, false));\n        IERC20 token1 = IERC20(tokenManager.getAssetAddress(stakingDetails.token1Symbol, false));\n\n        stakingDetails.amount0Desired = Math.min(token0.balanceOf(address(this)), stakingDetails.amount0Desired);\n        stakingDetails.amount1Desired = Math.min(token1.balanceOf(address(this)), stakingDetails.amount1Desired);\n        require(stakingDetails.amount0Desired > 0 && stakingDetails.amount1Desired > 0, \"Cannot stake 0 tokens\");\n\n        address(token0).safeApprove(vaultAddress, 0);\n        address(token0).safeApprove(vaultAddress, stakingDetails.amount0Desired);\n        address(token1).safeApprove(vaultAddress, 0);\n        address(token1).safeApprove(vaultAddress, stakingDetails.amount1Desired);\n        (, uint256 amount0Actual, uint256 amount1Actual) = ISteakHutPool(vaultAddress).deposit(stakingDetails.amount0Desired, stakingDetails.amount1Desired, stakingDetails.amount0Min, stakingDetails.amount1Min);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, vaultAddress);\n        if(token0.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.token0Symbol);\n        }\n        if(token1.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.token1Symbol);\n        }\n\n        emit Staked(\n            msg.sender,\n            stakingDetails.token0Symbol,\n            stakingDetails.token1Symbol,\n            vaultAddress,\n            amount0Actual,\n            amount1Actual,\n            vaultToken.balanceOf(address(this)) - initialVaultBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n     * Unstakes {UnstakingDetails.token0Address}, {UnstakingDetails.token1Address} token from the SteakHut pool\n     * @param unstakingDetails ISteakHutPool.UnstakingDetails unstaking details\n     **/\n    function _unstakeTokenSteakHut(ISteakHutPool.UnstakingDetails memory unstakingDetails) private nonReentrant onlyOwnerOrInsolvent recalculateAssetsExposure {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        address vaultAddress = tokenManager.getAssetAddress(unstakingDetails.vaultTokenSymbol, true);\n        uint256 vaultTokenBalance = IERC20(vaultAddress).balanceOf(address(this));\n\n        uint256 amount0Unstaked;\n        uint256 amount1Unstaked;\n        {\n            IERC20 depositToken0 = IERC20(tokenManager.getAssetAddress(unstakingDetails.token0Symbol, false));\n            IERC20 depositToken1 = IERC20(tokenManager.getAssetAddress(unstakingDetails.token1Symbol, false));\n            {\n                uint256 initialDepositTokenBalance0 = depositToken0.balanceOf(address(this));\n                uint256 initialDepositTokenBalance1 = depositToken1.balanceOf(address(this));\n                unstakingDetails.liquidity = Math.min(IERC20(vaultAddress).balanceOf(address(this)), unstakingDetails.liquidity);\n\n                ISteakHutPool(vaultAddress).withdraw(unstakingDetails.liquidity);\n\n                amount0Unstaked = depositToken0.balanceOf(address(this)) - initialDepositTokenBalance0;\n                amount1Unstaked = depositToken1.balanceOf(address(this)) - initialDepositTokenBalance1;\n                require(amount0Unstaked >= unstakingDetails.amount0Min && amount1Unstaked >= unstakingDetails.amount1Min, \"Unstaked less tokens than expected\");\n            }\n\n            // Add/remove owned tokens\n            DiamondStorageLib.addOwnedAsset(unstakingDetails.token0Symbol, address(depositToken0));\n            DiamondStorageLib.addOwnedAsset(unstakingDetails.token1Symbol, address(depositToken1));\n        }\n        uint256 newVaultTokenBalance = IERC20(vaultAddress).balanceOf(address(this));\n        if(newVaultTokenBalance == 0) {\n            DiamondStorageLib.removeOwnedAsset(unstakingDetails.vaultTokenSymbol);\n        }\n\n        emit Unstaked(\n            msg.sender,\n            unstakingDetails.token0Symbol,\n            unstakingDetails.token1Symbol,\n            vaultAddress,\n            amount0Unstaked,\n            amount1Unstaked,\n            vaultTokenBalance - newVaultTokenBalance,\n            block.timestamp\n        );\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset0 the asset that was unstaked\n        * @param asset1 the asset that was unstaked\n        * @param vault address of the vault token\n        * @param depositTokenAmount0 how much deposit token0 was received\n        * @param depositTokenAmount1 how much deposit token1 was received\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 asset0, bytes32 asset1, address indexed vault, uint256 depositTokenAmount0, uint256 depositTokenAmount1, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param vault address of the vault token\n        * @param asset0 the asset that was unstaked\n        * @param asset1 the asset that was unstaked\n        * @param depositTokenAmount0 how much deposit token0 was received\n        * @param depositTokenAmount1 how much deposit token1 was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 asset0, bytes32 asset1, address indexed vault, uint256 depositTokenAmount0, uint256 depositTokenAmount1, uint256 receiptTokenAmount, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/TraderJoeDEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 71813826f564de63a2462d95b5c15944fcdf686e;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2DEXFacet.sol\";\n\ncontract TraderJoeDEXFacet is UniswapV2DEXFacet {\n    function getProtocolID() pure internal override returns (bytes32) {\n        return \"TJ\";\n    }\n\n    /**\n      * Swaps one asset to another\n      * @dev This function uses the redstone-evm-connector\n      * @param _soldAsset asset to be sold\n      * @param _boughtAsset asset to be bought\n      * @param _exactSold exact amount of asset to be sold\n      * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapTraderJoe(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public noBorrowInTheSameBlock onlyOwner returns (uint256[] memory) {\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\n    }\n\n    function addLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\n    }\n\n    //onlOwnerOrInsolvent inside UniswapDexFacet\n    function removeLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public {\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public override returns (address) {\n        return 0x4eEcb72b47a32786e08581D6226e95d9AE3bB1Af;\n    }\n}"
    },
    "contracts/facets/avalanche/TraderJoeV2AutopoolsFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: a33c92df6b73b24f43fe2acf6c3faf2d4ed3e03c;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\nimport \"../../interfaces/facets/avalanche/ITraderJoeV2Autopool.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\nimport \"../../interfaces/facets/avalanche/ITraderJoeV2AutopoolsFacet.sol\";\n\ncontract TraderJoeV2AutopoolsFacet is ITraderJoeV2AutopoolsFacet, ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address;\n\n    /**\n     * Stakes in TraderJoe V2 AVAX/USDC auto-pool\n     * @param amount0Desired amount of AVAX to be staked\n     * @param amount1Desired amount of USDC to be staked\n     * @param amount0Min minimum amount of AVAX to be staked\n     * @param amount1Min minimum amount of USDC to be staked\n     **/\n    function stakeTraderJoeV2AutopoolAVAXUSDC(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external {\n        stakeTokenTraderJoeV2Autopool(ITraderJoeV2Autopool.StakingDetails({\n            token0Symbol: \"AVAX\",\n            token1Symbol: \"USDC\",\n            vaultTokenSymbol: \"TJ_AVAX_USDC_AUTO\",\n            amount0Desired: amount0Desired,\n            amount1Desired: amount1Desired,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    /**\n     * Unstakes from SteakHut AVAX/USDC balanced-wide pool\n     * @param liquidity amount of shares to be unstaked\n     * @param amount0Min minimum amount of AVAX to be unstaked\n     * @param amount1Min minimum amount of USDC to be unstaked\n     **/\n    function unstakeTraderJoeV2AutopoolAVAXUSDC(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external {\n        unstakeTokenTraderJoeV2Autopool(ITraderJoeV2Autopool.UnstakingDetails({\n            token0Symbol: \"AVAX\",\n            token1Symbol: \"USDC\",\n            vaultTokenSymbol: \"TJ_AVAX_USDC_AUTO\",\n            liquidity: liquidity,\n            amount0Min: amount0Min,\n            amount1Min: amount1Min\n        }));\n    }\n\n    // ----- PRIVATE METHODS -----\n\n    /**\n     * Stakes {stakingDetails.token0Address}, {stakingDetails.token1Address} token in the SteakHut pool\n     * @param stakingDetails ITraderJoeV2Autopool.StakingDetails staking details\n     **/\n    function stakeTokenTraderJoeV2Autopool(ITraderJoeV2Autopool.StakingDetails memory stakingDetails) private nonReentrant onlyOwner recalculateAssetsExposure remainsSolvent {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        address vaultAddress = tokenManager.getAssetAddress(stakingDetails.vaultTokenSymbol, false);\n        IERC20 vaultToken = IERC20(vaultAddress);\n        uint256 initialVaultBalance = vaultToken.balanceOf(address(this));\n\n        IERC20 token0 = IERC20(tokenManager.getAssetAddress(stakingDetails.token0Symbol, false));\n        IERC20 token1 = IERC20(tokenManager.getAssetAddress(stakingDetails.token1Symbol, false));\n\n        stakingDetails.amount0Desired = Math.min(token0.balanceOf(address(this)), stakingDetails.amount0Desired);\n        stakingDetails.amount1Desired = Math.min(token1.balanceOf(address(this)), stakingDetails.amount1Desired);\n        require(stakingDetails.amount0Desired > 0 && stakingDetails.amount1Desired > 0, \"Cannot stake 0 tokens\");\n\n        address(token0).safeApprove(vaultAddress, 0);\n        address(token0).safeApprove(vaultAddress, stakingDetails.amount0Desired);\n        address(token1).safeApprove(vaultAddress, 0);\n        address(token1).safeApprove(vaultAddress, stakingDetails.amount1Desired);\n        (, uint256 amount0Actual, uint256 amount1Actual) = ITraderJoeV2Autopool(vaultAddress).deposit(stakingDetails.amount0Desired, stakingDetails.amount1Desired);\n\n        //TODO: difference to Steakhut\n        require(amount0Actual >= stakingDetails.amount0Min && amount1Actual >= stakingDetails.amount1Min, \"Staked less tokens than expected\");\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, vaultAddress);\n        if(token0.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.token0Symbol);\n        }\n        if(token1.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.token1Symbol);\n        }\n\n        emit Staked(\n            msg.sender,\n            stakingDetails.token0Symbol,\n            stakingDetails.token1Symbol,\n            vaultAddress,\n            amount0Actual,\n            amount1Actual,\n            vaultToken.balanceOf(address(this)) - initialVaultBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n     * Unstakes {UnstakingDetails.token0Address}, {UnstakingDetails.token1Address} token from the SteakHut pool\n     * @param unstakingDetails ITraderJoeV2Autopool.UnstakingDetails unstaking details\n     **/\n    function unstakeTokenTraderJoeV2Autopool(ITraderJoeV2Autopool.UnstakingDetails memory unstakingDetails) private nonReentrant onlyOwnerOrInsolvent recalculateAssetsExposure {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        address vaultAddress = tokenManager.getAssetAddress(unstakingDetails.vaultTokenSymbol, true);\n        uint256 vaultTokenBalance = IERC20(vaultAddress).balanceOf(address(this));\n\n        uint256 amount0Unstaked;\n        uint256 amount1Unstaked;\n        {\n            IERC20 depositToken0 = IERC20(tokenManager.getAssetAddress(unstakingDetails.token0Symbol, false));\n            IERC20 depositToken1 = IERC20(tokenManager.getAssetAddress(unstakingDetails.token1Symbol, false));\n            {\n                uint256 initialDepositTokenBalance0 = depositToken0.balanceOf(address(this));\n                uint256 initialDepositTokenBalance1 = depositToken1.balanceOf(address(this));\n                unstakingDetails.liquidity = Math.min(IERC20(vaultAddress).balanceOf(address(this)), unstakingDetails.liquidity);\n\n                //TODO: replace with the immediate withdrawal, that code CAN'T GO TO PROD\n                ITraderJoeV2Autopool(vaultAddress).queueWithdrawal(unstakingDetails.liquidity, address(this));\n\n                amount0Unstaked = depositToken0.balanceOf(address(this)) - initialDepositTokenBalance0;\n                amount1Unstaked = depositToken1.balanceOf(address(this)) - initialDepositTokenBalance1;\n                require(amount0Unstaked >= unstakingDetails.amount0Min && amount1Unstaked >= unstakingDetails.amount1Min, \"Unstaked less tokens than expected\");\n            }\n\n            // Add/remove owned tokens\n            DiamondStorageLib.addOwnedAsset(unstakingDetails.token0Symbol, address(depositToken0));\n            DiamondStorageLib.addOwnedAsset(unstakingDetails.token1Symbol, address(depositToken1));\n        }\n        uint256 newVaultTokenBalance = IERC20(vaultAddress).balanceOf(address(this));\n        if(newVaultTokenBalance == 0) {\n            DiamondStorageLib.removeOwnedAsset(unstakingDetails.vaultTokenSymbol);\n        }\n\n        emit Unstaked(\n            msg.sender,\n            unstakingDetails.token0Symbol,\n            unstakingDetails.token1Symbol,\n            vaultAddress,\n            amount0Unstaked,\n            amount1Unstaked,\n            vaultTokenBalance - newVaultTokenBalance,\n            block.timestamp\n        );\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset0 the asset that was unstaked\n        * @param asset1 the asset that was unstaked\n        * @param vault address of the vault token\n        * @param depositTokenAmount0 how much deposit token0 was received\n        * @param depositTokenAmount1 how much deposit token1 was received\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 asset0, bytes32 asset1, address indexed vault, uint256 depositTokenAmount0, uint256 depositTokenAmount1, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param vault address of the vault token\n        * @param asset0 the asset that was unstaked\n        * @param asset1 the asset that was unstaked\n        * @param depositTokenAmount0 how much deposit token0 was received\n        * @param depositTokenAmount1 how much deposit token1 was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 asset0, bytes32 asset1, address indexed vault, uint256 depositTokenAmount0, uint256 depositTokenAmount1, uint256 receiptTokenAmount, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/TraderJoeV2Facet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/joe-v2/ILBRouter.sol\";\nimport \"../../interfaces/joe-v2/ILBFactory.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract TraderJoeV2Facet is ITraderJoeV2Facet, ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n\n    using TransferHelper for address;\n\n    address private constant JOE_V2_ROUTER_ADDRESS = 0xb4315e873dBcf96Ffd0acd8EA43f689D8c20fB30;\n\n    function getOwnedTraderJoeV2Bins() public view returns (TraderJoeV2Bin[] memory result){\n        return DiamondStorageLib.getTjV2OwnedBinsView();\n    }\n\n    function getOwnedTraderJoeV2BinsStorage() internal returns (TraderJoeV2Bin[] storage result){\n        return DiamondStorageLib.getTjV2OwnedBins();\n    }\n\n    function getWhitelistedTraderJoeV2Pairs() internal view returns (ILBPair[2] memory pools){\n        return [\n            ILBPair(0xD446eb1660F766d533BeCeEf890Df7A69d26f7d1),\n            ILBPair(0x1901011a39B11271578a1283D620373aBeD66faA)\n        ];\n    }\n\n    function isPairWhitelisted(address pair) internal view returns (bool){\n        ILBPair[2] memory pairs = getWhitelistedTraderJoeV2Pairs();\n\n        for (uint i; i < pairs.length; ++i) {\n            if (pair == address(pairs[i])) return true;\n        }\n        return false;\n    }\n\n\n    function addLiquidityTraderJoeV2(ILBRouter.LiquidityParameters memory liquidityParameters) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent {\n        ILBRouter traderJoeV2Router = ILBRouter(JOE_V2_ROUTER_ADDRESS);\n        TraderJoeV2Bin[] memory ownedBins = getOwnedTraderJoeV2Bins();\n        ILBFactory lbFactory = traderJoeV2Router.getFactory();\n        ILBFactory.LBPairInformation memory pairInfo = lbFactory.getLBPairInformation(liquidityParameters.tokenX, liquidityParameters.tokenY, liquidityParameters.binStep);\n\n        if (!isPairWhitelisted(address(pairInfo.LBPair))) revert TraderJoeV2PoolNotWhitelisted();\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        bytes32 tokenX = tokenManager.tokenAddressToSymbol(address(liquidityParameters.tokenX));\n        bytes32 tokenY = tokenManager.tokenAddressToSymbol(address(liquidityParameters.tokenY));\n\n        liquidityParameters.to = address(this);\n        liquidityParameters.refundTo = address(this);\n\n        address(liquidityParameters.tokenX).safeApprove(address(traderJoeV2Router), 0);\n        address(liquidityParameters.tokenY).safeApprove(address(traderJoeV2Router), 0);\n\n        address(liquidityParameters.tokenX).safeApprove(address(traderJoeV2Router), liquidityParameters.amountX);\n        address(liquidityParameters.tokenY).safeApprove(address(traderJoeV2Router), liquidityParameters.amountY);\n\n        (uint256 amountXAdded,uint256 amountYAdded,,,uint256[] memory depositIds, uint256[] memory liquidityMinted) = traderJoeV2Router.addLiquidity(liquidityParameters);\n\n        for (uint256 i; i < depositIds.length; ++i) {\n            bool userHadBin;\n\n            for (int256 j; uint(j) < ownedBins.length; ++j) {\n                if (address(ownedBins[uint(j)].pair) == address(pairInfo.LBPair)\n                && ownedBins[uint(j)].id == depositIds[i]\n                ) {\n                    userHadBin = true;\n                    break;\n                }\n            }\n\n        if (!userHadBin) {\n                getOwnedTraderJoeV2BinsStorage().push(TraderJoeV2Bin(pairInfo.LBPair, uint24(depositIds[i])));\n            }\n        }\n\n        if (liquidityParameters.tokenX.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(tokenX);\n        }\n\n        if (liquidityParameters.tokenY.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(tokenY);\n        }\n\n        emit AddLiquidityTraderJoeV2(msg.sender, address(pairInfo.LBPair), depositIds, liquidityMinted, tokenX, tokenY, amountXAdded, amountYAdded, block.timestamp);\n    }\n\n    function removeLiquidityTraderJoeV2(RemoveLiquidityParameters memory parameters) external nonReentrant onlyOwnerOrInsolvent noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent {\n        ILBRouter traderJoeV2Router = ILBRouter(JOE_V2_ROUTER_ADDRESS);\n\n        ILBPair(traderJoeV2Router.getFactory().getLBPairInformation(parameters.tokenX, parameters.tokenY, parameters.binStep).LBPair).approveForAll(address(traderJoeV2Router), true);\n\n        traderJoeV2Router.removeLiquidity(\n            parameters.tokenX, parameters.tokenY, parameters.binStep, parameters.amountXMin, parameters.amountYMin, parameters.ids, parameters.amounts, address(this), parameters.deadline\n        );\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        ILBFactory lbFactory = traderJoeV2Router.getFactory();\n\n        ILBFactory.LBPairInformation memory pairInfo = lbFactory.getLBPairInformation(parameters.tokenX, parameters.tokenY, parameters.binStep);\n\n        TraderJoeV2Bin storage bin;\n        TraderJoeV2Bin[] storage binsStorage = getOwnedTraderJoeV2BinsStorage();\n\n        for (int256 i; uint(i) < binsStorage.length; i++) {\n            if (address(binsStorage[uint(i)].pair) == address(pairInfo.LBPair)) {\n                bin = binsStorage[uint(i)];\n\n                if (bin.pair.balanceOf(address(this), bin.id) == 0) {\n                    binsStorage[uint(i)] = binsStorage[binsStorage.length - 1];\n                    i--;\n                    binsStorage.pop();\n                }\n\n                break;\n            }\n        }\n\n\n        bytes32 tokenX = tokenManager.tokenAddressToSymbol(address(parameters.tokenX));\n        bytes32 tokenY = tokenManager.tokenAddressToSymbol(address(parameters.tokenY));\n\n        if (parameters.tokenX.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(tokenX, address(parameters.tokenX));\n        }\n\n        if (parameters.tokenY.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(tokenY, address(parameters.tokenY));\n        }\n\n        emit RemoveLiquidityTraderJoeV2(msg.sender, address(pairInfo.LBPair), parameters.ids, parameters.amounts, tokenX, tokenY, block.timestamp);\n\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after adding liquidity to TraderJoe V2\n     * @param user the address of user providing liquidity\n     * @param pair TraderJoe V2 pair\n     * @param binIds the ids of bin\n     * @param liquidityMinted amount of liquidity minted per bin\n     * @param firstAsset first asset provided for liquidity\n     * @param secondAsset second asset provided for liquidity\n     * @param firstAmount amount of the first asset used\n     * @param secondAmount amount of the second asset used\n     * @param timestamp time of the transaction\n     **/\n    event AddLiquidityTraderJoeV2(address indexed user, address indexed pair, uint256[] binIds, uint[] liquidityMinted, bytes32 firstAsset, bytes32 secondAsset, uint firstAmount, uint secondAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing liquidity from TraderJoe V2\n     * @param user the address of user removing liquidity\n     * @param pair TraderJoe V2 pair\n     * @param binIds the ids of bin\n     * @param amounts The list of amounts to burn of each id in binIds\n     * @param firstAsset first asset provided for liquidity\n     * @param secondAsset second asset provided for liquidity\n     * @param timestamp time of the transaction\n     **/\n    event RemoveLiquidityTraderJoeV2(address indexed user, address indexed pair, uint256[] binIds, uint[] amounts, bytes32 firstAsset, bytes32 secondAsset, uint256 timestamp);\n\n    error TraderJoeV2PoolNotWhitelisted();\n}\n"
    },
    "contracts/facets/avalanche/UniswapV3Facet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/joe-v2/ILBRouter.sol\";\nimport \"../../interfaces/joe-v2/ILBFactory.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../lib/uniswap-v3/UniswapV3IntegrationHelper.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\nimport \"../../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\";\n\ncontract UniswapV3Facet is IUniswapV3Facet, ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n\n    address private constant NONFUNGIBLE_POSITION_MANAGER_ADDRESS = 0x655C406EBFa14EE2006250925e54ec43AD184f8B;\n    address private constant UNISWAP_V3_FACTORY_ADDRESS = 0x740b1c1de25031C31FF4fC9A62f554A55cdC1baD;\n\n    using TransferHelper for address;\n\n    uint256 constant MAX_OWNED_UNISWAP_V3_POSITIONS = 10; //TODO: dummy number, update after running gas tests\n\n    //TODO: kamilovsky please look into that if that is a good solution for storage\n    function getTokenIds() internal returns (uint256[] storage result){\n        return DiamondStorageLib.getUV3OwnedTokenIds();\n    }\n\n    function getOwnedUniswapV3TokenIds() public view returns (uint256[] memory result){\n        return DiamondStorageLib.getUV3OwnedTokenIdsView();\n    }\n\n    function getWhitelistedUniswapV3Pools() internal view returns (IUniswapV3Pool[1] memory pools){\n        return [\n            IUniswapV3Pool(0x0E663593657B064e1baE76d28625Df5D0eBd4421)\n        ];\n    }\n\n    //TODO: optimize it (mapping?)\n    function isPoolWhitelisted(address pool) internal view returns (bool){\n        IUniswapV3Pool[1] memory pools = getWhitelistedUniswapV3Pools();\n\n        for (uint i; i < pools.length; ++i) {\n            if (pool == address(pools[i])) return true;\n        }\n        return false;\n    }\n\n    function mintLiquidityUniswapV3(INonfungiblePositionManager.MintParams memory params) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent {\n        address poolAddress = PoolAddress.computeAddress(UNISWAP_V3_FACTORY_ADDRESS, PoolAddress.getPoolKey(params.token0, params.token1, params.fee));\n\n        if (!isPoolWhitelisted(poolAddress)) revert UniswapV3PoolNotWhitelisted();\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        bytes32 token0 = tokenManager.tokenAddressToSymbol(address(params.token0));\n        bytes32 token1 = tokenManager.tokenAddressToSymbol(address(params.token1));\n\n        params.recipient = address(this);\n\n        {\n            //TODO: finish\n            //checking the price against the oracle value\n            (uint160 poolSqrtPrice,,,,,,) = IUniswapV3Pool(poolAddress).slot0();\n            uint256 poolPrice = UniswapV3IntegrationHelper.sqrtPriceX96ToUint(poolSqrtPrice, IERC20Metadata(params.token0).decimals());\n        }\n\n        //TODO: check for max and min ticks\n        address(params.token0).safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), 0);\n        address(params.token1).safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), 0);\n\n        address(params.token0).safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), params.amount0Desired);\n        address(params.token1).safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), params.amount1Desired);\n\n        (uint256 tokenId,\n        uint128 liquidity,\n        uint256 amount0,\n        uint256 amount1\n        ) = INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).mint(params);\n\n        {\n            uint256[] storage tokenIds = DiamondStorageLib.getUV3OwnedTokenIds();\n            if (tokenIds.length > MAX_OWNED_UNISWAP_V3_POSITIONS) revert TooManyUniswapV3Positions();\n            tokenIds.push(tokenId);\n        }\n\n        if (IERC20(params.token0).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(token0);\n        }\n\n        if (IERC20(params.token1).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(token1);\n        }\n\n        emit AddLiquidityUniswapV3(msg.sender, poolAddress, tokenId, token0, token1, liquidity, amount0, amount1, block.timestamp);\n    }\n\n    function increaseLiquidityUniswapV3(INonfungiblePositionManager.IncreaseLiquidityParams memory params) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent {\n        (\n        ,,\n        address token0Address,\n        address token1Address,\n        uint24 fee,\n        ,,\n        ) = INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).positions(params.tokenId);\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        bytes32 token0 = tokenManager.tokenAddressToSymbol(token0Address);\n        bytes32 token1 = tokenManager.tokenAddressToSymbol(token1Address);\n\n        address poolAddress = PoolAddress.computeAddress(UNISWAP_V3_FACTORY_ADDRESS, PoolAddress.getPoolKey(token0Address, token1Address, fee));\n\n        if (!isPoolWhitelisted(poolAddress)) revert UniswapV3PoolNotWhitelisted();\n\n        token0Address.safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), 0);\n        token1Address.safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), 0);\n\n        token0Address.safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), params.amount0Desired);\n        token1Address.safeApprove(address(NONFUNGIBLE_POSITION_MANAGER_ADDRESS), params.amount1Desired);\n\n        (\n        ,\n        uint256 amount0,\n        uint256 amount1\n        ) = INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).increaseLiquidity(params);\n\n        if (IERC20(token0Address).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(token0);\n        }\n\n        if (IERC20(token1Address).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(token1);\n        }\n\n        emit IncreaseLiquidityUniswapV3(msg.sender, poolAddress, params.tokenId, token0, token1, amount0, amount1, block.timestamp);\n    }\n\n    function decreaseLiquidityUniswapV3(INonfungiblePositionManager.DecreaseLiquidityParams memory params) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure onlyOwnerOrInsolvent {\n        (\n        ,,\n        address token0Address,\n        address token1Address,\n        uint24 fee,\n        ,,\n        ) = INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).positions(params.tokenId);\n        address poolAddress = PoolAddress.computeAddress(UNISWAP_V3_FACTORY_ADDRESS, PoolAddress.getPoolKey(token0Address, token1Address, fee));\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        bytes32 token0 = tokenManager.tokenAddressToSymbol(token0Address);\n        bytes32 token1 = tokenManager.tokenAddressToSymbol(token1Address);\n\n        (\n            uint256 amount0,\n            uint256 amount1\n        ) = INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).decreaseLiquidity(params);\n\n        //TODO: check risks of uint256 to uint128 conversion\n        INonfungiblePositionManager.CollectParams memory collectParams = INonfungiblePositionManager.CollectParams(params.tokenId, address(this), uint128(amount0), uint128(amount1));\n\n        INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).collect(collectParams);\n\n        if (IERC20(token0Address).balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(token0, token0Address);\n        }\n\n        if (IERC20(token1Address).balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(token1, token1Address);\n        }\n\n        emit DecreaseLiquidityUniswapV3(msg.sender, poolAddress, params.tokenId, token0, token1, amount0, amount1, block.timestamp);\n    }\n\n    function burnLiquidityUniswapV3(uint256 tokenId) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure onlyOwnerOrInsolvent {\n        uint256[] storage tokenIds = getTokenIds();\n        for (uint256 i; i < tokenIds.length; i++) {\n            if (tokenIds[i] == tokenId) {\n                INonfungiblePositionManager(NONFUNGIBLE_POSITION_MANAGER_ADDRESS).burn(tokenId);\n                tokenIds[i] = tokenIds[tokenIds.length - 1];\n                tokenIds.pop();\n                emit BurnLiquidityUniswapV3(msg.sender, tokenId, block.timestamp);\n\n                break;\n            }\n        }\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // pool must be whitelisted\n    error UniswapV3PoolNotWhitelisted();\n\n    error TooManyUniswapV3Positions();\n\n    /**\n     * @dev emitted after minting liquidity\n     * @param user the address of user providing liquidity\n     * @param pool UniswapV3 pool\n     * @param tokenId the if of NFT LP position\n     * @param firstAsset first asset provided for liquidity\n     * @param secondAsset second asset provided for liquidity\n     * @param liquidity amount of liquidity (LP token) added\n     * @param firstAmount amount of the first asset used\n     * @param secondAmount amount of the second asset used\n     * @param timestamp time of the transaction\n     **/\n    event AddLiquidityUniswapV3(address indexed user, address indexed pool, uint256 indexed tokenId, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after increasing liquidity\n     * @param user the address of user providing liquidity\n     * @param pool UniswapV3 pool\n     * @param tokenId the if of NFT LP position\n     * @param firstAsset first asset provided for liquidity\n     * @param secondAsset second asset provided for liquidity\n     * @param firstAmount amount of the first asset used\n     * @param secondAmount amount of the second asset used\n     * @param timestamp time of the transaction\n     **/\n    event IncreaseLiquidityUniswapV3(address indexed user, address indexed pool, uint256 indexed tokenId, bytes32 firstAsset, bytes32 secondAsset, uint firstAmount, uint secondAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after decreasing liquidity\n     * @param user the address of user decreasing liquidity\n     * @param pool UniswapV3 pool\n     * @param tokenId the if of NFT LP position\n     * @param firstAsset first asset received\n     * @param secondAsset second asset received\n     * @param firstAmount amount of the first asset received\n     * @param secondAmount amount of the second asset received\n     * @param timestamp time of the transaction\n     **/\n    event DecreaseLiquidityUniswapV3(address indexed user, address indexed pool, uint256 indexed tokenId, bytes32 firstAsset, bytes32 secondAsset, uint firstAmount, uint secondAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after burning Uniswap V3 token\n     * @param user the address of user decreasing liquidity\n     * @param tokenId the if of NFT LP position\n     * @param timestamp time of the transaction\n     **/\n    event BurnLiquidityUniswapV3(address indexed user, uint256 tokenId, uint256 timestamp);\n\n}\n"
    },
    "contracts/facets/avalanche/VectorFinanceFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 6d7066f60ada99f38d30366e1744ac9979433ec9;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../interfaces/IVectorFinanceStaking.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/IStakingPositions.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/IVectorFinanceMainStaking.sol\";\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract VectorFinanceFacet is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address;\n\n    // CONSTANTS\n\n    address private constant VectorMainStaking = 0x8B3d9F0017FA369cD8C164D0Cc078bf4cA588aE5;\n\n    // PUBLIC FUNCTIONS\n\n    function vectorStakeUSDC1Auto(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x06f01502327De1c37076Bea4689a7e44279155e9,\n            symbol : \"USDC\",\n            identifier : \"VF_USDC_MAIN_AUTO\",\n            balanceSelector : this.vectorUSDC1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeUSDC1Auto.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeUSDC1Auto(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x06f01502327De1c37076Bea4689a7e44279155e9,\n            symbol : \"USDC\",\n            identifier : \"VF_USDC_MAIN_AUTO\",\n            balanceSelector : this.vectorUSDC1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeUSDC1Auto.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorUSDC1BalanceAuto() public view returns (uint256 _stakedBalance) {\n        IVectorFinanceCompounder compounder = getAssetPoolHelper(0x06f01502327De1c37076Bea4689a7e44279155e9).compounder();\n        uint256 shares = compounder.balanceOf(address(this));\n        _stakedBalance = compounder.getDepositTokensForShares(shares);\n    }\n\n    function vectorStakeUSDT1Auto(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x836648A8cE166Ba7CaFb27F0E6AD21d5C91b7774,\n            symbol : \"USDT\",\n            identifier : \"VF_USDT_MAIN_AUTO\",\n            balanceSelector : this.vectorUSDT1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeUSDT1Auto.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeUSDT1Auto(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x836648A8cE166Ba7CaFb27F0E6AD21d5C91b7774,\n            symbol : \"USDT\",\n            identifier : \"VF_USDT_MAIN_AUTO\",\n            balanceSelector : this.vectorUSDT1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeUSDT1Auto.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorUSDT1BalanceAuto() public view returns (uint256 _stakedBalance) {\n        IVectorFinanceCompounder compounder = getAssetPoolHelper(0x836648A8cE166Ba7CaFb27F0E6AD21d5C91b7774).compounder();\n        uint256 shares = compounder.balanceOf(address(this));\n        _stakedBalance = compounder.getDepositTokensForShares(shares);\n    }\n\n    function vectorStakeWAVAX1Auto(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            symbol : \"AVAX\",\n            identifier : \"VF_AVAX_SAVAX_AUTO\",\n            balanceSelector : this.vectorWAVAX1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeWAVAX1Auto.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeWAVAX1Auto(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            symbol : \"AVAX\",\n            identifier : \"VF_AVAX_SAVAX_AUTO\",\n            balanceSelector : this.vectorWAVAX1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeWAVAX1Auto.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorWAVAX1BalanceAuto() public view returns (uint256 _stakedBalance) {\n        IVectorFinanceCompounder compounder = getAssetPoolHelper(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7).compounder();\n        uint256 shares = compounder.balanceOf(address(this));\n        _stakedBalance = compounder.getDepositTokensForShares(shares);\n    }\n\n    function vectorStakeSAVAX1Auto(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE,\n            symbol : \"sAVAX\",\n            identifier : \"VF_SAVAX_MAIN_AUTO\",\n            balanceSelector : this.vectorSAVAX1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeSAVAX1Auto.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeSAVAX1Auto(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE,\n            symbol : \"sAVAX\",\n            identifier : \"VF_SAVAX_MAIN_AUTO\",\n            balanceSelector : this.vectorSAVAX1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeSAVAX1Auto.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorSAVAX1BalanceAuto() public view returns (uint256 _stakedBalance) {\n        IVectorFinanceCompounder compounder = getAssetPoolHelper(0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE).compounder();\n        uint256 shares = compounder.balanceOf(address(this));\n        _stakedBalance = compounder.getDepositTokensForShares(shares);\n    }\n\n    function vectorMigrateAvax() public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            symbol : \"AVAX\",\n            identifier : \"VF_AVAX_SAVAX_AUTO\",\n            balanceSelector : this.vectorWAVAX1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeWAVAX1Auto.selector\n        });\n        require(migrateStake(position, \"VF_AVAX_SAVAX\") > 0, \"Cannot migrate 0 tokens\");\n    }\n\n    function vectorMigrateSAvax() public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset : 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE,\n            symbol : \"sAVAX\",\n            identifier : \"VF_SAVAX_MAIN_AUTO\",\n            balanceSelector : this.vectorSAVAX1BalanceAuto.selector,\n            unstakeSelector : this.vectorUnstakeSAVAX1Auto.selector\n        });\n        require(migrateStake(position, \"VF_SAVAX_MAIN\") > 0, \"Cannot migrate 0 tokens\");\n    }\n\n    // INTERNAL FUNCTIONS\n    /**\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function stakeToken(uint256 amount, IStakingPositions.StakedPosition memory position) internal\n    onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent {\n        IVectorFinanceCompounder compounder = getAssetPoolHelper(position.asset).compounder();\n        IERC20Metadata stakedToken = getERC20TokenInstance(position.symbol, false);\n        uint256 initialReceiptTokenBalance = compounder.balanceOf(address(this));\n\n        amount = Math.min(stakedToken.balanceOf(address(this)), amount);\n        require(amount > 0, \"Cannot stake 0 tokens\");\n\n        address(stakedToken).safeApprove(address(compounder), 0);\n        address(stakedToken).safeApprove(address(compounder), amount);\n\n        compounder.deposit(amount);\n\n        DiamondStorageLib.addStakedPosition(position);\n\n        if (stakedToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(position.symbol);\n        }\n\n        emit Staked(\n            msg.sender,\n            position.symbol,\n            address(compounder),\n            amount,\n            compounder.balanceOf(address(this)) - initialReceiptTokenBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n    * Unstakes token from Vector Finance\n    * IMPORTANT: This method can be used by anyone when a loan is insolvent. This operation can be costly, that is why\n    * if needed it has to be performed in a separate transaction to liquidation\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function unstakeToken(uint256 amount, uint256 minAmount, IStakingPositions.StakedPosition memory position) internal\n    onlyOwnerOrInsolvent recalculateAssetsExposure nonReentrant returns (uint256 unstaked) {\n        IVectorFinanceCompounder compounder = getAssetPoolHelper(position.asset).compounder();\n        IERC20Metadata unstakedToken = getERC20TokenInstance(position.symbol, false);\n        uint256 initialReceiptTokenBalance = compounder.balanceOf(address(this));\n\n        require(amount > 0, \"Cannot unstake 0 tokens\");\n\n        amount = Math.min(compounder.depositTracking(address(this)), amount);\n\n        uint256 balance = unstakedToken.balanceOf(address(this));\n\n        compounder.withdraw(amount, minAmount);\n\n        uint256 newBalance = unstakedToken.balanceOf(address(this));\n\n        if (compounder.depositTracking(address(this)) == 0) {\n            DiamondStorageLib.removeStakedPosition(position.identifier);\n        }\n        DiamondStorageLib.addOwnedAsset(position.symbol, address(unstakedToken));\n\n        emit Unstaked(\n            msg.sender,\n            position.symbol,\n            address(compounder),\n            newBalance - balance,\n            initialReceiptTokenBalance - compounder.balanceOf(address(this)),\n            block.timestamp\n        );\n\n        return newBalance - balance;\n    }\n\n    /**\n     * @notice Withdraws all previous balance from the pool helper, and deposits into the compounder.\n     */\n    function migrateStake(IStakingPositions.StakedPosition memory position, bytes32 oldIdentifier) internal\n    onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent returns (uint256 migrated) {\n        IVectorFinanceStaking poolHelper = getAssetPoolHelper(position.asset);\n        IVectorFinanceCompounder compounder = poolHelper.compounder();\n\n        migrated = poolHelper.balance(address(this));\n        if (migrated > 0) {\n            compounder.migrateAllUserDepositsFromManual();\n\n            DiamondStorageLib.removeStakedPosition(oldIdentifier);\n\n            DiamondStorageLib.addStakedPosition(position);\n\n            emit Migrated(\n                msg.sender,\n                position.symbol,\n                address(compounder),\n                migrated,\n                block.timestamp\n            );\n        }\n    }\n\n    function getAssetPoolHelper(address asset) internal view returns (IVectorFinanceStaking){\n        IVectorFinanceMainStaking mainStaking = IVectorFinanceMainStaking(VectorMainStaking);\n        return IVectorFinanceStaking(mainStaking.getPoolInfo(asset).helper);\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much of deposit token was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much deposit token was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param migratedAmount how much of receipt token was migrated\n        * @param timestamp of staking\n    **/\n    event Migrated(address indexed user, bytes32 indexed asset, address indexed vault, uint256 migratedAmount, uint256 timestamp);\n}\n"
    },
    "contracts/facets/avalanche/VectorFinanceFacetOld.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 3b625a1b173395a815494045d4d55e4d5427371e;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../interfaces/IVectorFinanceStaking.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/IStakingPositions.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/IVectorFinanceMainStaking.sol\";\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract VectorFinanceFacetOld is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n\n    // CONSTANTS\n\n    address private constant VectorMainStaking = 0x8B3d9F0017FA369cD8C164D0Cc078bf4cA588aE5;\n\n    // PUBLIC FUNCTIONS\n\n    function vectorStakeUSDC1(uint256 amount) public pure {\n        revert(\"Manual VF vaults are no longer supported.\");\n    }\n\n    function vectorUnstakeUSDC1(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E,\n            symbol: \"USDC\",\n            identifier: \"VF_USDC_MAIN\",\n            balanceSelector: this.vectorUSDC1Balance.selector,\n            unstakeSelector: this.vectorUnstakeUSDC1.selector\n        });\n        unstakeToken(position);\n    }\n\n    function vectorUSDC1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(0xE5011Ab29612531727406d35cd9BcCE34fAEdC30);\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeWAVAX1(uint256 amount) public pure {\n        revert(\"Manual VF vaults are no longer supported.\");\n    }\n\n    function vectorUnstakeWAVAX1(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            symbol: \"AVAX\",\n            identifier: \"VF_AVAX_SAVAX\",\n            balanceSelector: this.vectorWAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeWAVAX1.selector\n        });\n        unstakeToken(position);\n    }\n\n    function vectorWAVAX1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(getAssetPoolHelper(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7));\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeSAVAX1(uint256 amount) public pure {\n        revert(\"Manual VF vaults are no longer supported.\");\n    }\n\n    function vectorUnstakeSAVAX1(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE,\n            symbol: \"sAVAX\",\n            identifier: \"VF_SAVAX_MAIN\",\n            balanceSelector: this.vectorSAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeSAVAX1.selector\n        });\n        unstakeToken(position);\n    }\n\n    function vectorSAVAX1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(getAssetPoolHelper(0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE));\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    // INTERNAL FUNCTIONS\n\n    /**\n    * Unstakes token from Vector Finance\n    * IMPORTANT: This method can be used by anyone when a loan is insolvent. This operation can be costly, that is why\n    * if needed it has to be performed in a separate transaction to liquidation\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function unstakeToken(IStakingPositions.StakedPosition memory position) internal\n    onlyOwnerOrInsolvent recalculateAssetsExposure nonReentrant returns (uint256 unstaked) {\n        IVectorFinanceStaking poolHelper = getAssetPoolHelper(position.asset);\n        IERC20Metadata unstakedToken = getERC20TokenInstance(position.symbol, false);\n\n        uint256 amount = poolHelper.balance(address(this));\n\n        require(amount > 0, \"Cannot unstake 0 tokens\");\n\n        uint256 balance = unstakedToken.balanceOf(address(this));\n\n        poolHelper.withdraw(amount, 0);\n\n        uint256 newBalance = unstakedToken.balanceOf(address(this));\n\n        if (poolHelper.balance(address(this)) == 0) {\n            DiamondStorageLib.removeStakedPosition(position.identifier);\n        }\n        DiamondStorageLib.addOwnedAsset(position.symbol, address(unstakedToken));\n\n        emit Unstaked(\n            msg.sender,\n            position.symbol,\n            address(poolHelper),\n            newBalance - balance,\n            amount,\n            block.timestamp\n        );\n\n        _handleRewards(poolHelper);\n\n        return newBalance - balance;\n    }\n\n    function _handleRewards(IVectorFinanceStaking stakingContract) internal {\n        IVectorRewarder rewarder = stakingContract.rewarder();\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        uint256 index;\n\n        // We do not want to revert in case of unsupported rewardTokens in order not to block the unstaking/liquidation process\n        while(true) {\n            // No access to the length of rewardTokens[]. Need to iterate until indexOutOfRange\n            (bool success, bytes memory result) = address(rewarder).call(abi.encodeWithSignature(\"rewardTokens(uint256)\", index));\n            if(!success) {\n                break;\n            }\n            address rewardToken = abi.decode(result, (address));\n            bytes32 rewardTokenSymbol = tokenManager.tokenAddressToSymbol(rewardToken);\n            if(rewardTokenSymbol == \"\") {\n                emit UnsupportedRewardToken(msg.sender, rewardToken, block.timestamp);\n                index += 1;\n                continue;\n            }\n            if(IERC20(rewardToken).balanceOf(address(this)) > 0) {\n                DiamondStorageLib.addOwnedAsset(rewardTokenSymbol, rewardToken);\n            }\n            index += 1;\n        }\n    }\n\n    function getAssetPoolHelper(address asset) internal view returns(IVectorFinanceStaking){\n        IVectorFinanceMainStaking mainStaking = IVectorFinanceMainStaking(VectorMainStaking);\n        return IVectorFinanceStaking(mainStaking.getPoolInfo(asset).helper);\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much of deposit token was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much deposit token was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user collects rewards in tokens that are not supported\n        * @param user the address collecting rewards\n        * @param asset reward token that was collected\n        * @param timestamp of collecting rewards\n    **/\n    event UnsupportedRewardToken(address indexed user, address indexed asset, uint256 timestamp);\n}"
    },
    "contracts/facets/avalanche/YieldYakFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: bdee015765a0dd3731205df659aae576d57dd473;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport \"../../interfaces/facets/avalanche/IYieldYak.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\n\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/IWrappedNativeToken.sol\";\n\n// TODO: Check STATUS (tokenManager) of Vault tokens before allowing to stake\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract YieldYakFacet is ReentrancyGuardKeccak, SolvencyMethods, OnlyOwnerOrInsolvent {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    // Staking Vaults tokens\n    address private constant YY_AAVE_AVAX = 0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95;\n    address private constant YY_PTP_sAVAX = 0xb8f531c0d3c53B1760bcb7F57d87762Fd25c4977;\n    address private constant YY_GLP = 0x9f637540149f922145c06e1aa3f38dcDc32Aff5C;\n\n    // Staking Vaults LPs\n    address private constant YY_PNG_AVAX_USDC_LP = 0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656;\n    address private constant YY_PNG_AVAX_ETH_LP = 0xFCD2050E213cC54db2c9c99632AC870574FbC261;\n    address private constant YY_TJ_AVAX_USDC_LP = 0xDEf94a13fF31FB6363f1e03bF18fe0F59Db83BBC;\n    address private constant YY_TJ_AVAX_ETH_LP = 0x5219558ee591b030E075892acc41334A1694fd8A;\n    address private constant YY_TJ_AVAX_sAVAX_LP = 0x22EDe03f1115666CF05a4bAfafaEe8F43D42cD56;\n\n    // Tokens\n    address private constant SAVAX_TOKEN = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n    address private constant AVAX_TOKEN = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address private constant GLP_TOKEN = 0x9e295B5B976a184B14aD8cd72413aD846C299660;\n    // Older version of stakedGLP token (without decimals() that YieldYak uses\n    address private constant sGLP_TOKEN = 0x5643F4b25E36478eE1E90418d5343cb6591BcB9d;\n    // LPs\n    address private constant PNG_AVAX_USDC_LP = 0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665;\n    address private constant PNG_AVAX_ETH_LP = 0x7c05d54fc5CB6e4Ad87c6f5db3b807C94bB89c52;\n\n    address private constant TJ_AVAX_USDC_LP = 0xf4003F4efBE8691B60249E6afbD307aBE7758adb;\n    address private constant TJ_AVAX_ETH_LP = 0xFE15c2695F1F920da45C30AAE47d11dE51007AF9;\n    address private constant TJ_AVAX_sAVAX_LP = 0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d;\n\n    // ----- STAKE -----\n\n    /**\n        * Stakes AVAX in Yield Yak protocol\n        * @dev This function uses the redstone-evm-connector\n        * @param amount amount of AVAX to be staked\n    **/\n    function stakeAVAXYak(uint256 amount) public onlyOwner nonReentrant recalculateAssetsExposure remainsSolvent {\n        require(amount > 0, \"Cannot stake 0 tokens\");\n        amount = Math.min(IWrappedNativeToken(AVAX_TOKEN).balanceOf(address(this)), amount);\n        IERC20Metadata yrtToken = IERC20Metadata(YY_AAVE_AVAX);\n        uint256 initialYRTBalance = yrtToken.balanceOf(address(this));\n\n        IWrappedNativeToken(AVAX_TOKEN).withdraw(amount);\n        IYieldYak(YY_AAVE_AVAX).deposit{value: amount}();\n\n        DiamondStorageLib.addOwnedAsset(\"YY_AAVE_AVAX\", YY_AAVE_AVAX);\n\n        emit Staked(\n            msg.sender,\n            \"AVAX\",\n            YY_AAVE_AVAX,\n            amount,\n            yrtToken.balanceOf(address(this)) - initialYRTBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n       * Stakes sAVAX in Yield Yak protocol\n       * @dev This function uses the redstone-evm-connector\n       * @param amount amount of sAVAX to be staked\n    **/\n    function stakeSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n            tokenAddress: SAVAX_TOKEN,\n            vaultAddress: YY_PTP_sAVAX,\n            tokenSymbol: \"sAVAX\",\n            vaultTokenSymbol: \"YY_PTP_sAVAX\",\n            amount: amount\n        }));\n    }\n\n    /**\n       * Stakes GLP in Yield Yak protocol\n       * @dev This function uses the redstone-evm-connector\n       * @param amount amount of sAVAX to be staked\n    **/\n    function stakeGLPYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        // Extra approve for the stakedGLP contract that is being used to transfer fsGLP\n        sGLP_TOKEN.safeApprove(YY_GLP, 0);\n        sGLP_TOKEN.safeApprove(YY_GLP, amount);\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: GLP_TOKEN,\n        vaultAddress: YY_GLP,\n        tokenSymbol: \"GLP\",\n        vaultTokenSymbol: \"YY_GLP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes PNG_AVAX_USDC_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDC_LP to be staked\n    **/\n    function stakePNGAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: PNG_AVAX_USDC_LP,\n        vaultAddress: YY_PNG_AVAX_USDC_LP,\n        tokenSymbol: \"PNG_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"YY_PNG_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes PNG_AVAX_ETH_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_ETH_LP to be staked\n    **/\n    function stakePNGAVAXETHYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: PNG_AVAX_ETH_LP,\n        vaultAddress: YY_PNG_AVAX_ETH_LP,\n        tokenSymbol: \"PNG_AVAX_ETH_LP\",\n        vaultTokenSymbol: \"YY_PNG_AVAX_ETH_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes TJ_AVAX_USDC in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC to be staked\n    **/\n    function stakeTJAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: TJ_AVAX_USDC_LP,\n        vaultAddress: YY_TJ_AVAX_USDC_LP,\n        tokenSymbol: \"TJ_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"YY_TJ_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes TJ_AVAX_ETH_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_ETH_LP to be staked\n    **/\n    function stakeTJAVAXETHYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: TJ_AVAX_ETH_LP,\n        vaultAddress: YY_TJ_AVAX_ETH_LP,\n        tokenSymbol: \"TJ_AVAX_ETH_LP\",\n        vaultTokenSymbol: \"YY_TJ_AVAX_ETH_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes TJ_AVAX_sAVAX_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_sAVAX_LP to be staked\n    **/\n    function stakeTJAVAXSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: TJ_AVAX_sAVAX_LP,\n        vaultAddress: YY_TJ_AVAX_sAVAX_LP,\n        tokenSymbol: \"TJ_AVAX_sAVAX_LP\",\n        vaultTokenSymbol: \"YY_TJ_AVAX_sAVAX_LP\",\n        amount: amount\n        }));\n    }\n\n    // ----- UNSTAKE -----\n\n\n    //TODO: make common method for unstaking single assets\n\n    /**\n        * Unstakes AVAX from Yield Yak protocol\n        * @dev This function uses the redstone-evm-connector\n        * @param amount amount of AVAX to be unstaked\n    **/\n    function unstakeAVAXYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant recalculateAssetsExposure {\n        IYieldYak yakStakingContract = IYieldYak(YY_AAVE_AVAX);\n        uint256 initialDepositTokenBalance = address(this).balance;\n\n        amount = Math.min(yakStakingContract.balanceOf(address(this)), amount);\n\n        yakStakingContract.withdraw(amount);\n\n        if(yakStakingContract.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(\"YY_AAVE_AVAX\");\n        }\n\n        uint256 depositTokenBalanceAfterWithdrawal = address(this).balance;\n\n        IWrappedNativeToken(AVAX_TOKEN).deposit{value: address(this).balance}();\n\n        if(IERC20(AVAX_TOKEN).balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(\"AVAX\", AVAX_TOKEN);\n        }\n\n        emit Unstaked(\n            msg.sender,\n            \"AVAX\",\n            YY_AAVE_AVAX,\n            depositTokenBalanceAfterWithdrawal - initialDepositTokenBalance,\n            amount,\n            block.timestamp\n        );\n    }\n\n    /**\n    * Unstakes sAVAX from Yield Yak protocol\n    * @dev This function uses the redstone-evm-connector\n        * @param amount amount of sAVAX to be unstaked\n    **/\n    function unstakeSAVAXYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: SAVAX_TOKEN,\n        vaultAddress: YY_PTP_sAVAX,\n        tokenSymbol: \"sAVAX\",\n        vaultTokenSymbol: \"YY_PTP_sAVAX\",\n        amount: amount\n        }));\n    }\n\n    /**\n    * Unstakes GLP from Yield Yak protocol\n    * @dev This function uses the redstone-evm-connector\n        * @param amount amount of sAVAX to be unstaked\n    **/\n    function unstakeGLPYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: GLP_TOKEN,\n        vaultAddress: YY_GLP,\n        tokenSymbol: \"GLP\",\n        vaultTokenSymbol: \"YY_GLP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes PNG_AVAX_USDC_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDC_LP to be staked\n    **/\n    function unstakePNGAVAXUSDCYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: PNG_AVAX_USDC_LP,\n        vaultAddress: YY_PNG_AVAX_USDC_LP,\n        tokenSymbol: \"PNG_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"YY_PNG_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes PNG_AVAX_ETH_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_ETH_LP to be unstaked\n    **/\n    function unstakePNGAVAXETHYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: PNG_AVAX_ETH_LP,\n        vaultAddress: YY_PNG_AVAX_ETH_LP,\n        tokenSymbol: \"PNG_AVAX_ETH_LP\",\n        vaultTokenSymbol: \"YY_PNG_AVAX_ETH_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes TJ_AVAX_USDC in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC to be unstaked\n    **/\n    function unstakeTJAVAXUSDCYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: TJ_AVAX_USDC_LP,\n        vaultAddress: YY_TJ_AVAX_USDC_LP,\n        tokenSymbol: \"TJ_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"YY_TJ_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes TJ_AVAX_ETH_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_ETH_LP to be unstaked\n    **/\n    function unstakeTJAVAXETHYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: TJ_AVAX_ETH_LP,\n        vaultAddress: YY_TJ_AVAX_ETH_LP,\n        tokenSymbol: \"TJ_AVAX_ETH_LP\",\n        vaultTokenSymbol: \"YY_TJ_AVAX_ETH_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes TJ_AVAX_sAVAX_LP in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_sAVAX_LP to be unstaked\n    **/\n    function unstakeTJAVAXSAVAXYak(uint256 amount) public onlyOwnerOrInsolvent nonReentrant {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n        tokenAddress: TJ_AVAX_sAVAX_LP,\n        vaultAddress: YY_TJ_AVAX_sAVAX_LP,\n        tokenSymbol: \"TJ_AVAX_sAVAX_LP\",\n        vaultTokenSymbol: \"YY_TJ_AVAX_sAVAX_LP\",\n        amount: amount\n        }));\n    }\n\n    // ----- PRIVATE METHODS -----\n\n    /**\n      * Stakes {stakingDetails.tokenAddress} token in the YieldYak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param stakingDetails IYieldYak.YYStakingDetails staking details\n    **/\n    function _stakeTokenYY(IYieldYak.YYStakingDetails memory stakingDetails) private recalculateAssetsExposure {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        IERC20Metadata yrtToken = IERC20Metadata(stakingDetails.vaultAddress);\n        uint256 initialYRTBalance = yrtToken.balanceOf(address(this));\n\n        stakingDetails.amount = Math.min(IERC20Metadata(stakingDetails.tokenAddress).balanceOf(address(this)), stakingDetails.amount);\n        require(stakingDetails.amount > 0, \"Cannot stake 0 tokens\");\n        // _ACTIVE = 2\n        require(tokenManager.tokenToStatus(stakingDetails.tokenAddress) == 2, \"Token not supported\");\n        require(tokenManager.tokenToStatus(stakingDetails.vaultAddress) == 2, \"Vault token not supported\");\n\n        stakingDetails.tokenAddress.safeApprove(stakingDetails.vaultAddress, 0);\n        stakingDetails.tokenAddress.safeApprove(stakingDetails.vaultAddress, stakingDetails.amount);\n        IYieldYak(stakingDetails.vaultAddress).deposit(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, stakingDetails.vaultAddress);\n        if(IERC20(stakingDetails.tokenAddress).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.tokenSymbol);\n        }\n\n        emit Staked(\n            msg.sender,\n            stakingDetails.tokenSymbol,\n            stakingDetails.vaultAddress,\n            stakingDetails.amount,\n            yrtToken.balanceOf(address(this)) - initialYRTBalance,\n            block.timestamp);\n    }\n\n    /**\n      * Unstakes {stakingDetails.tokenAddress} token in the YieldYak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param stakingDetails IYieldYak.YYStakingDetails staking details\n    **/\n    function _unstakeTokenYY(IYieldYak.YYStakingDetails memory stakingDetails) private recalculateAssetsExposure {\n        IYieldYak vaultContract = IYieldYak(stakingDetails.vaultAddress);\n        IERC20Metadata depositToken = IERC20Metadata(stakingDetails.tokenAddress);\n        uint256 initialDepositTokenBalance = depositToken.balanceOf(address(this));\n        stakingDetails.amount = Math.min(vaultContract.balanceOf(address(this)), stakingDetails.amount);\n\n        vaultContract.withdraw(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.tokenSymbol, stakingDetails.tokenAddress);\n        if(vaultContract.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.vaultTokenSymbol);\n        }\n\n        emit Unstaked(\n            msg.sender,\n            stakingDetails.tokenSymbol,\n            stakingDetails.vaultAddress,\n            depositToken.balanceOf(address(this)) - initialDepositTokenBalance,\n            stakingDetails.amount,\n            block.timestamp);\n    }\n\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of the vault token\n        * @param depositTokenAmount how much of deposit token was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param vault address of the vault token\n        * @param asset the asset that was unstaked\n        * @param depositTokenAmount how much deposit token was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n}"
    },
    "contracts/facets/avalanche/YieldYakSwapFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: e9e05b6e564514c1bcd1b5e49f5e45250e72bf98;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../interfaces/facets/IYieldYakRouter.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport \"../../interfaces/ITokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract YieldYakSwapFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address;\n\n    struct SwapTokensDetails {\n        bytes32 tokenSoldSymbol;\n        bytes32 tokenBoughtSymbol;\n        IERC20Metadata soldToken;\n        IERC20Metadata boughtToken;\n        uint256 initialSoldTokenBalance;\n        uint256 initialBoughtTokenBalance;\n    }\n\n    function getInitialTokensDetails(address _soldTokenAddress, address _boughtTokenAddress) internal returns (SwapTokensDetails memory){\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        if (_boughtTokenAddress == 0xaE64d55a6f09E4263421737397D1fdFA71896a69) {\n            _boughtTokenAddress = 0x9e295B5B976a184B14aD8cd72413aD846C299660;\n        }\n\n        if (_soldTokenAddress == 0x9e295B5B976a184B14aD8cd72413aD846C299660) {\n            _soldTokenAddress = 0xaE64d55a6f09E4263421737397D1fdFA71896a69;\n        }\n\n        bytes32 _tokenSoldSymbol = tokenManager.tokenAddressToSymbol(_soldTokenAddress);\n        bytes32 _tokenBoughtSymbol = tokenManager.tokenAddressToSymbol(_boughtTokenAddress);\n\n        require(tokenManager.isTokenAssetActive(_boughtTokenAddress), \"Asset not supported.\");\n\n        IERC20Metadata _soldToken = IERC20Metadata(_soldTokenAddress);\n        IERC20Metadata _boughtToken = IERC20Metadata(_boughtTokenAddress);\n\n        return SwapTokensDetails({\n            tokenSoldSymbol: _tokenSoldSymbol,\n            tokenBoughtSymbol: _tokenBoughtSymbol,\n            soldToken: _soldToken,\n            boughtToken: _boughtToken,\n            initialSoldTokenBalance: _soldToken.balanceOf(address(this)),\n            initialBoughtTokenBalance: _boughtToken.balanceOf(address(this))\n        });\n    }\n\n    function yakSwap(uint256 _amountIn, uint256 _amountOut, address[] calldata _path, address[] calldata _adapters) external nonReentrant onlyOwner noBorrowInTheSameBlock recalculateAssetsExposure remainsSolvent{\n        SwapTokensDetails memory swapTokensDetails = getInitialTokensDetails(_path[0], _path[_path.length - 1]);\n\n        _amountIn = Math.min(swapTokensDetails.soldToken.balanceOf(address(this)), _amountIn);\n        require(_amountIn > 0, \"Amount of tokens to sell has to be greater than 0\");\n\n        address(swapTokensDetails.soldToken).safeApprove(YY_ROUTER(), 0);\n        address(swapTokensDetails.soldToken).safeApprove(YY_ROUTER(), _amountIn);\n\n        IYieldYakRouter router = IYieldYakRouter(YY_ROUTER());\n\n        IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\n            amountIn: _amountIn,\n            amountOut: _amountOut,\n            path: _path,\n            adapters: _adapters\n        });\n\n        router.swapNoSplit(trade, address(this), 0);\n\n        // Add asset to ownedAssets\n        if (swapTokensDetails.boughtToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(swapTokensDetails.tokenBoughtSymbol, address(swapTokensDetails.boughtToken));\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\n        if (swapTokensDetails.soldToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(swapTokensDetails.tokenSoldSymbol);\n        }\n\n        uint256 boughtTokenFinalAmount = swapTokensDetails.boughtToken.balanceOf(address(this)) - swapTokensDetails.initialBoughtTokenBalance;\n        require(boughtTokenFinalAmount >= _amountOut, \"Insufficient output amount\");\n\n        emit Swap(\n            msg.sender,\n            swapTokensDetails.tokenSoldSymbol,\n            swapTokensDetails.tokenBoughtSymbol,\n            swapTokensDetails.initialSoldTokenBalance - swapTokensDetails.soldToken.balanceOf(address(this)),\n            boughtTokenFinalAmount,\n            block.timestamp\n        );\n\n    }\n\n    function YY_ROUTER() internal virtual pure returns (address) {\n        return 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after a swap of assets\n     * @param user the address of user making the purchase\n     * @param soldAsset sold by the user\n     * @param boughtAsset bought by the user\n     * @param amountSold amount of tokens sold\n     * @param amountBought amount of tokens bought\n     * @param timestamp time of the swap\n     **/\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 amountSold, uint256 amountBought, uint256 timestamp);\n}\n"
    },
    "contracts/facets/celo/UbeswapDEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2DEXFacet.sol\";\n\ncontract UbeswapDEXFacet is UniswapV2DEXFacet {\n\n    /**\n    * Swaps one asset to another\n    * @dev This function uses the redstone-evm-connector\n    * @param _soldAsset asset to be sold\n    * @param _boughtAsset asset to be bought\n    * @param _exactSold exact amount of asset to be sold\n    * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapUbeswap(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public onlyOwner returns (uint256[] memory) {\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public override returns (address) {\n        return 0xd8edCc7162281abFFbd65d4a1b260ef1275e1EAc;\n    }\n}"
    },
    "contracts/facets/DiamondCutFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\ncontract DiamondCutFacet is IDiamondCut {\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external override paused {\n        DiamondStorageLib.enforceIsContractOwner();\n        DiamondStorageLib.diamondCut(_diamondCut, _init, _calldata);\n    }\n\n    function unpause() external override {\n        DiamondStorageLib.enforceIsPauseAdmin();\n\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        require(!ds._active, \"ProtocolUpgrade: already unpaused.\");\n        ds._active = true;\n    }\n\n    function pause() external override {\n        DiamondStorageLib.enforceIsPauseAdmin();\n\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        require(ds._active, \"ProtocolUpgrade: already paused.\");\n        ds._active = false;\n    }\n\n    modifier paused() {\n        DiamondStorageLib.DiamondStorage storage ds;\n        bytes32 position = DiamondStorageLib.DIAMOND_STORAGE_POSITION;\n        // get diamond storage\n        assembly {\n            ds.slot := position\n        }\n        require(!ds._active, \"ProtocolUpgrade: not paused.\");\n\n        _;\n    }\n}"
    },
    "contracts/facets/DiamondInit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n*\n* Implementation of a diamond.\n/******************************************************************************/\n\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport {IDiamondLoupe} from \"../interfaces/IDiamondLoupe.sol\";\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport {IERC173} from \"../interfaces/IERC173.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n// It is exapected that this contract is customized if you want to deploy your diamond\n// with data from a deployment script. Use the init function to initialize state variables\n// of your diamond. Add parameters to the init funciton if you need to.\n\ncontract DiamondInit {\n\n    // You can add parameters to this function in order to pass in \n    // data to set your own state variables\n    function init() external {\n        // DiamondStorage\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n\n        require(!ds._initialized, \"DiamondInit: contract is already initialized\");\n\n        // adding ERC165 data\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\n\n        DiamondStorageLib.setContractOwner(msg.sender);\n        ds._initialized = true;\n        ds._active = false;\n\n        // add your own state variables \n        // EIP-2535 specifies that the `diamondCut` function takes two optional \n        // arguments: address _init and bytes calldata _calldata\n        // These arguments are used to execute an arbitrary function using delegatecall\n        // in order to set state variables in the diamond during deployment or an upgrade\n        // More info here: https://eips.ethereum.org/EIPS/eip-2535#diamond-interface \n    }\n\n\n}"
    },
    "contracts/facets/DiamondLoupeFacet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\nimport {DiamondStorageLib} from  \"../lib/DiamondStorageLib.sol\";\nimport {IDiamondLoupe} from \"../interfaces/IDiamondLoupe.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n// The functions in DiamondLoupeFacet MUST be added to a diamond.\n// The EIP-2535 Diamond standard requires these functions.\n\ncontract DiamondLoupeFacet is IDiamondLoupe, IERC165 {\n    // Diamond Loupe Functions\n    ////////////////////////////////////////////////////////////////////\n    /// These functions are expected to be called frequently by tools.\n    //\n    // struct Facet {\n    //     address facetAddress;\n    //     bytes4[] functionSelectors;\n    // }\n\n    /// @notice Gets all facets and their selectors.\n    /// @return facets_ Facet\n    function facets() external override view returns (Facet[] memory facets_) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        uint256 numFacets = ds.facetAddresses.length;\n        facets_ = new Facet[](numFacets);\n        for (uint256 i; i < numFacets; i++) {\n            address facetAddress_ = ds.facetAddresses[i];\n            facets_[i].facetAddress = facetAddress_;\n            facets_[i].functionSelectors = ds.facetFunctionSelectors[facetAddress_].functionSelectors;\n        }\n    }\n\n    /// @notice Gets all the function selectors provided by a facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external override view returns (bytes4[] memory facetFunctionSelectors_) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        facetFunctionSelectors_ = ds.facetFunctionSelectors[_facet].functionSelectors;\n    }\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external override view returns (address[] memory facetAddresses_) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        facetAddresses_ = ds.facetAddresses;\n    }\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external override view returns (address facetAddress_) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        facetAddress_ = ds.selectorToFacetAndPosition[_functionSelector].facetAddress;\n    }\n\n    // This implements ERC-165.\n    function supportsInterface(bytes4 _interfaceId) external override view returns (bool) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        return ds.supportedInterfaces[_interfaceId];\n    }\n}"
    },
    "contracts/facets/HealthMeterFacetProd.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: df6ee60ba901a98a553b7dba554089edd38b6f12;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\";\nimport \"../interfaces/ITokenManager.sol\";\nimport \"../Pool.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract HealthMeterFacetProd is AvalancheDataServiceConsumerBase {\n    struct AssetPrice {\n        bytes32 asset;\n        uint256 price;\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\n    **/\n    function _getDebtAssets() internal view returns(bytes32[] memory result) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        result = tokenManager.getAllPoolAssets();\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function _getOwnedAssetsWithNativePrices() internal view returns(AssetPrice[] memory result) {\n        bytes32[] memory assetsEnriched = _getOwnedAssetsWithNative();\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\n\n        result = new AssetPrice[](assetsEnriched.length);\n\n        for(uint i; i<assetsEnriched.length; i++){\n            result[i] = AssetPrice({\n                asset: assetsEnriched[i],\n                price: prices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns list of owned assets that always included NativeToken at index 0\n    **/\n    function _getOwnedAssetsWithNative() internal view returns(bytes32[] memory){\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\n\n        uint256 lastUsedIndex;\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\n\n        for(uint i=0; i< ownedAssets.length; i++){\n            if(ownedAssets[i] != nativeTokenSymbol){\n                lastUsedIndex += 1;\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\n            }\n        }\n        return assetsWithNative;\n    }\n\n    /**\n     * Returns current health meter (0% - 100%) associated with the loan\n     * @dev This function uses the redstone-evm-connector\n     */\n    function getHealthMeter() public view returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = _getOwnedAssetsWithNativePrices();\n\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        uint256 weightedCollateral;\n        uint256 weightedCollateralPlus = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\n        uint256 weightedCollateralMinus = 0;\n        uint256 weightedBorrowed = 0;\n        uint256 borrowed = 0;\n\n        for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n            Pool pool;\n            try tokenManager.getPoolAddress(ownedAssetsPrices[i].asset) returns (address poolAddress) {\n                pool = Pool(poolAddress);\n            } catch {\n                continue;\n            }\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n            uint256 _balance = token.balanceOf(address(this));\n            uint256 _borrowed = pool.getBorrowed(address(this));\n            if (_balance > _borrowed) {\n                weightedCollateralPlus = weightedCollateralPlus + (ownedAssetsPrices[i].price * (_balance - _borrowed) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\n            } else {\n                weightedCollateralMinus = weightedCollateralMinus + (ownedAssetsPrices[i].price * (_borrowed - _balance) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\n            }\n            weightedBorrowed = weightedBorrowed + (ownedAssetsPrices[i].price * pool.getBorrowed(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\n            borrowed = borrowed + (ownedAssetsPrices[i].price * pool.getBorrowed(address(this)) / 1e8);\n        }\n        if (weightedCollateralPlus > weightedCollateralMinus) {\n            weightedCollateral = weightedCollateralPlus - weightedCollateralMinus;\n        }\n\n        uint256 multiplier = 100 * 1e18; // 18 decimal points\n\n        if (borrowed == 0) return multiplier;\n\n        if (weightedCollateral > 0 && weightedCollateral + weightedBorrowed > borrowed) {\n            return (weightedCollateral + weightedBorrowed - borrowed) * multiplier / weightedCollateral;\n        }\n\n        return 0;\n    }\n}\n"
    },
    "contracts/facets/mock/AssetsOperationsMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../AssetsOperationsFacet.sol\";\n\ncontract AssetsOperationsMock is AssetsOperationsFacet {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /**\n    * Withdraws an amount of a defined asset from the loan\n    * This method does not perform any solvency check hence allows the user to withdraw whatever is available in the loan\n    * @dev This function uses the redstone-evm-connector\n    * @param _withdrawnAsset asset to be withdrawn\n    * @param _amount to be withdrawn\n    **/\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) public virtual override onlyOwner nonReentrant{\n        IERC20Metadata token = getERC20TokenInstance(_withdrawnAsset, true);\n        require(getBalance(_withdrawnAsset) >= _amount, \"There is not enough funds to withdraw\");\n\n        address(token).safeTransfer(msg.sender, _amount);\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_withdrawnAsset);\n        }\n\n        emit Withdrawn(msg.sender, _withdrawnAsset, _amount, block.timestamp);\n    }\n}\n"
    },
    "contracts/facets/mock/HealthMeterFacetMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/mocks/AuthorisedMockSignersBase.sol\";\nimport \"../HealthMeterFacetProd.sol\";\n\ncontract HealthMeterFacetMock is HealthMeterFacetProd, AuthorisedMockSignersBase {\n    uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 15 minutes; // Test sometimes be slow\n\n    uint256 internal constant MIN_TIMESTAMP_MILLISECONDS = 1654353400000;\n\n    error TimestampIsNotValid();\n\n    function getAuthorisedSignerIndex(address signerAddress)\n    public\n    view\n    virtual\n    override\n    returns (uint8)\n    {\n        return getAuthorisedMockSignerIndex(signerAddress);\n    }\n\n    function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual override {\n        if (receivedTimestampMilliseconds < MIN_TIMESTAMP_MILLISECONDS) {\n            revert TimestampIsNotValid();\n        }\n    }\n}\n"
    },
    "contracts/facets/mock/MockSolvencyFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../SolvencyFacetProd.sol\";\n\ncontract MockSolvencyFacet is SolvencyFacetProd {}\n"
    },
    "contracts/facets/mock/MockSolvencyFacetAlwaysSolvent.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ncontract MockSolvencyFacetAlwaysSolvent {\n    /**\n    * Always returns true - used in test suits\n    **/\n    function isSolvent() public pure returns (bool) {\n        return true;\n    }\n\n    function canRepayDebtFully() external view returns (bool) {\n        return true;\n    }\n}\n"
    },
    "contracts/facets/mock/SolvencyFacetMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/mocks/AuthorisedMockSignersBase.sol\";\nimport \"../SolvencyFacetProd.sol\";\n\ncontract SolvencyFacetMock is SolvencyFacetProd, AuthorisedMockSignersBase {\n    uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 15 minutes; // Test sometimes be slow\n\n    uint256 internal constant MIN_TIMESTAMP_MILLISECONDS = 1654353400000;\n\n    error TimestampIsNotValid();\n\n    function getAuthorisedSignerIndex(address signerAddress)\n    public\n    view\n    virtual\n    override\n    returns (uint8)\n    {\n        return getAuthorisedMockSignerIndex(signerAddress);\n    }\n\n    function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual override {\n        if (receivedTimestampMilliseconds < MIN_TIMESTAMP_MILLISECONDS) {\n            revert TimestampIsNotValid();\n        }\n    }\n}\n"
    },
    "contracts/facets/mock/VectorFinanceFacetMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: bdee015765a0dd3731205df659aae576d57dd473;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../interfaces/IVectorFinanceStaking.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/IStakingPositions.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\nimport \"../../interfaces/IVectorFinanceMainStaking.sol\";\n//This path is updated during deployment\nimport \"../../lib/local/DeploymentConstants.sol\";\n\ncontract VectorFinanceFacetMock is ReentrancyGuardKeccak, OnlyOwnerOrInsolvent {\n    using TransferHelper for address;\n\n    // CONSTANTS\n\n    address private constant VectorMainStaking = 0x8B3d9F0017FA369cD8C164D0Cc078bf4cA588aE5;\n\n    // PUBLIC FUNCTIONS\n\n    function vectorStakeUSDC1(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0x06f01502327De1c37076Bea4689a7e44279155e9,\n            symbol: \"USDC\",\n            identifier: \"VF_USDC_MAIN\",\n            balanceSelector: this.vectorUSDC1Balance.selector,\n            unstakeSelector: this.vectorUnstakeUSDC1.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeUSDC1(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0x06f01502327De1c37076Bea4689a7e44279155e9,\n            symbol: \"USDC\",\n            identifier: \"VF_USDC_MAIN\",\n            balanceSelector: this.vectorUSDC1Balance.selector,\n            unstakeSelector: this.vectorUnstakeUSDC1.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorUSDC1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(getAssetPoolHelper(0x06f01502327De1c37076Bea4689a7e44279155e9));\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeWAVAX1(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            symbol: \"AVAX\",\n            identifier: \"VF_AVAX_SAVAX\",\n            balanceSelector: this.vectorWAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeWAVAX1.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeWAVAX1(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7,\n            symbol: \"AVAX\",\n            identifier: \"VF_AVAX_SAVAX\",\n            balanceSelector: this.vectorWAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeWAVAX1.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorWAVAX1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(getAssetPoolHelper(0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7));\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeSAVAX1(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE,\n            symbol: \"sAVAX\",\n            identifier: \"VF_SAVAX_MAIN\",\n            balanceSelector: this.vectorSAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeSAVAX1.selector\n        });\n        stakeToken(amount, position);\n    }\n\n    function vectorUnstakeSAVAX1(uint256 amount, uint256 minAmount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            asset: 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE,\n            symbol: \"sAVAX\",\n            identifier: \"VF_SAVAX_MAIN\",\n            balanceSelector: this.vectorSAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeSAVAX1.selector\n        });\n        unstakeToken(amount, minAmount, position);\n    }\n\n    function vectorSAVAX1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(getAssetPoolHelper(0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE));\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    // INTERNAL FUNCTIONS\n    /**\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function stakeToken(uint256 amount, IStakingPositions.StakedPosition memory position) internal\n    onlyOwner nonReentrant  recalculateAssetsExposure remainsSolvent {\n        IVectorFinanceStaking poolHelper = getAssetPoolHelper(position.asset);\n        IERC20Metadata stakedToken = getERC20TokenInstance(position.symbol, false);\n        uint256 initialReceiptTokenBalance = poolHelper.balance(address(this));\n\n        amount = Math.min(stakedToken.balanceOf(address(this)), amount);\n        require(amount > 0, \"Cannot stake 0 tokens\");\n\n        address(stakedToken).safeApprove(VectorMainStaking, 0);\n        address(stakedToken).safeApprove(VectorMainStaking, amount);\n\n        poolHelper.deposit(amount);\n\n        DiamondStorageLib.addStakedPosition(position);\n\n        if (stakedToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(position.symbol);\n        }\n\n        emit Staked(\n            msg.sender,\n            position.symbol,\n            address(poolHelper),\n            amount,\n            poolHelper.balance(address(this)) - initialReceiptTokenBalance,\n            block.timestamp\n        );\n    }\n\n    /**\n    * Unstakes token from Vector Finance\n    * IMPORTANT: This method can be used by anyone when a loan is insolvent. This operation can be costly, that is why\n    * if needed it has to be performed in a separate transaction to liquidation\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function unstakeToken(uint256 amount, uint256 minAmount, IStakingPositions.StakedPosition memory position) internal\n    onlyOwnerOrInsolvent recalculateAssetsExposure nonReentrant returns (uint256 unstaked) {\n        IVectorFinanceStaking poolHelper = getAssetPoolHelper(position.asset);\n        IERC20Metadata unstakedToken = getERC20TokenInstance(position.symbol, false);\n\n        require(amount > 0, \"Cannot unstake 0 tokens\");\n\n        amount = Math.min(poolHelper.balance(address(this)), amount);\n\n        uint256 balance = unstakedToken.balanceOf(address(this));\n\n        poolHelper.withdraw(amount, minAmount);\n\n        uint256 newBalance = unstakedToken.balanceOf(address(this));\n\n        if (poolHelper.balance(address(this)) == 0) {\n            DiamondStorageLib.removeStakedPosition(position.identifier);\n        }\n        DiamondStorageLib.addOwnedAsset(position.symbol, address(unstakedToken));\n\n        emit Unstaked(\n            msg.sender,\n            position.symbol,\n            address(poolHelper),\n            newBalance - balance,\n            amount,\n            block.timestamp\n        );\n\n        _handleRewards(poolHelper);\n\n        return newBalance - balance;\n    }\n\n    function _handleRewards(IVectorFinanceStaking stakingContract) internal {\n        IVectorRewarder rewarder = stakingContract.rewarder();\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        uint256 index;\n\n        // We do not want to revert in case of unsupported rewardTokens in order not to block the unstaking/liquidation process\n        while(true) {\n            // No access to the length of rewardTokens[]. Need to iterate until indexOutOfRange\n            (bool success, bytes memory result) = address(rewarder).call(abi.encodeWithSignature(\"rewardTokens(uint256)\", index));\n            if(!success) {\n                break;\n            }\n            address rewardToken = abi.decode(result, (address));\n            bytes32 rewardTokenSymbol = tokenManager.tokenAddressToSymbol(rewardToken);\n            if(rewardTokenSymbol == \"\") {\n                emit UnsupportedRewardToken(msg.sender, rewardToken, block.timestamp);\n                index += 1;\n                continue;\n            }\n            if(IERC20(rewardToken).balanceOf(address(this)) > 0) {\n                DiamondStorageLib.addOwnedAsset(rewardTokenSymbol, rewardToken);\n            }\n            index += 1;\n        }\n    }\n\n    function getAssetPoolHelper(address asset) internal view returns(IVectorFinanceStaking){\n        IVectorFinanceMainStaking mainStaking = IVectorFinanceMainStaking(VectorMainStaking);\n        return IVectorFinanceStaking(mainStaking.getPoolInfo(asset).helper);\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much of deposit token was staked\n        * @param receiptTokenAmount how much of receipt token was received\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of receipt token\n        * @param depositTokenAmount how much deposit token was received\n        * @param receiptTokenAmount how much receipt token was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user collects rewards in tokens that are not supported\n        * @param user the address collecting rewards\n        * @param asset reward token that was collected\n        * @param timestamp of collecting rewards\n    **/\n    event UnsupportedRewardToken(address indexed user, address indexed asset, uint256 timestamp);\n}"
    },
    "contracts/facets/OwnershipFacet.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport { DiamondStorageLib } from \"../lib/DiamondStorageLib.sol\";\nimport \"../SmartLoansFactory.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract OwnershipFacet {\n    function proposeOwnershipTransfer(address _newOwner) external {\n        DiamondStorageLib.enforceIsContractOwner();\n        require(_newOwner != msg.sender, \"Can't propose oneself as a contract owner\");\n        require(SmartLoansFactory(DeploymentConstants.getSmartLoansFactoryAddress()).getLoanForOwner(_newOwner) == address(0),\n            \"Can't propose an address that already has a loan\");\n        DiamondStorageLib.setProposedOwner(_newOwner);\n\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\n    }\n\n    function acceptOwnership() external {\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \"Only a proposed user can accept ownership\");\n        DiamondStorageLib.setContractOwner(msg.sender);\n        DiamondStorageLib.setProposedOwner(address(0));\n        SmartLoansFactory(DeploymentConstants.getSmartLoansFactoryAddress()).changeOwnership(msg.sender);\n\n        emit OwnershipProposalAccepted(msg.sender);\n    }\n\n    function owner() external view returns (address owner_) {\n        owner_ = DiamondStorageLib.contractOwner();\n    }\n\n    function proposedOwner() external view returns (address proposedOwner_) {\n        proposedOwner_ = DiamondStorageLib.proposedOwner();\n    }\n\n    function pauseAdmin() external view returns (address pauseAdmin) {\n        pauseAdmin = DiamondStorageLib.pauseAdmin();\n    }\n\n    function proposedPauseAdmin() external view returns (address proposedPauseAdmin) {\n        proposedPauseAdmin = DiamondStorageLib.proposedPauseAdmin();\n    }\n\n    /**\n     * @dev emitted after creating a ownership transfer proposal by the owner\n     * @param owner address of the current owner\n     * @param proposed address of the proposed owner\n     **/\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\n\n    /**\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\n     * @param newOwner address of the new owner\n     **/\n    event OwnershipProposalAccepted(address indexed newOwner);\n}"
    },
    "contracts/facets/RecoveryFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 4da64a8a04844045e51b88c6202064e16ea118aa;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../interfaces/ITokenManager.sol\";\nimport \"../interfaces/IAddressProvider.sol\";\nimport \"../interfaces/IVectorFinanceStaking.sol\";\nimport \"../interfaces/IVectorFinanceMainStaking.sol\";\n\n//this path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract RecoveryFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    // CONSTANTS\n\n    address private constant VectorMainStaking =\n        0x8B3d9F0017FA369cD8C164D0Cc078bf4cA588aE5;\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * Get refunds from the recovery contract\n     * @param _token token to be refunded\n     * @param _amount amount refunded\n     **/\n    function notifyRefund(address _token, uint256 _amount) external onlyRC {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        bytes32 asset = tokenManager.tokenAddressToSymbol(_token);\n        require(asset != bytes32(0), \"Asset not supported.\");\n\n        IERC20Metadata token = IERC20Metadata(_token);\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        DiamondStorageLib.addOwnedAsset(asset, _token);\n\n        tokenManager.increaseProtocolExposure(\n            asset,\n            (_amount * 1e18) / 10 ** token.decimals()\n        );\n\n        emit RefundReceived(_token, _amount);\n    }\n\n    /**\n     * Emergency withdraws given assets from the loan\n     * @dev This function uses the redstone-evm-connector\n     * @param _asset asset to be withdrawn\n     * @return _amount amount withdrawn\n     **/\n    function emergencyWithdraw(\n        bytes32 _asset\n    ) external onlyRC returns (uint256 _amount) {\n        if (_asset == \"GLP\") {\n            _amount = _withdrawGLP();\n        } else {\n            _amount = _withdraw(_asset);\n        }\n    }\n\n    function _withdraw(bytes32 _asset) internal returns (uint256 _amount) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        if (\n            _asset == \"VF_USDC_MAIN_AUTO\" ||\n            _asset == \"VF_USDT_MAIN_AUTO\" ||\n            _asset == \"VF_AVAX_SAVAX_AUTO\" ||\n            _asset == \"VF_SAVAX_MAIN_AUTO\"\n        ) {\n            IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib\n                .stakedPositions();\n            uint256 positionsLength = positions.length;\n            for (uint256 i; i != positionsLength; ++i) {\n                IStakingPositions.StakedPosition memory position = positions[i];\n                if (position.identifier != _asset) continue;\n\n                positions[i] = positions[positionsLength - 1];\n                positions.pop();\n\n                IVectorFinanceCompounder compounder = _getAssetPoolHelper(\n                    position.asset\n                ).compounder();\n                uint256 shares = compounder.balanceOf(address(this));\n                uint256 stakedBalance = compounder.getDepositTokensForShares(shares);\n\n                _amount = compounder.depositTracking(address(this));\n                address(compounder).safeTransfer(msg.sender, _amount);\n\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, stakedBalance * 1e18 / 10**decimals);\n\n                break;\n            }\n        } else {\n            IERC20Metadata token = getERC20TokenInstance(_asset, true);\n            _amount = token.balanceOf(address(this));\n\n            address(token).safeTransfer(msg.sender, _amount);\n            DiamondStorageLib.removeOwnedAsset(_asset);\n            tokenManager.decreaseProtocolExposure(\n                _asset,\n                (_amount * 1e18) / 10 ** token.decimals()\n            );\n        }\n\n        emit EmergencyWithdrawn(_asset, _amount, block.timestamp);\n    }\n\n    function _withdrawGLP() internal returns (uint256 _amount) {\n        IERC20Metadata token = getERC20TokenInstance(\"GLP\", true);\n        IERC20Metadata stakedGlpToken = IERC20Metadata(\n            0xaE64d55a6f09E4263421737397D1fdFA71896a69\n        );\n        _amount = token.balanceOf(address(this));\n\n        address(stakedGlpToken).safeTransfer(msg.sender, _amount);\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(\"GLP\");\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.decreaseProtocolExposure(\n            \"GLP\",\n            (_amount * 1e18) / 10 ** token.decimals()\n        );\n\n        emit EmergencyWithdrawn(\"GLP\", _amount, block.timestamp);\n    }\n\n    function _getAssetPoolHelper(\n        address asset\n    ) internal view returns (IVectorFinanceStaking) {\n        IVectorFinanceMainStaking mainStaking = IVectorFinanceMainStaking(\n            VectorMainStaking\n        );\n        return IVectorFinanceStaking(mainStaking.getPoolInfo(asset).helper);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyRC() {\n        IAddressProvider addressProvider = IAddressProvider(\n            DeploymentConstants.getAddressProvider()\n        );\n        require(\n            msg.sender == addressProvider.getRecoveryContract(),\n            \"msg.sender != RC\"\n        );\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after the funds are withdrawn from the loan\n     * @param asset withdrawn by a user\n     * @param amount of funds withdrawn\n     * @param timestamp of the withdrawal\n     **/\n    event EmergencyWithdrawn(\n        bytes32 indexed asset,\n        uint256 amount,\n        uint256 timestamp\n    );\n\n    /**\n     * @dev emitted after refund is received\n     * @param token that is refunded\n     * @param amount of the refund\n     */\n    event RefundReceived(address token, uint256 amount);\n}\n"
    },
    "contracts/facets/SmartLoanLiquidationFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 238badc31ae1a0b7573b2f51c2daf669cf50df96;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../Pool.sol\";\nimport \"../interfaces/ITokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\nimport \"./SolvencyFacetProd.sol\";\nimport \"../SmartLoanDiamondBeacon.sol\";\n\ncontract SmartLoanLiquidationFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\n    uint256 private constant _MAX_HEALTH_AFTER_LIQUIDATION = 1.042e18;\n\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\n    uint256 private constant _MAX_LIQUIDATION_BONUS = 100;\n\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /** @param assetsToRepay names of tokens to be repaid to pools\n    /** @param amountsToRepay amounts of tokens to be repaid to pools\n      * @param liquidationBonus per mille bonus for liquidator. Must be smaller or equal to getMaxLiquidationBonus(). Defined for\n      * liquidating loans where debt ~ total value\n      * @param allowUnprofitableLiquidation allows performing liquidation of bankrupt loans (total value smaller than debt)\n    **/\n\n    struct LiquidationConfig {\n        bytes32[] assetsToRepay;\n        uint256[] amountsToRepay;\n        uint256 liquidationBonusPercent;\n        bool allowUnprofitableLiquidation;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n      * Returns maximum acceptable health ratio after liquidation\n      **/\n    function getMaxHealthAfterLiquidation() public pure returns (uint256) {\n        return _MAX_HEALTH_AFTER_LIQUIDATION;\n    }\n\n    /**\n      * Returns maximum acceptable liquidation bonus (bonus is provided by a liquidator)\n      **/\n    function getMaxLiquidationBonus() public pure returns (uint256) {\n        return _MAX_LIQUIDATION_BONUS;\n    }\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    function whitelistLiquidators(address[] memory _liquidators) external onlyOwner {\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\n\n        for(uint i; i<_liquidators.length; i++){\n            ls.canLiquidate[_liquidators[i]] = true;\n            emit LiquidatorWhitelisted(_liquidators[i], msg.sender, block.timestamp);\n        }\n    }\n\n    function delistLiquidators(address[] memory _liquidators) external onlyOwner {\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\n        for(uint i; i<_liquidators.length; i++){\n            ls.canLiquidate[_liquidators[i]] = false;\n            emit LiquidatorDelisted(_liquidators[i], msg.sender, block.timestamp);\n        }\n    }\n\n    function isLiquidatorWhitelisted(address _liquidator) public view returns(bool){\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\n        return ls.canLiquidate[_liquidator];\n    }\n\n    /**\n    * This function can be accessed by any user when Prime Account is insolvent or bankrupt and repay part of the loan\n    * with his approved tokens.\n    * BE CAREFUL: in contrast to liquidateLoan() method, this one doesn't necessarily return tokens to liquidator, nor give him\n    * a bonus. It's purpose is to bring the loan to a solvent position even if it's unprofitable for liquidator.\n    * @dev This function uses the redstone-evm-connector\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\n    * @param _liquidationBonusPercent per mille bonus for liquidator. Must be lower than or equal to getMaxliquidationBonus()\n    **/\n    function unsafeLiquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonusPercent) external payable onlyWhitelistedLiquidators nonReentrant {\n        liquidate(\n            LiquidationConfig({\n                assetsToRepay : assetsToRepay,\n                amountsToRepay : amountsToRepay,\n                liquidationBonusPercent : _liquidationBonusPercent,\n                allowUnprofitableLiquidation : true\n            })\n        );\n    }\n\n    /**\n    * This function can be accessed by any user when Prime Account is insolvent and liquidate part of the loan\n    * with his approved tokens.\n    * A liquidator has to approve adequate amount of tokens to repay debts to liquidity pools if\n    * there is not enough of them in a SmartLoan. For that he will receive the corresponding amount from SmartLoan\n    * with the same USD value + bonus.\n    * @dev This function uses the redstone-evm-connector\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\n    * @param _liquidationBonusPercent per mille bonus for liquidator. Must be lower than or equal to  getMaxLiquidationBonus()\n    **/\n    function liquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonusPercent) external payable onlyWhitelistedLiquidators nonReentrant {\n        liquidate(\n            LiquidationConfig({\n                assetsToRepay : assetsToRepay,\n                amountsToRepay : amountsToRepay,\n                liquidationBonusPercent : _liquidationBonusPercent,\n                allowUnprofitableLiquidation : false\n            })\n        );\n    }\n\n    /**\n    * This function can be accessed when Prime Account is insolvent and perform a partial liquidation of the loan\n    * (selling assets, closing positions and repaying debts) to bring the account back to a solvent state. At the end\n    * of liquidation resulting solvency of account is checked to make sure that the account is between maximum and minimum\n    * solvency.\n    * To diminish the potential effect of manipulation of liquidity pools by a liquidator, there are no swaps performed\n    * during liquidation.\n    * @dev This function uses the redstone-evm-connector\n    * @param config configuration for liquidation\n    **/\n    function liquidate(LiquidationConfig memory config) internal recalculateAssetsExposure{\n        SolvencyFacetProd.CachedPrices memory cachedPrices = _getAllPricesForLiquidation(config.assetsToRepay);\n        \n        uint256 initialTotal = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices); \n        uint256 initialDebt = _getDebtWithPrices(cachedPrices.debtAssetsPrices); \n\n        require(config.liquidationBonusPercent <= getMaxLiquidationBonus(), \"Defined liquidation bonus higher than max. value\");\n        require(!_isSolventWithPrices(cachedPrices), \"Cannot sellout a solvent account\");\n\n        //healing means bringing a bankrupt loan to a state when debt is smaller than total value again\n        bool healingLoan = initialDebt > initialTotal;\n        require(!healingLoan || config.allowUnprofitableLiquidation, \"Trying to liquidate bankrupt loan\");\n\n\n        uint256 suppliedInUSD;\n        uint256 repaidInUSD;\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        for (uint256 i = 0; i < config.assetsToRepay.length; i++) {\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(config.assetsToRepay[i], true));\n\n            uint256 balance = token.balanceOf(address(this));\n            uint256 supplyAmount;\n\n            if (balance < config.amountsToRepay[i]) {\n                supplyAmount = config.amountsToRepay[i] - balance;\n            }\n\n            if (supplyAmount > 0) {\n                address(token).safeTransferFrom(msg.sender, address(this), supplyAmount);\n                // supplyAmount is denominated in token.decimals(). Price is denominated in 1e8. To achieve 1e18 decimals we need to multiply by 1e10.\n                suppliedInUSD += supplyAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\n            }\n\n            Pool pool = Pool(tokenManager.getPoolAddress(config.assetsToRepay[i]));\n\n            uint256 repayAmount = Math.min(pool.getBorrowed(address(this)), config.amountsToRepay[i]);\n\n            address(token).safeApprove(address(pool), 0);\n            address(token).safeApprove(address(pool), repayAmount);\n\n            // repayAmount is denominated in token.decimals(). Price is denominated in 1e8. To achieve 1e18 decimals we need to multiply by 1e10.\n            repaidInUSD += repayAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\n\n            pool.repay(repayAmount);\n\n            if (token.balanceOf(address(this)) == 0) {\n                DiamondStorageLib.removeOwnedAsset(config.assetsToRepay[i]);\n            }\n\n            emit LiquidationRepay(msg.sender, config.assetsToRepay[i], repayAmount, block.timestamp);\n        }\n\n        bytes32[] memory assetsOwned = DeploymentConstants.getAllOwnedAssets();\n        uint256 bonusInUSD;\n\n        //after healing bankrupt loan (debt > total value), no tokens are returned to liquidator\n\n        bonusInUSD = repaidInUSD * config.liquidationBonusPercent / DeploymentConstants.getPercentagePrecision();\n\n        //meaning returning all tokens\n        uint256 partToReturn = 10 ** 18; // 1\n        uint256 assetsValue = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\n\n        if (!healingLoan && assetsValue >= suppliedInUSD + bonusInUSD) {\n            //in that scenario we calculate how big part of token to return\n            partToReturn = (suppliedInUSD + bonusInUSD) * 10 ** 18 / assetsValue;\n        }\n\n        if(partToReturn > 0){\n            // Native token transfer\n            if (address(this).balance > 0) {\n                payable(msg.sender).safeTransferETH(address(this).balance * partToReturn / 10 ** 18);\n            }\n\n            for (uint256 i; i < assetsOwned.length; i++) {\n                IERC20Metadata token = getERC20TokenInstance(assetsOwned[i], true);\n                if(address(token) == 0x9e295B5B976a184B14aD8cd72413aD846C299660){\n                    token = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\n                }\n                uint256 balance = token.balanceOf(address(this));\n\n                if((balance * partToReturn / 10 ** 18) == 0){\n                    continue;\n                }\n\n                address(token).safeTransfer(msg.sender, balance * partToReturn / 10 ** 18);\n                emit LiquidationTransfer(msg.sender, assetsOwned[i], balance * partToReturn / 10 ** 18, block.timestamp);\n            }\n        }\n\n        uint256 health = _getHealthRatioWithPrices(cachedPrices);\n\n        if (healingLoan) {\n            require(_getDebtWithPrices(cachedPrices.debtAssetsPrices) == 0, \"Healing a loan must end up with 0 debt\");\n            require(_getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices) == 0, \"Healing a loan must end up with 0 total value\");\n        } else {\n            require(health <= getMaxHealthAfterLiquidation(), \"This operation would result in a loan with health ratio higher than Maxium Health Ratio which would put loan's owner in a risk of an unnecessarily high loss\");\n        }\n\n        require(health >= 1e18, \"This operation would not result in bringing the loan back to a solvent state\");\n\n        //TODO: include final debt and tv\n        emit Liquidated(msg.sender, healingLoan, initialTotal, initialDebt, repaidInUSD, bonusInUSD, health, block.timestamp);\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    modifier onlyWhitelistedLiquidators() {\n        // External call in order to execute this method in the SmartLoanDiamondBeacon contract storage\n        require(SmartLoanLiquidationFacet(DeploymentConstants.getDiamondAddress()).isLiquidatorWhitelisted(msg.sender), \"Only whitelisted liquidators can execute this method\");\n        _;\n    }\n\n    /**\n     * @dev emitted after a successful liquidation operation\n     * @param liquidator the address that initiated the liquidation operation\n     * @param healing was the liquidation covering the bad debt (unprofitable liquidation)\n     * @param initialTotal total value of assets before the liquidation\n     * @param initialDebt sum of all debts before the liquidation\n     * @param repayAmount requested amount (USD) of liquidation\n     * @param bonusInUSD an amount of bonus (USD) received by the liquidator\n     * @param health a new health ratio after the liquidation operation\n     * @param timestamp a time of the liquidation\n     **/\n    event Liquidated(address indexed liquidator, bool indexed healing, uint256 initialTotal, uint256 initialDebt, uint256 repayAmount, uint256 bonusInUSD, uint256 health, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are repaid to the pool during a liquidation\n     * @param liquidator the address initiating repayment\n     * @param asset asset repaid by a liquidator\n     * @param amount of repaid funds\n     * @param timestamp of the repayment\n     **/\n    event LiquidationRepay(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are sent to liquidator during liquidation\n     * @param liquidator the address initiating repayment\n     * @param asset token sent to a liquidator\n     * @param amount of sent funds\n     * @param timestamp of the transfer\n     **/\n    event LiquidationTransfer(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when a new liquidator gets whitelisted\n     * @param liquidator the address being whitelisted\n     * @param performer the address initiating whitelisting\n     * @param timestamp of the whitelisting\n     **/\n    event LiquidatorWhitelisted(address indexed liquidator, address performer, uint256 timestamp);\n\n    /**\n     * @dev emitted when a liquidator gets delisted\n     * @param liquidator the address being delisted\n     * @param performer the address initiating delisting\n     * @param timestamp of the delisting\n     **/\n    event LiquidatorDelisted(address indexed liquidator, address performer, uint256 timestamp);\n}\n\n"
    },
    "contracts/facets/SmartLoanLiquidationFacetDebug.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../Pool.sol\";\nimport \"../interfaces/ITokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\nimport \"../interfaces/facets/ISmartLoanLiquidationFacet.sol\";\n\nimport \"./SolvencyFacetProd.sol\";\nimport \"../SmartLoanDiamondBeacon.sol\";\nimport \"hardhat/console.sol\";\n\ncontract SmartLoanLiquidationFacetDebug is ReentrancyGuardKeccak, SolvencyMethods {\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\n    uint256 private constant _MAX_HEALTH_AFTER_LIQUIDATION = 1.042e18;\n\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\n    uint256 private constant _MAX_LIQUIDATION_BONUS = 100;\n\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /** @param assetsToRepay names of tokens to be repaid to pools\n    /** @param amountsToRepay amounts of tokens to be repaid to pools\n      * @param liquidationBonus per mille bonus for liquidator. Must be smaller or equal to getMaxLiquidationBonus(). Defined for\n      * liquidating loans where debt ~ total value\n      * @param allowUnprofitableLiquidation allows performing liquidation of bankrupt loans (total value smaller than debt)\n    **/\n\n    struct LiquidationConfig {\n        bytes32[] assetsToRepay;\n        uint256[] amountsToRepay;\n        uint256 liquidationBonusPercent;\n        bool allowUnprofitableLiquidation;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n      * Returns maximum acceptable health ratio after liquidation\n      **/\n    function getMaxHealthAfterLiquidation() public pure returns (uint256) {\n        return _MAX_HEALTH_AFTER_LIQUIDATION;\n    }\n\n    /**\n      * Returns maximum acceptable liquidation bonus (bonus is provided by a liquidator)\n      **/\n    function getMaxLiquidationBonus() public pure returns (uint256) {\n        return _MAX_LIQUIDATION_BONUS;\n    }\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    function whitelistLiquidators(address[] memory _liquidators) external onlyOwner {\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\n\n        for(uint i; i<_liquidators.length; i++){\n            ls.canLiquidate[_liquidators[i]] = true;\n            emit LiquidatorWhitelisted(_liquidators[i], msg.sender, block.timestamp);\n        }\n    }\n\n    function delistLiquidators(address[] memory _liquidators) external onlyOwner {\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\n        for(uint i; i<_liquidators.length; i++){\n            ls.canLiquidate[_liquidators[i]] = false;\n            emit LiquidatorDelisted(_liquidators[i], msg.sender, block.timestamp);\n        }\n    }\n\n    function isLiquidatorWhitelisted(address _liquidator) public view returns(bool){\n        DiamondStorageLib.LiquidationStorage storage ls = DiamondStorageLib.liquidationStorage();\n        return ls.canLiquidate[_liquidator];\n    }\n\n    /**\n    * This function can be accessed by any user when Prime Account is insolvent or bankrupt and repay part of the loan\n    * with his approved tokens.\n    * BE CAREFUL: in contrast to liquidateLoan() method, this one doesn't necessarily return tokens to liquidator, nor give him\n    * a bonus. It's purpose is to bring the loan to a solvent position even if it's unprofitable for liquidator.\n    * @dev This function uses the redstone-evm-connector\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\n    * @param _liquidationBonusPercent per mille bonus for liquidator. Must be lower than or equal to getMaxliquidationBonus()\n    **/\n    function unsafeLiquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonusPercent) external payable onlyWhitelistedLiquidators nonReentrant {\n        liquidate(\n            LiquidationConfig({\n                assetsToRepay : assetsToRepay,\n                amountsToRepay : amountsToRepay,\n                liquidationBonusPercent : _liquidationBonusPercent,\n                allowUnprofitableLiquidation : true\n            })\n        );\n    }\n\n    /**\n    * This function can be accessed by any user when Prime Account is insolvent and liquidate part of the loan\n    * with his approved tokens.\n    * A liquidator has to approve adequate amount of tokens to repay debts to liquidity pools if\n    * there is not enough of them in a SmartLoan. For that he will receive the corresponding amount from SmartLoan\n    * with the same USD value + bonus.\n    * @dev This function uses the redstone-evm-connector\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\n    * @param _liquidationBonusPercent per mille bonus for liquidator. Must be lower than or equal to  getMaxLiquidationBonus()\n    **/\n    function liquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonusPercent) external payable onlyWhitelistedLiquidators nonReentrant {\n        liquidate(\n            LiquidationConfig({\n                assetsToRepay : assetsToRepay,\n                amountsToRepay : amountsToRepay,\n                liquidationBonusPercent : _liquidationBonusPercent,\n                allowUnprofitableLiquidation : false\n            })\n        );\n    }\n\n    /**\n    * This function can be accessed when Prime Account is insolvent and perform a partial liquidation of the loan\n    * (selling assets, closing positions and repaying debts) to bring the account back to a solvent state. At the end\n    * of liquidation resulting solvency of account is checked to make sure that the account is between maximum and minimum\n    * solvency.\n    * To diminish the potential effect of manipulation of liquidity pools by a liquidator, there are no swaps performed\n    * during liquidation.\n    * @dev This function uses the redstone-evm-connector\n    * @param config configuration for liquidation\n    **/\n    function liquidate(LiquidationConfig memory config) internal {\n        console.log('Welcome to the liquidation sir');\n        SolvencyFacetProd.CachedPrices memory cachedPrices = _getAllPricesForLiquidation(config.assetsToRepay);\n        \n        uint256 initialTotal = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices); \n        uint256 initialDebt = _getDebtWithPrices(cachedPrices.debtAssetsPrices); \n\n        require(config.liquidationBonusPercent <= getMaxLiquidationBonus(), \"Defined liquidation bonus higher than max. value\");\n        require(!_isSolventWithPrices(cachedPrices), \"Cannot sellout a solvent account\");\n\n        //healing means bringing a bankrupt loan to a state when debt is smaller than total value again\n        bool healingLoan = initialDebt > initialTotal;\n        if(healingLoan){\n            console.log('HEALING LOAN');\n        } else{\n            console.log('NOT A HEALING LOAN');\n        }\n        console.log(initialTotal);\n        console.log(initialDebt);\n        require(!healingLoan || config.allowUnprofitableLiquidation, \"Trying to liquidate bankrupt loan\");\n\n\n        uint256 suppliedInUSD;\n        uint256 repaidInUSD;\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        console.log('1');\n\n        for (uint256 i = 0; i < config.assetsToRepay.length; i++) {\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(config.assetsToRepay[i], true));\n\n            uint256 balance = token.balanceOf(address(this));\n            uint256 supplyAmount;\n\n            if (balance < config.amountsToRepay[i]) {\n                supplyAmount = config.amountsToRepay[i] - balance;\n            }\n\n            if (supplyAmount > 0) {\n                address(token).safeTransferFrom(msg.sender, address(this), supplyAmount);\n                // supplyAmount is denominated in token.decimals(). Price is denominated in 1e8. To achieve 1e18 decimals we need to multiply by 1e10.\n                suppliedInUSD += supplyAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\n            }\n\n            Pool pool = Pool(tokenManager.getPoolAddress(config.assetsToRepay[i]));\n\n            uint256 repayAmount = Math.min(pool.getBorrowed(address(this)), config.amountsToRepay[i]);\n\n            address(token).safeApprove(address(pool), 0);\n            address(token).safeApprove(address(pool), repayAmount);\n\n            // repayAmount is denominated in token.decimals(). Price is denominated in 1e8. To achieve 1e18 decimals we need to multiply by 1e10.\n            repaidInUSD += repayAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\n\n            pool.repay(repayAmount);\n\n            if (token.balanceOf(address(this)) == 0) {\n                DiamondStorageLib.removeOwnedAsset(config.assetsToRepay[i]);\n            }\n\n            emit LiquidationRepay(msg.sender, config.assetsToRepay[i], repayAmount, block.timestamp);\n        }\n\n        console.log('2');\n\n        bytes32[] memory assetsOwned = DeploymentConstants.getAllOwnedAssets();\n        uint256 bonusInUSD;\n\n        //after healing bankrupt loan (debt > total value), no tokens are returned to liquidator\n\n        bonusInUSD = repaidInUSD * config.liquidationBonusPercent / DeploymentConstants.getPercentagePrecision();\n\n        //meaning returning all tokens\n        uint256 partToReturn = 10 ** 18; // 1\n        uint256 assetsValue = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\n\n        if (!healingLoan && assetsValue >= suppliedInUSD + bonusInUSD) {\n            //in that scenario we calculate how big part of token to return\n            partToReturn = (suppliedInUSD + bonusInUSD) * 10 ** 18 / assetsValue;\n        }\n\n        // Native token transfer\n        if (address(this).balance > 0) {\n            payable(msg.sender).safeTransferETH(address(this).balance * partToReturn / 10 ** 18);\n        }\n\n        console.log('3');\n\n        for (uint256 i; i < assetsOwned.length; i++) {\n            IERC20Metadata token = getERC20TokenInstance(assetsOwned[i], true);\n            uint256 balance = token.balanceOf(address(this));\n\n            address(token).safeTransfer(msg.sender, balance * partToReturn / 10 ** 18);\n            emit LiquidationTransfer(msg.sender, assetsOwned[i], balance * partToReturn / 10 ** 18, block.timestamp);\n        }\n\n        console.log('4');\n\n        uint256 health = _getHealthRatioWithPrices(cachedPrices);\n\n        console.log('5');\n\n        if (healingLoan) {\n            require(_getDebtWithPrices(cachedPrices.debtAssetsPrices) == 0, \"Healing a loan must end up with 0 debt\");\n            require(_getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices) == 0, \"Healing a loan must end up with 0 total value\");\n        } else {\n            console.log('Health: %s', health);\n            console.log('Total value: %s', _getTotalValue());\n            console.log('Debt: %s', _getDebt());\n            require(health <= getMaxHealthAfterLiquidation(), \"This operation would result in a loan with health ratio higher than Maxium Health Ratio which would put loan's owner in a risk of an unnecessarily high loss\");\n        }\n\n        console.log('6');\n\n        console.log('TV: %s', _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices));\n        console.log('Debt: %s', _getDebtWithPrices(cachedPrices.debtAssetsPrices));\n\n        console.log('Health: %s', health);\n\n        require(health >= 1e18, \"This operation would not result in bringing the loan back to a solvent state\");\n\n        console.log('FINISHED');\n\n        //TODO: include final debt and tv\n        emit Liquidated(msg.sender, healingLoan, initialTotal, initialDebt, repaidInUSD, bonusInUSD, health, block.timestamp);\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    modifier onlyWhitelistedLiquidators() {\n        // External call in order to execute this method in the SmartLoanDiamondBeacon contract storage\n        require(ISmartLoanLiquidationFacet(DeploymentConstants.getDiamondAddress()).isLiquidatorWhitelisted(msg.sender), \"Only whitelisted liquidators can execute this method\");\n        _;\n    }\n\n    /**\n     * @dev emitted after a successful liquidation operation\n     * @param liquidator the address that initiated the liquidation operation\n     * @param healing was the liquidation covering the bad debt (unprofitable liquidation)\n     * @param initialTotal total value of assets before the liquidation\n     * @param initialDebt sum of all debts before the liquidation\n     * @param repayAmount requested amount (USD) of liquidation\n     * @param bonusInUSD an amount of bonus (USD) received by the liquidator\n     * @param health a new health ratio after the liquidation operation\n     * @param timestamp a time of the liquidation\n     **/\n    event Liquidated(address indexed liquidator, bool indexed healing, uint256 initialTotal, uint256 initialDebt, uint256 repayAmount, uint256 bonusInUSD, uint256 health, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are repaid to the pool during a liquidation\n     * @param liquidator the address initiating repayment\n     * @param asset asset repaid by a liquidator\n     * @param amount of repaid funds\n     * @param timestamp of the repayment\n     **/\n    event LiquidationRepay(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are sent to liquidator during liquidation\n     * @param liquidator the address initiating repayment\n     * @param asset token sent to a liquidator\n     * @param amount of sent funds\n     * @param timestamp of the transfer\n     **/\n    event LiquidationTransfer(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when a new liquidator gets whitelisted\n     * @param liquidator the address being whitelisted\n     * @param performer the address initiating whitelisting\n     * @param timestamp of the whitelisting\n     **/\n    event LiquidatorWhitelisted(address indexed liquidator, address performer, uint256 timestamp);\n\n    /**\n     * @dev emitted when a liquidator gets delisted\n     * @param liquidator the address being delisted\n     * @param performer the address initiating delisting\n     * @param timestamp of the delisting\n     **/\n    event LiquidatorDelisted(address indexed liquidator, address performer, uint256 timestamp);\n}\n\n"
    },
    "contracts/facets/SmartLoanViewFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../Pool.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract SmartLoanViewFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    struct AssetNameBalance {\n        bytes32 name;\n        uint256 balance;\n    }\n\n    struct AssetNameDebt {\n        bytes32 name;\n        uint256 debt;\n    }\n\n    struct AssetNamePrice {\n        bytes32 name;\n        uint256 price;\n    }\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    function initialize(address owner) external {\n        require(owner != address(0), \"Initialize: Cannot set the owner to a zero address\");\n\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        require(!sls._initialized, \"DiamondInit: contract is already initialized\");\n        DiamondStorageLib.setContractOwner(owner);\n        sls._initialized = true;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function getPercentagePrecision() public view virtual returns (uint256) {\n        return DeploymentConstants.getPercentagePrecision();\n    }\n\n\n    /**\n    * Returns a current balance of the asset held by the smart loan\n    * @param _asset the code of an asset\n    **/\n    function getBalance(bytes32 _asset) public view returns (uint256) {\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\n        return token.balanceOf(address(this));\n    }\n\n    function getAllOwnedAssets() external view returns (bytes32[] memory result) {\n        return DeploymentConstants.getAllOwnedAssets();\n    }\n\n    function getSupportedTokensAddresses() external view returns (address[] memory) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        return tokenManager.getSupportedTokensAddresses();\n    }\n\n    function getAllAssetsBalances() public view returns (AssetNameBalance[] memory) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        bytes32[] memory assets = tokenManager.getAllTokenAssets();\n        AssetNameBalance[] memory result = new AssetNameBalance[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            result[i] = AssetNameBalance({\n            name : assets[i],\n            balance : IERC20(tokenManager.getAssetAddress(assets[i], true)).balanceOf(address(this))\n            });\n        }\n\n        return result;\n    }\n\n    function getDebts() public view returns (AssetNameDebt[] memory) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        bytes32[] memory assets = tokenManager.getAllPoolAssets();\n        AssetNameDebt[] memory result = new AssetNameDebt[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            Pool pool = Pool(tokenManager.getPoolAddress(assets[i]));\n\n            result[i] = AssetNameDebt({\n            name : assets[i],\n            debt : pool.getBorrowed(address(this))\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the prices of all assets supported by the TokenManager\n     * It could be used as a helper method for UI\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getAllAssetsPrices() public returns (AssetNamePrice[] memory) {\n        bytes32[] memory assets = DeploymentConstants.getTokenManager().getAllTokenAssets();\n        uint256[] memory prices = SolvencyMethods.getPrices(assets);\n        AssetNamePrice[] memory result = new AssetNamePrice[](assets.length);\n        for (uint i = 0; i < assets.length; i++) {\n            result[i] = AssetNamePrice({\n                name : assets[i],\n                price : prices[i]\n            });\n        }\n        return result;\n    }\n\n    function getContractOwner() external view returns (address _owner) {\n        _owner = DiamondStorageLib.contractOwner();\n    }\n\n    function getProposedOwner() external view returns (address _proposed) {\n        _proposed = DiamondStorageLib.proposedOwner();\n    }\n\n    function getStakedPositions() external view returns (IStakingPositions.StakedPosition[] memory  _positions) {\n        _positions = DiamondStorageLib.stakedPositions();\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n}"
    },
    "contracts/facets/SmartLoanWrappedNativeTokenFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: bdee015765a0dd3731205df659aae576d57dd473;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../interfaces/IWrappedNativeToken.sol\";\nimport \"../lib/SolvencyMethods.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\n\ncontract SmartLoanWrappedNativeTokenFacet is SolvencyMethods {\n    using TransferHelper for address payable;\n\n    function wrapNativeToken(uint256 amount) onlyOwner public {\n        require(amount <= address(this).balance, \"Not enough native token to wrap\");\n        IWrappedNativeToken wrapped = IWrappedNativeToken(DeploymentConstants.getNativeToken());\n        wrapped.deposit{value : amount}();\n\n        if (wrapped.balanceOf(address(this)) != 0) {\n            DiamondStorageLib.addOwnedAsset(DeploymentConstants.getNativeTokenSymbol(), address(wrapped));\n        }\n\n        emit WrapNative(msg.sender, amount, block.timestamp);\n    }\n\n    function depositNativeToken() public payable virtual {\n        IWrappedNativeToken wrapped = IWrappedNativeToken(DeploymentConstants.getNativeToken());\n        wrapped.deposit{value : msg.value}();\n\n        if (wrapped.balanceOf(address(this)) != 0) {\n            DiamondStorageLib.addOwnedAsset(DeploymentConstants.getNativeTokenSymbol(), address(wrapped));\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.increaseProtocolExposure(DeploymentConstants.getNativeTokenSymbol(), msg.value);\n\n        emit DepositNative(msg.sender, msg.value, block.timestamp);\n    }\n\n    function unwrapAndWithdraw(uint256 _amount) onlyOwner remainsSolvent canRepayDebtFully public payable virtual {\n        IWrappedNativeToken wrapped = IWrappedNativeToken(DeploymentConstants.getNativeToken());\n        _amount = Math.min(wrapped.balanceOf(address(this)), _amount);\n        require(wrapped.balanceOf(address(this)) >= _amount, \"Not enough native token to unwrap and withdraw\");\n\n        wrapped.withdraw(_amount);\n\n        if (wrapped.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(DeploymentConstants.getNativeTokenSymbol());\n        }\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        tokenManager.decreaseProtocolExposure(DeploymentConstants.getNativeTokenSymbol(), _amount);\n\n        payable(msg.sender).safeTransferETH(_amount);\n\n        emit UnwrapAndWithdraw(msg.sender, _amount, block.timestamp);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n    * @dev emitted when native tokens are wrapped in the SmartLoan\n    * @param user the address initiating wrap\n    * @param amount of wrapped funds\n    * @param timestamp of wrap\n    **/\n    event WrapNative(address indexed user, uint256 amount, uint256 timestamp);\n\n    /**\n    * @dev emitted when native tokens are deposited to the SmartLoan\n    * @param user the address initiating deposit of native token\n    * @param amount of deposited funds\n    * @param timestamp of deposit\n    **/\n    event DepositNative(address indexed user, uint256 amount, uint256 timestamp);\n\n    /**\n    * @dev emitted when native tokens are unwrapped and withdrawn from the SmartLoan\n    * @param user the address initiating unwrap and withdraw of native token\n    * @param amount of unwrapped and withdrawn funds\n    * @param timestamp of unwrap and withdraw\n    **/\n    event UnwrapAndWithdraw(address indexed user, uint256 amount, uint256 timestamp);\n\n}"
    },
    "contracts/facets/SolvencyFacetProd.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\";\nimport \"../interfaces/ITokenManager.sol\";\nimport \"../Pool.sol\";\nimport \"../DiamondHelper.sol\";\nimport \"../interfaces/IStakingPositions.sol\";\nimport \"../interfaces/facets/avalanche/ITraderJoeV2Facet.sol\";\nimport \"../interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol\";\nimport \"../lib/uniswap-v3/UniswapV3IntegrationHelper.sol\";\nimport {PriceHelper} from \"../lib/joe-v2/PriceHelper.sol\";\nimport {Uint256x256Math} from \"../lib/joe-v2/math/Uint256x256Math.sol\";\nimport {TickMath} from \"../lib/uniswap-v3/TickMath.sol\";\nimport {FullMath} from \"../lib/uniswap-v3/FullMath.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\nimport \"../interfaces/facets/avalanche/IUniswapV3Facet.sol\";\n\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\n    using PriceHelper for uint256;\n    using Uint256x256Math for uint256;\n\n    struct AssetPrice {\n        bytes32 asset;\n        uint256 price;\n    }\n\n    // Struct used in the liquidation process to obtain necessary prices only once\n    struct CachedPrices {\n        AssetPrice[] ownedAssetsPrices;\n        AssetPrice[] debtAssetsPrices;\n        AssetPrice[] stakedPositionsPrices;\n        AssetPrice[] assetsToRepayPrices;\n    }\n\n    /**\n      * Checks if the loan is solvent.\n      * It means that the Health Ratio is greater than 1e18.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function isSolvent() public view returns (bool) {\n        return getHealthRatio() >= 1e18;\n    }\n\n    /**\n      * Checks if the loan is solvent.\n      * It means that the Health Ratio is greater than 1e18.\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\n    **/\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of staked positions.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        bytes32[] memory symbols = new bytes32[](positions.length);\n        for(uint256 i=0; i<positions.length; i++) {\n            symbols[i] = positions[i].symbol;\n        }\n\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\n        result = new AssetPrice[](stakedPositionsPrices.length);\n\n        for(uint i; i<stakedPositionsPrices.length; i++){\n            result[i] = AssetPrice({\n                asset: symbols[i],\n                price: stakedPositionsPrices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\n    **/\n    function getDebtAssets() public view returns(bytes32[] memory result) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        result = tokenManager.getAllPoolAssets();\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\n        bytes32[] memory debtAssets = getDebtAssets();\n\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\n        result = new AssetPrice[](debtAssetsPrices.length);\n\n        for(uint i; i<debtAssetsPrices.length; i++){\n            result[i] = AssetPrice({\n                asset: debtAssets[i],\n                price: debtAssetsPrices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\n\n        result = new AssetPrice[](assetsEnriched.length);\n\n        for(uint i; i<assetsEnriched.length; i++){\n            result[i] = AssetPrice({\n                asset: assetsEnriched[i],\n                price: prices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of staked positions.\n    **/\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n        result = new bytes32[](positions.length);\n        for(uint i; i<positions.length; i++) {\n            result[i] = positions[i].symbol;\n        }\n    }\n\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\n        require(numberOfItems <= source.length, \"numberOfItems > target array length\");\n        require(offset + numberOfItems <= target.length, \"offset + numberOfItems > target array length\");\n\n        for(uint i; i<numberOfItems; i++){\n            target[i + offset] = source[i];\n        }\n    }\n\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\n        require(numberOfItems <= sourceAssets.length, \"numberOfItems > sourceAssets array length\");\n        require(numberOfItems <= sourcePrices.length, \"numberOfItems > sourcePrices array length\");\n        require(offset + numberOfItems <= sourceAssets.length, \"offset + numberOfItems > sourceAssets array length\");\n        require(offset + numberOfItems <= sourcePrices.length, \"offset + numberOfItems > sourcePrices array length\");\n\n        for(uint i; i<numberOfItems; i++){\n            target[i] = AssetPrice({\n                asset: sourceAssets[i+offset],\n                price: sourcePrices[i+offset]\n            });\n        }\n    }\n\n    /**\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\n        bytes32[] memory debtAssets = getDebtAssets();\n        bytes32[] memory stakedAssets = getStakedAssets();\n\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\n        uint256 offset;\n\n        // Populate allAssetsSymbols with owned assets symbols\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\n        offset += ownedAssetsEnriched.length;\n\n        // Populate allAssetsSymbols with debt assets symbols\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\n        offset += debtAssets.length;\n\n        // Populate allAssetsSymbols with staked assets symbols\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\n        offset += stakedAssets.length;\n\n        // Populate allAssetsSymbols with assets to repay symbols\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\n\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\n\n        offset = 0;\n\n        // Populate ownedAssetsPrices struct\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\n        offset += ownedAssetsEnriched.length;\n\n        // Populate debtAssetsPrices struct\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\n        offset += debtAssetsPrices.length;\n\n        // Populate stakedPositionsPrices struct\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\n        offset += stakedAssets.length;\n\n        // Populate assetsToRepayPrices struct\n        // Stack too deep :F\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\n        for(uint i=0; i<assetsToRepay.length; i++){\n            assetsToRepayPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n\n        result = CachedPrices({\n        ownedAssetsPrices: ownedAssetsPrices,\n        debtAssetsPrices: debtAssetsPrices,\n        stakedPositionsPrices: stakedPositionsPrices,\n        assetsToRepayPrices: assetsToRepayPrices\n        });\n    }\n\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\n    function canRepayDebtFully() external view returns(bool) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\n\n        for(uint i; i< poolAssets.length; i++) {\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\n            IERC20 token = IERC20(pool.tokenAddress());\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\n        return getOracleNumericValuesFromTxMsg(symbols);\n    }\n\n    /**\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getPrice(bytes32 symbol) external view returns (uint256) {\n        return getOracleNumericValueFromTxMsg(symbol);\n    }\n\n    /**\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\n    **/\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\n\n        if (ownedAssetsPrices.length > 0) {\n\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\n            }\n        }\n        return weightedValueOfTokens;\n    }\n\n    /**\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\n    **/\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        uint256 weightedValueOfStaked;\n\n        for (uint256 i; i < positions.length; i++) {\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \"Position-price symbol mismatch.\");\n\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\n\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\n            }\n\n\n        }\n        return weightedValueOfStaked;\n    }\n\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices) + _getTotalTraderJoeV2(true) + _getTotalUniswapV3(true);\n    }\n\n    /**\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\n    }\n\n    /**\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n    **/\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\n    }\n\n\n    /**\n     * Returns the current debt denominated in USD\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        uint256 debt;\n\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\n\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\n            / 10 ** token.decimals();\n        }\n\n        return debt;\n    }\n\n    /**\n     * Returns the current debt denominated in USD\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getDebt() public view virtual returns (uint256) {\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\n        return getDebtBase(debtAssetsPrices);\n    }\n\n    /**\n     * Returns the current debt denominated in USD\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\n        return getDebtBase(debtAssetsPrices);\n    }\n\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\n        if (ownedAssetsPrices.length > 0) {\n            ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\n\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n                uint256 assetBalance = token.balanceOf(address(this));\n\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\n            }\n            return total;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getTotalAssetsValue() public view virtual returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\n    }\n\n    /**\n      * Returns list of owned assets that always included NativeToken at index 0\n    **/\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\n\n        uint256 lastUsedIndex;\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\n\n        for(uint i=0; i< ownedAssets.length; i++){\n            if(ownedAssets[i] != nativeTokenSymbol){\n                lastUsedIndex += 1;\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\n            }\n        }\n        return assetsWithNative;\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        uint256 usdValue;\n\n        for (uint256 i; i < positions.length; i++) {\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \"Position-price symbol mismatch.\");\n\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\n            }\n        }\n\n        return usdValue;\n    }\n\n    /**\n     **/\n    function getTotalTraderJoeV2() public view virtual returns (uint256) {\n        return getTotalTraderJoeV2WithPrices();\n    }\n\n    /**\n    **/\n    function _getTotalTraderJoeV2(bool weighted) internal view returns (uint256) {\n        uint256 total;\n\n        ITraderJoeV2Facet.TraderJoeV2Bin[] memory ownedTraderJoeV2Bins = DiamondStorageLib.getTjV2OwnedBinsView();\n\n        uint256[] memory prices = new uint256[](2);\n\n        if (ownedTraderJoeV2Bins.length > 0) {\n            for (uint256 i; i < ownedTraderJoeV2Bins.length; i++) {\n                ITraderJoeV2Facet.TraderJoeV2Bin memory binInfo = ownedTraderJoeV2Bins[i];\n\n                uint256 price;\n                uint256 liquidity;\n\n                {\n                    bytes32[] memory symbols = new bytes32[](2);\n\n                    symbols[0] = DeploymentConstants.getTokenManager().tokenAddressToSymbol(address(binInfo.pair.getTokenX()));\n                    symbols[1] = DeploymentConstants.getTokenManager().tokenAddressToSymbol(address(binInfo.pair.getTokenY()));\n\n                    prices = getOracleNumericValuesFromTxMsg(symbols);\n                }\n\n                {\n                    (uint128 binReserveX, uint128 binReserveY) = binInfo.pair.getBin(binInfo.id);\n\n                    price = PriceHelper.convert128x128PriceToDecimal(binInfo.pair.getPriceFromId(binInfo.id)); // how is it denominated (what precision)?\n\n                    liquidity = price * binReserveX\n                        / 10 ** IERC20Metadata(address(binInfo.pair.getTokenX())).decimals()\n                        + binReserveY;\n                }\n\n\n                {\n                    uint256 debtCoverageX = weighted ? DeploymentConstants.getTokenManager().debtCoverage(address(binInfo.pair.getTokenX())) : 1e18;\n                    uint256 debtCoverageY = weighted ? DeploymentConstants.getTokenManager().debtCoverage(address(binInfo.pair.getTokenY())) : 1e18;\n\n                    total = total +\n                    Math.min(\n                        debtCoverageX * liquidity * prices[0] / (price * 10 ** 8),\n                        debtCoverageY * liquidity / 10 ** IERC20Metadata(address(binInfo.pair.getTokenY())).decimals() * prices[1] / 10 ** 8\n                    )\n                    * binInfo.pair.balanceOf(address(this), binInfo.id) / binInfo.pair.totalSupply(binInfo.id);\n                }\n            }\n\n            return total;\n        } else {\n        return 0;\n        }\n    }\n\n    /**\n    **/\n    function getTotalUniswapV3() public view virtual returns (uint256) {\n        return getTotalUniswapV3WithPrices();\n    }\n\n    /**\n    **/\n    function _getTotalUniswapV3(bool weighted) internal view returns (uint256) {\n        uint256 total;\n\n        uint256[] memory ownedUniswapV3TokenIds = DiamondStorageLib.getUV3OwnedTokenIdsView();\n\n        if (ownedUniswapV3TokenIds.length > 0) {\n\n            for (uint256 i; i < ownedUniswapV3TokenIds.length; i++) {\n\n            IUniswapV3Facet.UniswapV3Position memory position = getUniswapV3Position(INonfungiblePositionManager(0x655C406EBFa14EE2006250925e54ec43AD184f8B), ownedUniswapV3TokenIds[0]);\n\n            uint256[] memory prices = new uint256[](2);\n\n            {\n                    bytes32[] memory symbols = new bytes32[](2);\n\n                    symbols[0] = DeploymentConstants.getTokenManager().tokenAddressToSymbol(position.token0);\n                    symbols[1] = DeploymentConstants.getTokenManager().tokenAddressToSymbol(position.token1);\n\n                    prices = getOracleNumericValuesFromTxMsg(symbols);\n                }\n\n                //TODO: check if this approach is not too harsh for Market Maker (Prime Account)\n                {\n                    uint256 debtCoverage0 = weighted ? DeploymentConstants.getTokenManager().debtCoverage(position.token0) : 1e18;\n                    uint256 debtCoverage1 = weighted ? DeploymentConstants.getTokenManager().debtCoverage(position.token1) : 1e18;\n\n                    uint160 sqrtPriceX96_a = TickMath.getSqrtRatioAtTick(position.tickLower);\n                    uint160 sqrtPriceX96_b = TickMath.getSqrtRatioAtTick(position.tickUpper);\n\n                    uint256 sqrtPrice_a = UniswapV3IntegrationHelper.sqrtPriceX96ToUint(sqrtPriceX96_a, IERC20Metadata(position.token0).decimals());\n                    uint256 sqrtPrice_b = UniswapV3IntegrationHelper.sqrtPriceX96ToUint(sqrtPriceX96_b, IERC20Metadata(position.token0).decimals());\n\n                    total = total +\n\n                    //TODO: there is an assumption here that the position value is the lowest at edges (x = 0 or y = 0). Need to confirm that!\n\n                    //TODO: tickerUpper = p_b, tickerLower = p_a, first check if that's correct, secondly check what's the denomination and accuracy of these numbers\n                    //TODO: check for possible under/overflowsL557\n\n\n                    Math.min(\n                        debtCoverage0 * position.liquidity / 1e18 * (1e36 / sqrtPrice_a - 1e36 / sqrtPrice_b) / 10 ** IERC20Metadata(position.token0).decimals() * prices[0] / 10 ** 8,\n                        debtCoverage1 * position.liquidity / 1e18 * (sqrtPrice_b - sqrtPrice_a) / 10 ** IERC20Metadata(position.token1).decimals() * prices[1] / 10 ** 8\n                    );\n                }\n            }\n\n            return total;\n        } else {\n            return 0;\n        }\n    }\n\n\n    function getUniswapV3Position(\n        INonfungiblePositionManager positionManager,\n        uint256 tokenId) internal view returns (IUniswapV3Facet.UniswapV3Position memory position) {\n        (, , address token0, address token1, , int24 tickLower, int24 tickUpper, uint128 liquidity) = positionManager.positions(tokenId);\n\n        position = IUniswapV3Facet.UniswapV3Position(token0, token1, tickLower, tickUpper, liquidity);\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\n        return _getStakedValueBase(stakedPositionsPrices);\n    }\n\n    /**\n     * Returns the current value of Liquidity Book positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalTraderJoeV2WithPrices() public view returns (uint256) {\n        return _getTotalTraderJoeV2(false);\n    }\n\n    /**\n     * Returns the current value of Uniswap V3 positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalUniswapV3WithPrices() public view returns (uint256) {\n        return _getTotalUniswapV3(false);\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getStakedValue() public view virtual returns (uint256) {\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\n        return _getStakedValueBase(stakedPositionsPrices);\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getTotalValue() public view virtual returns (uint256) {\n        return getTotalAssetsValue() + getStakedValue() + getTotalTraderJoeV2() + getTotalUniswapV3();\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory assetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices) + getTotalTraderJoeV2WithPrices() + getTotalUniswapV3WithPrices();\n    }\n\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\n    }\n\n    /**\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\n     * by current debt\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getHealthRatio() public view virtual returns (uint256) {\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\n\n        if (debt == 0) {\n            return type(uint256).max;\n        } else {\n            return thresholdWeightedValue * 1e18 / debt;\n        }\n    }\n\n    /**\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\n     * by current debt\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n     **/\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\n\n        if (debt == 0) {\n            return type(uint256).max;\n        } else {\n            return thresholdWeightedValue * 1e18 / debt;\n        }\n    }\n}\n"
    },
    "contracts/facets/UniswapV2DEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport \"../OnlyOwnerOrInsolvent.sol\";\n\n//This path is updated during deployment\nimport \"../lib/local/DeploymentConstants.sol\";\nimport \"../interfaces/IAssetsExchange.sol\";\n\ncontract UniswapV2DEXFacet is ReentrancyGuardKeccak, SolvencyMethods, OnlyOwnerOrInsolvent {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    function getProtocolID() pure internal virtual returns (bytes32) {\n        return \"\";\n    }\n\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\n        uint8 i = 0;\n        while(i < 32 && _bytes32[i] != 0) {\n            i++;\n        }\n        bytes memory bytesArray = new bytes(i);\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\n            bytesArray[i] = _bytes32[i];\n        }\n        return string(bytesArray);\n    }\n\n    /**\n    * Swaps one asset with another\n    * @param _soldAsset asset to be sold\n    * @param _boughtAsset asset to be bought\n    * @param _exactSold exact amount of asset to be sold\n    * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapAssets(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) internal recalculateAssetsExposure remainsSolvent returns (uint256[] memory) {\n        IERC20Metadata soldToken = getERC20TokenInstance(_soldAsset, true);\n        IERC20Metadata boughtToken = getERC20TokenInstance(_boughtAsset, false);\n\n        require(soldToken.balanceOf(address(this)) >= _exactSold, \"Not enough token to sell\");\n        address(soldToken).safeTransfer(getExchangeIntermediaryContract(), _exactSold);\n\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\n\n        uint256[] memory amounts = exchange.swap(address(soldToken), address(boughtToken), _exactSold, _minimumBought);\n\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\n        // Add asset to ownedAssets\n        address boughtAssetAddress = tokenManager.getAssetAddress(_boughtAsset, false);\n\n        if (boughtToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_boughtAsset, boughtAssetAddress);\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\n        if (soldToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_soldAsset);\n        }\n\n        emit Swap(msg.sender, _soldAsset, _boughtAsset, amounts[0], amounts[amounts.length - 1], block.timestamp);\n\n        return amounts;\n    }\n\n    /**\n    * Adds liquidity\n    **/\n    function addLiquidity(bytes32 _assetA, bytes32 _assetB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) internal recalculateAssetsExposure remainsSolvent {\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, false);\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\n\n        require(tokenA.balanceOf(address(this)) >= amountA, \"Not enough tokenA to provide\");\n        require(tokenB.balanceOf(address(this)) >= amountB, \"Not enough tokenB to provide\");\n\n        address(tokenA).safeTransfer(getExchangeIntermediaryContract(), amountA);\n        address(tokenB).safeTransfer(getExchangeIntermediaryContract(), amountB);\n\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\n\n        address lpTokenAddress;\n        uint liquidity;\n\n        (lpTokenAddress, amountA, amountB, liquidity)\n          = exchange.addLiquidity(address(tokenA), address(tokenB), amountA, amountB, amountAMin, amountBMin);\n\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) > 0) {\n            bytes32 lpToken = calculateLpTokenSymbol(_assetA, _assetB);\n            DiamondStorageLib.addOwnedAsset(lpToken, lpTokenAddress);\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\n        if (tokenA.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_assetA);\n        }\n\n        if (tokenB.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_assetB);\n        }\n\n        emit AddLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\n    }\n\n    /**\n    * Removes liquidity\n    **/\n    function removeLiquidity(bytes32 _assetA, bytes32 _assetB, uint liquidity, uint amountAMin, uint amountBMin) internal recalculateAssetsExposure onlyOwnerOrInsolvent{\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, true);\n\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\n\n        address lpTokenAddress = exchange.getPair(address(tokenA), address(tokenB));\n        liquidity = Math.min(liquidity, IERC20(lpTokenAddress).balanceOf(address(this)));\n\n        lpTokenAddress.safeTransfer(getExchangeIntermediaryContract(), liquidity);\n\n        (uint amountA, uint amountB) = exchange.removeLiquidity(address(tokenA), address(tokenB), liquidity, amountAMin, amountBMin);\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(calculateLpTokenSymbol(_assetA, _assetB));\n        }\n        DiamondStorageLib.addOwnedAsset(_assetA, address(tokenA));\n        DiamondStorageLib.addOwnedAsset(_assetB, address(tokenB));\n\n        emit RemoveLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\n    }\n\n    function calculateLpTokenSymbol(bytes32 _assetA, bytes32 _assetB) internal pure returns (bytes32 name) {\n        (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\n        name = stringToBytes32(string.concat(\n                bytes32ToString(getProtocolID()),\n                '_',\n                bytes32ToString(token0),\n                '_',\n                bytes32ToString(token1),\n                '_LP'\n            )\n        );\n    }\n\n    /**\n     * Returns address of DeltaPrime intermediary contract of UniswapV2-like exchange\n     **/\n    //TO BE OVERRIDDEN\n    function getExchangeIntermediaryContract() public virtual returns (address) {\n        return address(0);\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after a swap of assets\n     * @param user the address of user making the purchase\n     * @param soldAsset sold by the user\n     * @param boughtAsset bought by the user\n     * @param maximumSold maximum to be sold\n     * @param minimumBought minimum to be bought\n     * @param timestamp time of the swap\n     **/\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 maximumSold, uint256 minimumBought, uint256 timestamp);\n\n    /**\n     * @dev emitted after providing liquidity\n     * @param user the address of user providing liquidity\n     * @param lpToken the address LP token\n     * @param firstAsset first asset provided for liquidity\n     * @param secondAsset second asset provided for liquidity\n     * @param liquidity amount of liquidity (LP token) added\n     * @param firstAmount amount of the first asset used\n     * @param secondAmount amount of the second asset used\n     * @param timestamp time of the transaction\n     **/\n    event AddLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing liquidity\n     * @param user the address of user providing liquidity\n     * @param lpToken the address LP token\n     * @param firstAsset first asset from LP position\n     * @param secondAsset second asset from LP position\n     * @param liquidity amount of liquidity (LP token) removed\n     * @param firstAmount amount of the first asset obtained\n     * @param secondAmount amount of the second asset obtained\n     * @param timestamp time of the transaction\n     **/\n    event RemoveLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n}"
    },
    "contracts/helpers/avalanche/PangolinHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../interfaces/IAssetsExchange.sol\";\n\ncontract PangolinHelper {\n    using SafeERC20 for IERC20;\n\n    // PUBLIC FUNCTIONS\n\n    function removeLiquidityPangolin(\n        address token0,\n        address token1,\n        uint256 amount,\n        uint256 minAmount0,\n        uint256 minAmount1\n    ) external {\n        IERC20Metadata tokenA = IERC20Metadata(token0);\n        IERC20Metadata tokenB = IERC20Metadata(token1);\n\n        IAssetsExchange exchange = IAssetsExchange(\n            getExchangeIntermediaryContract()\n        );\n\n        IERC20 lpTokenAddress = IERC20(exchange.getPair(token0, token1));\n        amount = Math.min(amount, lpTokenAddress.balanceOf(address(this)));\n\n        lpTokenAddress.safeTransfer(address(exchange), amount);\n\n        exchange.removeLiquidity(\n            address(tokenA),\n            address(tokenB),\n            amount,\n            minAmount0,\n            minAmount1\n        );\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public pure returns (address) {\n        return 0xdB5D94B8Ed491B058F3e74D029775A14477cF7fA;\n    }\n}\n"
    },
    "contracts/helpers/avalanche/TraderJoeHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../interfaces/IAssetsExchange.sol\";\n\ncontract TraderJoeHelper {\n    using SafeERC20 for IERC20;\n\n    // PUBLIC FUNCTIONS\n\n    function removeLiquidityTraderJoe(\n        address token0,\n        address token1,\n        uint256 amount,\n        uint256 minAmount0,\n        uint256 minAmount1\n    ) external {\n        IERC20Metadata tokenA = IERC20Metadata(token0);\n        IERC20Metadata tokenB = IERC20Metadata(token1);\n\n        IAssetsExchange exchange = IAssetsExchange(\n            getExchangeIntermediaryContract()\n        );\n\n        IERC20 lpTokenAddress = IERC20(exchange.getPair(token0, token1));\n        amount = Math.min(amount, lpTokenAddress.balanceOf(address(this)));\n\n        lpTokenAddress.safeTransfer(address(exchange), amount);\n\n        exchange.removeLiquidity(\n            address(tokenA),\n            address(tokenB),\n            amount,\n            minAmount0,\n            minAmount1\n        );\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public pure returns (address) {\n        return 0x4eEcb72b47a32786e08581D6226e95d9AE3bB1Af;\n    }\n}\n"
    },
    "contracts/helpers/avalanche/VectorFinanceHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../interfaces/IVectorFinanceCompounder.sol\";\nimport \"../../interfaces/IVectorFinanceMainStaking.sol\";\nimport \"../../interfaces/IVectorFinanceStaking.sol\";\n\ncontract VectorFinanceHelper {\n    // CONSTANTS\n\n    address private constant VectorMainStaking =\n        0x8B3d9F0017FA369cD8C164D0Cc078bf4cA588aE5;\n\n    // PUBLIC FUNCTIONS\n\n    function vectorUnstakeUSDC(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) public {\n        _unstakeToken(\n            amount,\n            minAmount,\n            0x06f01502327De1c37076Bea4689a7e44279155e9\n        );\n    }\n\n    function vectorUnstakeUSDT(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) public {\n        _unstakeToken(\n            amount,\n            minAmount,\n            0x836648A8cE166Ba7CaFb27F0E6AD21d5C91b7774\n        );\n    }\n\n    function vectorUnstakeWAVAX(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) public {\n        _unstakeToken(\n            amount,\n            minAmount,\n            0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7\n        );\n    }\n\n    function vectorUnstakeSAVAX(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) public {\n        _unstakeToken(\n            amount,\n            minAmount,\n            0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE\n        );\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function _unstakeToken(\n        uint256 amount,\n        uint256 minAmount,\n        address asset\n    ) internal {\n        IVectorFinanceCompounder compounder = _getAssetPoolHelper(asset)\n            .compounder();\n        require(amount > 0, \"Cannot unstake 0 tokens\");\n\n        amount = Math.min(compounder.depositTracking(address(this)), amount);\n\n        compounder.withdraw(amount, minAmount);\n    }\n\n    function _getAssetPoolHelper(\n        address asset\n    ) internal view returns (IVectorFinanceStaking) {\n        IVectorFinanceMainStaking mainStaking = IVectorFinanceMainStaking(\n            VectorMainStaking\n        );\n        return IVectorFinanceStaking(mainStaking.getPoolInfo(asset).helper);\n    }\n}\n"
    },
    "contracts/helpers/avalanche/YieldYakHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\n\nimport \"../../interfaces/facets/avalanche/IYieldYak.sol\";\nimport \"../../interfaces/IWrappedNativeToken.sol\";\n\ncontract YieldYakHelper {\n    // Staking Vaults tokens\n    address private constant YY_AAVE_AVAX =\n        0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95;\n    address private constant YY_PTP_sAVAX =\n        0xb8f531c0d3c53B1760bcb7F57d87762Fd25c4977;\n    address private constant YY_GLP = 0x9f637540149f922145c06e1aa3f38dcDc32Aff5C;\n\n    // Staking Vaults LPs\n    address private constant YY_PNG_AVAX_USDC_LP =\n        0xC0cd58661b68e10b49D3Bec4bC5E44e7A7c20656;\n    address private constant YY_PNG_AVAX_ETH_LP =\n        0xFCD2050E213cC54db2c9c99632AC870574FbC261;\n    address private constant YY_TJ_AVAX_USDC_LP =\n        0xDEf94a13fF31FB6363f1e03bF18fe0F59Db83BBC;\n    address private constant YY_TJ_AVAX_ETH_LP =\n        0x5219558ee591b030E075892acc41334A1694fd8A;\n    address private constant YY_TJ_AVAX_sAVAX_LP =\n        0x22EDe03f1115666CF05a4bAfafaEe8F43D42cD56;\n\n    // Tokens\n    address private constant SAVAX_TOKEN =\n        0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n    address private constant AVAX_TOKEN =\n        0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address private constant GLP_TOKEN =\n        0x9e295B5B976a184B14aD8cd72413aD846C299660;\n    // LPs\n    address private constant PNG_AVAX_USDC_LP =\n        0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665;\n    address private constant PNG_AVAX_ETH_LP =\n        0x7c05d54fc5CB6e4Ad87c6f5db3b807C94bB89c52;\n\n    address private constant TJ_AVAX_USDC_LP =\n        0xf4003F4efBE8691B60249E6afbD307aBE7758adb;\n    address private constant TJ_AVAX_ETH_LP =\n        0xFE15c2695F1F920da45C30AAE47d11dE51007AF9;\n    address private constant TJ_AVAX_sAVAX_LP =\n        0x4b946c91C2B1a7d7C40FB3C130CdfBaf8389094d;\n\n    // PUBLIC FUNCTIONS\n\n    function unstakeAVAXYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        IYieldYak yakStakingContract = IYieldYak(YY_AAVE_AVAX);\n\n        amount = Math.min(yakStakingContract.balanceOf(address(this)), amount);\n\n        yakStakingContract.withdraw(amount);\n\n        require(address(this).balance >= minAmount, \"too little received\");\n\n        IWrappedNativeToken(AVAX_TOKEN).deposit{value: address(this).balance}();\n    }\n\n    function unstakeSAVAXYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(SAVAX_TOKEN, YY_PTP_sAVAX, amount, minAmount);\n    }\n\n    function unstakeGLPYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(GLP_TOKEN, YY_GLP, amount, minAmount);\n    }\n\n    function unstakePNGAVAXUSDCYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(PNG_AVAX_USDC_LP, YY_PNG_AVAX_USDC_LP, amount, minAmount);\n    }\n\n    function unstakePNGAVAXETHYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(PNG_AVAX_ETH_LP, YY_PNG_AVAX_ETH_LP, amount, minAmount);\n    }\n\n    function unstakeTJAVAXUSDCYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(TJ_AVAX_USDC_LP, YY_TJ_AVAX_USDC_LP, amount, minAmount);\n    }\n\n    function unstakeTJAVAXETHYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(TJ_AVAX_ETH_LP, YY_TJ_AVAX_ETH_LP, amount, minAmount);\n    }\n\n    function unstakeTJAVAXSAVAXYak(\n        address,\n        address,\n        uint256 amount,\n        uint256 minAmount,\n        uint256\n    ) external {\n        _unstakeTokenYY(TJ_AVAX_sAVAX_LP, YY_TJ_AVAX_sAVAX_LP, amount, minAmount);\n    }\n\n    // INTERNAL FUNCTIONS\n\n    function _unstakeTokenYY(\n        address tokenAddress,\n        address vaultAddress,\n        uint256 amount,\n        uint256 minAmount\n    ) private {\n        IYieldYak vaultContract = IYieldYak(vaultAddress);\n        IERC20Metadata depositToken = IERC20Metadata(tokenAddress);\n        uint256 initialDepositTokenBalance = depositToken.balanceOf(address(this));\n        amount = Math.min(vaultContract.balanceOf(address(this)), amount);\n\n        vaultContract.withdraw(amount);\n\n        uint256 unstaked = depositToken.balanceOf(address(this)) -\n            initialDepositTokenBalance;\n        require(unstaked >= minAmount, \"too little received\");\n    }\n}\n"
    },
    "contracts/integrations/avalanche/PangolinIntermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2Intermediary.sol\";\nimport \"../../lib/local/DeploymentConstants.sol\";\n\n/**\n * @title PangolinIntermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation uses the Pangolin DEX\n */\ncontract PangolinIntermediary is UniswapV2Intermediary {\n\n    function getNativeTokenAddress() override internal pure returns (address) {\n        return DeploymentConstants.getNativeToken();\n    }\n}"
    },
    "contracts/integrations/avalanche/TraderJoeIntermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2Intermediary.sol\";\nimport \"../../lib/local/DeploymentConstants.sol\";\n\n/**\n * @title TraderJoeIntermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation uses the TraderJoe DEX\n */\ncontract TraderJoeIntermediary is UniswapV2Intermediary {\n\n    function getNativeTokenAddress() override internal pure returns (address) {\n        return DeploymentConstants.getNativeToken();\n    }\n}"
    },
    "contracts/integrations/celo/UbeswapIntermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2Intermediary.sol\";\nimport \"../../lib/local/DeploymentConstants.sol\";\n\n/**\n * @title UbeswapIntermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation uses the Ubeswap DEX\n */\ncontract UbeswapIntermediary is UniswapV2Intermediary {\n\n  /**\n   * Returns a path containing tokens' addresses\n   * @dev _token ERC20 token's address\n   **/\n  function getPath(address _token1, address _token2) internal override pure returns (address[] memory) {\n    address[] memory path;\n    path = new address[](2);\n    path[0] = _token1;\n    path[1] = _token2;\n\n    return path;\n  }\n\n  function getNativeTokenAddress() override internal pure returns (address) {\n    return DeploymentConstants.getNativeToken();\n  }\n}"
    },
    "contracts/integrations/UniswapV2Intermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/IAssetsExchange.sol\";\nimport \"../TokenList.sol\";\nimport \"../interfaces/ITokenManager.sol\";\n\n/**\n * @title UniswapV2Intermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation supports UniswapV2-like DEXs\n */\ncontract UniswapV2Intermediary is TokenListOwnableUpgreadable, IAssetsExchange, ReentrancyGuardKeccak {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /* ========= STATE VARIABLES ========= */\n    IUniswapV2Router01 router;\n    IUniswapV2Factory factory;\n    ITokenManager tokenManager;\n\n    function initialize(address _router, address _tokenManager, address[] memory _whitelistedTokens) external initializer {\n        tokenManager = ITokenManager(_tokenManager);\n        router = IUniswapV2Router01(_router);\n        factory = IUniswapV2Factory(router.factory());\n\n        __TokenList_init(_whitelistedTokens);\n    }\n\n    /*\n     * Swaps selected ERC20 token with other ERC20 token\n     * @param soldToken_ sold ERC20 token's address\n     * @param boughtToken_ bought ERC20 token's address\n     * @param _exactSold exact amount of ERC20 token to be sold\n     * @param _minimumBought minimum amount of ERC20 token to be bought\n     **/\n    function swap(address _soldToken, address _boughtToken, uint256 _exactSold, uint256 _minimumBought) external override nonReentrant returns (uint256[] memory amounts) {\n        require(_exactSold > 0, \"Amount of tokens to sell has to be greater than 0\");\n\n        _soldToken.safeApprove(address(router), 0);\n        _soldToken.safeApprove(address(router), _exactSold);\n\n        require(isTokenWhitelisted[_boughtToken], 'Trying to buy unsupported token');\n\n        if (_minimumBought > 0) {\n            require(_exactSold >= getMinimumTokensNeeded(_minimumBought, _soldToken, _boughtToken), \"Not enough funds were provided\");\n        }\n\n        amounts = router.swapExactTokensForTokens(_exactSold, _minimumBought, getPath(_soldToken, _boughtToken), msg.sender, block.timestamp);\n\n        uint256 residualBalance = IERC20Metadata(_soldToken).balanceOf(address(this));\n\n        if (residualBalance > 0) {\n            _soldToken.safeTransfer(msg.sender, residualBalance);\n        }\n\n        return amounts;\n    }\n\n\n    /*\n     * addLiquidity selected ERC20 tokens\n     **/\n    function addLiquidity(address tokenA, address tokenB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) external override nonReentrant returns (address, uint, uint, uint) {\n        require(amountA > 0, \"amountADesired has to be greater than 0\");\n        require(amountB > 0, \"amountBDesired to sell has to be greater than 0\");\n        require(amountAMin > 0, \"amountAMin has to be greater than 0\");\n        require(amountBMin > 0, \"amountBMin has to be greater than 0\");\n\n        tokenA.safeApprove(address(router), 0);\n        tokenA.safeApprove(address(router), amountA);\n        tokenB.safeApprove(address(router), 0);\n        tokenB.safeApprove(address(router), amountB);\n\n        address lpTokenAddress = getPair(tokenA, tokenB);\n\n        require(isTokenWhitelisted[tokenA], 'Trying to LP unsupported token');\n        require(isTokenWhitelisted[tokenB], 'Trying to LP unsupported token');\n        require(tokenManager.isTokenAssetActive(lpTokenAddress), 'Trying to add unsupported LP token');\n\n        uint liquidity;\n        (amountA, amountB, liquidity) =\n           router.addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin, address(this), block.timestamp);\n\n        lpTokenAddress.safeTransfer(msg.sender, IERC20Metadata(lpTokenAddress).balanceOf(address(this)));\n        if (IERC20Metadata(tokenA).balanceOf(address(this)) > 0) {\n            tokenA.safeTransfer(msg.sender, IERC20Metadata(tokenA).balanceOf(address(this)));\n        }\n        if ( IERC20Metadata(tokenB).balanceOf(address(this)) > 0) {\n            tokenB.safeTransfer(msg.sender, IERC20Metadata(tokenB).balanceOf(address(this)));\n        }\n\n        return (lpTokenAddress, amountA, amountB, liquidity);\n    }\n\n\n    /*\n     *  removeLiquidity selected ERC20 tokens\n     **/\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountA, uint amountB) external override nonReentrant returns (uint, uint) {\n        require(amountA > 0, \"amountA has to be greater than 0\");\n        require(amountB > 0, \"amountB has to be greater than 0\");\n\n        address lpTokenAddress = getPair(tokenA, tokenB);\n\n        lpTokenAddress.safeApprove(address(router), liquidity);\n\n        require(isTokenWhitelisted[tokenA], 'Trying to remove LP of unsupported token');\n        require(isTokenWhitelisted[tokenB], 'Trying to remove LP of unsupported token');\n        //TODO: handle paused LP tokens\n        require(tokenManager.isTokenAssetActive(lpTokenAddress), 'Trying to remove unsupported LP token');\n\n        (amountA, amountB) =\n         router.removeLiquidity(tokenA, tokenB, liquidity, amountA, amountB, address(this), block.timestamp);\n\n        lpTokenAddress.safeTransfer(msg.sender, IERC20Metadata(lpTokenAddress).balanceOf(address(this)));\n        tokenA.safeTransfer(msg.sender, IERC20Metadata(tokenA).balanceOf(address(this)));\n        tokenB.safeTransfer(msg.sender, IERC20Metadata(tokenB).balanceOf(address(this)));\n\n        return (amountA, amountB);\n    }\n\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\n     * Can revert due to insufficient liquidity\n     **/\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) public view override returns (uint256) {\n        address[] memory path = getPath(_soldToken, _boughtToken);\n\n        (bool success, bytes memory result) = address(router).staticcall(\n            abi.encodeWithSignature(\"getAmountsIn(uint256,address[])\", _exactAmountOut, path)\n        );\n\n        require(success, \"Error when calculating amounts needed\");\n\n        uint256[] memory amounts = abi.decode(result, (uint256[]));\n\n        return amounts[0];\n    }\n\n    /**\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\n     **/\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) public view override returns (uint256) {\n        address[] memory path = getPath(_soldToken, _boughtToken);\n\n        return router.getAmountsOut(_amountIn, path)[1];\n    }\n\n    /**\n     * Returns a path containing tokens' addresses\n     * @param _token1 ERC20 token's address\n     * @param _token2 ERC20 token's address\n     **/\n    function getPath(address _token1, address _token2) internal virtual view returns (address[] memory) {\n        address[] memory path;\n\n        if (_token1 != getNativeTokenAddress() && _token2 != getNativeTokenAddress()) {\n            path = new address[](3);\n            path[0] = _token1;\n            path[1] = getNativeTokenAddress();\n            path[2] = _token2;\n        } else {\n            path = new address[](2);\n            path[0] = _token1;\n            path[1] = _token2;\n        }\n\n        return path;\n    }\n\n    /**\n     * Returns an address of LP token\n     * @param _token1 ERC20 token's address\n     * @param _token2 ERC20 token's address\n     **/\n    function getPair(address _token1, address _token2) public virtual view returns (address) {\n        return factory.getPair(_token1, _token2);\n    }\n\n    function getNativeTokenAddress() virtual internal view returns (address) {\n        //address of WETH9 on Ethereum network. Must be overriden in implementations on other chains\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    }\n}"
    },
    "contracts/interfaces/arbitrum/IConvexPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface IConvexPool {\n    function deposit(uint256 _pid, uint256 _amount) external returns(bool);\n\n    struct DepositDetails {\n        uint256 crvLpTokenAmount;\n        uint256 depositPoolId;\n        address depositPoolAddress;\n        address crvLpTokenAddress;\n        bytes32 crvLpTokenIdentifier;\n        address cvxPoolLPTokenAddress;\n        bytes32 cvxPoolIdentifier;\n    }\n\n    struct WithdrawalDetails {\n        uint256 receiptTokenAmount;\n        address crvLpTokenAddress;\n        bytes32 crvLpTokenIdentifier;\n        address cvxPoolLPTokenAddress;\n        bytes32 cvxPoolIdentifier;\n    }\n}"
    },
    "contracts/interfaces/arbitrum/IConvexRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface IConvexRewarder {\n    function withdraw(uint256 _amount, bool _claim) external returns(bool);\n    function balanceOf(address account) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IBeefyFinance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.4;\n\ninterface IBeefyFinance {\n    // -- Deposit/Withdraw underlying LP token --\n    function depositAll() external;\n\n    function deposit(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawAll() external;\n\n    // ------------------------------------------\n\n    // User's balance of the vault's token\n    function balanceOf(address account) external view returns (uint256);\n\n    // Vault's balance of the underlying token\n    function balance() external view returns (uint256);\n\n    // Total supply of the vault's token\n    function totalSupply() external view returns (uint256);\n\n    // Decimals of the vault's token\n    function decimals() external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    // ---INTERFACE-----\n    struct BeefyStakingDetails {\n        address lpTokenAddress;\n        address vaultAddress;\n        bytes32 lpTokenSymbol;\n        bytes32 vaultTokenSymbol;\n        uint256 amount;\n    }\n\n}"
    },
    "contracts/interfaces/facets/avalanche/IBeefyFinanceFacet.sol": {
      "content": "interface IBeefyFinanceFacet {\n    function stakePngUsdcAvaxLpBeefy(uint256 amount) external;\n\n    function stakePngUsdceAvaxLpBeefy(uint256 amount) external;\n\n    function stakeTjUsdcAvaxLpBeefy(uint256 amount) external;\n\n    function unstakePngUsdcAvaxLpBeefy(uint256 amount) external;\n\n    function unstakePngUsdceAvaxLpBeefy(uint256 amount) external;\n\n    function unstakeTjUsdcAvaxLpBeefy(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ICurveFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ICurveFacet {\n    function stakeCurve(uint256[5] memory amounts) external;\n\n    function unstakeCurve(uint256 amount, uint256[5] memory min_amounts) external;\n\n    function unstakeOneTokenCurve(uint256 i, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IGLPFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IGLPFacet {\n    function claimGLpFees() external;\n\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns(uint256);\n\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut) external returns(uint256);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IGLPRewarder.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IGLPRewarder {\n    function mintAndStakeGlp(address _token, uint256 _amount, uint256 _minUsdg, uint256 _minGlp) external returns(uint256);\n\n    function unstakeAndRedeemGlp(address _tokenOut, uint256 _glpAmount, uint256 _minOut, address _receiver) external returns(uint256);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IGMDFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IGMDFacet {\n    function gmdStakeUSDC(uint256 amountStaked, uint256 minSharesOut) external;\n    function gmdStakeAVAX(uint256 amountStaked, uint256 minSharesOut) external;\n    function gmdStakeBTCb(uint256 amountStaked, uint256 minSharesOut) external;\n    function gmdStakeWETHe(uint256 amountStaked, uint256 minSharesOut) external;\n\n    function gmdUnstakeUSDC(uint256 amountUnstaked, uint256 minTokenOut) external;\n    function gmdUnstakeAVAX(uint256 amountUnstaked, uint256 minTokenOut) external;\n    function gmdUnstakeBTCb(uint256 amountUnstaked, uint256 minTokenOut) external;\n    function gmdUnstakeWETHe(uint256 amountUnstaked, uint256 minTokenOut) external;\n\n    struct StakingDetails {\n        address asset;\n        address receiptToken;\n        bytes32 symbol;\n        bytes32 identifier;\n        uint256 amountStaked;\n        uint256 minSharesOut;\n        uint256 pid;\n    }\n\n    struct UnstakingDetails {\n        address asset;\n        address receiptToken;\n        bytes32 symbol;\n        bytes32 identifier;\n        uint256 amountUnstaked;\n        uint256 minTokenOut;\n        uint256 pid;\n    }\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IPangolinDEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IPangolinDEXFacet {\n    function swapPangolin(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) external returns (uint256[] memory);\n\n    function addLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external;\n\n    function removeLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) external;\n\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IParaSwapFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\nimport \"./IParaSwapRouter.sol\";\n\ninterface IParaSwapFacet {\n    function paraSwap(IParaSwapRouter.SimpleData memory data) external;\n}"
    },
    "contracts/interfaces/facets/avalanche/IParaSwapRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\ninterface IParaSwapRouter {\n    struct SimpleData {\n        address fromToken;\n        address toToken;\n        uint256 fromAmount;\n        uint256 toAmount;\n        uint256 expectedAmount;\n        address[] callees;\n        bytes exchangeData;\n        uint256[] startIndexes;\n        uint256[] values;\n        address payable beneficiary;\n        address payable partner;\n        uint256 feePercent;\n        bytes permit;\n        uint256 deadline;\n        bytes16 uuid;\n    }\n\n    function simpleSwap(SimpleData memory data) external payable returns (uint256 receivedAmount);\n}"
    },
    "contracts/interfaces/facets/avalanche/IRecoveryFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IRecoveryFacet {\n    function emergencyWithdraw(bytes32 asset) external returns (uint256 _amount);\n\n    function notifyRefund(address token, uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IRewardRouterV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IRewardRouterV2 {\n    function claimFees() external;\n    function feeGlpTracker() external view returns (address);\n}"
    },
    "contracts/interfaces/facets/avalanche/IRewardTracker.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\ninterface IRewardTracker {\n    function depositBalances(address _account, address _depositToken) external view returns (uint256);\n    function stakedAmounts(address _account) external view returns (uint256);\n    function updateRewards() external;\n    function stake(address _depositToken, uint256 _amount) external;\n    function stakeForAccount(address _fundingAccount, address _account, address _depositToken, uint256 _amount) external;\n    function unstake(address _depositToken, uint256 _amount) external;\n    function unstakeForAccount(address _account, address _depositToken, uint256 _amount, address _receiver) external;\n    function tokensPerInterval() external view returns (uint256);\n    function claim(address _receiver) external returns (uint256);\n    function claimForAccount(address _account, address _receiver) external returns (uint256);\n    function claimable(address _account) external view returns (uint256);\n    function averageStakedAmounts(address _account) external view returns (uint256);\n    function cumulativeRewards(address _account) external view returns (uint256);\n}"
    },
    "contracts/interfaces/facets/avalanche/ISteakHutFinanceFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISteakHutFinanceFacet {\n    function stakeSteakHutAVAXUSDC(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external;\n\n    function unstakeSteakHutAVAXUSDC(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external;\n\n    function stakeSteakHutBTCAVAX(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external;\n\n    function unstakeSteakHutBTCAVAX(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external;\n\n    function stakeSteakHutUSDTeUSDT(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external;\n\n    function unstakeSteakHutUSDTeUSDT(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external;\n\n    function stakeSteakHutJOEAVAX(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external;\n\n    function unstakeSteakHutJOEAVAX(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external;\n\n    function stakeSteakHutEUROCUSDC(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external;\n\n    function unstakeSteakHutEUROCUSDC(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external;\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ISteakHutPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface ISteakHutPool {\n    function deposit(\n        uint256 amountX,\n        uint256 amountY,\n        uint256 amountXMin,\n        uint256 amountYMin\n    )\n        external\n        returns (uint256 shares, uint256 amountXActual, uint256 amountYActual);\n\n    function withdraw(\n        uint256 _shares\n    ) external returns (uint256 amountX, uint256 amountY);\n\n    // ---INTERFACE-----\n    struct StakingDetails {\n        bytes32 token0Symbol;\n        bytes32 token1Symbol;\n        bytes32 vaultTokenSymbol;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    struct UnstakingDetails {\n        bytes32 token0Symbol;\n        bytes32 token1Symbol;\n        bytes32 vaultTokenSymbol;\n        uint256 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ITraderJoeDEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ITraderJoeDEXFacet {\n    function swapTraderJoe(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) external returns (uint256[] memory);\n\n    function addLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external;\n\n    function removeLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) external;\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ITraderJoeV2Autopool.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title TraderJoe V2 autopool interface, based on IBaseVault\n * @author Trader Joe\n * @notice Interface used to interact with Liquidity Book Vaults\n */\ninterface ITraderJoeV2Autopool is IERC20 {\n\n    struct QueuedWithdrawal {\n        mapping(address => uint256) userWithdrawals;\n        uint256 totalQueuedShares;\n        uint128 totalAmountX;\n        uint128 totalAmountY;\n    }\n\n    event Deposited(address indexed user, uint256 amountX, uint256 amountY, uint256 shares);\n\n    event WithdrawalQueued(address indexed sender, address indexed user, uint256 indexed round, uint256 shares);\n\n    event WithdrawalCancelled(address indexed sender, address indexed recipient, uint256 indexed round, uint256 shares);\n\n    event WithdrawalRedeemed(\n        address indexed sender,\n        address indexed recipient,\n        uint256 indexed round,\n        uint256 shares,\n        uint256 amountX,\n        uint256 amountY\n    );\n\n    event WithdrawalExecuted(uint256 indexed round, uint256 totalQueuedQhares, uint256 amountX, uint256 amountY);\n\n    event WhitelistStateChanged(bool state);\n\n    event WhitelistAdded(address[] addresses);\n\n    event WhitelistRemoved(address[] addresses);\n\n    event Recovered(address token, address recipient, uint256 amount);\n\n    event DepositsPaused();\n\n    event DepositsResumed();\n\n    event EmergencyMode();\n\n    event EmergencyWithdrawal(address indexed sender, uint256 shares, uint256 amountX, uint256 amountY);\n\n    function getTokenX() external view returns (IERC20);\n\n    function getTokenY() external view returns (IERC20);\n\n    function getAumAnnualFee() external view returns (uint256);\n\n    function getRange() external view returns (uint24 low, uint24 upper);\n\n    function getOperators() external view returns (address defaultOperator, address operator);\n\n    function getBalances() external view returns (uint256 amountX, uint256 amountY);\n\n    function previewShares(uint256 amountX, uint256 amountY)\n        external\n        view\n        returns (uint256 shares, uint256 effectiveX, uint256 effectiveY);\n\n    function previewAmounts(uint256 shares) external view returns (uint256 amountX, uint256 amountY);\n\n    function isDepositsPaused() external view returns (bool);\n\n    function isWhitelistedOnly() external view returns (bool);\n\n    function isWhitelisted(address user) external view returns (bool);\n\n    function getCurrentRound() external view returns (uint256 round);\n\n    function getQueuedWithdrawal(uint256 round, address user) external view returns (uint256 shares);\n\n    function getTotalQueuedWithdrawal(uint256 round) external view returns (uint256 totalQueuedShares);\n\n    function getCurrentTotalQueuedWithdrawal() external view returns (uint256 totalQueuedShares);\n\n    function getRedeemableAmounts(uint256 round, address user)\n        external\n        view\n        returns (uint256 amountX, uint256 amountY);\n\n    function deposit(uint256 amountX, uint256 amountY)\n        external\n        returns (uint256 shares, uint256 effectiveX, uint256 effectiveY);\n\n    function depositNative(uint256 amountX, uint256 amountY)\n        external\n        payable\n        returns (uint256 shares, uint256 effectiveX, uint256 effectiveY);\n\n    function queueWithdrawal(uint256 shares, address recipient) external returns (uint256 round);\n\n    function cancelQueuedWithdrawal(uint256 shares) external returns (uint256 round);\n\n    function redeemQueuedWithdrawal(uint256 round, address recipient)\n        external\n        returns (uint256 amountX, uint256 amountY);\n\n    function redeemQueuedWithdrawalNative(uint256 round, address recipient)\n        external\n        returns (uint256 amountX, uint256 amountY);\n\n    function emergencyWithdraw() external;\n\n    function executeQueuedWithdrawals() external;\n\n    function initialize(string memory name, string memory symbol) external;\n\n//    function setStrategy(IStrategy newStrategy) external;\n\n    function setWhitelistState(bool state) external;\n\n    function addToWhitelist(address[] calldata addresses) external;\n\n    function removeFromWhitelist(address[] calldata addresses) external;\n\n    function pauseDeposits() external;\n\n    function resumeDeposits() external;\n\n    function setEmergencyMode() external;\n\n//    function recoverERC20(IERC20Upgradeable token, address recipient, uint256 amount) external;\n\n    // ---INTERFACE----- DeltaPrime structs\n\n    struct StakingDetails {\n        bytes32 token0Symbol;\n        bytes32 token1Symbol;\n        bytes32 vaultTokenSymbol;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n\n    struct UnstakingDetails {\n        bytes32 token0Symbol;\n        bytes32 token1Symbol;\n        bytes32 vaultTokenSymbol;\n        uint256 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n    }\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ITraderJoeV2AutopoolsFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ITraderJoeV2AutopoolsFacet {\n    function stakeTraderJoeV2AutopoolAVAXUSDC(uint256 amount0Desired, uint256 amount1Desired, uint256 amount0Min, uint256 amount1Min) external;\n\n    function unstakeTraderJoeV2AutopoolAVAXUSDC(uint256 liquidity, uint256 amount0Min, uint256 amount1Min) external;\n\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ITraderJoeV2Facet.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"../../joe-v2/ILBRouter.sol\";\n\ninterface ITraderJoeV2Facet {\n\n    struct TraderJoeV2Bin {\n        ILBPair pair;\n        uint24 id;\n    }\n\n    struct RemoveLiquidityParameters {\n        IERC20 tokenX;\n        IERC20 tokenY;\n        uint16 binStep;\n        uint256 amountXMin;\n        uint256 amountYMin;\n        uint256[] ids;\n        uint256[] amounts;\n        uint256 deadline;\n    }\n\n    function addLiquidityTraderJoeV2(ILBRouter.LiquidityParameters memory liquidityParameters) external;\n\n    function removeLiquidityTraderJoeV2(RemoveLiquidityParameters memory parameters) external;\n\n    function getOwnedTraderJoeV2Bins() external view returns (TraderJoeV2Bin[] memory result);\n\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IUniswapV3Facet.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"../../joe-v2/ILBRouter.sol\";\nimport \"../../uniswap-v3/IUniswapV3Pool.sol\";\nimport \"../../uniswap-v3-periphery/INonfungiblePositionManager.sol\";\n\ninterface IUniswapV3Facet {\n\n    struct UniswapV3Position {\n        address token0;\n        address token1;\n        int24 tickLower;\n        int24 tickUpper;\n        uint128 liquidity;\n    }\n\n\n    function mintLiquidityUniswapV3(INonfungiblePositionManager.MintParams calldata params) external;\n\n    function increaseLiquidityUniswapV3(INonfungiblePositionManager.IncreaseLiquidityParams calldata params) external;\n\n    function decreaseLiquidityUniswapV3(INonfungiblePositionManager.DecreaseLiquidityParams calldata params) external;\n\n    function burnLiquidityUniswapV3(uint256 tokenId) external;\n\n    function getOwnedUniswapV3TokenIds() external view returns (uint256[] memory result);\n\n    }\n"
    },
    "contracts/interfaces/facets/avalanche/IVectorFinanceFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IVectorFinanceFacet {\n    function vectorStakeUSDC1Auto(uint256 amount) external;\n\n    function vectorStakeUSDT1Auto(uint256 amount) external;\n\n    function vectorStakeWAVAX1Auto(uint256 amount) external;\n\n    function vectorStakeSAVAX1Auto(uint256 amount) external;\n\n    function vectorUnstakeUSDC1Auto(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeUSDT1Auto(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeWAVAX1Auto(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeSAVAX1Auto(uint256 amount, uint256 minAmount) external;\n\n    function vectorUSDC1BalanceAuto() external view returns(uint256);\n\n    function vectorUSDT1BalanceAuto() external view returns(uint256);\n\n    function vectorWAVAX1BalanceAuto() external view returns(uint256);\n\n    function vectorSAVAX1BalanceAuto() external view returns(uint256);\n\n    function vectorMigrateAvax() external;\n\n    function vectorMigrateSAvax() external;\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param migratedAmount how much of receipt token was migrated\n        * @param timestamp of staking\n    **/\n    event Migrated(address indexed user, bytes32 indexed asset, address indexed vault, uint256 migratedAmount, uint256 timestamp);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IVectorFinanceFacetOld.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IVectorFinanceFacetOld {\n    function vectorStakeUSDC1(uint256 amount) external;\n\n    function vectorStakeWAVAX1(uint256 amount) external;\n\n    function vectorStakeSAVAX1(uint256 amount) external;\n\n    function vectorUnstakeUSDC1(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeWAVAX1(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeSAVAX1(uint256 amount, uint256 minAmount) external;\n\n    function vectorUSDC1Balance() external view returns(uint256);\n\n    function vectorWAVAX1Balance() external view returns(uint256);\n\n    function vectorSAVAX1Balance() external view returns(uint256);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IYakStakingVectorSAV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IYakStakingVectorSAV2 {\n    function totalDeposits() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function withdraw(uint256 amount) external;\n\n    function depositFor(address account, uint256 amount) external;\n\n    function deposit(uint256 amount) external;\n\n    function decimals() external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n}"
    },
    "contracts/interfaces/facets/avalanche/IYieldYak.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IYieldYak {\n    function totalDeposits() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function withdraw(uint256 amount) external;\n\n    function depositFor(address account) external payable;\n\n    function depositFor(address account, uint256 amount) external;\n\n    function deposit() external payable;\n\n    function deposit(uint256 amount) external;\n\n    function decimals() external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    // ---INTERFACE-----\n    struct YYStakingDetails {\n        address tokenAddress;\n        address vaultAddress;\n        bytes32 tokenSymbol;\n        bytes32 vaultTokenSymbol;\n        uint256 amount;\n    }\n}"
    },
    "contracts/interfaces/facets/avalanche/IYieldYakFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IYieldYakFacet {\n    function stakeAVAXYak(uint256 amount) external;\n\n    function stakeSAVAXYak(uint256 amount) external;\n\n    function stakeGLPYak(uint256 amount) external;\n\n    function stakePNGAVAXUSDCYak(uint256 amount) external;\n\n    function stakePNGAVAXETHYak(uint256 amount) external;\n\n    function stakeTJAVAXUSDCYak(uint256 amount) external;\n\n    function stakeTJAVAXETHYak(uint256 amount) external;\n\n    function stakeTJAVAXSAVAXYak(uint256 amount) external;\n\n    function unstakeAVAXYak(uint256 amount) external;\n\n    function unstakeSAVAXYak(uint256 amount) external;\n\n    function unstakeGLPYak(uint256 amount) external;\n\n    function unstakePNGAVAXUSDCYak(uint256 amount) external;\n\n    function unstakePNGAVAXETHYak(uint256 amount) external;\n\n    function unstakeTJAVAXUSDCYak(uint256 amount) external;\n\n    function unstakeTJAVAXETHYak(uint256 amount) external;\n\n    function unstakeTJAVAXSAVAXYak(uint256 amount) external;\n\n    //deprecated\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    //deprecated\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 depositTokenAmount, uint256 receiptTokenAmount, uint256 timestamp);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IYieldYakSwapFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.17;\n\ninterface IYieldYakSwapFacet {\n    function yakSwap(uint256 _amountIn, uint256 _amountOut, address[] calldata _path, address[] calldata _adapters) external;\n}"
    },
    "contracts/interfaces/facets/celo/IUbeswapDEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IUbeswapDEXFacet {\n    function swapUbeswap(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) external returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/facets/IAssetsOperationsFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IAssetsOperationsFacet {\n    function borrow(bytes32 _asset, uint256 _amount) external;\n\n    function fund(bytes32 _fundedAsset, uint256 _amount) external;\n\n    function fundGLP(uint256 _amount) external;\n\n    function repay(bytes32 _asset, uint256 _amount) payable external;\n\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) external;\n\n    function withdrawGLP(uint256 _amount) external;\n\n    function swapDebt(bytes32 _fromAsset, bytes32 _toAsset, uint256 _repayAmount, uint256 _borrowAmount, address[] calldata _path, address[] calldata _adapters) external;\n\n    event Funded(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    event Withdrawn(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    event Borrowed(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    event Repaid(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    event DebtSwap(address indexed user, address indexed fromToken, address indexed toToken, uint256 repayAmount, uint256 borrowAmount, uint256 timestamp);\n\n}\n"
    },
    "contracts/interfaces/facets/IDiamondInit.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IDiamondInit {\n    function init() external;\n}\n"
    },
    "contracts/interfaces/facets/IGMDVault.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IGMDVault {\n    function enter(uint256 _amountin, uint256 _pid) external;\n    function leave(uint256 _share, uint256 _pid) external;\n    function poolInfo(uint256 pid) view external returns (PoolInfoStruct memory);\n\n    struct PoolInfoStruct {\n        address lpToken;\n        address GDlptoken;\n        uint256 EarnRateSec;\n        uint256 totalStaked;\n        uint256 lastUpdate;\n        uint256 vaultcap;\n        uint256 glpFees;\n        uint256 APR;\n        bool stakable;\n        bool withdrawable;\n        bool rewardStart;\n    }\n}\n"
    },
    "contracts/interfaces/facets/IHealthMeterFacetProd.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IHealthMeterFacetProd {\n    function getHealthMeter() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/facets/IOwnershipFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IOwnershipFacet {\n    function proposeOwnershipTransfer(address _newOwner) external;\n\n    function acceptOwnership() external;\n\n    function owner() external view returns (address owner_);\n\n    function proposedOwner() external view returns (address proposedOwner_);\n\n    function pauseAdmin() external view returns (address pauseAdmin);\n\n    function proposedPauseAdmin() external view returns (address proposedPauseAdmin);\n}\n"
    },
    "contracts/interfaces/facets/ISmartLoanLiquidationFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISmartLoanLiquidationFacet {\n  function _getLTV (  ) external returns ( uint256 ltv );\n  function getMaxLiquidationBonus (  ) external view returns ( uint256 );\n  function getMaxLtv (  ) external view returns ( uint256 );\n  function getMinLtvAfterLiquidation (  ) external view returns ( uint256 );\n  function getPrice ( bytes32 symbol ) external view returns ( uint256 price );\n  function getPrices ( bytes32[] memory symbols ) external view returns ( uint256[] memory prices );\n  function liquidateLoan ( bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonus ) external;\n  function unsafeLiquidateLoan ( bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonus ) external;\n  function whitelistLiquidators(address[] memory _liquidators) external;\n  function delistLiquidators(address[] memory _liquidators) external;\n  function isLiquidatorWhitelisted(address _liquidator) view external returns(bool);\n\n  event Liquidated(address indexed liquidator, bool indexed healing, uint256 initialTotal, uint256 initialDebt, uint256 repayAmount, uint256 bonusInUSD, uint256 health, uint256 timestamp);\n  event LiquidationRepay(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n  event LiquidationTransfer(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n  event LiquidatorWhitelisted(address indexed liquidator, address performer, uint256 timestamp);\n  event LiquidatorDelisted(address indexed liquidator, address performer, uint256 timestamp);\n}\n"
    },
    "contracts/interfaces/facets/ISmartLoanViewFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"../../facets/SmartLoanViewFacet.sol\";\n\ninterface ISmartLoanViewFacet {\n    function getAllAssetsBalances() external view returns (SmartLoanViewFacet.AssetNameBalance[] memory);\n\n    function getDebts() external view returns (SmartLoanViewFacet.AssetNameDebt[] memory);\n\n    function getAllAssetsPrices() external view returns (SmartLoanViewFacet.AssetNamePrice[] memory);\n\n    function getAllOwnedAssets() external view returns (bytes32[] memory result);\n\n    function getTotalAssetsValue() external view returns (uint256);\n\n    function getSupportedTokensAddresses() external view returns (address[] memory result);\n\n    function getBalance(bytes32 _asset) external view returns (uint256);\n\n    function getPercentagePrecision() external view returns (uint256);\n\n    function getContractOwner() external view returns (address _owner);\n\n    function getProposedOwner() external view returns (address _proposed);\n\n    function getStakedPositions() external view returns (IStakingPositions.StakedPosition[] memory  _positions);\n\n    function initialize(address owner) external;\n}\n"
    },
    "contracts/interfaces/facets/ISmartLoanWrappedNativeTokenFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISmartLoanWrappedNativeTokenFacet {\n    function depositNativeToken() payable external;\n\n    function unwrapAndWithdraw(uint256 _amount) payable external;\n\n    function wrapNativeToken(uint256 amount) external;\n\n    event WrapNative(address indexed user, uint256 amount, uint256 timestamp);\n\n    event DepositNative(address indexed user, uint256 amount, uint256 timestamp);\n\n    event UnwrapAndWithdraw(address indexed user, uint256 amount, uint256 timestamp);\n}\n"
    },
    "contracts/interfaces/facets/ISolvencyFacetProd.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISolvencyFacetProd {\n    function getDebt() external view returns (uint256);\n\n    function getFullLoanStatus() external view returns (uint256[5] memory);\n\n    function getHealthRatio() external view returns (uint256);\n\n    function getThresholdWeightedValue() external view returns (uint256);\n\n    function getMaxDataTimestampDelay() external view returns (uint256);\n\n    function getTotalValue() external view returns (uint256);\n\n    function isSignerAuthorized(address _receivedSigner) external view returns (bool);\n\n    function isSolvent() external view returns (bool);\n\n    function isTimestampValid(uint256 _receivedTimestamp) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/facets/IUniswapV2DEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IUniswapV2DEXFacet {\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 maximumSold, uint256 minimumBought, uint256 timestamp);\n    event AddLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n    event RemoveLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n}\n"
    },
    "contracts/interfaces/facets/IYieldYakRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\ninterface IYieldYakRouter {\n    struct Trade {\n        uint256 amountIn;\n        uint256 amountOut;\n        address[] path;\n        address[] adapters;\n    }\n\n    struct FormattedOffer {\n        uint256[] amounts;\n        address[] adapters;\n        address[] path;\n    }\n\n    function swapNoSplit(\n        Trade calldata _trade,\n        address _to,\n        uint256 _fee\n    ) external;\n}"
    },
    "contracts/interfaces/IAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IAddressProvider {\n    function getRecoveryContract() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IAssetsExchange.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title IAssetExchange\n * @dev Basic interface for investing into assets\n * It could be linked either to DEX or to a synthetic assets platform\n */\ninterface IAssetsExchange {\n\n    /*\n     * Swaps selected ERC20 token with other ERC20 token\n     * @param soldToken_ sold ERC20 token's address\n     * @param boughtToken_ bought ERC20 token's address\n     * @param _amountSold exact amount of ERC20 token to be sold\n     * @param _amountBought minimum amount of ERC20 token to be bought\n     **/\n    function swap(address soldToken_, address boughtToken_, uint256 _exactAmountIn, uint256 _minAmountOut) external returns (uint256[] memory);\n\n    /*\n     * Adds liquidity of ERC20 tokens\n     */\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external returns (address, uint, uint, uint);\n\n    /*\n     * Removes liquidity of ERC20 tokens\n     */\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin) external returns (uint, uint);\n\n    /**\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\n     **/\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) external returns (uint256);\n\n    /**\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\n     **/\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) external returns (uint256);\n\n    /**\n     * getPair\n     **/\n    function getPair(address _tokenA, address _tokenB) external returns (address);\n\n}\n"
    },
    "contracts/interfaces/IBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IBorrowersRegistry\n * Keeps a registry of created trading accounts to verify their borrowing rights\n */\ninterface IBorrowersRegistry {\n    function canBorrow(address _account) external view returns (bool);\n\n    function getLoanForOwner(address _owner) external view returns (address);\n\n    function getOwnerOfLoan(address _loan) external view returns (address);\n}\n"
    },
    "contracts/interfaces/ICurvePool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ninterface ICurvePool {\n    function underlying_coins(uint256 arg0) external view returns (address);\n\n    function token() external view returns (address);\n\n    function calc_withdraw_one_coin(\n        uint256 token_amount,\n        uint256 i\n    ) external view returns (uint256);\n\n    function add_liquidity(\n        uint256[5] calldata _amounts,\n        uint256 _min_mint_amount\n    ) external;\n\n    function remove_liquidity(\n        uint256 _amount,\n        uint256[5] calldata _min_amounts\n    ) external;\n\n    function remove_liquidity_one_coin(\n        uint256 _token_amount,\n        uint256 i,\n        uint256 _min_amount\n    ) external;\n}\n"
    },
    "contracts/interfaces/IDiamondBeacon.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IDiamondBeacon {\n\n    function implementation() external view returns (address);\n\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\n     */\n    function implementation(bytes4) external view returns (address);\n\n    function getStatus() external view returns (bool);\n\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\n\n    function acceptBeaconOwnership() external;\n}\n"
    },
    "contracts/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}"
    },
    "contracts/interfaces/IDiamondLoupe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\n// A loupe is a small magnifying glass used to look at diamonds.\n// These functions look at diamonds\ninterface IDiamondLoupe {\n    /// These functions are expected to be called frequently\n    /// by tools.\n\n    struct Facet {\n        address facetAddress;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Gets all facet addresses and their four byte function selectors.\n    /// @return facets_ Facet\n    function facets() external view returns (Facet[] memory facets_);\n\n    /// @notice Gets all the function selectors supported by a specific facet.\n    /// @param _facet The facet address.\n    /// @return facetFunctionSelectors_\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\n\n    /// @notice Get all the facet addresses used by a diamond.\n    /// @return facetAddresses_\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\n\n    /// @notice Gets the facet that supports the given selector.\n    /// @dev If facet is not found return address(0).\n    /// @param _functionSelector The function selector.\n    /// @return facetAddress_ The facet address.\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\n}"
    },
    "contracts/interfaces/IERC173.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title ERC-173 Contract Ownership Standard\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\n/* is ERC165 */\ninterface IERC173 {\n    /// @dev This emits when ownership of a contract changes.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /// @notice Get the address of the owner\n    /// @return owner_ The address of the owner.\n    function owner() external view returns (address owner_);\n\n    /// @notice Set the address of the new owner of the contract\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\n    /// @param _newOwner The address of the new owner of the contract\n    function transferOwnership(address _newOwner) external;\n}"
    },
    "contracts/interfaces/IIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\ninterface IIndex {\n\n    function setRate(uint256 _rate) external;\n\n    function updateUser(address user) external;\n\n    function getIndex() external view returns (uint256);\n\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IMasterChefVTX.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IMasterChefVTX {\n    function earned(address account, address rewardToken) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IPoolRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\ninterface IPoolRewarder {\n\n    function stakeFor(uint _amount, address _stakeFor) external;\n\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\n\n    function getRewardsFor(address _user) external;\n\n    function earned(address _account) external view returns (uint);\n\n    function balanceOf(address _account) external view returns (uint);\n}\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IRatesCalculator\n * @dev Interface defining base method for contracts implementing interest rates calculation.\n * The calculated value could be based on the relation between funds borrowed and deposited.\n */\ninterface IRatesCalculator {\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IStakingPositions.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IStakingPositions\n * Types for staking\n */\ninterface IStakingPositions {\n    struct StakedPosition {\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\n        address asset;\n        bytes32 symbol;\n        bytes32 identifier;\n        bytes4 balanceSelector;\n        bytes4 unstakeSelector;\n    }\n}\n"
    },
    "contracts/interfaces/ITokenManager.sol": {
      "content": "interface ITokenManager {\n    struct poolAsset {\n        bytes32 asset;\n        address poolAddress;\n    }\n\n    struct Asset {\n        bytes32 asset;\n        address assetAddress;\n        uint256 debtCoverage;\n    }\n\n    function activateToken ( address token ) external;\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\n    function deactivateToken ( address token ) external;\n    function debtCoverage ( address ) external view returns ( uint256 );\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\n    function isTokenAssetActive ( address token ) external view returns ( bool );\n    function owner (  ) external view returns ( address );\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\n    function renounceOwnership (  ) external;\n    function setDebtCoverage ( address token, uint256 coverage ) external;\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\n    function supportedTokensList ( uint256 ) external view returns ( address );\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\n    function tokenToStatus ( address ) external view returns ( uint256 );\n    function transferOwnership ( address newOwner ) external;\n}"
    },
    "contracts/interfaces/IVectorFinanceCompounder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IVectorFinanceCompounder {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    function decimals() external view returns (uint256);\n\n    function withdraw(uint256 amount, uint256 minAmount) external;\n\n    function deposit(uint256 amount) external;\n\n    function stakingToken() external view returns (address);\n\n    function depositTracking(address) external view returns (uint256);\n\n    function migrateAllUserDepositsFromManual() external;\n\n    function getDepositTokensForShares(uint256 amount) external view returns (uint256);\n}"
    },
    "contracts/interfaces/IVectorFinanceMainStaking.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IVectorFinanceMainStaking {\n    struct PoolInfo {\n        uint256 pid;\n        bool isActive;\n        address token;\n        address lp;\n        uint256 sizeLp;\n        address receipt;\n        uint256 size;\n        address rewards_addr;\n        address helper;\n    }\n\n    function getPoolInfo(address _address)\n    external\n    view\n    returns (PoolInfo memory);\n}"
    },
    "contracts/interfaces/IVectorFinanceStaking.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./IVectorFinanceCompounder.sol\";\nimport \"./IVectorRewarder.sol\";\n\ninterface IVectorFinanceStaking {\n    function balance(address account) external view returns (uint256);\n\n    function compounder() external view returns (IVectorFinanceCompounder);\n\n    function withdraw(uint256 amount, uint256 minAmount) external;\n\n    function deposit(uint256 amount) external;\n\n    function decimals() external view returns (uint256);\n\n    function earned(address rewardToken) external view returns (uint256);\n\n    function masterVtx() external view returns (address);\n\n    function stakingToken() external view returns (address);\n\n    function rewarder() external view returns (IVectorRewarder);\n}"
    },
    "contracts/interfaces/IVectorRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IVectorRewarder {\n    function rewardTokens(uint256 index) external view returns (address);\n\n    function earned(address account, address rewardToken) external view returns (uint256);\n\n    function updateFor(address account) external;\n}"
    },
    "contracts/interfaces/IWrappedNativeToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\ninterface IWrappedNativeToken {\n\n    function balanceOf(address account) external view returns (uint);\n\n    function deposit() external payable;\n\n    function withdraw(uint wad) external;\n\n    function totalSupply() external view returns (uint);\n\n    function approve(address guy, uint wad) external returns (bool);\n\n    function transfer(address dst, uint wad) external returns (bool);\n\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\n\n}"
    },
    "contracts/interfaces/IYakWrapRouter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\ninterface IYakWrapRouter {\n\n    struct FormattedOffer {\n        uint256[] amounts;\n        address[] adapters;\n        address[] path;\n        uint256 gasEstimate;\n    }\n\n    function findBestPathAndWrap(\n        uint256 amountIn,\n        address tokenIn,\n        address wrapper,\n        uint256 maxSteps,\n        uint256 gasPrice\n    ) external view returns (FormattedOffer memory bestOffer);\n\n    function unwrapAndFindBestPath(\n        uint256 amountIn,\n        address tokenOut,\n        address wrapper,\n        uint256 maxSteps,\n        uint256 gasPrice\n    ) external view returns (FormattedOffer memory bestOffer);\n}"
    },
    "contracts/interfaces/joe-v2/IJoeFactory.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\n/// @title Joe V1 Factory Interface\n/// @notice Interface to interact with Joe V1 Factory\ninterface IJoeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function migrator() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n\n    function setMigrator(address) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/IJoePair.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\n/// @title Joe V1 Pair Interface\n/// @notice Interface to interact with Joe V1 Pairs\ninterface IJoePair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\n        external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/IJoeRouter01.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\n/// @title Joe V1 Router01 Interface\n/// @notice Interface to interact with Joe V1 Router\ninterface IJoeRouter01 {\n    function factory() external pure returns (address);\n\n    function WAVAX() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n\n    function addLiquidityAVAX(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountAVAXMin,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountToken, uint256 amountAVAX, uint256 liquidity);\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityAVAX(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountAVAXMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityAVAXWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountAVAXMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactAVAXForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\n        external\n        payable\n        returns (uint256[] memory amounts);\n\n    function swapTokensForExactAVAX(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForAVAX(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapAVAXForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\n        external\n        payable\n        returns (uint256[] memory amounts);\n\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\n        external\n        pure\n        returns (uint256 amountOut);\n\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\n        external\n        pure\n        returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n"
    },
    "contracts/interfaces/joe-v2/IJoeRouter02.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0\n\npragma solidity ^0.8.10;\n\nimport {IJoeRouter01} from \"./IJoeRouter01.sol\";\n\n/// @title Joe V1 Router Interface\n/// @notice Interface to interact with Joe V1 Router\ninterface IJoeRouter02 is IJoeRouter01 {\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountAVAXMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountAVAX);\n\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountAVAXMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountAVAX);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {ILBPair} from \"./ILBPair.sol\";\nimport {IPendingOwnable} from \"./IPendingOwnable.sol\";\n\n/**\n * @title Liquidity Book Factory Interface\n * @author Trader Joe\n * @notice Required interface of LBFactory contract\n */\ninterface ILBFactory is IPendingOwnable {\n    error LBFactory__IdenticalAddresses(IERC20 token);\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\n    error LBFactory__AddressZero();\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\n    error LBFactory__BinStepTooLow(uint256 binStep);\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\n    error LBFactory__SameFeeRecipient(address feeRecipient);\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\n    error LBFactory__SameImplementation(address LBPairImplementation);\n    error LBFactory__ImplementationNotSet();\n\n    /**\n     * @dev Structure to store the LBPair information, such as:\n     * binStep: The bin step of the LBPair\n     * LBPair: The address of the LBPair\n     * createdByOwner: Whether the pair was created by the owner of the factory\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\n     */\n    struct LBPairInformation {\n        uint16 binStep;\n        ILBPair LBPair;\n        bool createdByOwner;\n        bool ignoredForRouting;\n    }\n\n    event LBPairCreated(\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\n    );\n\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\n\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\n\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\n\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\n\n    event PresetSet(\n        uint256 indexed binStep,\n        uint256 baseFactor,\n        uint256 filterPeriod,\n        uint256 decayPeriod,\n        uint256 reductionFactor,\n        uint256 variableFeeControl,\n        uint256 protocolShare,\n        uint256 maxVolatilityAccumulator\n    );\n\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\n\n    event PresetRemoved(uint256 indexed binStep);\n\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\n\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\n\n    function getMinBinStep() external pure returns (uint256);\n\n    function getFeeRecipient() external view returns (address);\n\n    function getMaxFlashLoanFee() external pure returns (uint256);\n\n    function getFlashLoanFee() external view returns (uint256);\n\n    function getLBPairImplementation() external view returns (address);\n\n    function getNumberOfLBPairs() external view returns (uint256);\n\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\n\n    function getNumberOfQuoteAssets() external view returns (uint256);\n\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\n\n    function isQuoteAsset(IERC20 token) external view returns (bool);\n\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\n        external\n        view\n        returns (LBPairInformation memory);\n\n    function getPreset(uint256 binStep)\n        external\n        view\n        returns (\n            uint256 baseFactor,\n            uint256 filterPeriod,\n            uint256 decayPeriod,\n            uint256 reductionFactor,\n            uint256 variableFeeControl,\n            uint256 protocolShare,\n            uint256 maxAccumulator,\n            bool isOpen\n        );\n\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\n\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\n\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\n        external\n        view\n        returns (LBPairInformation[] memory LBPairsBinStep);\n\n    function setLBPairImplementation(address lbPairImplementation) external;\n\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\n        external\n        returns (ILBPair pair);\n\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\n\n    function setPreset(\n        uint16 binStep,\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator,\n        bool isOpen\n    ) external;\n\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\n\n    function removePreset(uint16 binStep) external;\n\n    function setFeesParametersOnPair(\n        IERC20 tokenX,\n        IERC20 tokenY,\n        uint16 binStep,\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator\n    ) external;\n\n    function setFeeRecipient(address feeRecipient) external;\n\n    function setFlashLoanFee(uint256 flashLoanFee) external;\n\n    function addQuoteAsset(IERC20 quoteAsset) external;\n\n    function removeQuoteAsset(IERC20 quoteAsset) external;\n\n    function forceDecay(ILBPair lbPair) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBFlashLoanCallback.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @title Liquidity Book Flashloan Callback Interface\n/// @author Trader Joe\n/// @notice Required interface to interact with LB flash loans\ninterface ILBFlashLoanCallback {\n    function LBFlashLoanCallback(\n        address sender,\n        IERC20 tokenX,\n        IERC20 tokenY,\n        bytes32 amounts,\n        bytes32 totalFees,\n        bytes calldata data\n    ) external returns (bytes32);\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBLegacyFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {ILBLegacyPair} from \"./ILBLegacyPair.sol\";\nimport {IPendingOwnable} from \"./IPendingOwnable.sol\";\n\n/// @title Liquidity Book Factory Interface\n/// @author Trader Joe\n/// @notice Required interface of LBFactory contract\ninterface ILBLegacyFactory is IPendingOwnable {\n    /// @dev Structure to store the LBPair information, such as:\n    /// - binStep: The bin step of the LBPair\n    /// - LBPair: The address of the LBPair\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\n    struct LBPairInformation {\n        uint16 binStep;\n        ILBLegacyPair LBPair;\n        bool createdByOwner;\n        bool ignoredForRouting;\n    }\n\n    event LBPairCreated(\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\n    );\n\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\n\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\n\n    event FeeParametersSet(\n        address indexed sender,\n        ILBLegacyPair indexed LBPair,\n        uint256 binStep,\n        uint256 baseFactor,\n        uint256 filterPeriod,\n        uint256 decayPeriod,\n        uint256 reductionFactor,\n        uint256 variableFeeControl,\n        uint256 protocolShare,\n        uint256 maxVolatilityAccumulator\n    );\n\n    event FactoryLockedStatusUpdated(bool unlocked);\n\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\n\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\n\n    event PresetSet(\n        uint256 indexed binStep,\n        uint256 baseFactor,\n        uint256 filterPeriod,\n        uint256 decayPeriod,\n        uint256 reductionFactor,\n        uint256 variableFeeControl,\n        uint256 protocolShare,\n        uint256 maxVolatilityAccumulator,\n        uint256 sampleLifetime\n    );\n\n    event PresetRemoved(uint256 indexed binStep);\n\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\n\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\n\n    function MAX_FEE() external pure returns (uint256);\n\n    function MIN_BIN_STEP() external pure returns (uint256);\n\n    function MAX_BIN_STEP() external pure returns (uint256);\n\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\n\n    function LBPairImplementation() external view returns (address);\n\n    function getNumberOfQuoteAssets() external view returns (uint256);\n\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\n\n    function isQuoteAsset(IERC20 token) external view returns (bool);\n\n    function feeRecipient() external view returns (address);\n\n    function flashLoanFee() external view returns (uint256);\n\n    function creationUnlocked() external view returns (bool);\n\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\n\n    function getNumberOfLBPairs() external view returns (uint256);\n\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\n        external\n        view\n        returns (LBPairInformation memory);\n\n    function getPreset(uint16 binStep)\n        external\n        view\n        returns (\n            uint256 baseFactor,\n            uint256 filterPeriod,\n            uint256 decayPeriod,\n            uint256 reductionFactor,\n            uint256 variableFeeControl,\n            uint256 protocolShare,\n            uint256 maxAccumulator,\n            uint256 sampleLifetime\n        );\n\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\n\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\n        external\n        view\n        returns (LBPairInformation[] memory LBPairsBinStep);\n\n    function setLBPairImplementation(address LBPairImplementation) external;\n\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\n        external\n        returns (ILBLegacyPair pair);\n\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\n\n    function setPreset(\n        uint16 binStep,\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator,\n        uint16 sampleLifetime\n    ) external;\n\n    function removePreset(uint16 binStep) external;\n\n    function setFeesParametersOnPair(\n        IERC20 tokenX,\n        IERC20 tokenY,\n        uint16 binStep,\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator\n    ) external;\n\n    function setFeeRecipient(address feeRecipient) external;\n\n    function setFlashLoanFee(uint256 flashLoanFee) external;\n\n    function setFactoryLockedState(bool locked) external;\n\n    function addQuoteAsset(IERC20 quoteAsset) external;\n\n    function removeQuoteAsset(IERC20 quoteAsset) external;\n\n    function forceDecay(ILBLegacyPair LBPair) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBLegacyPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {ILBLegacyToken} from \"./ILBLegacyToken.sol\";\n\n/// @title Liquidity Book Pair V2 Interface\n/// @author Trader Joe\n/// @notice Required interface of LBPair contract\ninterface ILBLegacyPair is ILBLegacyToken {\n    /// @dev Structure to store the protocol fees:\n    /// - binStep: The bin step\n    /// - baseFactor: The base factor\n    /// - filterPeriod: The filter period, where the fees stays constant\n    /// - decayPeriod: The decay period, where the fees are halved\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\n    /// - protocolShare: The share of fees sent to protocol\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\n    /// - volatilityAccumulated: The value of volatility accumulated\n    /// - volatilityReference: The value of volatility reference\n    /// - indexRef: The index reference\n    /// - time: The last time the accumulator was called\n    struct FeeParameters {\n        // 144 lowest bits in slot\n        uint16 binStep;\n        uint16 baseFactor;\n        uint16 filterPeriod;\n        uint16 decayPeriod;\n        uint16 reductionFactor;\n        uint24 variableFeeControl;\n        uint16 protocolShare;\n        uint24 maxVolatilityAccumulated;\n        // 112 highest bits in slot\n        uint24 volatilityAccumulated;\n        uint24 volatilityReference;\n        uint24 indexRef;\n        uint40 time;\n    }\n\n    /// @dev Structure used during swaps to distributes the fees:\n    /// - total: The total amount of fees\n    /// - protocol: The amount of fees reserved for protocol\n    struct FeesDistribution {\n        uint128 total;\n        uint128 protocol;\n    }\n\n    /// @dev Structure to store the reserves of bins:\n    /// - reserveX: The current reserve of tokenX of the bin\n    /// - reserveY: The current reserve of tokenY of the bin\n    struct Bin {\n        uint112 reserveX;\n        uint112 reserveY;\n        uint256 accTokenXPerShare;\n        uint256 accTokenYPerShare;\n    }\n\n    /// @dev Structure to store the information of the pair such as:\n    /// slot0:\n    /// - activeId: The current id used for swaps, this is also linked with the price\n    /// - reserveX: The sum of amounts of tokenX across all bins\n    /// slot1:\n    /// - reserveY: The sum of amounts of tokenY across all bins\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\n    /// - oracleSize: The current size of the oracle, can be increase by users\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\n    /// - oracleId: The current id of the oracle\n    /// slot2:\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\n    /// slot3:\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\n    struct PairInformation {\n        uint24 activeId;\n        uint136 reserveX;\n        uint136 reserveY;\n        uint16 oracleSampleLifetime;\n        uint16 oracleSize;\n        uint16 oracleActiveSize;\n        uint40 oracleLastTimestamp;\n        uint16 oracleId;\n        FeesDistribution feesX;\n        FeesDistribution feesY;\n    }\n\n    /// @dev Structure to store the debts of users\n    /// - debtX: The tokenX's debt\n    /// - debtY: The tokenY's debt\n    struct Debts {\n        uint256 debtX;\n        uint256 debtY;\n    }\n\n    /// @dev Structure to store fees:\n    /// - tokenX: The amount of fees of token X\n    /// - tokenY: The amount of fees of token Y\n    struct Fees {\n        uint128 tokenX;\n        uint128 tokenY;\n    }\n\n    /// @dev Structure to minting informations:\n    /// - amountXIn: The amount of token X sent\n    /// - amountYIn: The amount of token Y sent\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\n    /// - activeFeeX: Fees X currently generated\n    /// - activeFeeY: Fees Y currently generated\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\n    /// - id: Id of the current working bin when looping on the distribution array\n    /// - amountX: The amount of token X deposited in the current bin\n    /// - amountY: The amount of token Y deposited in the current bin\n    /// - distributionX: Distribution of token X for the current working bin\n    /// - distributionY: Distribution of token Y for the current working bin\n    struct MintInfo {\n        uint256 amountXIn;\n        uint256 amountYIn;\n        uint256 amountXAddedToPair;\n        uint256 amountYAddedToPair;\n        uint256 activeFeeX;\n        uint256 activeFeeY;\n        uint256 totalDistributionX;\n        uint256 totalDistributionY;\n        uint256 id;\n        uint256 amountX;\n        uint256 amountY;\n        uint256 distributionX;\n        uint256 distributionY;\n    }\n\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        uint256 indexed id,\n        bool swapForY,\n        uint256 amountIn,\n        uint256 amountOut,\n        uint256 volatilityAccumulated,\n        uint256 fees\n    );\n\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\n\n    event CompositionFee(\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\n    );\n\n    event DepositedToBin(\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\n    );\n\n    event WithdrawnFromBin(\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\n    );\n\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\n\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\n\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\n\n    function tokenX() external view returns (IERC20);\n\n    function tokenY() external view returns (IERC20);\n\n    function factory() external view returns (address);\n\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\n\n    function getGlobalFees()\n        external\n        view\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\n\n    function getOracleParameters()\n        external\n        view\n        returns (\n            uint256 oracleSampleLifetime,\n            uint256 oracleSize,\n            uint256 oracleActiveSize,\n            uint256 oracleLastTimestamp,\n            uint256 oracleId,\n            uint256 min,\n            uint256 max\n        );\n\n    function getOracleSampleFrom(uint256 timeDelta)\n        external\n        view\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\n\n    function feeParameters() external view returns (FeeParameters memory);\n\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\n\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\n\n    function pendingFees(address account, uint256[] memory ids)\n        external\n        view\n        returns (uint256 amountX, uint256 amountY);\n\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\n\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\n\n    function mint(\n        uint256[] calldata ids,\n        uint256[] calldata distributionX,\n        uint256[] calldata distributionY,\n        address to\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\n\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\n        external\n        returns (uint256 amountX, uint256 amountY);\n\n    function increaseOracleLength(uint16 newSize) external;\n\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\n\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\n\n    function setFeesParameters(bytes32 packedFeeParameters) external;\n\n    function forceDecay() external;\n\n    function initialize(\n        IERC20 tokenX,\n        IERC20 tokenY,\n        uint24 activeId,\n        uint16 sampleLifetime,\n        bytes32 packedFeeParameters\n    ) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBLegacyRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {ILBFactory} from \"./ILBFactory.sol\";\nimport {IJoeFactory} from \"./IJoeFactory.sol\";\nimport {ILBLegacyPair} from \"./ILBLegacyPair.sol\";\nimport {ILBToken} from \"./ILBToken.sol\";\nimport {IWNATIVE} from \"./IWNATIVE.sol\";\n\n/// @title Liquidity Book Router Interface\n/// @author Trader Joe\n/// @notice Required interface of LBRouter contract\ninterface ILBLegacyRouter {\n    struct LiquidityParameters {\n        IERC20 tokenX;\n        IERC20 tokenY;\n        uint256 binStep;\n        uint256 amountX;\n        uint256 amountY;\n        uint256 amountXMin;\n        uint256 amountYMin;\n        uint256 activeIdDesired;\n        uint256 idSlippage;\n        int256[] deltaIds;\n        uint256[] distributionX;\n        uint256[] distributionY;\n        address to;\n        uint256 deadline;\n    }\n\n    function factory() external view returns (address);\n\n    function wavax() external view returns (address);\n\n    function oldFactory() external view returns (address);\n\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\n\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\n\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\n        external\n        view\n        returns (uint256 amountIn, uint256 feesIn);\n\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\n        external\n        view\n        returns (uint256 amountOut, uint256 feesIn);\n\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\n        external\n        returns (ILBLegacyPair pair);\n\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\n        external\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\n\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\n        external\n        payable\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\n\n    function removeLiquidity(\n        IERC20 tokenX,\n        IERC20 tokenY,\n        uint16 binStep,\n        uint256 amountXMin,\n        uint256 amountYMin,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountX, uint256 amountY);\n\n    function removeLiquidityAVAX(\n        IERC20 token,\n        uint16 binStep,\n        uint256 amountTokenMin,\n        uint256 amountAVAXMin,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactTokensForAVAX(\n        uint256 amountIn,\n        uint256 amountOutMinAVAX,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactAVAXForTokens(\n        uint256 amountOutMin,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountOut);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amountsIn);\n\n    function swapTokensForExactAVAX(\n        uint256 amountOut,\n        uint256 amountInMax,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256[] memory amountsIn);\n\n    function swapAVAXForExactTokens(\n        uint256 amountOut,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amountsIn);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMinAVAX,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        uint256[] memory pairBinSteps,\n        IERC20[] memory tokenPath,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountOut);\n\n    function sweep(IERC20 token, address to, uint256 amount) external;\n\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\n        external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBLegacyToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/// @title Liquidity Book V2 Token Interface\n/// @author Trader Joe\n/// @notice Required interface of LBToken contract\ninterface ILBLegacyToken is IERC165 {\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\n\n    event TransferBatch(\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\n    );\n\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory batchBalances);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\n\n    function setApprovalForAll(address sender, bool approved) external;\n\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\n\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\n        external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {ILBFactory} from \"./ILBFactory.sol\";\nimport {ILBFlashLoanCallback} from \"./ILBFlashLoanCallback.sol\";\nimport {ILBToken} from \"./ILBToken.sol\";\n\ninterface ILBPair is ILBToken {\n    error LBPair__ZeroBorrowAmount();\n    error LBPair__AddressZero();\n    error LBPair__AlreadyInitialized();\n    error LBPair__EmptyMarketConfigs();\n    error LBPair__FlashLoanCallbackFailed();\n    error LBPair__FlashLoanInsufficientAmount();\n    error LBPair__InsufficientAmountIn();\n    error LBPair__InsufficientAmountOut();\n    error LBPair__InvalidInput();\n    error LBPair__InvalidStaticFeeParameters();\n    error LBPair__OnlyFactory();\n    error LBPair__OnlyProtocolFeeRecipient();\n    error LBPair__OutOfLiquidity();\n    error LBPair__TokenNotSupported();\n    error LBPair__ZeroAmount(uint24 id);\n    error LBPair__ZeroAmountsOut(uint24 id);\n    error LBPair__ZeroShares(uint24 id);\n    error LBPair__MaxTotalFeeExceeded();\n\n    struct MintArrays {\n        uint256[] ids;\n        bytes32[] amounts;\n        uint256[] liquidityMinted;\n    }\n\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\n\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\n\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\n\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\n\n    event Swap(\n        address indexed sender,\n        address indexed to,\n        uint24 id,\n        bytes32 amountsIn,\n        bytes32 amountsOut,\n        uint24 volatilityAccumulator,\n        bytes32 totalFees,\n        bytes32 protocolFees\n    );\n\n    event StaticFeeParametersSet(\n        address indexed sender,\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator\n    );\n\n    event FlashLoan(\n        address indexed sender,\n        ILBFlashLoanCallback indexed receiver,\n        uint24 activeId,\n        bytes32 amounts,\n        bytes32 totalFees,\n        bytes32 protocolFees\n    );\n\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\n\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\n\n    function initialize(\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator,\n        uint24 activeId\n    ) external;\n\n    function getFactory() external view returns (ILBFactory factory);\n\n    function getTokenX() external view returns (IERC20 tokenX);\n\n    function getTokenY() external view returns (IERC20 tokenY);\n\n    function getBinStep() external view returns (uint16 binStep);\n\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\n\n    function getActiveId() external view returns (uint24 activeId);\n\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\n\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\n\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\n\n    function getStaticFeeParameters()\n        external\n        view\n        returns (\n            uint16 baseFactor,\n            uint16 filterPeriod,\n            uint16 decayPeriod,\n            uint16 reductionFactor,\n            uint24 variableFeeControl,\n            uint16 protocolShare,\n            uint24 maxVolatilityAccumulator\n        );\n\n    function getVariableFeeParameters()\n        external\n        view\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\n\n    function getOracleParameters()\n        external\n        view\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\n\n    function getOracleSampleAt(uint40 lookupTimestamp)\n        external\n        view\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\n\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\n\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\n\n    function getSwapIn(uint128 amountOut, bool swapForY)\n        external\n        view\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\n\n    function getSwapOut(uint128 amountIn, bool swapForY)\n        external\n        view\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\n\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\n\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\n\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\n        external\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\n\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\n        external\n        returns (bytes32[] memory amounts);\n\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\n\n    function increaseOracleLength(uint16 newLength) external;\n\n    function setStaticFeeParameters(\n        uint16 baseFactor,\n        uint16 filterPeriod,\n        uint16 decayPeriod,\n        uint16 reductionFactor,\n        uint24 variableFeeControl,\n        uint16 protocolShare,\n        uint24 maxVolatilityAccumulator\n    ) external;\n\n    function forceDecay() external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport {IJoeFactory} from \"./IJoeFactory.sol\";\nimport {ILBFactory} from \"./ILBFactory.sol\";\nimport {ILBLegacyFactory} from \"./ILBLegacyFactory.sol\";\nimport {ILBLegacyRouter} from \"./ILBLegacyRouter.sol\";\nimport {ILBPair} from \"./ILBPair.sol\";\nimport {ILBToken} from \"./ILBToken.sol\";\nimport {IWNATIVE} from \"./IWNATIVE.sol\";\n\n/**\n * @title Liquidity Book Router Interface\n * @author Trader Joe\n * @notice Required interface of LBRouter contract\n */\ninterface ILBRouter {\n    error LBRouter__SenderIsNotWNATIVE();\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\n    error LBRouter__SwapOverflows(uint256 id);\n    error LBRouter__BrokenSwapSafetyCheck();\n    error LBRouter__NotFactoryOwner();\n    error LBRouter__TooMuchTokensIn(uint256 excess);\n    error LBRouter__BinReserveOverflows(uint256 id);\n    error LBRouter__IdOverflows(int256 id);\n    error LBRouter__LengthsMismatch();\n    error LBRouter__WrongTokenOrder();\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\n    error LBRouter__InvalidTokenPath(address wrongToken);\n    error LBRouter__InvalidVersion(uint256 version);\n    error LBRouter__WrongNativeLiquidityParameters(\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\n    );\n\n    /**\n     * @dev This enum represents the version of the pair requested\n     * - V1: Joe V1 pair\n     * - V2: LB pair V2. Also called legacyPair\n     * - V2_1: LB pair V2.1 (current version)\n     */\n    enum Version {\n        V1,\n        V2,\n        V2_1\n    }\n\n    /**\n     * @dev The liquidity parameters, such as:\n     * - tokenX: The address of token X\n     * - tokenY: The address of token Y\n     * - binStep: The bin step of the pair\n     * - amountX: The amount to send of token X\n     * - amountY: The amount to send of token Y\n     * - amountXMin: The min amount of token X added to liquidity\n     * - amountYMin: The min amount of token Y added to liquidity\n     * - activeIdDesired: The active id that user wants to add liquidity from\n     * - idSlippage: The number of id that are allowed to slip\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\n     * - to: The address of the recipient\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\n     * - deadline: The deadline of the transaction\n     */\n    struct LiquidityParameters {\n        IERC20 tokenX;\n        IERC20 tokenY;\n        uint256 binStep;\n        uint256 amountX;\n        uint256 amountY;\n        uint256 amountXMin;\n        uint256 amountYMin;\n        uint256 activeIdDesired;\n        uint256 idSlippage;\n        int256[] deltaIds;\n        uint256[] distributionX;\n        uint256[] distributionY;\n        address to;\n        address refundTo;\n        uint256 deadline;\n    }\n\n    /**\n     * @dev The path parameters, such as:\n     * - pairBinSteps: The list of bin steps of the pairs to go through\n     * - versions: The list of versions of the pairs to go through\n     * - tokenPath: The list of tokens in the path to go through\n     */\n    struct Path {\n        uint256[] pairBinSteps;\n        Version[] versions;\n        IERC20[] tokenPath;\n    }\n\n    function getFactory() external view returns (ILBFactory);\n\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\n\n    function getV1Factory() external view returns (IJoeFactory);\n\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\n\n    function getWNATIVE() external view returns (IWNATIVE);\n\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\n\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\n\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\n        external\n        view\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\n\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\n        external\n        view\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\n\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\n        external\n        returns (ILBPair pair);\n\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\n        external\n        returns (\n            uint256 amountXAdded,\n            uint256 amountYAdded,\n            uint256 amountXLeft,\n            uint256 amountYLeft,\n            uint256[] memory depositIds,\n            uint256[] memory liquidityMinted\n        );\n\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\n        external\n        payable\n        returns (\n            uint256 amountXAdded,\n            uint256 amountYAdded,\n            uint256 amountXLeft,\n            uint256 amountYLeft,\n            uint256[] memory depositIds,\n            uint256[] memory liquidityMinted\n        );\n\n    function removeLiquidity(\n        IERC20 tokenX,\n        IERC20 tokenY,\n        uint16 binStep,\n        uint256 amountXMin,\n        uint256 amountYMin,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountX, uint256 amountY);\n\n    function removeLiquidityNATIVE(\n        IERC20 token,\n        uint16 binStep,\n        uint256 amountTokenMin,\n        uint256 amountNATIVEMin,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Path memory path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactTokensForNATIVE(\n        uint256 amountIn,\n        uint256 amountOutMinNATIVE,\n        Path memory path,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\n        external\n        payable\n        returns (uint256 amountOut);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        Path memory path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amountsIn);\n\n    function swapTokensForExactNATIVE(\n        uint256 amountOut,\n        uint256 amountInMax,\n        Path memory path,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256[] memory amountsIn);\n\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\n        external\n        payable\n        returns (uint256[] memory amountsIn);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        Path memory path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMinNATIVE,\n        Path memory path,\n        address payable to,\n        uint256 deadline\n    ) external returns (uint256 amountOut);\n\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        Path memory path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256 amountOut);\n\n    function sweep(IERC20 token, address to, uint256 amount) external;\n\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\n        external;\n}\n"
    },
    "contracts/interfaces/joe-v2/ILBToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Token Interface\n * @author Trader Joe\n * @notice Interface to interact with the LBToken.\n */\ninterface ILBToken {\n    error LBToken__AddressThisOrZero();\n    error LBToken__InvalidLength();\n    error LBToken__SelfApproval(address owner);\n    error LBToken__SpenderNotApproved(address from, address spender);\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\n\n    event TransferBatch(\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\n    );\n\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\n\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function totalSupply(uint256 id) external view returns (uint256);\n\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\n\n    function approveForAll(address spender, bool approved) external;\n\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\n}\n"
    },
    "contracts/interfaces/joe-v2/IPendingOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Pending Ownable Interface\n * @author Trader Joe\n * @notice Required interface of Pending Ownable contract used for LBFactory\n */\ninterface IPendingOwnable {\n    error PendingOwnable__AddressZero();\n    error PendingOwnable__NoPendingOwner();\n    error PendingOwnable__NotOwner();\n    error PendingOwnable__NotPendingOwner();\n    error PendingOwnable__PendingOwnerAlreadySet();\n\n    event PendingOwnerSet(address indexed pendingOwner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function owner() external view returns (address);\n\n    function pendingOwner() external view returns (address);\n\n    function setPendingOwner(address pendingOwner) external;\n\n    function revokePendingOwner() external;\n\n    function becomeOwner() external;\n\n    function renounceOwnership() external;\n}\n"
    },
    "contracts/interfaces/joe-v2/IWNATIVE.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/**\n * @title WNATIVE Interface\n * @notice Required interface of Wrapped NATIVE contract\n */\ninterface IWNATIVE is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/interfaces/SmartLoanGigaChadInterface.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"./facets/avalanche/IYieldYakFacet.sol\";\nimport \"./facets/avalanche/IGMDFacet.sol\";\nimport \"./facets/avalanche/IYieldYakSwapFacet.sol\";\nimport \"./facets/avalanche/IParaSwapFacet.sol\";\nimport \"./facets/avalanche/IGLPFacet.sol\";\nimport \"./facets/avalanche/IPangolinDEXFacet.sol\";\nimport \"./facets/avalanche/ITraderJoeDEXFacet.sol\";\nimport \"./facets/IUniswapV2DEXFacet.sol\";\nimport \"./facets/IAssetsOperationsFacet.sol\";\nimport \"./facets/IOwnershipFacet.sol\";\nimport \"./facets/ISmartLoanViewFacet.sol\";\nimport \"./facets/ISmartLoanLiquidationFacet.sol\";\nimport \"./facets/ISmartLoanWrappedNativeTokenFacet.sol\";\nimport \"./facets/ISolvencyFacetProd.sol\";\nimport \"./facets/IHealthMeterFacetProd.sol\";\nimport \"./IDiamondLoupe.sol\";\nimport \"./facets/celo/IUbeswapDEXFacet.sol\";\nimport \"./facets/avalanche/IVectorFinanceFacet.sol\";\nimport \"./facets/avalanche/IVectorFinanceFacetOld.sol\";\nimport \"./facets/avalanche/IBeefyFinanceFacet.sol\";\nimport \"./facets/avalanche/ICurveFacet.sol\";\nimport \"./facets/avalanche/ISteakHutFinanceFacet.sol\";\nimport \"./facets/avalanche/ITraderJoeV2Facet.sol\";\nimport \"./facets/avalanche/IUniswapV3Facet.sol\";\nimport \"./facets/avalanche/ITraderJoeV2AutopoolsFacet.sol\";\n\ninterface SmartLoanGigaChadInterface is\n    IGMDFacet,\n    IHealthMeterFacetProd,\n    IGLPFacet,\n    IYieldYakSwapFacet,\n    IParaSwapFacet,\n    IDiamondLoupe,\n    IBeefyFinanceFacet,\n    ISmartLoanWrappedNativeTokenFacet,\n    IPangolinDEXFacet,\n    IUniswapV2DEXFacet,\n    IAssetsOperationsFacet,\n    IOwnershipFacet,\n    ISmartLoanLiquidationFacet,\n    ISmartLoanViewFacet,\n    ISolvencyFacetProd,\n    IYieldYakFacet,\n    IVectorFinanceFacet,\n    IVectorFinanceFacetOld,\n    IUbeswapDEXFacet,\n    ITraderJoeDEXFacet,\n    ICurveFacet,\n    ISteakHutFinanceFacet,\n    ITraderJoeV2Facet,\n    IUniswapV3Facet,\n    ITraderJoeV2AutopoolsFacet\n{}\n"
    },
    "contracts/interfaces/uniswap-v3-periphery/INonfungiblePositionManager.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\nimport '../../lib/uniswap-v3/PoolAddress.sol';\n\n/// @title Non-fungible token for positions\n/// @notice Wraps Uniswap V3 positions in a non-fungible token interface which allows for them to be transferred\n/// and authorized.\ninterface INonfungiblePositionManager\n{\n    /// @notice Emitted when liquidity is increased for a position NFT\n    /// @dev Also emitted when a token is minted\n    /// @param tokenId The ID of the token for which liquidity was increased\n    /// @param liquidity The amount by which liquidity for the NFT position was increased\n    /// @param amount0 The amount of token0 that was paid for the increase in liquidity\n    /// @param amount1 The amount of token1 that was paid for the increase in liquidity\n    event IncreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when liquidity is decreased for a position NFT\n    /// @param tokenId The ID of the token for which liquidity was decreased\n    /// @param liquidity The amount by which liquidity for the NFT position was decreased\n    /// @param amount0 The amount of token0 that was accounted for the decrease in liquidity\n    /// @param amount1 The amount of token1 that was accounted for the decrease in liquidity\n    event DecreaseLiquidity(uint256 indexed tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\n    /// @notice Emitted when tokens are collected for a position NFT\n    /// @dev The amounts reported may not be exactly equivalent to the amounts transferred, due to rounding behavior\n    /// @param tokenId The ID of the token for which underlying tokens were collected\n    /// @param recipient The address of the account that received the collected tokens\n    /// @param amount0 The amount of token0 owed to the position that was collected\n    /// @param amount1 The amount of token1 owed to the position that was collected\n    event Collect(uint256 indexed tokenId, address recipient, uint256 amount0, uint256 amount1);\n\n    /// @notice Returns the position information associated with a given token ID.\n    /// @dev Throws if the token ID is not valid.\n    /// @param tokenId The ID of the token that represents the position\n    /// @return nonce The nonce for permits\n    /// @return operator The address that is approved for spending\n    /// @return token0 The address of the token0 for a specific pool\n    /// @return token1 The address of the token1 for a specific pool\n    /// @return fee The fee associated with the pool\n    /// @return tickLower The lower end of the tick range for the position\n    /// @return tickUpper The higher end of the tick range for the position\n    /// @return liquidity The liquidity of the position\n    //TODO: dirty hack here: removed the last 4 returned values\n    // feeGrowthInside0LastX128 The fee growth of token0 as of the last action on the individual position\n    // feeGrowthInside1LastX128 The fee growth of token1 as of the last action on the individual position\n    // tokensOwed0 The uncollected amount of token0 owed to the position as of the last computation\n    // tokensOwed1 The uncollected amount of token1 owed to the position as of the last computation\n    function positions(uint256 tokenId)\n        external\n        view\n        returns (\n            uint96 nonce,\n            address operator,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickLower,\n            int24 tickUpper,\n            uint128 liquidity\n        );\n\n    struct MintParams {\n        address token0;\n        address token1;\n        uint24 fee;\n        int24 tickLower;\n        int24 tickUpper;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        address recipient;\n        uint256 deadline;\n    }\n\n    /// @notice Creates a new position wrapped in a NFT\n    /// @dev Call this when the pool does exist and is initialized. Note that if the pool is created but not initialized\n    /// a method does not exist, i.e. the pool is assumed to be initialized.\n    /// @param params The params necessary to mint a position, encoded as `MintParams` in calldata\n    /// @return tokenId The ID of the token that represents the minted position\n    /// @return liquidity The amount of liquidity for this position\n    /// @return amount0 The amount of token0\n    /// @return amount1 The amount of token1\n    function mint(MintParams calldata params)\n        external\n        payable\n        returns (\n            uint256 tokenId,\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct IncreaseLiquidityParams {\n        uint256 tokenId;\n        uint256 amount0Desired;\n        uint256 amount1Desired;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Increases the amount of liquidity in a position, with tokens paid by the `msg.sender`\n    /// @param params tokenId The ID of the token for which liquidity is being increased,\n    /// amount0Desired The desired amount of token0 to be spent,\n    /// amount1Desired The desired amount of token1 to be spent,\n    /// amount0Min The minimum amount of token0 to spend, which serves as a slippage check,\n    /// amount1Min The minimum amount of token1 to spend, which serves as a slippage check,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return liquidity The new liquidity amount as a result of the increase\n    /// @return amount0 The amount of token0 to acheive resulting liquidity\n    /// @return amount1 The amount of token1 to acheive resulting liquidity\n    function increaseLiquidity(IncreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (\n            uint128 liquidity,\n            uint256 amount0,\n            uint256 amount1\n        );\n\n    struct DecreaseLiquidityParams {\n        uint256 tokenId;\n        uint128 liquidity;\n        uint256 amount0Min;\n        uint256 amount1Min;\n        uint256 deadline;\n    }\n\n    /// @notice Decreases the amount of liquidity in a position and accounts it to the position\n    /// @param params tokenId The ID of the token for which liquidity is being decreased,\n    /// amount The amount by which liquidity will be decreased,\n    /// amount0Min The minimum amount of token0 that should be accounted for the burned liquidity,\n    /// amount1Min The minimum amount of token1 that should be accounted for the burned liquidity,\n    /// deadline The time by which the transaction must be included to effect the change\n    /// @return amount0 The amount of token0 accounted to the position's tokens owed\n    /// @return amount1 The amount of token1 accounted to the position's tokens owed\n    function decreaseLiquidity(DecreaseLiquidityParams calldata params)\n        external\n        payable\n        returns (uint256 amount0, uint256 amount1);\n\n    struct CollectParams {\n        uint256 tokenId;\n        address recipient;\n        uint128 amount0Max;\n        uint128 amount1Max;\n    }\n\n    /// @notice Collects up to a maximum amount of fees owed to a specific position to the recipient\n    /// @param params tokenId The ID of the NFT for which tokens are being collected,\n    /// recipient The account that should receive the tokens,\n    /// amount0Max The maximum amount of token0 to collect,\n    /// amount1Max The maximum amount of token1 to collect\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Burns a token ID, which deletes it from the NFT contract. The token must have 0 liquidity and all tokens\n    /// must be collected first.\n    /// @param tokenId The ID of the token that is being burned\n    function burn(uint256 tokenId) external payable;\n}\n"
    },
    "contracts/interfaces/uniswap-v3/callback/IUniswapV3FlashCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#flash\n/// @notice Any contract that calls IUniswapV3PoolActions#flash must implement this interface\ninterface IUniswapV3FlashCallback {\n    /// @notice Called to `msg.sender` after transferring to the recipient from IUniswapV3Pool#flash.\n    /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\n    /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#flash call\n    function uniswapV3FlashCallback(\n        uint256 fee0,\n        uint256 fee1,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/uniswap-v3/callback/IUniswapV3MintCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#mint\n/// @notice Any contract that calls IUniswapV3PoolActions#mint must implement this interface\ninterface IUniswapV3MintCallback {\n    /// @notice Called to `msg.sender` after minting liquidity to a position from IUniswapV3Pool#mint.\n    /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\n    /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#mint call\n    function uniswapV3MintCallback(\n        uint256 amount0Owed,\n        uint256 amount1Owed,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/uniswap-v3/callback/IUniswapV3SwapCallback.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Callback for IUniswapV3PoolActions#swap\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\ninterface IUniswapV3SwapCallback {\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n    function uniswapV3SwapCallback(\n        int256 amount0Delta,\n        int256 amount1Delta,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/uniswap-v3/IERC20Minimal.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Minimal ERC20 interface for Uniswap\n/// @notice Contains a subset of the full ERC20 interface that is used in Uniswap V3\ninterface IERC20Minimal {\n    /// @notice Returns the balance of a token\n    /// @param account The account for which to look up the number of tokens it has, i.e. its balance\n    /// @return The number of tokens held by the account\n    function balanceOf(address account) external view returns (uint256);\n\n    /// @notice Transfers the amount of token from the `msg.sender` to the recipient\n    /// @param recipient The account that will receive the amount transferred\n    /// @param amount The number of tokens to send from the sender to the recipient\n    /// @return Returns true for a successful transfer, false for an unsuccessful transfer\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /// @notice Returns the current allowance given to a spender by an owner\n    /// @param owner The account of the token owner\n    /// @param spender The account of the token spender\n    /// @return The current allowance granted by `owner` to `spender`\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\n    /// @param spender The account which will be allowed to spend a given amount of the owners tokens\n    /// @param amount The amount of tokens allowed to be used by `spender`\n    /// @return Returns true for a successful approval, false for unsuccessful\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\n    /// @param sender The account from which the transfer will be initiated\n    /// @param recipient The recipient of the transfer\n    /// @param amount The amount of the transfer\n    /// @return Returns true for a successful transfer, false for unsuccessful\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\n    /// @param from The account from which the tokens were sent, i.e. the balance decreased\n    /// @param to The account to which the tokens were sent, i.e. the balance increased\n    /// @param value The amount of tokens that were transferred\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\n    /// @param owner The account that approved spending of its tokens\n    /// @param spender The account for which the spending allowance was modified\n    /// @param value The new allowance from the owner to the spender\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/uniswap-v3/IUniswapV3Factory.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title The interface for the Uniswap V3 Factory\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\ninterface IUniswapV3Factory {\n    /// @notice Emitted when the owner of the factory is changed\n    /// @param oldOwner The owner before the owner was changed\n    /// @param newOwner The owner after the owner was changed\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n\n    /// @notice Emitted when a pool is created\n    /// @param token0 The first token of the pool by address sort order\n    /// @param token1 The second token of the pool by address sort order\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\n    /// @param pool The address of the created pool\n    event PoolCreated(\n        address indexed token0,\n        address indexed token1,\n        uint24 indexed fee,\n        int24 tickSpacing,\n        address pool\n    );\n\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n    /// @param fee The enabled fee, denominated in hundredths of a bip\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n\n    /// @notice Returns the current owner of the factory\n    /// @dev Can be changed by the current owner via setOwner\n    /// @return The address of the factory owner\n    function owner() external view returns (address);\n\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n    /// @return The tick spacing\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n    /// @param tokenA The contract address of either token0 or token1\n    /// @param tokenB The contract address of the other token\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// @return pool The pool address\n    function getPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external view returns (address pool);\n\n    /// @notice Creates a pool for the given two tokens and fee\n    /// @param tokenA One of the two tokens in the desired pool\n    /// @param tokenB The other of the two tokens in the desired pool\n    /// @param fee The desired fee for the pool\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n    /// are invalid.\n    /// @return pool The address of the newly created pool\n    function createPool(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) external returns (address pool);\n\n    /// @notice Updates the owner of the factory\n    /// @dev Must be called by the current owner\n    /// @param _owner The new owner of the factory\n    function setOwner(address _owner) external;\n\n    /// @notice Enables a fee amount with the given tickSpacing\n    /// @dev Fee amounts may never be removed once enabled\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n}\n"
    },
    "contracts/interfaces/uniswap-v3/IUniswapV3Pool.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\nimport './pool/IUniswapV3PoolImmutables.sol';\nimport './pool/IUniswapV3PoolState.sol';\nimport './pool/IUniswapV3PoolDerivedState.sol';\nimport './pool/IUniswapV3PoolActions.sol';\nimport './pool/IUniswapV3PoolOwnerActions.sol';\nimport './pool/IUniswapV3PoolEvents.sol';\n\n/// @title The interface for a Uniswap V3 Pool\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n/// to the ERC20 specification\n/// @dev The pool interface is broken up into many smaller pieces\ninterface IUniswapV3Pool is\n    IUniswapV3PoolImmutables,\n    IUniswapV3PoolState,\n    IUniswapV3PoolDerivedState,\n    IUniswapV3PoolActions,\n    IUniswapV3PoolOwnerActions,\n    IUniswapV3PoolEvents\n{\n\n}\n"
    },
    "contracts/interfaces/uniswap-v3/IUniswapV3PoolDeployer.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title An interface for a contract that is capable of deploying Uniswap V3 Pools\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain\ninterface IUniswapV3PoolDeployer {\n    /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\n    /// @dev Called by the pool constructor to fetch the parameters of the pool\n    /// Returns factory The factory address\n    /// Returns token0 The first token of the pool by address sort order\n    /// Returns token1 The second token of the pool by address sort order\n    /// Returns fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n    /// Returns tickSpacing The minimum number of ticks between initialized ticks\n    function parameters()\n        external\n        view\n        returns (\n            address factory,\n            address token0,\n            address token1,\n            uint24 fee,\n            int24 tickSpacing\n        );\n}\n"
    },
    "contracts/interfaces/uniswap-v3/pool/IUniswapV3PoolActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissionless pool actions\n/// @notice Contains pool methods that can be called by anyone\ninterface IUniswapV3PoolActions {\n    /// @notice Sets the initial price for the pool\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\n    function initialize(uint160 sqrtPriceX96) external;\n\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\n    /// @param recipient The address for which the liquidity will be created\n    /// @param tickLower The lower tick of the position in which to add liquidity\n    /// @param tickUpper The upper tick of the position in which to add liquidity\n    /// @param amount The amount of liquidity to mint\n    /// @param data Any data that should be passed through to the callback\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\n    function mint(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount,\n        bytes calldata data\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Collects tokens owed to a position\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\n    /// @param recipient The address which should receive the fees collected\n    /// @param tickLower The lower tick of the position for which to collect fees\n    /// @param tickUpper The upper tick of the position for which to collect fees\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\n    /// @return amount0 The amount of fees collected in token0\n    /// @return amount1 The amount of fees collected in token1\n    function collect(\n        address recipient,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\n    /// @dev Fees must be collected separately via a call to #collect\n    /// @param tickLower The lower tick of the position for which to burn liquidity\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\n    /// @param amount How much liquidity to burn\n    /// @return amount0 The amount of token0 sent to the recipient\n    /// @return amount1 The amount of token1 sent to the recipient\n    function burn(\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 amount\n    ) external returns (uint256 amount0, uint256 amount1);\n\n    /// @notice Swap token0 for token1, or token1 for token0\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\n    /// @param recipient The address to receive the output of the swap\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\n    /// @param data Any data to be passed through to the callback\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\n    function swap(\n        address recipient,\n        bool zeroForOne,\n        int256 amountSpecified,\n        uint160 sqrtPriceLimitX96,\n        bytes calldata data\n    ) external returns (int256 amount0, int256 amount1);\n\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\n    /// @param recipient The address which will receive the token0 and token1 amounts\n    /// @param amount0 The amount of token0 to send\n    /// @param amount1 The amount of token1 to send\n    /// @param data Any data to be passed through to the callback\n    function flash(\n        address recipient,\n        uint256 amount0,\n        uint256 amount1,\n        bytes calldata data\n    ) external;\n\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\n    /// the input observationCardinalityNext.\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\n}\n"
    },
    "contracts/interfaces/uniswap-v3/pool/IUniswapV3PoolDerivedState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that is not stored\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\n/// blockchain. The functions here may have variable gas costs.\ninterface IUniswapV3PoolDerivedState {\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\n    /// you must call it with secondsAgos = [3600, 0].\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\n    /// timestamp\n    function observe(uint32[] calldata secondsAgos)\n        external\n        view\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\n\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\n    /// snapshot is taken and the second snapshot is taken.\n    /// @param tickLower The lower tick of the range\n    /// @param tickUpper The upper tick of the range\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\n        external\n        view\n        returns (\n            int56 tickCumulativeInside,\n            uint160 secondsPerLiquidityInsideX128,\n            uint32 secondsInside\n        );\n}\n"
    },
    "contracts/interfaces/uniswap-v3/pool/IUniswapV3PoolEvents.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Events emitted by a pool\n/// @notice Contains all events emitted by the pool\ninterface IUniswapV3PoolEvents {\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\n\n    /// @notice Emitted when liquidity is minted for a given position\n    /// @param sender The address that minted the liquidity\n    /// @param owner The owner of the position and recipient of any minted liquidity\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity minted to the position range\n    /// @param amount0 How much token0 was required for the minted liquidity\n    /// @param amount1 How much token1 was required for the minted liquidity\n    event Mint(\n        address sender,\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted when fees are collected by the owner of a position\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\n    /// @param owner The owner of the position for which fees are collected\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount0 The amount of token0 fees collected\n    /// @param amount1 The amount of token1 fees collected\n    event Collect(\n        address indexed owner,\n        address recipient,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount0,\n        uint128 amount1\n    );\n\n    /// @notice Emitted when a position's liquidity is removed\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\n    /// @param owner The owner of the position for which liquidity is removed\n    /// @param tickLower The lower tick of the position\n    /// @param tickUpper The upper tick of the position\n    /// @param amount The amount of liquidity to remove\n    /// @param amount0 The amount of token0 withdrawn\n    /// @param amount1 The amount of token1 withdrawn\n    event Burn(\n        address indexed owner,\n        int24 indexed tickLower,\n        int24 indexed tickUpper,\n        uint128 amount,\n        uint256 amount0,\n        uint256 amount1\n    );\n\n    /// @notice Emitted by the pool for any swaps between token0 and token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the output of the swap\n    /// @param amount0 The delta of the token0 balance of the pool\n    /// @param amount1 The delta of the token1 balance of the pool\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\n    /// @param liquidity The liquidity of the pool after the swap\n    /// @param tick The log base 1.0001 of price of the pool after the swap\n    event Swap(\n        address indexed sender,\n        address indexed recipient,\n        int256 amount0,\n        int256 amount1,\n        uint160 sqrtPriceX96,\n        uint128 liquidity,\n        int24 tick\n    );\n\n    /// @notice Emitted by the pool for any flashes of token0/token1\n    /// @param sender The address that initiated the swap call, and that received the callback\n    /// @param recipient The address that received the tokens from flash\n    /// @param amount0 The amount of token0 that was flashed\n    /// @param amount1 The amount of token1 that was flashed\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\n    event Flash(\n        address indexed sender,\n        address indexed recipient,\n        uint256 amount0,\n        uint256 amount1,\n        uint256 paid0,\n        uint256 paid1\n    );\n\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\n    /// just before a mint/swap/burn.\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\n    event IncreaseObservationCardinalityNext(\n        uint16 observationCardinalityNextOld,\n        uint16 observationCardinalityNextNew\n    );\n\n    /// @notice Emitted when the protocol fee is changed by the pool\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\n\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\n    /// @param sender The address that collects the protocol fees\n    /// @param recipient The address that receives the collected protocol fees\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/interfaces/uniswap-v3/pool/IUniswapV3PoolImmutables.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that never changes\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\ninterface IUniswapV3PoolImmutables {\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\n    /// @return The contract address\n    function factory() external view returns (address);\n\n    /// @notice The first of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token0() external view returns (address);\n\n    /// @notice The second of the two tokens of the pool, sorted by address\n    /// @return The token contract address\n    function token1() external view returns (address);\n\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\n    /// @return The fee\n    function fee() external view returns (uint24);\n\n    /// @notice The pool tick spacing\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\n    /// This value is an int24 to avoid casting even though it is always positive.\n    /// @return The tick spacing\n    function tickSpacing() external view returns (int24);\n\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\n    /// @return The max amount of liquidity per tick\n    function maxLiquidityPerTick() external view returns (uint128);\n}\n"
    },
    "contracts/interfaces/uniswap-v3/pool/IUniswapV3PoolOwnerActions.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Permissioned pool actions\n/// @notice Contains pool methods that may only be called by the factory owner\ninterface IUniswapV3PoolOwnerActions {\n    /// @notice Set the denominator of the protocol's % share of the fees\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\n\n    /// @notice Collect the protocol fee accrued to the pool\n    /// @param recipient The address to which collected protocol fees should be sent\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\n    /// @return amount0 The protocol fee collected in token0\n    /// @return amount1 The protocol fee collected in token1\n    function collectProtocol(\n        address recipient,\n        uint128 amount0Requested,\n        uint128 amount1Requested\n    ) external returns (uint128 amount0, uint128 amount1);\n}\n"
    },
    "contracts/interfaces/uniswap-v3/pool/IUniswapV3PoolState.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Pool state that can change\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\n/// per transaction\ninterface IUniswapV3PoolState {\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n    /// when accessed externally.\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n    /// boundary.\n    /// observationIndex The index of the last oracle observation that was written,\n    /// observationCardinality The current maximum number of observations stored in the pool,\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n    /// feeProtocol The protocol fee for both tokens of the pool.\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n    /// unlocked Whether the pool is currently locked to reentrancy\n    function slot0()\n        external\n        view\n        returns (\n            uint160 sqrtPriceX96,\n            int24 tick,\n            uint16 observationIndex,\n            uint16 observationCardinality,\n            uint16 observationCardinalityNext,\n            uint8 feeProtocol,\n            bool unlocked\n        );\n\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal0X128() external view returns (uint256);\n\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n    /// @dev This value can overflow the uint256\n    function feeGrowthGlobal1X128() external view returns (uint256);\n\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\n    /// @dev Protocol fees will never exceed uint128 max in either token\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\n\n    /// @notice The currently in range liquidity available to the pool\n    /// @dev This value has no relationship to the total liquidity across all ticks\n    function liquidity() external view returns (uint128);\n\n    /// @notice Look up information about a specific tick in the pool\n    /// @param tick The tick to look up\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n    /// tick upper,\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n    /// a specific position.\n    function ticks(int24 tick)\n        external\n        view\n        returns (\n            uint128 liquidityGross,\n            int128 liquidityNet,\n            uint256 feeGrowthOutside0X128,\n            uint256 feeGrowthOutside1X128,\n            int56 tickCumulativeOutside,\n            uint160 secondsPerLiquidityOutsideX128,\n            uint32 secondsOutside,\n            bool initialized\n        );\n\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\n\n    /// @notice Returns the information about a position by the position's key\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n    /// @return _liquidity The amount of liquidity in the position,\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n    function positions(bytes32 key)\n        external\n        view\n        returns (\n            uint128 _liquidity,\n            uint256 feeGrowthInside0LastX128,\n            uint256 feeGrowthInside1LastX128,\n            uint128 tokensOwed0,\n            uint128 tokensOwed1\n        );\n\n    /// @notice Returns data about a specific observation index\n    /// @param index The element of the observations array to fetch\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n    /// ago, rather than at a specific index in the array.\n    /// @return blockTimestamp The timestamp of the observation,\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\n    function observations(uint256 index)\n        external\n        view\n        returns (\n            uint32 blockTimestamp,\n            int56 tickCumulative,\n            uint160 secondsPerLiquidityCumulativeX128,\n            bool initialized\n        );\n}\n"
    },
    "contracts/lib/arbitrum/DeploymentConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../../interfaces/ITokenManager.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n/**\n * DeploymentConstants\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\n * to decrease gas costs. Not meant to be updated unless really necessary.\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\n **/\nlibrary DeploymentConstants {\n\n    // Used for LiquidationBonus calculations\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\n\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'ARBI';\n\n    address private constant _NATIVE_ADDRESS = 0x82aF49447D8a07e3bd95BD0d56f35241523fBab1;\n\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x62Cf82FB0484aF382714cD09296260edc1DC0c6c;\n\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0xFf5e3dDaefF411a1dC6CcE00014e4Bca39265c20;\n\n    address private constant _TOKEN_MANAGER_ADDRESS = 0x0a0D954d4b0F0b47a5990C0abd179A90fF74E255;\n\n    address private constant _ADDRESS_PROVIDER = 0x6Aa0Fe94731aDD419897f5783712eBc13E8F3982;\n\n    //implementation-specific\n\n    function getPercentagePrecision() internal pure returns (uint256) {\n        return _PERCENTAGE_PRECISION;\n    }\n\n    //blockchain-specific\n\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\n        return _NATIVE_TOKEN_SYMBOL;\n    }\n\n    function getNativeToken() internal pure returns (address payable) {\n        return payable(_NATIVE_ADDRESS);\n    }\n\n    //deployment-specific\n\n    function getDiamondAddress() internal pure returns (address) {\n        return _DIAMOND_BEACON_ADDRESS;\n    }\n\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\n        return _SMART_LOANS_FACTORY_ADDRESS;\n    }\n\n    function getTokenManager() internal pure returns (ITokenManager) {\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\n    }\n\n    function getAddressProvider() internal pure returns (address) {\n        return _ADDRESS_PROVIDER;\n    }\n\n    /**\n    * Returns all owned assets keys\n    **/\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        return sls.ownedAssets._inner._keys._inner._values;\n    }\n}"
    },
    "contracts/lib/avalanche/DeploymentConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"../../interfaces/ITokenManager.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n/**\n * DeploymentConstants\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\n * to decrease gas costs. Not meant to be updated unless really necessary.\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\n **/\nlibrary DeploymentConstants {\n\n    // Used for LiquidationBonus calculations\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\n\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\n\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\n\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\n\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\n\n    address private constant _ADDRESS_PROVIDER = address(0);\n\n    //implementation-specific\n\n    function getPercentagePrecision() internal pure returns (uint256) {\n        return _PERCENTAGE_PRECISION;\n    }\n\n    //blockchain-specific\n\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\n        return _NATIVE_TOKEN_SYMBOL;\n    }\n\n    function getNativeToken() internal pure returns (address payable) {\n        return payable(_NATIVE_ADDRESS);\n    }\n\n    //deployment-specific\n\n    function getDiamondAddress() internal pure returns (address) {\n        return _DIAMOND_BEACON_ADDRESS;\n    }\n\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\n        return _SMART_LOANS_FACTORY_ADDRESS;\n    }\n\n    function getTokenManager() internal pure returns (ITokenManager) {\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\n    }\n\n    function getAddressProvider() internal pure returns (address) {\n        return _ADDRESS_PROVIDER;\n    }\n\n    /**\n    * Returns all owned assets keys\n    **/\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        return sls.ownedAssets._inner._keys._inner._values;\n    }\n}"
    },
    "contracts/lib/Bytes32EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(\n        Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), errorMessage);\n        return value;\n    }\n\n    // Bytes32ToAddressMap\n\n    struct Bytes32ToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToAddressMap storage map,\n        bytes32 key,\n        address value\n    ) internal returns (bool) {\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\n        return _remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\n        return _contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (key, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToAddressMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\n    }\n}\n"
    },
    "contracts/lib/celo/DeploymentConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../../interfaces/ITokenManager.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n/**\n * DeploymentConstants\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\n * to decrease gas costs. Not meant to be updated unless really necessary.\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\n **/\nlibrary DeploymentConstants {\n\n    // Used for LiquidationBonus calculations\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\n\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'CELO';\n\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x8198f5d8F8CfFE8f9C413d98a0A55aEB8ab9FbB7;\n\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x4EE6eCAD1c2Dae9f525404De8555724e3c35d07B;\n\n    address private constant _TOKEN_MANAGER_ADDRESS = 0x4EE6eCAD1c2Dae9f525404De8555724e3c35d07B;\n\n    address private constant _ADDRESS_PROVIDER = address(0);\n\n    //implementation-specific\n\n    function getPercentagePrecision() internal pure returns (uint256) {\n        return _PERCENTAGE_PRECISION;\n    }\n\n    //blockchain-specific\n\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\n        return _NATIVE_TOKEN_SYMBOL;\n    }\n\n    function getNativeToken() internal pure returns (address payable) {\n        return payable(_NATIVE_ADDRESS);\n    }\n\n    //deployment-specific\n\n    function getDiamondAddress() internal pure returns (address) {\n        return _DIAMOND_BEACON_ADDRESS;\n    }\n\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\n        return _SMART_LOANS_FACTORY_ADDRESS;\n    }\n\n    function getTokenManager() internal pure returns (ITokenManager) {\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\n    }\n\n    /**\n    * Returns all owned assets keys\n    **/\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        return sls.ownedAssets._inner._keys._inner._values;\n    }\n}"
    },
    "contracts/lib/DiamondStorageLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport \"../lib/Bytes32EnumerableMap.sol\";\nimport \"../interfaces/IStakingPositions.sol\";\nimport \"../interfaces/facets/avalanche/ITraderJoeV2Facet.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nlibrary DiamondStorageLib {\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\n\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\"diamond.standard.liquidation.storage\");\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\"diamond.standard.smartloan.storage\");\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\"diamond.standard.reentrancy.guard.storage\");\n    bytes32 constant OWNED_TRADERJOE_V2_BINS_POSITION = keccak256(\"diamond.standard.traderjoe_v2_bins_1685370112\");\n    //TODO: maybe we should keep here a tuple[tokenId, factory] to account for multiple Uniswap V3 deployments\n    bytes32 constant OWNED_UNISWAP_V3_TOKEN_IDS_POSITION = keccak256(\"diamond.standard.uniswap_v3_token_ids_1685370112\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n        // Used to select methods that can be executed even when Diamond is paused\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\n\n        bool _initialized;\n        bool _active;\n\n        uint256 _lastBorrowTimestamp;\n    }\n\n    struct SmartLoanStorage {\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\n        address pauseAdmin;\n        // Owner of the contract\n        address contractOwner;\n        // Proposed owner of the contract\n        address proposedOwner;\n        // Proposed pauseAdmin of the contract\n        address proposedPauseAdmin;\n        // Is contract initialized?\n        bool _initialized;\n        // TODO: mock staking tokens until redstone oracle supports them\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\n        // Staked positions of the contract\n        IStakingPositions.StakedPosition[] currentStakedPositions;\n    }\n\n    struct TraderJoeV2Storage {\n        // TJ v2 bins of the contract\n        ITraderJoeV2Facet.TraderJoeV2Bin[] ownedTjV2Bins;\n    }\n\n    struct UniswapV3Storage {\n        // UniswapV3 token IDs of the contract\n        uint256[] ownedUniswapV3TokenIds;\n    }\n\n    struct LiquidationStorage {\n        // Mapping controlling addresses that can execute the liquidation methods\n        mapping(address=>bool) canLiquidate;\n    }\n\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\n        assembly {\n            rgs.slot := position\n        }\n    }\n\n    function traderJoeV2Storage() internal pure returns (TraderJoeV2Storage storage tjv2s) {\n        bytes32 position = OWNED_TRADERJOE_V2_BINS_POSITION;\n        assembly {\n            tjv2s.slot := position\n        }\n    }\n\n    function uniswapV3Storage() internal pure returns (UniswapV3Storage storage uv3s) {\n        bytes32 position = OWNED_UNISWAP_V3_TOKEN_IDS_POSITION;\n        assembly {\n            uv3s.slot := position\n        }\n    }\n\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\n        assembly {\n            ls.slot := position\n        }\n    }\n\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\n        assembly {\n            sls.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\n\n    function setContractOwner(address _newOwner) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        address previousOwner = sls.contractOwner;\n        sls.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function getTjV2OwnedBins() internal returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\n        bins = tjv2s.ownedTjV2Bins;\n    }\n\n    function getTjV2OwnedBinsView() internal view returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\n        bins = tjv2s.ownedTjV2Bins;\n    }\n\n    function getUV3OwnedTokenIds() internal returns(uint256[] storage tokenIds){\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\n    }\n\n    function getUV3OwnedTokenIdsView() internal view returns(uint256[] storage tokenIds){\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\n    }\n\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        address previousPauseAdmin = sls.pauseAdmin;\n        sls.pauseAdmin = _newPauseAdmin;\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = smartLoanStorage().contractOwner;\n    }\n\n    function pauseAdmin() internal view returns (address pauseAdmin) {\n        pauseAdmin = smartLoanStorage().pauseAdmin;\n    }\n\n    function setProposedOwner(address _newOwner) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        sls.proposedOwner = _newOwner;\n    }\n\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        sls.proposedPauseAdmin = _newPauseAdmin;\n    }\n\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\n        DiamondStorage storage ds = diamondStorage();\n        return ds.canBeExecutedWhenPaused[_methodSig];\n    }\n\n    function proposedOwner() internal view returns (address proposedOwner_) {\n        proposedOwner_ = smartLoanStorage().proposedOwner;\n    }\n\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\n    }\n\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\n        _positions = smartLoanStorage().currentStakedPositions;\n    }\n\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\n\n        bool found;\n\n        for (uint256 i; i < positions.length; i++) {\n            if (positions[i].identifier == position.identifier) {\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            positions.push(position);\n        }\n    }\n\n    function removeStakedPosition(bytes32 identifier) internal {\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\n\n        for (uint256 i; i < positions.length; i++) {\n            if (positions[i].identifier == identifier) {\n                positions[i] = positions[positions.length - 1];\n                positions.pop();\n            }\n        }\n    }\n\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\n        require(_symbol != \"\", \"Symbol cannot be empty\");\n        require(_address != address(0), \"Invalid AddressZero\");\n        SmartLoanStorage storage sls = smartLoanStorage();\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\n    }\n\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\n        SmartLoanStorage storage sls = smartLoanStorage();\n        return sls.ownedAssets.contains(_symbol);\n    }\n\n    function removeOwnedAsset(bytes32 _symbol) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == smartLoanStorage().contractOwner, \"DiamondStorageLib: Must be contract owner\");\n    }\n\n    function enforceIsPauseAdmin() internal view {\n        require(msg.sender == smartLoanStorage().pauseAdmin, \"DiamondStorageLib: Must be contract pauseAdmin\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"DiamondStorageLibCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"DiamondStorageLibCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"DiamondStorageLibCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"DiamondStorageLibCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"DiamondStorageLibCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"DiamondStorageLibCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"DiamondStorageLibCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"DiamondStorageLibCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"DiamondStorageLibCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"DiamondStorageLibCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }\n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\n        require(_facetAddress != address(0), \"DiamondStorageLibCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"DiamondStorageLibCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"DiamondStorageLibCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"DiamondStorageLibCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}"
    },
    "contracts/lib/joe-v2/Constants.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Constants Library\n * @author Trader Joe\n * @notice Set of constants for Liquidity Book contracts\n */\nlibrary Constants {\n    uint8 internal constant SCALE_OFFSET = 128;\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\n\n    uint256 internal constant PRECISION = 1e18;\n    uint256 internal constant SQUARED_PRECISION = PRECISION * PRECISION;\n\n    uint256 internal constant MAX_FEE = 0.1e18; // 10%\n    uint256 internal constant MAX_PROTOCOL_SHARE = 2_500; // 25% of the fee\n\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\n\n    /// @dev The expected return after a successful flash loan\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\"LBPair.onFlashLoan\");\n}\n"
    },
    "contracts/lib/joe-v2/math/BitMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Bit Math Library\n * @author Trader Joe\n * @notice Helper contract used for bit calculations\n */\nlibrary BitMath {\n    /**\n     * @dev Returns the index of the closest bit on the right of x that is non null\n     * @param x The value as a uint256\n     * @param bit The index of the bit to start searching at\n     * @return id The index of the closest non null bit on the right of x.\n     * If there is no closest bit, it returns max(uint256)\n     */\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\n        unchecked {\n            uint256 shift = 255 - bit;\n            x <<= shift;\n\n            // can't overflow as it's non-zero and we shifted it by `_shift`\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - shift;\n        }\n    }\n\n    /**\n     * @dev Returns the index of the closest bit on the left of x that is non null\n     * @param x The value as a uint256\n     * @param bit The index of the bit to start searching at\n     * @return id The index of the closest non null bit on the left of x.\n     * If there is no closest bit, it returns max(uint256)\n     */\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\n        unchecked {\n            x >>= bit;\n\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\n        }\n    }\n\n    /**\n     * @dev Returns the index of the most significant bit of x\n     * This function returns 0 if x is 0\n     * @param x The value as a uint256\n     * @return msb The index of the most significant bit of x\n     */\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\n        assembly {\n            if gt(x, 0xffffffffffffffffffffffffffffffff) {\n                x := shr(128, x)\n                msb := 128\n            }\n            if gt(x, 0xffffffffffffffff) {\n                x := shr(64, x)\n                msb := add(msb, 64)\n            }\n            if gt(x, 0xffffffff) {\n                x := shr(32, x)\n                msb := add(msb, 32)\n            }\n            if gt(x, 0xffff) {\n                x := shr(16, x)\n                msb := add(msb, 16)\n            }\n            if gt(x, 0xff) {\n                x := shr(8, x)\n                msb := add(msb, 8)\n            }\n            if gt(x, 0xf) {\n                x := shr(4, x)\n                msb := add(msb, 4)\n            }\n            if gt(x, 0x3) {\n                x := shr(2, x)\n                msb := add(msb, 2)\n            }\n            if gt(x, 0x1) { msb := add(msb, 1) }\n        }\n    }\n\n    /**\n     * @dev Returns the index of the least significant bit of x\n     * This function returns 255 if x is 0\n     * @param x The value as a uint256\n     * @return lsb The index of the least significant bit of x\n     */\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\n        assembly {\n            let sx := shl(128, x)\n            if iszero(iszero(sx)) {\n                lsb := 128\n                x := sx\n            }\n            sx := shl(64, x)\n            if iszero(iszero(sx)) {\n                x := sx\n                lsb := add(lsb, 64)\n            }\n            sx := shl(32, x)\n            if iszero(iszero(sx)) {\n                x := sx\n                lsb := add(lsb, 32)\n            }\n            sx := shl(16, x)\n            if iszero(iszero(sx)) {\n                x := sx\n                lsb := add(lsb, 16)\n            }\n            sx := shl(8, x)\n            if iszero(iszero(sx)) {\n                x := sx\n                lsb := add(lsb, 8)\n            }\n            sx := shl(4, x)\n            if iszero(iszero(sx)) {\n                x := sx\n                lsb := add(lsb, 4)\n            }\n            sx := shl(2, x)\n            if iszero(iszero(sx)) {\n                x := sx\n                lsb := add(lsb, 2)\n            }\n            if iszero(iszero(shl(1, x))) { lsb := add(lsb, 1) }\n\n            lsb := sub(255, lsb)\n        }\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/Encoded.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Encoded Library\n * @author Trader Joe\n * @notice Helper contract used for decoding bytes32 sample\n */\nlibrary Encoded {\n    uint256 internal constant MASK_UINT1 = 0x1;\n    uint256 internal constant MASK_UINT8 = 0xff;\n    uint256 internal constant MASK_UINT12 = 0xfff;\n    uint256 internal constant MASK_UINT14 = 0x3fff;\n    uint256 internal constant MASK_UINT16 = 0xffff;\n    uint256 internal constant MASK_UINT20 = 0xfffff;\n    uint256 internal constant MASK_UINT24 = 0xffffff;\n    uint256 internal constant MASK_UINT40 = 0xffffffffff;\n    uint256 internal constant MASK_UINT64 = 0xffffffffffffffff;\n    uint256 internal constant MASK_UINT128 = 0xffffffffffffffffffffffffffffffff;\n\n    /**\n     * @notice Internal function to set a value in an encoded bytes32 using a mask and offset\n     * @dev This function can overflow\n     * @param encoded The previous encoded value\n     * @param value The value to encode\n     * @param mask The mask\n     * @param offset The offset\n     * @return newEncoded The new encoded value\n     */\n    function set(bytes32 encoded, uint256 value, uint256 mask, uint256 offset)\n        internal\n        pure\n        returns (bytes32 newEncoded)\n    {\n        assembly {\n            newEncoded := and(encoded, not(shl(offset, mask)))\n            newEncoded := or(newEncoded, shl(offset, and(value, mask)))\n        }\n    }\n\n    /**\n     * @notice Internal function to set a bool in an encoded bytes32 using an offset\n     * @dev This function can overflow\n     * @param encoded The previous encoded value\n     * @param boolean The bool to encode\n     * @param offset The offset\n     * @return newEncoded The new encoded value\n     */\n    function setBool(bytes32 encoded, bool boolean, uint256 offset) internal pure returns (bytes32 newEncoded) {\n        return set(encoded, boolean ? 1 : 0, MASK_UINT1, offset);\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample using a mask and offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param mask The mask\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decode(bytes32 encoded, uint256 mask, uint256 offset) internal pure returns (uint256 value) {\n        assembly {\n            value := and(shr(offset, encoded), mask)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a bool using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return boolean The decoded value as a bool\n     */\n    function decodeBool(bytes32 encoded, uint256 offset) internal pure returns (bool boolean) {\n        assembly {\n            boolean := and(shr(offset, encoded), MASK_UINT1)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint8 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decodeUint8(bytes32 encoded, uint256 offset) internal pure returns (uint8 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT8)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint12 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value as a uint16, since uint12 is not supported\n     */\n    function decodeUint12(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT12)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint14 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value as a uint16, since uint14 is not supported\n     */\n    function decodeUint14(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT14)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint16 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decodeUint16(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT16)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint20 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value as a uint24, since uint20 is not supported\n     */\n    function decodeUint20(bytes32 encoded, uint256 offset) internal pure returns (uint24 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT20)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint24 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decodeUint24(bytes32 encoded, uint256 offset) internal pure returns (uint24 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT24)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint40 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decodeUint40(bytes32 encoded, uint256 offset) internal pure returns (uint40 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT40)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint64 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decodeUint64(bytes32 encoded, uint256 offset) internal pure returns (uint64 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT64)\n        }\n    }\n\n    /**\n     * @notice Internal function to decode a bytes32 sample into a uint128 using an offset\n     * @dev This function can overflow\n     * @param encoded The encoded value\n     * @param offset The offset\n     * @return value The decoded value\n     */\n    function decodeUint128(bytes32 encoded, uint256 offset) internal pure returns (uint128 value) {\n        assembly {\n            value := and(shr(offset, encoded), MASK_UINT128)\n        }\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/LiquidityConfigurations.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {PackedUint128Math} from \"./PackedUint128Math.sol\";\nimport {Encoded} from \"./Encoded.sol\";\n\n/**\n * @title Liquidity Book Liquidity Configurations Library\n * @author Trader Joe\n * @notice This library contains functions to encode and decode the config of a pool and interact with the encoded bytes32.\n */\nlibrary LiquidityConfigurations {\n    using PackedUint128Math for bytes32;\n    using PackedUint128Math for uint128;\n    using Encoded for bytes32;\n\n    error LiquidityConfigurations__InvalidConfig();\n\n    uint256 private constant OFFSET_ID = 0;\n    uint256 private constant OFFSET_DISTRIBUTION_Y = 24;\n    uint256 private constant OFFSET_DISTRIBUTION_X = 88;\n\n    uint256 private constant PRECISION = 1e18;\n\n    /**\n     * @dev Encode the distributionX, distributionY and id into a single bytes32\n     * @param distributionX The distribution of the first token\n     * @param distributionY The distribution of the second token\n     * @param id The id of the pool\n     * @return config The encoded config as follows:\n     * [0 - 24[: id\n     * [24 - 88[: distributionY\n     * [88 - 152[: distributionX\n     * [152 - 256[: empty\n     */\n    function encodeParams(uint64 distributionX, uint64 distributionY, uint24 id)\n        internal\n        pure\n        returns (bytes32 config)\n    {\n        config = config.set(distributionX, Encoded.MASK_UINT64, OFFSET_DISTRIBUTION_X);\n        config = config.set(distributionY, Encoded.MASK_UINT64, OFFSET_DISTRIBUTION_Y);\n        config = config.set(id, Encoded.MASK_UINT24, OFFSET_ID);\n    }\n\n    /**\n     * @dev Decode the distributionX, distributionY and id from a single bytes32\n     * @param config The encoded config as follows:\n     * [0 - 24[: id\n     * [24 - 88[: distributionY\n     * [88 - 152[: distributionX\n     * [152 - 256[: empty\n     * @return distributionX The distribution of the first token\n     * @return distributionY The distribution of the second token\n     * @return id The id of the bin to add the liquidity to\n     */\n    function decodeParams(bytes32 config)\n        internal\n        pure\n        returns (uint64 distributionX, uint64 distributionY, uint24 id)\n    {\n        distributionX = config.decodeUint64(OFFSET_DISTRIBUTION_X);\n        distributionY = config.decodeUint64(OFFSET_DISTRIBUTION_Y);\n        id = config.decodeUint24(OFFSET_ID);\n\n        if (uint256(config) > type(uint152).max || distributionX > PRECISION || distributionY > PRECISION) {\n            revert LiquidityConfigurations__InvalidConfig();\n        }\n    }\n\n    /**\n     * @dev Get the amounts and id from a config and amountsIn\n     * @param config The encoded config as follows:\n     * [0 - 24[: id\n     * [24 - 88[: distributionY\n     * [88 - 152[: distributionX\n     * [152 - 256[: empty\n     * @param amountsIn The amounts to distribute as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @return amounts The distributed amounts as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @return id The id of the bin to add the liquidity to\n     */\n    function getAmountsAndId(bytes32 config, bytes32 amountsIn) internal pure returns (bytes32, uint24) {\n        (uint64 distributionX, uint64 distributionY, uint24 id) = decodeParams(config);\n\n        (uint128 x1, uint128 x2) = amountsIn.decode();\n\n        assembly {\n            x1 := div(mul(x1, distributionX), PRECISION)\n            x2 := div(mul(x2, distributionY), PRECISION)\n        }\n\n        return (x1.encode(x2), id);\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/PackedUint128Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Constants} from \"../Constants.sol\";\n\n/**\n * @title Liquidity Book Packed Uint128 Math Library\n * @author Trader Joe\n * @notice This library contains functions to encode and decode two uint128 into a single bytes32\n * and interact with the encoded bytes32.\n */\nlibrary PackedUint128Math {\n    error PackedUint128Math__AddOverflow();\n    error PackedUint128Math__SubUnderflow();\n    error PackedUint128Math__MultiplierTooLarge();\n\n    uint256 private constant OFFSET = 128;\n    uint256 private constant MASK_128 = 0xffffffffffffffffffffffffffffffff;\n    uint256 private constant MASK_128_PLUS_ONE = MASK_128 + 1;\n\n    /**\n     * @dev Encodes two uint128 into a single bytes32\n     * @param x1 The first uint128\n     * @param x2 The second uint128\n     * @return z The encoded bytes32 as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     */\n    function encode(uint128 x1, uint128 x2) internal pure returns (bytes32 z) {\n        assembly {\n            z := or(and(x1, MASK_128), shl(OFFSET, x2))\n        }\n    }\n\n    /**\n     * @dev Encodes a uint128 into a single bytes32 as the first uint128\n     * @param x1 The uint128\n     * @return z The encoded bytes32 as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: empty\n     */\n    function encodeFirst(uint128 x1) internal pure returns (bytes32 z) {\n        assembly {\n            z := and(x1, MASK_128)\n        }\n    }\n\n    /**\n     * @dev Encodes a uint128 into a single bytes32 as the second uint128\n     * @param x2 The uint128\n     * @return z The encoded bytes32 as follows:\n     * [0 - 128[: empty\n     * [128 - 256[: x2\n     */\n    function encodeSecond(uint128 x2) internal pure returns (bytes32 z) {\n        assembly {\n            z := shl(OFFSET, x2)\n        }\n    }\n\n    /**\n     * @dev Encodes a uint128 into a single bytes32 as the first or second uint128\n     * @param x The uint128\n     * @param first Whether to encode as the first or second uint128\n     * @return z The encoded bytes32 as follows:\n     * if first:\n     * [0 - 128[: x\n     * [128 - 256[: empty\n     * else:\n     * [0 - 128[: empty\n     * [128 - 256[: x\n     */\n    function encode(uint128 x, bool first) internal pure returns (bytes32 z) {\n        return first ? encodeFirst(x) : encodeSecond(x);\n    }\n\n    /**\n     * @dev Decodes a bytes32 into two uint128\n     * @param z The encoded bytes32 as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @return x1 The first uint128\n     * @return x2 The second uint128\n     */\n    function decode(bytes32 z) internal pure returns (uint128 x1, uint128 x2) {\n        assembly {\n            x1 := and(z, MASK_128)\n            x2 := shr(OFFSET, z)\n        }\n    }\n\n    /**\n     * @dev Decodes a bytes32 into a uint128 as the first uint128\n     * @param z The encoded bytes32 as follows:\n     * [0 - 128[: x\n     * [128 - 256[: any\n     * @return x The first uint128\n     */\n    function decodeX(bytes32 z) internal pure returns (uint128 x) {\n        assembly {\n            x := and(z, MASK_128)\n        }\n    }\n\n    /**\n     * @dev Decodes a bytes32 into a uint128 as the second uint128\n     * @param z The encoded bytes32 as follows:\n     * [0 - 128[: any\n     * [128 - 256[: y\n     * @return y The second uint128\n     */\n    function decodeY(bytes32 z) internal pure returns (uint128 y) {\n        assembly {\n            y := shr(OFFSET, z)\n        }\n    }\n\n    /**\n     * @dev Decodes a bytes32 into a uint128 as the first or second uint128\n     * @param z The encoded bytes32 as follows:\n     * if first:\n     * [0 - 128[: x1\n     * [128 - 256[: empty\n     * else:\n     * [0 - 128[: empty\n     * [128 - 256[: x2\n     * @param first Whether to decode as the first or second uint128\n     * @return x The decoded uint128\n     */\n    function decode(bytes32 z, bool first) internal pure returns (uint128 x) {\n        return first ? decodeX(z) : decodeY(z);\n    }\n\n    /**\n     * @dev Adds two encoded bytes32, reverting on overflow on any of the uint128\n     * @param x The first bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param y The second bytes32 encoded as follows:\n     * [0 - 128[: y1\n     * [128 - 256[: y2\n     * @return z The sum of x and y encoded as follows:\n     * [0 - 128[: x1 + y1\n     * [128 - 256[: x2 + y2\n     */\n    function add(bytes32 x, bytes32 y) internal pure returns (bytes32 z) {\n        assembly {\n            z := add(x, y)\n        }\n\n        if (z < x || uint128(uint256(z)) < uint128(uint256(x))) {\n            revert PackedUint128Math__AddOverflow();\n        }\n    }\n\n    /**\n     * @dev Adds an encoded bytes32 and two uint128, reverting on overflow on any of the uint128\n     * @param x The bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param y1 The first uint128\n     * @param y2 The second uint128\n     * @return z The sum of x and y encoded as follows:\n     * [0 - 128[: x1 + y1\n     * [128 - 256[: x2 + y2\n     */\n    function add(bytes32 x, uint128 y1, uint128 y2) internal pure returns (bytes32) {\n        return add(x, encode(y1, y2));\n    }\n\n    /**\n     * @dev Subtracts two encoded bytes32, reverting on underflow on any of the uint128\n     * @param x The first bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param y The second bytes32 encoded as follows:\n     * [0 - 128[: y1\n     * [128 - 256[: y2\n     * @return z The difference of x and y encoded as follows:\n     * [0 - 128[: x1 - y1\n     * [128 - 256[: x2 - y2\n     */\n    function sub(bytes32 x, bytes32 y) internal pure returns (bytes32 z) {\n        assembly {\n            z := sub(x, y)\n        }\n\n        if (z > x || uint128(uint256(z)) > uint128(uint256(x))) {\n            revert PackedUint128Math__SubUnderflow();\n        }\n    }\n\n    /**\n     * @dev Subtracts an encoded bytes32 and two uint128, reverting on underflow on any of the uint128\n     * @param x The bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param y1 The first uint128\n     * @param y2 The second uint128\n     * @return z The difference of x and y encoded as follows:\n     * [0 - 128[: x1 - y1\n     * [128 - 256[: x2 - y2\n     */\n    function sub(bytes32 x, uint128 y1, uint128 y2) internal pure returns (bytes32) {\n        return sub(x, encode(y1, y2));\n    }\n\n    /**\n     * @dev Returns whether any of the uint128 of x is strictly greater than the corresponding uint128 of y\n     * @param x The first bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param y The second bytes32 encoded as follows:\n     * [0 - 128[: y1\n     * [128 - 256[: y2\n     * @return x1 < y1 || x2 < y2\n     */\n    function lt(bytes32 x, bytes32 y) internal pure returns (bool) {\n        (uint128 x1, uint128 x2) = decode(x);\n        (uint128 y1, uint128 y2) = decode(y);\n\n        return x1 < y1 || x2 < y2;\n    }\n\n    /**\n     * @dev Returns whether any of the uint128 of x is strictly greater than the corresponding uint128 of y\n     * @param x The first bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param y The second bytes32 encoded as follows:\n     * [0 - 128[: y1\n     * [128 - 256[: y2\n     * @return x1 < y1 || x2 < y2\n     */\n    function gt(bytes32 x, bytes32 y) internal pure returns (bool) {\n        (uint128 x1, uint128 x2) = decode(x);\n        (uint128 y1, uint128 y2) = decode(y);\n\n        return x1 > y1 || x2 > y2;\n    }\n\n    /**\n     * @dev Multiplies an encoded bytes32 by a uint128 then divides the result by 10_000, rounding down\n     * The result can't overflow as the multiplier needs to be smaller or equal to 10_000\n     * @param x The bytes32 encoded as follows:\n     * [0 - 128[: x1\n     * [128 - 256[: x2\n     * @param multiplier The uint128 to multiply by (must be smaller or equal to 10_000)\n     * @return z The product of x and multiplier encoded as follows:\n     * [0 - 128[: floor((x1 * multiplier) / 10_000)\n     * [128 - 256[: floor((x2 * multiplier) / 10_000)\n     */\n    function scalarMulDivBasisPointRoundDown(bytes32 x, uint128 multiplier) internal pure returns (bytes32 z) {\n        if (multiplier == 0) return 0;\n\n        uint256 BASIS_POINT_MAX = Constants.BASIS_POINT_MAX;\n        if (multiplier > BASIS_POINT_MAX) revert PackedUint128Math__MultiplierTooLarge();\n\n        (uint128 x1, uint128 x2) = decode(x);\n\n        assembly {\n            x1 := div(mul(x1, multiplier), BASIS_POINT_MAX)\n            x2 := div(mul(x2, multiplier), BASIS_POINT_MAX)\n        }\n\n        return encode(x1, x2);\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/SafeCast.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Safe Cast Library\n * @author Trader Joe\n * @notice This library contains functions to safely cast uint256 to different uint types.\n */\nlibrary SafeCast {\n    error SafeCast__Exceeds248Bits();\n    error SafeCast__Exceeds240Bits();\n    error SafeCast__Exceeds232Bits();\n    error SafeCast__Exceeds224Bits();\n    error SafeCast__Exceeds216Bits();\n    error SafeCast__Exceeds208Bits();\n    error SafeCast__Exceeds200Bits();\n    error SafeCast__Exceeds192Bits();\n    error SafeCast__Exceeds184Bits();\n    error SafeCast__Exceeds176Bits();\n    error SafeCast__Exceeds168Bits();\n    error SafeCast__Exceeds160Bits();\n    error SafeCast__Exceeds152Bits();\n    error SafeCast__Exceeds144Bits();\n    error SafeCast__Exceeds136Bits();\n    error SafeCast__Exceeds128Bits();\n    error SafeCast__Exceeds120Bits();\n    error SafeCast__Exceeds112Bits();\n    error SafeCast__Exceeds104Bits();\n    error SafeCast__Exceeds96Bits();\n    error SafeCast__Exceeds88Bits();\n    error SafeCast__Exceeds80Bits();\n    error SafeCast__Exceeds72Bits();\n    error SafeCast__Exceeds64Bits();\n    error SafeCast__Exceeds56Bits();\n    error SafeCast__Exceeds48Bits();\n    error SafeCast__Exceeds40Bits();\n    error SafeCast__Exceeds32Bits();\n    error SafeCast__Exceeds24Bits();\n    error SafeCast__Exceeds16Bits();\n    error SafeCast__Exceeds8Bits();\n\n    /**\n     * @dev Returns x on uint248 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint248\n     */\n    function safe248(uint256 x) internal pure returns (uint248 y) {\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits();\n    }\n\n    /**\n     * @dev Returns x on uint240 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint240\n     */\n    function safe240(uint256 x) internal pure returns (uint240 y) {\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits();\n    }\n\n    /**\n     * @dev Returns x on uint232 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint232\n     */\n    function safe232(uint256 x) internal pure returns (uint232 y) {\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits();\n    }\n\n    /**\n     * @dev Returns x on uint224 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint224\n     */\n    function safe224(uint256 x) internal pure returns (uint224 y) {\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits();\n    }\n\n    /**\n     * @dev Returns x on uint216 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint216\n     */\n    function safe216(uint256 x) internal pure returns (uint216 y) {\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits();\n    }\n\n    /**\n     * @dev Returns x on uint208 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint208\n     */\n    function safe208(uint256 x) internal pure returns (uint208 y) {\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits();\n    }\n\n    /**\n     * @dev Returns x on uint200 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint200\n     */\n    function safe200(uint256 x) internal pure returns (uint200 y) {\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits();\n    }\n\n    /**\n     * @dev Returns x on uint192 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint192\n     */\n    function safe192(uint256 x) internal pure returns (uint192 y) {\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits();\n    }\n\n    /**\n     * @dev Returns x on uint184 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint184\n     */\n    function safe184(uint256 x) internal pure returns (uint184 y) {\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits();\n    }\n\n    /**\n     * @dev Returns x on uint176 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint176\n     */\n    function safe176(uint256 x) internal pure returns (uint176 y) {\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits();\n    }\n\n    /**\n     * @dev Returns x on uint168 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint168\n     */\n    function safe168(uint256 x) internal pure returns (uint168 y) {\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits();\n    }\n\n    /**\n     * @dev Returns x on uint160 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint160\n     */\n    function safe160(uint256 x) internal pure returns (uint160 y) {\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits();\n    }\n\n    /**\n     * @dev Returns x on uint152 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint152\n     */\n    function safe152(uint256 x) internal pure returns (uint152 y) {\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits();\n    }\n\n    /**\n     * @dev Returns x on uint144 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint144\n     */\n    function safe144(uint256 x) internal pure returns (uint144 y) {\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits();\n    }\n\n    /**\n     * @dev Returns x on uint136 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint136\n     */\n    function safe136(uint256 x) internal pure returns (uint136 y) {\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits();\n    }\n\n    /**\n     * @dev Returns x on uint128 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint128\n     */\n    function safe128(uint256 x) internal pure returns (uint128 y) {\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits();\n    }\n\n    /**\n     * @dev Returns x on uint120 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint120\n     */\n    function safe120(uint256 x) internal pure returns (uint120 y) {\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits();\n    }\n\n    /**\n     * @dev Returns x on uint112 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint112\n     */\n    function safe112(uint256 x) internal pure returns (uint112 y) {\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits();\n    }\n\n    /**\n     * @dev Returns x on uint104 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint104\n     */\n    function safe104(uint256 x) internal pure returns (uint104 y) {\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits();\n    }\n\n    /**\n     * @dev Returns x on uint96 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint96\n     */\n    function safe96(uint256 x) internal pure returns (uint96 y) {\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits();\n    }\n\n    /**\n     * @dev Returns x on uint88 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint88\n     */\n    function safe88(uint256 x) internal pure returns (uint88 y) {\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits();\n    }\n\n    /**\n     * @dev Returns x on uint80 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint80\n     */\n    function safe80(uint256 x) internal pure returns (uint80 y) {\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits();\n    }\n\n    /**\n     * @dev Returns x on uint72 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint72\n     */\n    function safe72(uint256 x) internal pure returns (uint72 y) {\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits();\n    }\n\n    /**\n     * @dev Returns x on uint64 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint64\n     */\n    function safe64(uint256 x) internal pure returns (uint64 y) {\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits();\n    }\n\n    /**\n     * @dev Returns x on uint56 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint56\n     */\n    function safe56(uint256 x) internal pure returns (uint56 y) {\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits();\n    }\n\n    /**\n     * @dev Returns x on uint48 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint48\n     */\n    function safe48(uint256 x) internal pure returns (uint48 y) {\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits();\n    }\n\n    /**\n     * @dev Returns x on uint40 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint40\n     */\n    function safe40(uint256 x) internal pure returns (uint40 y) {\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits();\n    }\n\n    /**\n     * @dev Returns x on uint32 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint32\n     */\n    function safe32(uint256 x) internal pure returns (uint32 y) {\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits();\n    }\n\n    /**\n     * @dev Returns x on uint24 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint24\n     */\n    function safe24(uint256 x) internal pure returns (uint24 y) {\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits();\n    }\n\n    /**\n     * @dev Returns x on uint16 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint16\n     */\n    function safe16(uint256 x) internal pure returns (uint16 y) {\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits();\n    }\n\n    /**\n     * @dev Returns x on uint8 and check that it does not overflow\n     * @param x The value as an uint256\n     * @return y The value as an uint8\n     */\n    function safe8(uint256 x) internal pure returns (uint8 y) {\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits();\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/SampleMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Encoded} from \"./Encoded.sol\";\n\n/**\n * @title Liquidity Book Sample Math Library\n * @author Trader Joe\n * @notice This library contains functions to encode and decode a sample into a single bytes32\n * and interact with the encoded bytes32\n * The sample is encoded as follows:\n * 0 - 16: oracle length (16 bits)\n * 16 - 80: cumulative id (64 bits)\n * 80 - 144: cumulative volatility accumulator (64 bits)\n * 144 - 208: cumulative bin crossed (64 bits)\n * 208 - 216: sample lifetime (8 bits)\n * 216 - 256: sample creation timestamp (40 bits)\n */\nlibrary SampleMath {\n    using Encoded for bytes32;\n\n    uint256 internal constant OFFSET_ORACLE_LENGTH = 0;\n    uint256 internal constant OFFSET_CUMULATIVE_ID = 16;\n    uint256 internal constant OFFSET_CUMULATIVE_VOLATILITY = 80;\n    uint256 internal constant OFFSET_CUMULATIVE_BIN_CROSSED = 144;\n    uint256 internal constant OFFSET_SAMPLE_LIFETIME = 208;\n    uint256 internal constant OFFSET_SAMPLE_CREATION = 216;\n\n    /**\n     * @dev Encodes a sample\n     * @param oracleLength The oracle length\n     * @param cumulativeId The cumulative id\n     * @param cumulativeVolatility The cumulative volatility\n     * @param cumulativeBinCrossed The cumulative bin crossed\n     * @param sampleLifetime The sample lifetime\n     * @param createdAt The sample creation timestamp\n     * @return sample The encoded sample\n     */\n    function encode(\n        uint16 oracleLength,\n        uint64 cumulativeId,\n        uint64 cumulativeVolatility,\n        uint64 cumulativeBinCrossed,\n        uint8 sampleLifetime,\n        uint40 createdAt\n    ) internal pure returns (bytes32 sample) {\n        sample = sample.set(oracleLength, Encoded.MASK_UINT16, OFFSET_ORACLE_LENGTH);\n        sample = sample.set(cumulativeId, Encoded.MASK_UINT64, OFFSET_CUMULATIVE_ID);\n        sample = sample.set(cumulativeVolatility, Encoded.MASK_UINT64, OFFSET_CUMULATIVE_VOLATILITY);\n        sample = sample.set(cumulativeBinCrossed, Encoded.MASK_UINT64, OFFSET_CUMULATIVE_BIN_CROSSED);\n        sample = sample.set(sampleLifetime, Encoded.MASK_UINT8, OFFSET_SAMPLE_LIFETIME);\n        sample = sample.set(createdAt, Encoded.MASK_UINT40, OFFSET_SAMPLE_CREATION);\n    }\n\n    /**\n     * @dev Gets the oracle length from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 16[: oracle length (16 bits)\n     * [16 - 256[: any (240 bits)\n     * @return length The oracle length\n     */\n    function getOracleLength(bytes32 sample) internal pure returns (uint16 length) {\n        return sample.decodeUint16(0);\n    }\n\n    /**\n     * @dev Gets the cumulative id from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 16[: any (16 bits)\n     * [16 - 80[: cumulative id (64 bits)\n     * [80 - 256[: any (176 bits)\n     * @return id The cumulative id\n     */\n    function getCumulativeId(bytes32 sample) internal pure returns (uint64 id) {\n        return sample.decodeUint64(OFFSET_CUMULATIVE_ID);\n    }\n\n    /**\n     * @dev Gets the cumulative volatility accumulator from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 80[: any (80 bits)\n     * [80 - 144[: cumulative volatility accumulator (64 bits)\n     * [144 - 256[: any (112 bits)\n     * @return volatilityAccumulator The cumulative volatility\n     */\n    function getCumulativeVolatility(bytes32 sample) internal pure returns (uint64 volatilityAccumulator) {\n        return sample.decodeUint64(OFFSET_CUMULATIVE_VOLATILITY);\n    }\n\n    /**\n     * @dev Gets the cumulative bin crossed from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 144[: any (144 bits)\n     * [144 - 208[: cumulative bin crossed (64 bits)\n     * [208 - 256[: any (48 bits)\n     * @return binCrossed The cumulative bin crossed\n     */\n    function getCumulativeBinCrossed(bytes32 sample) internal pure returns (uint64 binCrossed) {\n        return sample.decodeUint64(OFFSET_CUMULATIVE_BIN_CROSSED);\n    }\n\n    /**\n     * @dev Gets the sample lifetime from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 208[: any (208 bits)\n     * [208 - 216[: sample lifetime (8 bits)\n     * [216 - 256[: any (40 bits)\n     * @return lifetime The sample lifetime\n     */\n    function getSampleLifetime(bytes32 sample) internal pure returns (uint8 lifetime) {\n        return sample.decodeUint8(OFFSET_SAMPLE_LIFETIME);\n    }\n\n    /**\n     * @dev Gets the sample creation timestamp from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 216[: any (216 bits)\n     * [216 - 256[: sample creation timestamp (40 bits)\n     * @return creation The sample creation timestamp\n     */\n    function getSampleCreation(bytes32 sample) internal pure returns (uint40 creation) {\n        return sample.decodeUint40(OFFSET_SAMPLE_CREATION);\n    }\n\n    /**\n     * @dev Gets the sample last update timestamp from an encoded sample\n     * @param sample The encoded sample as follows:\n     * [0 - 216[: any (216 bits)\n     * [216 - 256[: sample creation timestamp (40 bits)\n     * @return lastUpdate The sample last update timestamp\n     */\n    function getSampleLastUpdate(bytes32 sample) internal pure returns (uint40 lastUpdate) {\n        lastUpdate = getSampleCreation(sample) + getSampleLifetime(sample);\n    }\n\n    /**\n     * @dev Gets the weighted average of two samples and their respective weights\n     * @param sample1 The first encoded sample\n     * @param sample2 The second encoded sample\n     * @param weight1 The weight of the first sample\n     * @param weight2 The weight of the second sample\n     * @return weightedAverageId The weighted average id\n     * @return weightedAverageVolatility The weighted average volatility\n     * @return weightedAverageBinCrossed The weighted average bin crossed\n     */\n    function getWeightedAverage(bytes32 sample1, bytes32 sample2, uint40 weight1, uint40 weight2)\n        internal\n        pure\n        returns (uint64 weightedAverageId, uint64 weightedAverageVolatility, uint64 weightedAverageBinCrossed)\n    {\n        uint256 cId1 = getCumulativeId(sample1);\n        uint256 cVolatility1 = getCumulativeVolatility(sample1);\n        uint256 cBinCrossed1 = getCumulativeBinCrossed(sample1);\n\n        if (weight2 == 0) return (uint64(cId1), uint64(cVolatility1), uint64(cBinCrossed1));\n\n        uint256 cId2 = getCumulativeId(sample2);\n        uint256 cVolatility2 = getCumulativeVolatility(sample2);\n        uint256 cBinCrossed2 = getCumulativeBinCrossed(sample2);\n\n        if (weight1 == 0) return (uint64(cId2), uint64(cVolatility2), uint64(cBinCrossed2));\n\n        uint256 totalWeight = uint256(weight1) + weight2;\n\n        unchecked {\n            weightedAverageId = uint64((cId1 * weight1 + cId2 * weight2) / totalWeight);\n            weightedAverageVolatility = uint64((cVolatility1 * weight1 + cVolatility2 * weight2) / totalWeight);\n            weightedAverageBinCrossed = uint64((cBinCrossed1 * weight1 + cBinCrossed2 * weight2) / totalWeight);\n        }\n    }\n\n    /**\n     * @dev Updates a sample with the given values\n     * @param sample The encoded sample\n     * @param deltaTime The time elapsed since the last update\n     * @param activeId The active id\n     * @param volatilityAccumulator The volatility accumulator\n     * @param binCrossed The bin crossed\n     * @return cumulativeId The cumulative id\n     * @return cumulativeVolatility The cumulative volatility\n     * @return cumulativeBinCrossed The cumulative bin crossed\n     */\n    function update(bytes32 sample, uint40 deltaTime, uint24 activeId, uint24 volatilityAccumulator, uint24 binCrossed)\n        internal\n        pure\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed)\n    {\n        unchecked {\n            cumulativeId = uint64(activeId) * deltaTime;\n            cumulativeVolatility = uint64(volatilityAccumulator) * deltaTime;\n            cumulativeBinCrossed = uint64(binCrossed) * deltaTime;\n        }\n\n        cumulativeId += getCumulativeId(sample);\n        cumulativeVolatility += getCumulativeVolatility(sample);\n        cumulativeBinCrossed += getCumulativeBinCrossed(sample);\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/TreeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {BitMath} from \"./BitMath.sol\";\n\n/**\n * @title Liquidity Book Tree Math Library\n * @author Trader Joe\n * @notice This library contains functions to interact with a tree of TreeUint24.\n */\nlibrary TreeMath {\n    using BitMath for uint256;\n\n    struct TreeUint24 {\n        bytes32 level0;\n        mapping(bytes32 => bytes32) level1;\n        mapping(bytes32 => bytes32) level2;\n    }\n\n    /**\n     * @dev Returns true if the tree contains the id\n     * @param tree The tree\n     * @param id The id\n     * @return True if the tree contains the id\n     */\n    function contains(TreeUint24 storage tree, uint24 id) internal view returns (bool) {\n        bytes32 leaf2 = bytes32(uint256(id) >> 8);\n\n        return tree.level2[leaf2] & bytes32(1 << (id & type(uint8).max)) != 0;\n    }\n\n    /**\n     * @dev Adds the id to the tree and returns true if the id was not already in the tree\n     * It will also propagate the change to the parent levels.\n     * @param tree The tree\n     * @param id The id\n     * @return True if the id was not already in the tree\n     */\n    function add(TreeUint24 storage tree, uint24 id) internal returns (bool) {\n        bytes32 key2 = bytes32(uint256(id) >> 8);\n\n        bytes32 leaves = tree.level2[key2];\n        bytes32 newLeaves = leaves | bytes32(1 << (id & type(uint8).max));\n\n        if (leaves != newLeaves) {\n            tree.level2[key2] = newLeaves;\n\n            if (leaves == 0) {\n                bytes32 key1 = key2 >> 8;\n                leaves = tree.level1[key1];\n\n                tree.level1[key1] = leaves | bytes32(1 << (uint256(key2) & type(uint8).max));\n\n                if (leaves == 0) tree.level0 |= bytes32(1 << (uint256(key1) & type(uint8).max));\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Removes the id from the tree and returns true if the id was in the tree.\n     * It will also propagate the change to the parent levels.\n     * @param tree The tree\n     * @param id The id\n     * @return True if the id was in the tree\n     */\n    function remove(TreeUint24 storage tree, uint24 id) internal returns (bool) {\n        bytes32 key2 = bytes32(uint256(id) >> 8);\n\n        bytes32 leaves = tree.level2[key2];\n        bytes32 newLeaves = leaves & ~bytes32(1 << (id & type(uint8).max));\n\n        if (leaves != newLeaves) {\n            tree.level2[key2] = newLeaves;\n\n            if (newLeaves == 0) {\n                bytes32 key1 = key2 >> 8;\n                newLeaves = tree.level1[key1] & ~bytes32(1 << (uint256(key2) & type(uint8).max));\n\n                tree.level1[key1] = newLeaves;\n\n                if (newLeaves == 0) tree.level0 &= ~bytes32(1 << (uint256(key1) & type(uint8).max));\n            }\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * @dev Returns the first id in the tree that is lower than or equal to the given id.\n     * It will return type(uint24).max if there is no such id.\n     * @param tree The tree\n     * @param id The id\n     * @return The first id in the tree that is lower than or equal to the given id\n     */\n    function findFirstRight(TreeUint24 storage tree, uint24 id) internal view returns (uint24) {\n        bytes32 leaves;\n\n        bytes32 key2 = bytes32(uint256(id) >> 8);\n        uint8 bit = uint8(id & type(uint8).max);\n\n        if (bit != 0) {\n            leaves = tree.level2[key2];\n            uint256 closestBit = _closestBitRight(leaves, bit);\n\n            if (closestBit != type(uint256).max) return uint24(uint256(key2) << 8 | closestBit);\n        }\n\n        bytes32 key1 = key2 >> 8;\n        bit = uint8(uint256(key2) & type(uint8).max);\n\n        if (bit != 0) {\n            leaves = tree.level1[key1];\n            uint256 closestBit = _closestBitRight(leaves, bit);\n\n            if (closestBit != type(uint256).max) {\n                key2 = bytes32(uint256(key1) << 8 | closestBit);\n                leaves = tree.level2[key2];\n\n                return uint24(uint256(key2) << 8 | uint256(leaves).mostSignificantBit());\n            }\n        }\n\n        bit = uint8(uint256(key1) & type(uint8).max);\n\n        if (bit != 0) {\n            leaves = tree.level0;\n            uint256 closestBit = _closestBitRight(leaves, bit);\n\n            if (closestBit != type(uint256).max) {\n                key1 = bytes32(closestBit);\n                leaves = tree.level1[key1];\n\n                key2 = bytes32(uint256(key1) << 8 | uint256(leaves).mostSignificantBit());\n                leaves = tree.level2[key2];\n\n                return uint24(uint256(key2) << 8 | uint256(leaves).mostSignificantBit());\n            }\n        }\n\n        return type(uint24).max;\n    }\n\n    /**\n     * @dev Returns the first id in the tree that is higher than or equal to the given id.\n     * It will return 0 if there is no such id.\n     * @param tree The tree\n     * @param id The id\n     * @return The first id in the tree that is higher than or equal to the given id\n     */\n    function findFirstLeft(TreeUint24 storage tree, uint24 id) internal view returns (uint24) {\n        bytes32 leaves;\n\n        bytes32 key2 = bytes32(uint256(id) >> 8);\n        uint8 bit = uint8(id & type(uint8).max);\n\n        if (bit != type(uint8).max) {\n            leaves = tree.level2[key2];\n            uint256 closestBit = _closestBitLeft(leaves, bit);\n\n            if (closestBit != type(uint256).max) return uint24(uint256(key2) << 8 | closestBit);\n        }\n\n        bytes32 key1 = key2 >> 8;\n        bit = uint8(uint256(key2) & type(uint8).max);\n\n        if (bit != type(uint8).max) {\n            leaves = tree.level1[key1];\n            uint256 closestBit = _closestBitLeft(leaves, bit);\n\n            if (closestBit != type(uint256).max) {\n                key2 = bytes32(uint256(key1) << 8 | closestBit);\n                leaves = tree.level2[key2];\n\n                return uint24(uint256(key2) << 8 | uint256(leaves).leastSignificantBit());\n            }\n        }\n\n        bit = uint8(uint256(key1) & type(uint8).max);\n\n        if (bit != type(uint8).max) {\n            leaves = tree.level0;\n            uint256 closestBit = _closestBitLeft(leaves, bit);\n\n            if (closestBit != type(uint256).max) {\n                key1 = bytes32(closestBit);\n                leaves = tree.level1[key1];\n\n                key2 = bytes32(uint256(key1) << 8 | uint256(leaves).leastSignificantBit());\n                leaves = tree.level2[key2];\n\n                return uint24(uint256(key2) << 8 | uint256(leaves).leastSignificantBit());\n            }\n        }\n\n        return 0;\n    }\n\n    /**\n     * @dev Returns the first bit in the given leaves that is strictly lower than the given bit.\n     * It will return type(uint256).max if there is no such bit.\n     * @param leaves The leaves\n     * @param bit The bit\n     * @return The first bit in the given leaves that is strictly lower than the given bit\n     */\n    function _closestBitRight(bytes32 leaves, uint8 bit) private pure returns (uint256) {\n        unchecked {\n            return uint256(leaves).closestBitRight(bit - 1);\n        }\n    }\n\n    /**\n     * @dev Returns the first bit in the given leaves that is strictly higher than the given bit.\n     * It will return type(uint256).max if there is no such bit.\n     * @param leaves The leaves\n     * @param bit The bit\n     * @return The first bit in the given leaves that is strictly higher than the given bit\n     */\n    function _closestBitLeft(bytes32 leaves, uint8 bit) private pure returns (uint256) {\n        unchecked {\n            return uint256(leaves).closestBitLeft(bit + 1);\n        }\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/Uint128x128Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Constants} from \"../Constants.sol\";\nimport {BitMath} from \"./BitMath.sol\";\n\n/**\n * @title Liquidity Book Uint128x128 Math Library\n * @author Trader Joe\n * @notice Helper contract used for power and log calculations\n */\nlibrary Uint128x128Math {\n    using BitMath for uint256;\n\n    error Uint128x128Math__LogUnderflow();\n    error Uint128x128Math__PowUnderflow(uint256 x, int256 y);\n\n    uint256 constant LOG_SCALE_OFFSET = 127;\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\n\n    /**\n     * @notice Calculates the binary logarithm of x.\n     * @dev Based on the iterative approximation algorithm.\n     * https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\n     * Requirements:\n     * - x must be greater than zero.\n     * Caveats:\n     * - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\n     * Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\n     * @return result The binary logarithm as a signed 128.128-binary fixed-point number.\n     */\n    function log2(uint256 x) internal pure returns (int256 result) {\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\n        // can use the regular multiplication\n\n        if (x == 1) return -128;\n        if (x == 0) revert Uint128x128Math__LogUnderflow();\n\n        x >>= 1;\n\n        unchecked {\n            // This works because log2(x) = -log2(1/x).\n            int256 sign;\n            if (x >= LOG_SCALE) {\n                sign = 1;\n            } else {\n                sign = -1;\n                // Do the fixed-point inversion inline to save gas\n                x = LOG_SCALE_SQUARED / x;\n            }\n\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\n\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\n            result = int256(n) << LOG_SCALE_OFFSET;\n\n            // This is y = x * 2^(-n).\n            uint256 y = x >> n;\n\n            // If y = 1, the fractional part is zero.\n            if (y != LOG_SCALE) {\n                // Calculate the fractional part via the iterative approximation.\n                // The \"delta >>= 1\" part is equivalent to \"delta /= 2\", but shifting bits is faster.\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\n                    y = (y * y) >> LOG_SCALE_OFFSET;\n\n                    // Is y^2 > 2 and so in the range [2,4)?\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\n                        // Add the 2^(-m) factor to the logarithm.\n                        result += delta;\n\n                        // Corresponds to z/2 on Wikipedia.\n                        y >>= 1;\n                    }\n                }\n            }\n            // Convert x back to unsigned 128.128-binary fixed-point number\n            result = (result * sign) << 1;\n        }\n    }\n\n    /**\n     * @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\n     * At the end of the operations, we invert the result if needed.\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\n     * @param y A relative number without any decimals, needs to be between ]2^21; 2^21[\n     */\n    function pow(uint256 x, int256 y) internal pure returns (uint256 result) {\n        bool invert;\n        uint256 absY;\n\n        if (y == 0) return Constants.SCALE;\n\n        assembly {\n            absY := y\n            if slt(absY, 0) {\n                absY := sub(0, absY)\n                invert := iszero(invert)\n            }\n        }\n\n        if (absY < 0x100000) {\n            result = Constants.SCALE;\n            assembly {\n                let squared := x\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\n                    squared := div(not(0), squared)\n                    invert := iszero(invert)\n                }\n\n                if and(absY, 0x1) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x2) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x4) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x8) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x10) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x20) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x40) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x80) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x100) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x200) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x400) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x800) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x1000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x2000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x4000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x8000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x10000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x20000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x40000) { result := shr(128, mul(result, squared)) }\n                squared := shr(128, mul(squared, squared))\n                if and(absY, 0x80000) { result := shr(128, mul(result, squared)) }\n            }\n        }\n\n        // revert if y is too big or if x^y underflowed\n        if (result == 0) revert Uint128x128Math__PowUnderflow(x, y);\n\n        return invert ? type(uint256).max / result : result;\n    }\n}\n"
    },
    "contracts/lib/joe-v2/math/Uint256x256Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Uint256x256 Math Library\n * @author Trader Joe\n * @notice Helper contract used for full precision calculations\n */\nlibrary Uint256x256Math {\n    error Uint256x256Math__MulShiftOverflow();\n    error Uint256x256Math__MulDivOverflow();\n\n    /**\n     * @notice Calculates floor(x*y/denominator) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The denominator cannot be zero\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\n\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\n    }\n\n    /**\n     * @notice Calculates ceil(x*y/denominator) with full precision\n     * The result will be rounded up\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The denominator cannot be zero\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDivRoundDown(x, y, denominator);\n        if (mulmod(x, y, denominator) != 0) result += 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / 2**offset) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param offset The offset as an uint256, can't be greater than 256\n     * @return result The result as an uint256\n     */\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\n\n        if (prod0 != 0) result = prod0 >> offset;\n        if (prod1 != 0) {\n            // Make sure the result is less than 2^256.\n            if (prod1 >= 1 << offset) revert Uint256x256Math__MulShiftOverflow();\n\n            unchecked {\n                result += prod1 << (256 - offset);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates floor(x * y / 2**offset) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param offset The offset as an uint256, can't be greater than 256\n     * @return result The result as an uint256\n     */\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\n        result = mulShiftRoundDown(x, y, offset);\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\n    }\n\n    /**\n     * @notice Calculates floor(x << offset / y) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param offset The number of bit to shift x as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n\n        prod0 = x << offset; // Least significant 256 bits of the product\n        unchecked {\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\n        }\n\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\n    }\n\n    /**\n     * @notice Calculates ceil(x << offset / y) with full precision\n     * The result will be rounded up\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param offset The number of bit to shift x as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\n        result = shiftDivRoundDown(x, offset, denominator);\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\n    }\n\n    /**\n     * @notice Helper function to return the result of `x * y` as 2 uint256\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @return prod0 The least significant 256 bits of the product\n     * @return prod1 The most significant 256 bits of the product\n     */\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n    }\n\n    /**\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param denominator The divisor as an uint256\n     * @param prod0 The least significant 256 bits of the product\n     * @param prod1 The most significant 256 bits of the product\n     * @return result The result as an uint256\n     */\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\n        private\n        pure\n        returns (uint256 result)\n    {\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n        } else {\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\n            // See https://cs.stackexchange.com/q/138556/92363\n            unchecked {\n                // Does not overflow because the denominator cannot be zero at this stage in the function\n                uint256 lpotdod = denominator & (~denominator + 1);\n                assembly {\n                    // Divide denominator by lpotdod.\n                    denominator := div(denominator, lpotdod)\n\n                    // Divide [prod1 prod0] by lpotdod.\n                    prod0 := div(prod0, lpotdod)\n\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n                }\n\n                // Shift in bits from prod1 into prod0\n                prod0 |= prod1 * lpotdod;\n\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n                // four bits. That is, denominator * inv = 1 mod 2^4\n                uint256 inverse = (3 * denominator) ^ 2;\n\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n                // in modular arithmetic, doubling the correct bits in each step\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n                // is no longer required.\n                result = prod0 * inverse;\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/joe-v2/PriceHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\nimport {Uint128x128Math} from \"./math/Uint128x128Math.sol\";\nimport {Uint256x256Math} from \"./math/Uint256x256Math.sol\";\nimport {SafeCast} from \"./math/SafeCast.sol\";\nimport {Constants} from \"./Constants.sol\";\n\n/**\n * @title Liquidity Book Price Helper Library\n * @author Trader Joe\n * @notice This library contains functions to calculate prices\n */\nlibrary PriceHelper {\n    using Uint128x128Math for uint256;\n    using Uint256x256Math for uint256;\n    using SafeCast for uint256;\n\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\n\n    /**\n     * @dev Calculates the price from the id and the bin step\n     * @param id The id\n     * @param binStep The bin step\n     * @return price The price as a 128.128-binary fixed-point number\n     */\n    function getPriceFromId(uint24 id, uint16 binStep) internal pure returns (uint256 price) {\n        uint256 base = getBase(binStep);\n        int256 exponent = getExponent(id);\n\n        price = base.pow(exponent);\n    }\n\n    /**\n     * @dev Calculates the id from the price and the bin step\n     * @param price The price as a 128.128-binary fixed-point number\n     * @param binStep The bin step\n     * @return id The id\n     */\n    function getIdFromPrice(uint256 price, uint16 binStep) internal pure returns (uint24 id) {\n        uint256 base = getBase(binStep);\n        int256 realId = price.log2() / base.log2();\n\n        unchecked {\n            id = uint256(REAL_ID_SHIFT + realId).safe24();\n        }\n    }\n\n    /**\n     * @dev Calculates the base from the bin step, which is `1 + binStep / BASIS_POINT_MAX`\n     * @param binStep The bin step\n     * @return base The base\n     */\n    function getBase(uint16 binStep) internal pure returns (uint256) {\n        unchecked {\n            return Constants.SCALE + (uint256(binStep) << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\n        }\n    }\n\n    /**\n     * @dev Calculates the exponent from the id, which is `id - REAL_ID_SHIFT`\n     * @param id The id\n     * @return exponent The exponent\n     */\n    function getExponent(uint24 id) internal pure returns (int256) {\n        unchecked {\n            return int256(uint256(id)) - REAL_ID_SHIFT;\n        }\n    }\n\n    /**\n     * @dev Converts a price with 18 decimals to a 128.128-binary fixed-point number\n     * @param price The price with 18 decimals\n     * @return price128x128 The 128.128-binary fixed-point number\n     */\n    function convertDecimalPriceTo128x128(uint256 price) internal pure returns (uint256) {\n        return price.shiftDivRoundDown(Constants.SCALE_OFFSET, Constants.PRECISION);\n    }\n\n    /**\n     * @dev Converts a 128.128-binary fixed-point number to a price with 18 decimals\n     * @param price128x128 The 128.128-binary fixed-point number\n     * @return price The price with 18 decimals\n     */\n    function convert128x128PriceToDecimal(uint256 price128x128) internal pure returns (uint256) {\n        return price128x128.mulShiftRoundDown(Constants.PRECISION, Constants.SCALE_OFFSET);\n    }\n}\n"
    },
    "contracts/lib/local/DeploymentConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\nimport \"../../interfaces/ITokenManager.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n/**\n * DeploymentConstants\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\n * to decrease gas costs. Not meant to be updated unless really necessary.\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\n **/\nlibrary DeploymentConstants {\n\n    // Used for LiquidationBonus calculations\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\n\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\n\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x38a024C0b412B9d1db8BC398140D00F5Af3093D4;\n\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x8A93d247134d91e0de6f96547cB0204e5BE8e5D8;\n\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xB0f05d25e41FbC2b52013099ED9616f1206Ae21B;\n\n    address private constant _ADDRESS_PROVIDER = address(0);\n\n    //implementation-specific\n\n    function getPercentagePrecision() internal pure returns (uint256) {\n        return _PERCENTAGE_PRECISION;\n    }\n\n    //blockchain-specific\n\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\n        return _NATIVE_TOKEN_SYMBOL;\n    }\n\n    function getNativeToken() internal pure returns (address payable) {\n        return payable(_NATIVE_ADDRESS);\n    }\n\n    //deployment-specific\n\n    function getDiamondAddress() internal pure returns (address) {\n        return _DIAMOND_BEACON_ADDRESS;\n    }\n\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\n        return _SMART_LOANS_FACTORY_ADDRESS;\n    }\n\n    function getTokenManager() internal pure returns (ITokenManager) {\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\n    }\n\n    function getAddressProvider() internal pure returns (address) {\n        return _ADDRESS_PROVIDER;\n    }\n\n    /**\n    * Returns all owned assets keys\n    **/\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        return sls.ownedAssets._inner._keys._inner._values;\n    }\n}"
    },
    "contracts/lib/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n// Subject to the MIT license.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c;\n    unchecked { c = a + b; }\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        uint256 c;\n    unchecked { c = a + b; }\n        require(c >= a, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction underflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     * - Subtraction cannot underflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c;\n    unchecked { c = a * b; }\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c;\n    unchecked { c = a * b; }\n        require(c / a == b, errorMessage);\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers.\n     * Reverts with custom message on division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}"
    },
    "contracts/lib/SmartLoanLib.sol": {
      "content": ""
    },
    "contracts/lib/SolvencyMethods.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\";\nimport \"../facets/SolvencyFacetProd.sol\";\nimport \"../facets/AssetsExposureController.sol\";\nimport \"../DiamondHelper.sol\";\n\n// TODO Rename to contract instead of lib\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\n    // This function executes SolvencyFacetProd.getDebt()\n    function _getDebt() internal virtual returns (uint256 debt) {\n        debt = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\n        debt = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\n        solvent = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\n            ),\n            (bool)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.isSolvent()\n    function _isSolvent() internal virtual returns (bool solvent){\n        solvent = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\n            ),\n            (bool)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\n        solvent = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\n            ),\n            (bool)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getTotalValue()\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\n        totalValue = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\n        assetsValue = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\n        health = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getHealthRatio()\n    function _getHealthRatio() public virtual returns (uint256 health) {\n        health = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getPrices()\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\n        prices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\n            ),\n            (uint256[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getPrices()\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\n        result = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\n            ),\n            (SolvencyFacetProd.CachedPrices)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\n        ownedAssetsPrices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\n            ),\n            (SolvencyFacetProd.AssetPrice[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\n        debtAssetsPrices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\n            ),\n            (SolvencyFacetProd.AssetPrice[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\n        stakedPositionsPrices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\n            ),\n            (SolvencyFacetProd.AssetPrice[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\n        totalValue = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getPrices()\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\n        price = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes AssetsExposureController.decreaseAssetsExposure()\n    function _resetPrimeAccountAssetsExposure() public {\n        proxyDelegateCalldata(\n            DiamondHelper._getFacetAddress(AssetsExposureController.resetPrimeAccountAssetsExposure.selector),\n            abi.encodeWithSelector(AssetsExposureController.resetPrimeAccountAssetsExposure.selector)\n        );\n    }\n\n    // This function executes AssetsExposureController.increaseAssetsExposure()\n    function _setPrimeAccountAssetsExposure() public {\n        proxyDelegateCalldata(\n            DiamondHelper._getFacetAddress(AssetsExposureController.setPrimeAccountAssetsExposure.selector),\n            abi.encodeWithSelector(AssetsExposureController.setPrimeAccountAssetsExposure.selector)\n        );\n    }\n\n    /**\n     * Returns IERC20Metadata instance of a token\n     * @param _asset the code of an asset\n     **/\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\n    }\n\n    modifier recalculateAssetsExposure() {\n        _resetPrimeAccountAssetsExposure();\n        _;\n        _setPrimeAccountAssetsExposure();\n    }\n\n    /**\n    * Checks whether account is solvent (health higher than 1)\n    * @dev This modifier uses the redstone-evm-connector\n    **/\n    modifier remainsSolvent() {\n        _;\n\n        require(_isSolvent(), \"The action may cause an account to become insolvent\");\n    }\n\n    modifier canRepayDebtFully() {\n        _;\n        require(_canRepayDebtFully(), \"Insufficient assets to fully repay the debt\");\n    }\n\n    modifier noBorrowInTheSameBlock() {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        require(ds._lastBorrowTimestamp != block.timestamp, \"Borrowing must happen in a standalone transaction\");\n        _;\n    }\n}\n"
    },
    "contracts/lib/Uint256x256Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.10;\n\n/**\n * @title Liquidity Book Uint256x256 Math Library\n * @author Trader Joe\n * @notice Helper contract used for full precision calculations\n */\nlibrary Uint256x256Math {\n    error Uint256x256Math__MulShiftOverflow();\n    error Uint256x256Math__MulDivOverflow();\n\n    /**\n     * @notice Calculates floor(x*y/denominator) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The denominator cannot be zero\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\n\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\n    }\n\n    /**\n     * @notice Calculates ceil(x*y/denominator) with full precision\n     * The result will be rounded up\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The denominator cannot be zero\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        result = mulDivRoundDown(x, y, denominator);\n        if (mulmod(x, y, denominator) != 0) result += 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / 2**offset) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param offset The offset as an uint256, can't be greater than 256\n     * @return result The result as an uint256\n     */\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\n\n        if (prod0 != 0) result = prod0 >> offset;\n        if (prod1 != 0) {\n            // Make sure the result is less than 2^256.\n            if (prod1 >= 1 << offset) revert Uint256x256Math__MulShiftOverflow();\n\n            unchecked {\n                result += prod1 << (256 - offset);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates floor(x * y / 2**offset) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param offset The offset as an uint256, can't be greater than 256\n     * @return result The result as an uint256\n     */\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\n        result = mulShiftRoundDown(x, y, offset);\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\n    }\n\n    /**\n     * @notice Calculates floor(x << offset / y) with full precision\n     * The result will be rounded down\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param offset The number of bit to shift x as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\n        uint256 prod0;\n        uint256 prod1;\n\n        prod0 = x << offset; // Least significant 256 bits of the product\n        unchecked {\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\n        }\n\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\n    }\n\n    /**\n     * @notice Calculates ceil(x << offset / y) with full precision\n     * The result will be rounded up\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n     * Requirements:\n     * - The offset needs to be strictly lower than 256\n     * - The result must fit within uint256\n     * Caveats:\n     * - This function does not work with fixed-point numbers\n     * @param x The multiplicand as an uint256\n     * @param offset The number of bit to shift x as an uint256\n     * @param denominator The divisor as an uint256\n     * @return result The result as an uint256\n     */\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\n        result = shiftDivRoundDown(x, offset, denominator);\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\n    }\n\n    /**\n     * @notice Helper function to return the result of `x * y` as 2 uint256\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @return prod0 The least significant 256 bits of the product\n     * @return prod1 The most significant 256 bits of the product\n     */\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2^256 + prod0.\n        assembly {\n            let mm := mulmod(x, y, not(0))\n            prod0 := mul(x, y)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n    }\n\n    /**\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\n     * @param x The multiplicand as an uint256\n     * @param y The multiplier as an uint256\n     * @param denominator The divisor as an uint256\n     * @param prod0 The least significant 256 bits of the product\n     * @param prod1 The most significant 256 bits of the product\n     * @return result The result as an uint256\n     */\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\n        private\n        pure\n        returns (uint256 result)\n    {\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            unchecked {\n                result = prod0 / denominator;\n            }\n        } else {\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\n            // See https://cs.stackexchange.com/q/138556/92363\n            unchecked {\n                // Does not overflow because the denominator cannot be zero at this stage in the function\n                uint256 lpotdod = denominator & (~denominator + 1);\n                assembly {\n                    // Divide denominator by lpotdod.\n                    denominator := div(denominator, lpotdod)\n\n                    // Divide [prod1 prod0] by lpotdod.\n                    prod0 := div(prod0, lpotdod)\n\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\n                }\n\n                // Shift in bits from prod1 into prod0\n                prod0 |= prod1 * lpotdod;\n\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n                // four bits. That is, denominator * inv = 1 mod 2^4\n                uint256 inverse = (3 * denominator) ^ 2;\n\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n                // in modular arithmetic, doubling the correct bits in each step\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n                // is no longer required.\n                result = prod0 * inverse;\n            }\n        }\n    }\n}\n"
    },
    "contracts/lib/uniswap-v3/FullMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/// @title Contains 512-bit math functions\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\n/// @dev Handles \"phantom overflow\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\nlibrary FullMath {\n    /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\n    function mulDiv(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        // 512-bit multiply [prod1 prod0] = a * b\n        // Compute the product mod 2**256 and mod 2**256 - 1\n        // then use the Chinese Remainder Theorem to reconstruct\n        // the 512 bit result. The result is stored in two 256\n        // variables such that product = prod1 * 2**256 + prod0\n        uint256 prod0; // Least significant 256 bits of the product\n        uint256 prod1; // Most significant 256 bits of the product\n        assembly {\n            let mm := mulmod(a, b, not(0))\n            prod0 := mul(a, b)\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n        }\n\n        // Handle non-overflow cases, 256 by 256 division\n        if (prod1 == 0) {\n            require(denominator > 0);\n            assembly {\n                result := div(prod0, denominator)\n            }\n            return result;\n        }\n\n        // Make sure the result is less than 2**256.\n        // Also prevents denominator == 0\n        require(denominator > prod1);\n\n        ///////////////////////////////////////////////\n        // 512 by 256 division.\n        ///////////////////////////////////////////////\n\n        // Make division exact by subtracting the remainder from [prod1 prod0]\n        // Compute remainder using mulmod\n        uint256 remainder;\n        assembly {\n            remainder := mulmod(a, b, denominator)\n        }\n        // Subtract 256 bit number from 512 bit number\n        assembly {\n            prod1 := sub(prod1, gt(remainder, prod0))\n            prod0 := sub(prod0, remainder)\n        }\n\n        // Factor powers of two out of denominator\n        // Compute largest power of two divisor of denominator.\n        // Always >= 1.\n\n        //TODO: our change\n        //https://ethereum.stackexchange.com/questions/96642/unary-operator-minus-cannot-be-applied-to-type-uint256\n//        uint256 twos = -denominator & denominator;\n        uint256 twos = denominator & (~denominator + 1);\n        // Divide denominator by power of two\n        assembly {\n            denominator := div(denominator, twos)\n        }\n\n        // Divide [prod1 prod0] by the factors of two\n        assembly {\n            prod0 := div(prod0, twos)\n        }\n        // Shift in bits from prod1 into prod0. For this we need\n        // to flip `twos` such that it is 2**256 / twos.\n        // If twos is zero, then it becomes one\n        assembly {\n            twos := add(div(sub(0, twos), twos), 1)\n        }\n        prod0 |= prod1 * twos;\n\n        // Invert denominator mod 2**256\n        // Now that denominator is an odd number, it has an inverse\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\n        // Compute the inverse by starting with a seed that is correct\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\n        uint256 inv = (3 * denominator) ^ 2;\n        // Now use Newton-Raphson iteration to improve the precision.\n        // Thanks to Hensel's lifting lemma, this also works in modular\n        // arithmetic, doubling the correct bits in each step.\n        inv *= 2 - denominator * inv; // inverse mod 2**8\n        inv *= 2 - denominator * inv; // inverse mod 2**16\n        inv *= 2 - denominator * inv; // inverse mod 2**32\n        inv *= 2 - denominator * inv; // inverse mod 2**64\n        inv *= 2 - denominator * inv; // inverse mod 2**128\n        inv *= 2 - denominator * inv; // inverse mod 2**256\n\n        // Because the division is now exact we can divide by multiplying\n        // with the modular inverse of denominator. This will give us the\n        // correct result modulo 2**256. Since the precoditions guarantee\n        // that the outcome is less than 2**256, this is the final result.\n        // We don't need to compute the high bits of the result and prod1\n        // is no longer required.\n        result = prod0 * inv;\n        return result;\n    }\n\n    /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n    /// @param a The multiplicand\n    /// @param b The multiplier\n    /// @param denominator The divisor\n    /// @return result The 256-bit result\n    function mulDivRoundingUp(\n        uint256 a,\n        uint256 b,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        result = mulDiv(a, b, denominator);\n        if (mulmod(a, b, denominator) > 0) {\n            require(result < type(uint256).max);\n            result++;\n        }\n    }\n}\n"
    },
    "contracts/lib/uniswap-v3/PoolAddress.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.5.0;\n\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\nlibrary PoolAddress {\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\n\n    /// @notice The identifying key of the pool\n    struct PoolKey {\n        address token0;\n        address token1;\n        uint24 fee;\n    }\n\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\n    /// @param tokenA The first token of a pool, unsorted\n    /// @param tokenB The second token of a pool, unsorted\n    /// @param fee The fee level of the pool\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\n    function getPoolKey(\n        address tokenA,\n        address tokenB,\n        uint24 fee\n    ) internal pure returns (PoolKey memory) {\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\n    }\n\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\n    /// @param factory The Uniswap V3 factory contract address\n    /// @param key The PoolKey\n    /// @return pool The contract address of the V3 pool\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\n        require(key.token0 < key.token1);\n        pool = address(\n        //TODO: changed uint256 casting to uint160(uint)\n            uint160(uint(\n                keccak256(\n                    abi.encodePacked(\n                        hex'ff',\n                        factory,\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\n                        POOL_INIT_CODE_HASH\n                    )\n                )\n            ))\n        );\n    }\n}\n"
    },
    "contracts/lib/uniswap-v3/TickMath.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity 0.8.17;\n\n/// @title Math library for computing sqrt prices from ticks and vice versa\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\n/// prices between 2**-128 and 2**128\nlibrary TickMath {\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\n    int24 internal constant MIN_TICK = -887272;\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\n    int24 internal constant MAX_TICK = -MIN_TICK;\n\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\n\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\n    /// @dev Throws if |tick| > max tick\n    /// @param tick The input tick for the above formula\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\n    /// at the given tick\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\n        //TODO: conversion int24 -> int256: check\n        require(absTick <= uint256(int256(MAX_TICK)), 'T');\n\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\n\n        if (tick > 0) ratio = type(uint256).max / ratio;\n\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\n    }\n\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\n    /// ever return.\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\n        // second inequality must be < because the price can never reach the price at the max tick\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\n\n        uint256 r = ratio;\n        uint256 msb = 0;\n\n        assembly {\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(5, gt(r, 0xFFFFFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(4, gt(r, 0xFFFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(3, gt(r, 0xFF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(2, gt(r, 0xF))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := shl(1, gt(r, 0x3))\n            msb := or(msb, f)\n            r := shr(f, r)\n        }\n        assembly {\n            let f := gt(r, 0x1)\n            msb := or(msb, f)\n        }\n\n        if (msb >= 128) r = ratio >> (msb - 127);\n        else r = ratio << (127 - msb);\n\n        int256 log_2 = (int256(msb) - 128) << 64;\n\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(63, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(62, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(61, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(60, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(59, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(58, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(57, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(56, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(55, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(54, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(53, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(52, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(51, f))\n            r := shr(f, r)\n        }\n        assembly {\n            r := shr(127, mul(r, r))\n            let f := shr(128, r)\n            log_2 := or(log_2, shl(50, f))\n        }\n\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\n\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\n\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\n    }\n}\n"
    },
    "contracts/lib/uniswap-v3/UniswapV3IntegrationHelper.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport {FullMath} from \"./FullMath.sol\";\n\nlibrary UniswapV3IntegrationHelper {\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n    //TODO: check what happens to signed\n    function sqrt(uint y) internal pure returns (uint z) {\n        if (y > 3) {\n            z = y;\n            uint x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n    }\n\n    //source: https://ethereum.stackexchange.com/questions/98685/computing-the-uniswap-v3-pair-price-from-q64-96-number\n    function sqrtPriceX96ToUint(uint160 sqrtPriceX96, uint8 decimalsToken0)\n    internal\n    view  //TODO: pure\n    returns (uint256)\n    {\n        {\n            uint256 numerator1 = uint256(sqrtPriceX96) * uint256(sqrtPriceX96);\n            uint256 numerator2 = 10**decimalsToken0;\n        }\n\n        uint256 numerator1 = uint256(sqrtPriceX96);\n        uint256 numerator2 = 10**decimalsToken0;\n        return FullMath.mulDiv(numerator1, numerator2, 2 ** 96);\n    }\n}\n"
    },
    "contracts/lib/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL3\npragma solidity 0.8.17;\n\n/******************\n@title WadRayMath library\n@author Aave\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\n */\n\nlibrary WadRayMath {\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant halfWAD = WAD / 2;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant halfRAY = RAY / 2;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    function ray() internal pure returns (uint256) {\n        return RAY;\n    }\n\n    function wad() internal pure returns (uint256) {\n        return WAD;\n    }\n\n    function halfRay() internal pure returns (uint256) {\n        return halfRAY;\n    }\n\n    function halfWad() internal pure returns (uint256) {\n        return halfWAD;\n    }\n\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        //return halfWAD.add(a.mul(b)).div(WAD);\n        return (halfWAD + (a * b)) / WAD;\n    }\n\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 halfB = b / 2;\n\n        //return halfB.add(a.mul(WAD)).div(b);\n        return (halfB + (a * WAD)) / b;\n    }\n\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        //return halfRAY.add(a.mul(b)).div(RAY);\n        return (halfRAY + (a * b)) / RAY;\n    }\n\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 halfB = b / 2;\n\n        //return halfB.add(a.mul(RAY)).div(b);\n        return (halfB + (a * RAY)) / b;\n    }\n\n    function rayToWad(uint256 a) internal pure returns (uint256) {\n        uint256 halfRatio = WAD_RAY_RATIO / 2;\n\n        //return halfRatio.add(a).div(WAD_RAY_RATIO);\n        return (halfRatio + a) / WAD_RAY_RATIO;\n    }\n\n    function wadToRay(uint256 a) internal pure returns (uint256) {\n        //return a.mul(WAD_RAY_RATIO);\n        return a * WAD_RAY_RATIO;\n    }\n\n    /**\n     * @dev calculates base^exp. The code uses the ModExp precompile\n     */\n    //solium-disable-next-line\n    function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n        z = n % 2 != 0 ? x : RAY;\n\n        for (n /= 2; n != 0; n /= 2) {\n            x = rayMul(x, x);\n\n            if (n % 2 != 0) {\n                z = rayMul(z, x);\n            }\n        }\n    }\n}\n"
    },
    "contracts/LinearIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"./interfaces/IIndex.sol\";\n\n/**\n * LinearIndex\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\n * It could be used as a base building block for any index-based entities like deposits and loans.\n * The index is updated on a linear basis to the compounding happens when a user decide to accumulate the interests\n **/\ncontract LinearIndex is IIndex, OwnableUpgradeable {\n\n    uint256 private constant SECONDS_IN_YEAR = 365 days;\n    uint256 private constant BASE_RATE = 1e18;\n\n    uint256 public index;\n    uint256 public indexUpdateTime;\n\n    mapping(uint256 => uint256) prevIndex;\n    mapping(address => uint256) userUpdateTime;\n\n    uint256 public rate;\n\n    function initialize(address owner_) external initializer {\n        index = BASE_RATE;\n        indexUpdateTime = block.timestamp;\n\n        __Ownable_init();\n        if (address(owner_) != address(0)) {\n            transferOwnership(owner_);\n        }\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * Sets the new rate\n     * Before the new rate is set, the index is updated accumulating interest\n     * @dev _rate the value of updated rate\n   **/\n    function setRate(uint256 _rate) public override onlyOwner {\n        updateIndex();\n        rate = _rate;\n        emit RateUpdated(rate, block.timestamp);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * Updates user index\n     * It persists the update time and the update index time->index mapping\n     * @dev user address of the index owner\n   **/\n    function updateUser(address user) public override onlyOwner {\n        userUpdateTime[user] = block.timestamp;\n        prevIndex[block.timestamp] = getIndex();\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Gets current value of the linear index\n     * It recalculates the value on-demand without updating the storage\n     **/\n    function getIndex() public view override returns (uint256) {\n        uint256 period = block.timestamp - indexUpdateTime;\n        if (period > 0) {\n            return index * getLinearFactor(period) / 1e27;\n        } else {\n            return index;\n        }\n    }\n\n    /**\n     * Gets the user value recalculated to the current index\n     * It recalculates the value on-demand without updating the storage\n     * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\n     * of 1 Wei)\n     **/\n    function getIndexedValue(uint256 value, address user) public view override returns (uint256) {\n        uint256 userTime = userUpdateTime[user];\n        uint256 prevUserIndex = userTime == 0 ? getIndex() : prevIndex[userTime];\n\n        return value * getIndex() / prevUserIndex;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function updateIndex() internal {\n        prevIndex[indexUpdateTime] = index;\n\n        index = getIndex();\n        indexUpdateTime = block.timestamp;\n    }\n\n    /**\n     * Returns a linear factor in Ray\n     **/\n    function getLinearFactor(uint256 period) virtual internal view returns (uint256) {\n        return rate * period * 1e9 / SECONDS_IN_YEAR + 1e27;\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev Emitted after updating the current rate\n     * @param updatedRate the value of updated rate\n     * @param timestamp of the rate update\n     **/\n    event RateUpdated(uint256 updatedRate, uint256 timestamp);\n}"
    },
    "contracts/LiquidationFlashloan.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 628836252957dd59eefb208ff6d0fd6605fe3445;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./aave_v3/flashloan/base/FlashLoanReceiverBase.sol\";\nimport \"./facets/SmartLoanLiquidationFacet.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"./interfaces/IWrappedNativeToken.sol\";\nimport \"./interfaces/facets/IYieldYakRouter.sol\";\n\ncontract LiquidationFlashloan is FlashLoanReceiverBase, Ownable {\n  using TransferHelper for address payable;\n  using TransferHelper for address;\n\n  address wrappedNativeToken;\n  SmartLoanLiquidationFacet whitelistedLiquidatorsContract;\n\n  struct AssetAmount {\n    address asset;\n    uint256 amount;\n  }\n\n  struct LiqEnrichedParams {\n    address loan;\n    address liquidator;\n    address tokenManager;\n    uint256 bonus;\n    IYieldYakRouter.FormattedOffer[] offers;\n  }\n\n  struct FlashLoanArgs {\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    bytes params;\n    uint256 bonus;\n    address liquidator;\n    address loanAddress;\n    address tokenManager;\n    IYieldYakRouter.FormattedOffer[] offers;\n  }\n\n  constructor(\n    address _addressProvider,\n    address _wrappedNativeToken,\n    SmartLoanLiquidationFacet _whitelistedLiquidatorsContract\n  ) FlashLoanReceiverBase(IPoolAddressesProvider(_addressProvider)) {\n    wrappedNativeToken = _wrappedNativeToken;\n    whitelistedLiquidatorsContract = _whitelistedLiquidatorsContract;\n  }\n\n  function transferERC20(\n    address tokenAddress,\n    address recipient,\n    uint256 amount\n  ) external onlyOwner {\n    tokenAddress.safeTransfer(recipient, amount);\n  }\n\n  // ---- Extract calldata arguments ----\n  function getAssets() internal pure returns (address[] calldata result) {\n    assembly {\n      result.length := calldataload(add(calldataload(0x04), 0x04))\n      result.offset := add(calldataload(0x04), 0x24)\n    }\n    return result;\n  }\n\n  function getAmounts() internal pure returns (uint256[] calldata result) {\n    assembly {\n      result.length := calldataload(add(calldataload(0x24), 0x04))\n      result.offset := add(calldataload(0x24), 0x24)\n    }\n    return result;\n  }\n\n  function getPremiums() internal pure returns (uint256[] calldata result) {\n    assembly {\n      result.length := calldataload(add(calldataload(0x44), 0x04))\n      result.offset := add(calldataload(0x44), 0x24)\n    }\n    return result;\n  }\n\n  // --------------------------------------\n\n  /**\n   * @notice Executes an operation after receiving the flash-borrowed assets\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\n   *      enough funds to repay and has approved the Pool to pull the total amount\n   * assets The addresses of the flash-borrowed assets\n   * amounts The amounts of the flash-borrowed assets\n   * premiums The fee of each flash-borrowed asset\n   * @param _params The byte-encoded params passed when initiating the flashloan\n   * @return True if the execution of the operation succeeds, false otherwise\n   */\n  function executeOperation(\n    address[] calldata,\n    uint256[] calldata,\n    uint256[] calldata,\n    address,\n    bytes calldata _params\n  ) public override returns (bool) {\n    require(msg.sender == address(POOL), \"msg.sender != POOL\");\n\n    LiqEnrichedParams memory lep = getLiqEnrichedParams(_params);\n\n    // Use calldata instead of memory in order to avoid the \"Stack Too deep\" CompileError\n    address[] calldata assets = getAssets();\n    uint256[] calldata amounts = getAmounts();\n    uint256[] calldata premiums = getPremiums();\n\n    for (uint32 i = 0; i < assets.length; i++) {\n      assets[i].safeApprove(lep.loan, 0);\n      assets[i].safeApprove(lep.loan, amounts[i]);\n    }\n\n    (\n      AssetAmount[] memory assetSurplus,\n      AssetAmount[] memory assetDeficit\n    ) = liquidateLoanAndGetSurplusDeficitAssets(_params, lep, assets, amounts, premiums);\n\n    // Swap to negate deficits\n    for (uint32 i = 0; i < assetDeficit.length; i++) {\n      if (assetDeficit[i].amount != 0) {\n        for (uint32 j = 0; j < assetSurplus.length; j++) {\n          if (assetSurplus[j].amount != 0) {\n            bool shouldBreak;\n            for (uint32 k = 0; k < lep.offers.length; ++k) {\n              IYieldYakRouter.FormattedOffer memory offer = lep.offers[k];\n              if (\n                offer.path[0] == assetSurplus[j].asset &&\n                offer.path[offer.path.length - 1] == assetDeficit[i].asset\n              ) {\n                uint256 remainDeficitAmount;\n                (\n                  shouldBreak,\n                  remainDeficitAmount\n                ) = swapToNegateDeficits(\n                    assetDeficit[i],\n                    assetSurplus[j],\n                    offer\n                  );\n                if (shouldBreak) {\n                  address(assetDeficit[i].asset).safeTransfer(\n                    lep.liquidator,\n                    remainDeficitAmount\n                  );\n                  break;\n                }\n              }\n            }\n            if (shouldBreak) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Send remaining tokens (bonus) to initiator\n    for (uint32 i = 0; i < assetSurplus.length; i++) {\n      if (assetSurplus[i].amount != 0) {\n        address(assetSurplus[i].asset).safeTransfer(\n          lep.liquidator,\n          assetSurplus[i].amount\n        );\n      }\n    }\n\n    // Approve AAVE POOL\n    for (uint32 i = 0; i < assets.length; i++) {\n      assets[i].safeApprove(address(POOL), 0);\n      assets[i].safeApprove(address(POOL), amounts[i] + premiums[i]);\n    }\n\n    return true;\n  }\n\n  function executeFlashloan(\n    FlashLoanArgs calldata _args\n  ) public onlyWhitelistedLiquidators {\n    bytes memory encoded = abi.encode(_args.offers);\n    bytes memory enrichedParams = bytes.concat(\n      abi.encodePacked(_args.loanAddress),\n      abi.encodePacked(_args.liquidator),\n      abi.encodePacked(_args.tokenManager),\n      abi.encodePacked(_args.bonus),\n      abi.encodePacked(encoded.length),\n      encoded,\n      _args.params\n    );\n\n    IPool(address(POOL)).flashLoan(\n      address(this),\n      _args.assets,\n      _args.amounts,\n      _args.interestRateModes,\n      address(this),\n      enrichedParams,\n      0\n    );\n  }\n\n  function getLiqEnrichedParams(\n    bytes memory _enrichedParams\n  ) internal pure returns (LiqEnrichedParams memory) {\n    address _loan;\n    address _liquidator;\n    address _tokenManager;\n    uint256 _bonus;\n    uint256 length;\n    IYieldYakRouter.FormattedOffer[] memory _offers;\n    assembly {\n      // Read 32 bytes from _enrichedParams ptr + 32 bytes offset, shift right 12 bytes\n      _loan := shr(mul(0x0c, 0x08), mload(add(_enrichedParams, 0x20)))\n      // Read 32 bytes from _enrichedParams ptr + 52 bytes offset, shift right 12 bytes\n      _liquidator := shr(mul(0x0c, 0x08), mload(add(_enrichedParams, 0x34)))\n      // Read 32 bytes from _enrichedParams ptr + 72 bytes offset, shift right 12 bytes\n      _tokenManager := shr(mul(0x0c, 0x08), mload(add(_enrichedParams, 0x48)))\n      // Read 32 bytes from _enrichedParams ptr + 92 bytes offset\n      _bonus := mload(add(_enrichedParams, 0x5c))\n      // Read 32 bytes from _enrichedParams ptr + 124 bytes offset\n      length := mload(add(_enrichedParams, 0x7c))\n    }\n    bytes memory encoded = new bytes(length);\n    for (uint256 i = 0; i < length; ++i) {\n      // Read length bytes from _enrichedParams + 124 bytes offset\n      encoded[i] = _enrichedParams[124 + i];\n    }\n    _offers = abi.decode(encoded, (IYieldYakRouter.FormattedOffer[]));\n    return\n      LiqEnrichedParams({\n        loan: _loan,\n        liquidator: _liquidator,\n        tokenManager: _tokenManager,\n        bonus: _bonus,\n        offers: _offers\n      });\n  }\n\n  function liquidateLoanAndGetSurplusDeficitAssets(\n    bytes calldata _params,\n    LiqEnrichedParams memory lep,\n    address[] calldata assets,\n    uint256[] calldata amounts,\n    uint256[] calldata premiums\n  )\n    internal\n    returns (\n      AssetAmount[] memory assetSurplus,\n      AssetAmount[] memory assetDeficit\n    )\n  {\n    address[] memory supportedTokens = ITokenManager(lep.tokenManager)\n      .getSupportedTokensAddresses();\n\n    assetSurplus = new AssetAmount[](supportedTokens.length);\n    assetDeficit = new AssetAmount[](supportedTokens.length);\n\n    // Liquidate loan\n    {\n      (bool success, ) = lep.loan.call(\n        abi.encodePacked(\n          abi.encodeWithSelector(\n            SmartLoanLiquidationFacet.liquidateLoan.selector,\n            ITokenManager(lep.tokenManager).getAllPoolAssets(),\n            amounts,\n            lep.bonus\n          ),\n          _params\n        )\n      );\n      require(success, \"Liquidation failed\");\n    }\n\n    // Calculate surpluses & deficits\n    for (uint32 i = 0; i < supportedTokens.length; i++) {\n      int256 index = findIndex(supportedTokens[i], assets);\n      uint256 balance = IERC20(supportedTokens[i]).balanceOf(address(this));\n\n      if (index != -1) {\n        int256 amount = int256(balance) -\n          int256(amounts[uint256(index)]) -\n          int256(premiums[uint256(index)]);\n        if (amount > 0) {\n          assetSurplus[i] = AssetAmount(\n            supportedTokens[uint256(index)],\n            uint256(amount)\n          );\n        } else if (amount < 0) {\n          assetDeficit[i] = AssetAmount(\n            supportedTokens[uint256(index)],\n            uint256(amount * -1)\n          );\n        }\n      } else if (balance > 0) {\n        assetSurplus[i] = AssetAmount(supportedTokens[i], balance);\n      }\n    }\n  }\n\n  function swapToNegateDeficits(\n    AssetAmount memory _deficit,\n    AssetAmount memory _surplus,\n    IYieldYakRouter.FormattedOffer memory _offer\n  ) private returns (bool shouldBreak, uint256 remainDeficitAmount) {\n    require(_offer.amounts[0] > 0, \"YieldYak path, adapter is not initialized\");\n\n    uint256 expectedBuyTokenReturned = (_offer.amounts[\n      _offer.amounts.length - 1\n    ] *\n      _surplus.amount *\n      98) / (_offer.amounts[0] * 100);\n\n    uint256 amountIn = expectedBuyTokenReturned > _deficit.amount\n      ? (_surplus.amount * _deficit.amount) / expectedBuyTokenReturned\n      : _surplus.amount;\n    address(_surplus.asset).safeApprove(YY_ROUTER(), 0);\n    address(_surplus.asset).safeApprove(YY_ROUTER(), amountIn);\n\n    uint256 beforeDeficitAmount = IERC20(_deficit.asset).balanceOf(\n      address(this)\n    );\n\n    IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\n      amountIn: amountIn,\n      amountOut: 0,\n      path: _offer.path,\n      adapters: _offer.adapters\n    });\n\n    IYieldYakRouter router = IYieldYakRouter(YY_ROUTER());\n    router.swapNoSplit(trade, address(this), 0);\n\n    uint256 swapAmount = IERC20(_deficit.asset).balanceOf(address(this)) -\n      beforeDeficitAmount;\n\n    _surplus.amount = _surplus.amount - amountIn;\n\n    if (swapAmount >= _deficit.amount) {\n      remainDeficitAmount = swapAmount - _deficit.amount;\n      _deficit.amount = 0;\n      return (true, remainDeficitAmount);\n    } else {\n      _deficit.amount = _deficit.amount - swapAmount;\n      return (false, 0);\n    }\n  }\n\n  //TODO: pretty inefficient, find better way\n  function findIndex(\n    address addr,\n    address[] memory array\n  ) internal pure returns (int256) {\n    int256 index = -1;\n    for (uint256 i; i < array.length; i++) {\n      if (array[i] == addr) {\n        index = int256(i);\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  function YY_ROUTER() internal virtual pure returns (address) {\n    return 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\n  }\n\n  modifier onlyWhitelistedLiquidators() {\n    // External call in order to execute this method in the SmartLoanDiamondBeacon contract storage\n    require(\n      whitelistedLiquidatorsContract.isLiquidatorWhitelisted(msg.sender),\n      \"Only whitelisted liquidators can execute this method\"\n    );\n    _;\n  }\n\n  receive() external payable {\n    IWrappedNativeToken wrapped = IWrappedNativeToken(\n      DeploymentConstants.getNativeToken()\n    );\n    wrapped.deposit{value: msg.value}();\n  }\n}\n"
    },
    "contracts/LiquidationFlashloanArbitrum.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 628836252957dd59eefb208ff6d0fd6605fe3445;\npragma solidity 0.8.17;\n\nimport \"./LiquidationFlashloan.sol\";\n\ncontract LiquidationFlashloanArbitrum is LiquidationFlashloan {\n    constructor(\n        address _addressProvider,\n        address _wrappedNativeToken,\n        SmartLoanLiquidationFacet _whitelistedLiquidatorsContract\n    )\n        LiquidationFlashloan(\n        _addressProvider,\n        _wrappedNativeToken,\n        _whitelistedLiquidatorsContract\n        )\n    {}\n\n    function YY_ROUTER() internal pure override returns (address) {\n        return 0xb32C79a25291265eF240Eb32E9faBbc6DcEE3cE3;\n    }\n}\n"
    },
    "contracts/mock/AntiReentrantDiamondStorage.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\n\nimport \"../ReentrancyGuardKeccak.sol\";\n\ncontract AntiReentrantDiamondStorage is ReentrancyGuardKeccak {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n    function antiReentrant() public nonReentrant {\n        payable(msg.sender).safeTransferETH(100);\n    }\n}\n"
    },
    "contracts/mock/DestructableContract.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\n/**\n * @title DestructableContract\n * @dev For tests\n */\ncontract DestructableContract {\n    fallback() external payable {\n        //just receive funds\n    }\n\n    function destruct(address payable receiverOfFunds) public {\n        selfdestruct(receiverOfFunds);\n    }\n}\n"
    },
    "contracts/mock/DoubleBorrowExecInSingleTx.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"../facets/AssetsOperationsFacet.sol\";\nimport \"../facets/avalanche/PangolinDEXFacet.sol\";\nimport \"../SmartLoansFactory.sol\";\n\n\n/**\n * @title DoubleBorrowExecInSingleTx\n * @dev For tests\n */\ncontract DoubleBorrowExecInSingleTx is ProxyConnector {\n\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    address constant WAVAX_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    function createLoan(address factoryAddress) public {\n        SmartLoansFactory factory = SmartLoansFactory(factoryAddress);\n        factory.createLoan();\n    }\n\n    function execute(address smartLoanAddress) public {\n        IERC20 token = IERC20(WAVAX_ADDRESS);\n        token.approve(smartLoanAddress, 1 ether);\n\n        proxyCalldata(address(smartLoanAddress), abi.encodeWithSelector(AssetsOperationsFacet.fund.selector, stringToBytes32(\"AVAX\"), 1 ether), false);\n\n        proxyCalldata(address(smartLoanAddress), abi.encodeWithSelector(AssetsOperationsFacet.borrow.selector, stringToBytes32(\"AVAX\"), 1 ether), false);\n        // Should fail with: \"Borrowing must happen in a standalone transaction\"\n        proxyCalldata(address(smartLoanAddress), abi.encodeWithSelector(PangolinDEXFacet.swapPangolin.selector, stringToBytes32(\"AVAX\"), stringToBytes32(\"USDC\"), 1 ether, 1 ether), false);\n    }\n}\n"
    },
    "contracts/mock/MockBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../interfaces/IBorrowersRegistry.sol\";\n\n/**\n * @title MockBorrowersRegistry\n * Should be used for test purpose only\n */\ncontract MockBorrowersRegistry is IBorrowersRegistry {\n\n    mapping(address => address) public ownersToLoans;\n    mapping(address => address) public loansToOwners;\n\n    address[] loans;\n\n    function updateRegistry(address loan, address owner) public  {\n        ownersToLoans[owner] = loan;\n        loansToOwners[loan] = owner;\n        loans.push(loan);\n    }\n\n    function canBorrow(address _account) external view override returns (bool) {\n        return loansToOwners[_account] != address(0);\n    }\n\n    function getLoanForOwner(address _user) external view override returns (address) {\n        return ownersToLoans[_user];\n    }\n\n    function getOwnerOfLoan(address _loan) external view override returns (address) {\n        return loansToOwners[_loan];\n    }\n}\n"
    },
    "contracts/mock/MockSmartLoanLogicFacetSetValues.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\ncontract MockSolvencyFacetConstantDebt {\n    /**\n    * Always returns 2137 - used in test suits\n    **/\n    function getDebt() public pure returns (uint256) {\n        return 2137;\n    }\n}\n"
    },
    "contracts/mock/MockToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockToken is ERC20 {\n    constructor(address[] memory airdropUsers) ERC20(\"MockToken\", \"USDT\") {\n\n        for (uint256 i = 0; i < airdropUsers.length; i++) {\n            _mint(airdropUsers[i], 10000 * 10 ** decimals());\n        }\n    }\n}\n"
    },
    "contracts/mock/MockTokenManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../TokenManager.sol\";\n\ncontract MockTokenManager is TokenManager {\n    address factoryAddress;\n\n    function setFactoryAddress(address _newAddress) external {\n        factoryAddress = _newAddress;\n    }\n\n    function getSmartLoansFactoryAddress() public view override returns (address) {\n        return factoryAddress;\n    }\n}\n"
    },
    "contracts/mock/MockUpgradedPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../Pool.sol\";\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\n/**\n * @title MockUpgradedPool\n * @dev A mock implementation of a Pool to check if upgrade mechanism correctly update contrac logic\n */\ncontract MockUpgradedPool is Pool {\n    /**\n     * Dummy implementation recording double deposits\n     * used to test upgrade of contract logic\n     **/\n    function deposit(uint256 amount) public override nonReentrant {\n        _accumulateDepositInterest(msg.sender);\n\n        _transferToPool(msg.sender, amount);\n\n        //change to original deposit method\n        _mint(msg.sender, amount * 2);\n        _updateRates();\n\n        emit Deposit(msg.sender, amount, block.timestamp);\n    }\n}\n"
    },
    "contracts/mock/MockUsd.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockUsd is ERC20 {\n    constructor(address[] memory airdropUsers) ERC20(\"MockToken\", \"USD\") {\n\n        for(uint256 i = 0; i < airdropUsers.length; i++) {\n            _mint(airdropUsers[i], 10000 * 10 ** decimals());\n        }\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 6;\n    }\n}\n"
    },
    "contracts/mock/MockVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title MockVariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract MockVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0;\n    uint256 public constant OFFSET_1 = 0.03e18;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.45e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.24e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 3.15e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 2.4e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant MAX_RATE = 0.75e18;\n\n    //20% of spread goes to vesting participants\n    uint256 public spread = 2e17;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        }\n    }\n\n    /* ========== SETTERS ========== */\n    /**\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\n     * @param _spread spread defined by user\n     **/\n    function setSpread(uint256 _spread) external onlyOwner {\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\n        spread = _spread;\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after changing the spread\n     * @param performer an address of wallet setting a new spread\n     * @param newSpread new spread\n     * @param timestamp time of a spread change\n     **/\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\n}"
    },
    "contracts/mock/MockVariableUtilisationRatesCalculatorChangedOffset.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 48991ca286a107aedf142ae9fd21b421b08f5025;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IRatesCalculator.sol\";\n\n/**\n * @title MockVariableUtilisationRatesCalculatorChangedOffset\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract MockVariableUtilisationRatesCalculatorChangedOffset is IRatesCalculator, Ownable {\n    uint256 public constant SLOPE_1 = 0;\n    uint256 public constant OFFSET_1 = 0.05e18;\n\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\n\n    uint256 public constant SLOPE_2 = 0.45e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_2 = 0.24e18;\n\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\n\n    uint256 public constant SLOPE_3 = 3.15e18;\n    //negative, hence minus in calculations\n    uint256 public constant OFFSET_3 = 2.4e18;\n\n    // BREAKPOINT must be lower than 1e18\n    uint256 public constant MAX_RATE = 0.75e18;\n\n    //20% of spread goes to vesting participants\n    uint256 public spread = 2e17;\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the pool utilisation, which is a ratio between loans and deposits\n     * utilisation = value_of_loans / value_of_deposits\n     * @param _totalLoans total value of loans\n     * @param _totalDeposits total value of deposits\n     **/\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        return (_totalLoans * 1e18) / _totalDeposits;\n    }\n\n    /**\n     * Returns the current deposit rate\n     * The value is based on the current borrowing rate and satisfies the invariant:\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n     * @param _totalLoans total value of loans\n     * @param _totalDeposits total value of deposits\n     **/\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n        if (_totalDeposits == 0) return 0;\n\n        if (_totalLoans >= _totalDeposits) {\n            return MAX_RATE * (1e18 - spread) / 1e18;\n        } else {\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\n            return rate;\n        }\n    }\n\n    /**\n     * Returns the current borrowing rate\n     * The value is based on the pool utilisation according to the piecewise linear formula:\n     * 1) for pool utilisation lower than or equal to breakpoint:\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n     * 2) for pool utilisation greater than breakpoint:\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n     * @param totalLoans total value of loans\n     * @param totalDeposits total value of deposits\n     **/\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\n        if (totalDeposits == 0) return OFFSET_1;\n\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n        if (poolUtilisation >= 1e18) {\n            return MAX_RATE;\n        } else if (poolUtilisation <= BREAKPOINT_1) {\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\n        } else if (poolUtilisation <= BREAKPOINT_2) {\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\n        } else {\n            // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\n            // unsigned integer safety check)\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\n        }\n    }\n}"
    },
    "contracts/mock/OpenBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../interfaces/IBorrowersRegistry.sol\";\n\n/**\n * @title OpenBorrowersRegistry\n * It the simpled borrowers registry that allows every account\n * Should be used for test purpose only\n */\ncontract OpenBorrowersRegistry is IBorrowersRegistry {\n    function canBorrow(address _account) external pure override returns (bool) {\n        return true;\n    }\n\n    function getLoanForOwner(address _user) external pure override returns (address) {\n        return address(0);\n    }\n\n    function getOwnerOfLoan(address _loan) external pure override returns (address) {\n        return address(0);\n    }\n}\n"
    },
    "contracts/mock/ReentrantAttack.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"./AntiReentrantDiamondStorage.sol\";\n\ncontract ReentrantAttack {\n\n    uint256 callCounter = 0;\n    uint256 targetCallCount = 1;\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {\n        if (callCounter < targetCallCount) {\n            callCounter += 1;\n            AntiReentrantDiamondStorage(payable(msg.sender)).antiReentrant();\n        } else {\n            callCounter = 0;\n        }\n    }\n\n    function changeTargetCallCount(uint256 _newCount) public {\n        targetCallCount = _newCount;\n    }\n\n    function callAntiReentrant(address payable _antiReentrant) external {\n        callCounter += 1;\n        AntiReentrantDiamondStorage(_antiReentrant).antiReentrant();\n    }\n}\n"
    },
    "contracts/mock/WAVAX.sol": {
      "content": "/**\n *Submitted for verification at snowtrace.io on 2021-10-26\n*/\n\n// Copyright (C) 2015, 2016, 2017 Dapphub\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// Contract name, token name, and token symbol modified by Ava Labs 2020\n\npragma solidity ^0.8.4;\n\ncontract WAVAX {\n    string public name     = \"Wrapped AVAX\";\n    string public symbol   = \"WAVAX\";\n    uint8  public decimals = 18;\n\n    event  Approval(address indexed src, address indexed guy, uint wad);\n    event  Transfer(address indexed src, address indexed dst, uint wad);\n    event  Deposit(address indexed dst, uint wad);\n    event  Withdrawal(address indexed src, uint wad);\n\n    mapping (address => uint)                       public  balanceOf;\n    mapping (address => mapping (address => uint))  public  allowance;\n\n    receive() external payable {\n        deposit();\n    }\n    function deposit() public payable {\n        balanceOf[msg.sender] += msg.value;\n        emit Deposit(msg.sender, msg.value);\n    }\n    function withdraw(uint wad) public {\n        require(balanceOf[msg.sender] >= wad);\n        balanceOf[msg.sender] -= wad;\n        payable(msg.sender).transfer(wad);\n        emit Withdrawal(msg.sender, wad);\n    }\n\n    function totalSupply() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    function approve(address guy, uint wad) public returns (bool) {\n        allowance[msg.sender][guy] = wad;\n        emit Approval(msg.sender, guy, wad);\n        return true;\n    }\n\n    function transfer(address dst, uint wad) public returns (bool) {\n        return transferFrom(msg.sender, dst, wad);\n    }\n\n    function transferFrom(address src, address dst, uint wad)\n    public\n    returns (bool)\n    {\n        require(balanceOf[src] >= wad);\n\n//        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n            require(allowance[src][msg.sender] >= wad);\n            allowance[src][msg.sender] -= wad;\n//        }\n\n        balanceOf[src] -= wad;\n        balanceOf[dst] += wad;\n\n        emit Transfer(src, dst, wad);\n\n        return true;\n    }\n}\n\n\n/*\n                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<http://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<http://www.gnu.org/philosophy/why-not-lgpl.html>.\n\n*/"
    },
    "contracts/OnlyOwnerOrInsolvent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\n// contract that uses keccak slots instead of the standard storage layout.\n\nimport {DiamondStorageLib} from \"./lib/DiamondStorageLib.sol\";\nimport \"./lib/SolvencyMethods.sol\";\nimport \"./facets/SmartLoanLiquidationFacet.sol\";\n\npragma solidity 0.8.17;\n\n/**\n * @dev Enforces ownership only if there is no liquidation ongoing\n */\nabstract contract OnlyOwnerOrInsolvent is SolvencyMethods {\n\n    /**\n     * @dev Enforces ownership only if there is no liquidation ongoing\n     */\n    modifier onlyOwnerOrInsolvent() {\n        bool wasSolvent = _isSolvent();\n        if (wasSolvent) {\n            DiamondStorageLib.enforceIsContractOwner();\n        } else {\n            require(SmartLoanLiquidationFacet(DeploymentConstants.getDiamondAddress()).isLiquidatorWhitelisted(msg.sender), \"Only whitelisted accounts can perform this action\");\n        }\n\n        _;\n\n        if (wasSolvent) {\n            require(_isSolvent(), \"Must stay solvent\");\n        }\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"./interfaces/IIndex.sol\";\nimport \"./interfaces/IRatesCalculator.sol\";\nimport \"./interfaces/IBorrowersRegistry.sol\";\nimport \"./interfaces/IPoolRewarder.sol\";\nimport \"./VestingDistributor.sol\";\n\n\n/**\n * @title Pool\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\n * Depositors are rewarded with the interest rates collected from borrowers.\n * The interest rates calculation is delegated to an external calculator contract.\n */\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\n    using TransferHelper for address payable;\n\n    uint256 public totalSupplyCap;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n    mapping(address => uint256) internal _deposited;\n\n    mapping(address => uint256) public borrowed;\n\n    IRatesCalculator public ratesCalculator;\n    IBorrowersRegistry public borrowersRegistry;\n    IPoolRewarder public poolRewarder;\n\n    IIndex public depositIndex;\n    IIndex public borrowIndex;\n\n    address payable public tokenAddress;\n\n    VestingDistributor public vestingDistributor;\n\n    uint8 internal _decimals;\n\n    modifier onlyWhitelistedAccounts {\n        if(\n            msg.sender == 0x0E5Bad4108a6A5a8b06820f98026a7f3A77466b2 ||\n            msg.sender == 0x2fFA7E9624B923fA811d9B9995Aa34b715Db1945 ||\n            msg.sender == 0x0d7137feA34BC97819f05544Ec7DE5c98617989C ||\n            msg.sender == 0xC6ba6BB819f1Be84EFeB2E3f2697AD9818151e5D ||\n            msg.sender == 0x14f69F9C351b798dF31fC53E33c09dD29bFAb547 ||\n            msg.sender == 0x5C23Bd1BD272D22766eB3708B8f874CB93B75248 ||\n            msg.sender == 0x000000F406CA147030BE7069149e4a7423E3A264 ||\n            msg.sender == 0x5D80a1c0a5084163F1D2620c1B1F43209cd4dB12 ||\n            msg.sender == 0x6C21A841d6f029243AF87EF01f6772F05832144b\n\n        ){\n            _;\n        } else {\n            revert(\"Not whitelisted\");\n        }\n    }\n\n\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\n            && AddressUpgradeable.isContract(address(depositIndex_))\n            && AddressUpgradeable.isContract(address(borrowIndex_))\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \"Wrong init arguments\");\n\n        borrowersRegistry = borrowersRegistry_;\n        ratesCalculator = ratesCalculator_;\n        depositIndex = depositIndex_;\n        borrowIndex = borrowIndex_;\n        poolRewarder = poolRewarder_;\n        tokenAddress = tokenAddress_;\n        totalSupplyCap = _totalSupplyCap;\n\n        _decimals = IERC20Metadata(tokenAddress_).decimals();\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _updateRates();\n    }\n\n    /* ========== SETTERS ========== */\n\n    /**\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\n     * Only the owner of the Contract can execute this function.\n     * @dev _newTotalSupplyCap new deposit cap\n    **/\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\n        totalSupplyCap = _newTotalSupplyCap;\n    }\n\n    /**\n     * Sets the new Pool Rewarder.\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\n     * Only the owner of the Contract can execute this function.\n     * @dev _poolRewarder the address of PoolRewarder\n    **/\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\n        poolRewarder = _poolRewarder;\n\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\n    }\n\n    /**\n     * Sets the new rate calculator.\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\n     * Only the owner of the Contract can execute this function.\n     * @dev ratesCalculator the address of rates calculator\n     **/\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\n        // setting address(0) ratesCalculator_ freezes the pool\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\n        ratesCalculator = ratesCalculator_;\n        if (address(ratesCalculator_) != address(0)) {\n            _updateRates();\n        }\n\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\n    }\n\n    /**\n     * Sets the new borrowers registry contract.\n     * The borrowers registry decides if an account can borrow funds.\n     * Only the owner of the Contract can execute this function.\n     * @dev borrowersRegistry the address of borrowers registry\n     **/\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\n\n        borrowersRegistry = borrowersRegistry_;\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\n    }\n\n    /**\n     * Sets the new Pool Rewarder.\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\n     * Only the owner of the Contract can execute this function.\n     * @dev _poolRewarder the address of PoolRewarder\n    **/\n    function setVestingDistributor(address _distributor) external onlyOwner {\n        if(!AddressUpgradeable.isContract(_distributor) && _distributor != address(0)) revert NotAContract(_distributor);\n        vestingDistributor = VestingDistributor(_distributor);\n\n        emit VestingDistributorChanged(_distributor, block.timestamp);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        if(recipient == address(0)) revert TransferToZeroAddress();\n\n        if(recipient == address(this)) revert TransferToPoolAddress();\n\n        address account = msg.sender;\n        _accumulateDepositInterest(account);\n\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\n\n        _updateWithdrawn(account, amount, lockedAmount);\n\n        // (this is verified in \"require\" above)\n        unchecked {\n            _deposited[account] -= amount;\n        }\n\n        _accumulateDepositInterest(recipient);\n        _deposited[recipient] += amount;\n\n        // Handle rewards\n        if(address(poolRewarder) != address(0) && amount != 0){\n            uint256 unstaked = poolRewarder.withdrawFor(amount, account);\n            if(unstaked > 0) {\n                poolRewarder.stakeFor(unstaked, recipient);\n            }\n        }\n\n        emit Transfer(account, recipient, amount);\n\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n        if(spender == address(0)) revert SpenderZeroAddress();\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\n        _allowed[msg.sender][spender] = newAllowance;\n\n        emit Approval(msg.sender, spender, newAllowance);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n        if(spender == address(0)) revert SpenderZeroAddress();\n        uint256 currentAllowance = _allowed[msg.sender][spender];\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\n\n        uint256 newAllowance = currentAllowance - subtractedValue;\n        _allowed[msg.sender][spender] = newAllowance;\n\n        emit Approval(msg.sender, spender, newAllowance);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        if(spender == address(0)) revert SpenderZeroAddress();\n        _allowed[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\n\n        if(recipient == address(0)) revert TransferToZeroAddress();\n\n        if(recipient == address(this)) revert TransferToPoolAddress();\n\n        _accumulateDepositInterest(sender);\n\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(sender);\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\n\n        _updateWithdrawn(sender, amount, lockedAmount);\n\n        _deposited[sender] -= amount;\n        _allowed[sender][msg.sender] -= amount;\n\n        _accumulateDepositInterest(recipient);\n        _deposited[recipient] += amount;\n\n        // Handle rewards\n        if(address(poolRewarder) != address(0) && amount != 0){\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\n            if(unstaked > 0) {\n                poolRewarder.stakeFor(unstaked, recipient);\n            }\n        }\n\n        emit Transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n\n    /**\n     * Deposits the amount\n     * It updates user deposited balance, total deposited and rates\n     **/\n    function deposit(uint256 _amount) public virtual onlyWhitelistedAccounts{\n        depositOnBehalf(_amount, msg.sender);\n    }\n\n    /**\n     * Deposits the amount on behalf of `_of` user.\n     * It updates `_of` user deposited balance, total deposited and rates\n     **/\n    function depositOnBehalf(uint256 _amount, address _of) public virtual nonReentrant onlyWhitelistedAccounts {\n        if(_amount == 0) revert ZeroDepositAmount();\n        require(_of != address(0), \"Address zero\");\n        require(_of != address(this), \"Cannot deposit on behalf of pool\");\n\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\n\n        _accumulateDepositInterest(_of);\n\n        if(totalSupplyCap != 0){\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\n        }\n\n        _transferToPool(msg.sender, _amount);\n\n        _mint(_of, _amount);\n        _deposited[address(this)] += _amount;\n        _updateRates();\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.stakeFor(_amount, _of);\n        }\n\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\n    }\n\n    function _transferToPool(address from, uint256 amount) internal virtual {\n        tokenAddress.safeTransferFrom(from, address(this), amount);\n    }\n\n    function _transferFromPool(address to, uint256 amount) internal virtual {\n        tokenAddress.safeTransfer(to, amount);\n    }\n\n    /**\n     * Withdraws selected amount from the user deposits\n     * @dev _amount the amount to be withdrawn\n     **/\n    function withdraw(uint256 _amount) external nonReentrant onlyWhitelistedAccounts {\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\n\n        _accumulateDepositInterest(msg.sender);\n\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\n        // verified in \"require\" above\n        unchecked {\n            _deposited[address(this)] -= _amount;\n        }\n        _burn(msg.sender, _amount);\n\n        _updateRates();\n\n        _transferFromPool(msg.sender, _amount);\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.withdrawFor(_amount, msg.sender);\n        }\n\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * Borrows the specified amount\n     * It updates user borrowed balance, total borrowed amount and rates\n     * @dev _amount the amount to be borrowed\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\n     **/\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\n\n        _accumulateBorrowingInterest(msg.sender);\n\n        borrowed[msg.sender] += _amount;\n        borrowed[address(this)] += _amount;\n\n        _transferFromPool(msg.sender, _amount);\n\n        _updateRates();\n\n        emit Borrowing(msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * Repays the amount\n     * It updates user borrowed balance, total borrowed amount and rates\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\n     **/\n    function repay(uint256 amount) external nonReentrant {\n        _accumulateBorrowingInterest(msg.sender);\n\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\n        _transferToPool(msg.sender, amount);\n\n        borrowed[msg.sender] -= amount;\n        borrowed[address(this)] -= amount;\n\n        _updateRates();\n\n        emit Repayment(msg.sender, amount, block.timestamp);\n    }\n\n    /* =========\n\n\n    /**\n     * Returns the current borrowed amount for the given user\n     * The value includes the interest rates owned at the current moment\n     * @dev _user the address of queried borrower\n    **/\n    function getBorrowed(address _user) public view returns (uint256) {\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\n    }\n\n    function name() public virtual pure returns(string memory _name){\n        _name = \"\";\n    }\n\n    function symbol() public virtual pure returns(string memory _symbol){\n        _symbol = \"\";\n    }\n\n    function decimals() public virtual view returns(uint8){\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return balanceOf(address(this));\n    }\n\n    function totalBorrowed() public view returns (uint256) {\n        return getBorrowed(address(this));\n    }\n\n\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\n    function getRewards() external {\n        poolRewarder.getRewardsFor(msg.sender);\n    }\n\n    // Returns number of pending rewards for msg.sender\n    function checkRewards() external view returns (uint256) {\n        return poolRewarder.earned(msg.sender);\n    }\n\n    // Returns max. acceptable pool utilisation after borrow action\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\n        return 0.9e18;\n    }\n\n    /**\n     * Returns the current deposited amount for the given user\n     * The value includes the interest rates earned at the current moment\n     * @dev _user the address of queried depositor\n     **/\n    function balanceOf(address user) public view override returns (uint256) {\n        return depositIndex.getIndexedValue(_deposited[user], user);\n    }\n\n    /**\n     * Returns the current interest rate for deposits\n     **/\n    function getDepositRate() public view returns (uint256) {\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\n    }\n\n    /**\n     * Returns the current interest rate for borrowings\n     **/\n    function getBorrowingRate() public view returns (uint256) {\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\n    }\n\n    /**\n     * Returns full pool status\n     */\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\n        return [\n            totalSupply(),\n            getDepositRate(),\n            getBorrowingRate(),\n            totalBorrowed(),\n            getMaxPoolUtilisationForBorrowing()\n        ];\n    }\n\n    /**\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\n     **/\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\n\n        if(amount > balance) revert InsufficientPoolFunds();\n        if(surplus < amount) revert InsufficientSurplus();\n\n        _transferFromPool(account, amount);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _mint(address to, uint256 amount) internal {\n        if(to == address(0)) revert MintToAddressZero();\n\n        _deposited[to] += amount;\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\n        if(amount > transferrableAmount) revert BurnAmountExceedsAvailableForUser();\n\n        _updateWithdrawn(account, amount, lockedAmount);\n\n        // verified in \"require\" above\n        unchecked {\n            _deposited[account] -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _getAmounts(address account) internal view returns (uint256 lockedAmount, uint256 transferrableAmount) {\n        if (address(vestingDistributor) != address(0)) {\n            lockedAmount = vestingDistributor.locked(account);\n            transferrableAmount = _deposited[account] - (lockedAmount - vestingDistributor.availableToWithdraw(account));\n        } else {\n            transferrableAmount = _deposited[account];\n        }\n    }\n\n    function _updateWithdrawn(address account, uint256 amount, uint256 lockedAmount) internal {\n        uint256 availableUnvested = _deposited[account] - lockedAmount;\n        if (amount > availableUnvested && address(vestingDistributor) != address(0)) {\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\n        }\n    }\n\n    function _updateRates() internal {\n        uint256 _totalBorrowed = totalBorrowed();\n        uint256 _totalSupply = totalSupply();\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\n    }\n\n    function _accumulateDepositInterest(address user) internal {\n        uint256 interest = balanceOf(user) - _deposited[user];\n\n        _mint(user, interest);\n        _deposited[address(this)] = balanceOf(address(this));\n\n        emit InterestCollected(user, interest, block.timestamp);\n\n        depositIndex.updateUser(user);\n        depositIndex.updateUser(address(this));\n    }\n\n    function _accumulateBorrowingInterest(address user) internal {\n        borrowed[user] = getBorrowed(user);\n        borrowed[address(this)] = getBorrowed(address(this));\n\n        borrowIndex.updateUser(user);\n        borrowIndex.updateUser(address(this));\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== MODIFIERS ========== */\n\n    modifier canBorrow() {\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\n        _;\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after the user deposits funds\n     * @param user the address performing the deposit\n     * @param value the amount deposited\n     * @param timestamp of the deposit\n     **/\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user deposits funds on behalf of other user\n     * @param user the address performing the deposit\n     * @param _of the address on behalf of which the deposit is being performed\n     * @param value the amount deposited\n     * @param timestamp of the deposit\n     **/\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user withdraws funds\n     * @param user the address performing the withdrawal\n     * @param value the amount withdrawn\n     * @param timestamp of the withdrawal\n     **/\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user borrows funds\n     * @param user the address that borrows\n     * @param value the amount borrowed\n     * @param timestamp time of the borrowing\n     **/\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user repays debt\n     * @param user the address that repays debt\n     * @param value the amount repaid\n     * @param timestamp of the repayment\n     **/\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after accumulating deposit interest\n     * @param user the address that the deposit interest is accumulated for\n     * @param value the amount that interest is calculated from\n     * @param timestamp of the interest accumulation\n     **/\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing borrowers registry\n    * @param registry an address of the newly set borrowers registry\n    * @param timestamp of the borrowers registry change\n    **/\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing rates calculator\n    * @param calculator an address of the newly set rates calculator\n    * @param timestamp of the borrowers registry change\n    **/\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing pool rewarder\n    * @param poolRewarder an address of the newly set pool rewarder\n    * @param timestamp of the pool rewarder change\n    **/\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing vesting distributor\n    * @param distributor an address of the newly set distributor\n    * @param timestamp of the distributor change\n    **/\n    event VestingDistributorChanged(address indexed distributor, uint256 timestamp);\n\n    /* ========== ERRORS ========== */\n\n    // Only authorized accounts may borrow\n    error NotAuthorizedToBorrow();\n\n    // Borrowers registry is not configured\n    error BorrowersRegistryNotConfigured();\n\n    // Pool is frozen\n    error PoolFrozen();\n\n    // Not enough funds in the pool.\n    error InsufficientPoolFunds();\n\n    // Insufficient pool surplus to cover the requested recover amount\n    error InsufficientSurplus();\n\n    // Address (`target`) must be a contract\n    // @param target target address that must be a contract\n    error NotAContract(address target);\n\n    //  ERC20: Spender cannot be a zero address\n    error SpenderZeroAddress();\n\n    //  ERC20: cannot transfer to the zero address\n    error TransferToZeroAddress();\n\n    //  ERC20: cannot transfer to the pool address\n    error TransferToPoolAddress();\n\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\n    /// @param amount transfer amount\n    /// @param balance available balance\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\n\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\n    /// @param requested requested transfer amount\n    /// @param allowance current allowance\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\n\n    //  This deposit operation would result in a breach of the totalSupplyCap\n    error TotalSupplyCapBreached();\n\n    // The deposit amount must be > 0\n    error ZeroDepositAmount();\n\n    // ERC20: cannot mint to the zero address\n    error MintToAddressZero();\n\n    // ERC20: burn amount exceeds current pool indexed balance\n    error BurnAmountExceedsBalance();\n\n    // ERC20: burn amount exceeds current amount available (including vesting)\n    error BurnAmountExceedsAvailableForUser();\n\n    // Trying to repay more than was borrowed\n    error RepayingMoreThanWasBorrowed();\n\n    // getMaxPoolUtilisationForBorrowing was breached\n    error MaxPoolUtilisationBreached();\n}"
    },
    "contracts/PoolRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IPoolRewarder.sol\";\n\ncontract PoolRewarder is IPoolRewarder {\n//    IERC20 public immutable stakingToken;\n    IERC20 public immutable rewardsToken;\n\n    address public owner;\n    address public pool;\n\n    // Duration of rewards to be paid out (in seconds)\n    uint public duration;\n    // Timestamp of when the rewards finish\n    uint public finishAt;\n    // Minimum of last updated time and reward finish time\n    uint public updatedAt;\n    // Reward to be paid out per second\n    uint public rewardRate;\n    // Sum of (reward rate * dt * 1e18 / total supply)\n    uint public rewardPerTokenStored;\n    // User address => rewardPerTokenStored\n    mapping(address => uint) public userRewardPerTokenPaid;\n    // User address => rewards to be claimed\n    mapping(address => uint) public rewards;\n\n    // Total staked\n    uint public totalSupply;\n    // User address => staked amount\n    mapping(address => uint) public balanceOf;\n\n//    constructor(address _stakingToken, address _rewardToken) {\n    constructor(address _rewardToken, address _pool) {\n        owner = msg.sender;\n        pool = _pool;\n//        stakingToken = IERC20(_stakingToken);\n        rewardsToken = IERC20(_rewardToken);\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Unauthorized: onlyOwner\");\n        _;\n    }\n\n    modifier onlyPool() {\n        require(msg.sender == pool, \"Unauthorized: onlyPool\");\n        _;\n    }\n\n    modifier updateReward(address _account) {\n        rewardPerTokenStored = rewardPerToken();\n        updatedAt = lastTimeRewardApplicable();\n\n        if (_account != address(0)) {\n            rewards[_account] = earned(_account);\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n        }\n\n        _;\n    }\n\n    function lastTimeRewardApplicable() public view returns (uint) {\n        return _min(finishAt, block.timestamp);\n    }\n\n    function rewardPerToken() public view returns (uint) {\n        if (totalSupply == 0) {\n            return rewardPerTokenStored;\n        }\n\n        return\n        rewardPerTokenStored +\n        (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e18) /\n        totalSupply;\n    }\n\n    function stakeFor(uint _amount, address _stakeFor) external updateReward(_stakeFor) onlyPool {\n        require(_amount > 0, \"amount = 0\");\n//        stakingToken.transferFrom(msg.sender, address(this), _amount);\n        balanceOf[_stakeFor] += _amount;\n        totalSupply += _amount;\n        emit Staked(_stakeFor, _amount, block.timestamp);\n    }\n\n    function withdrawFor(uint _amount, address _unstakeFor) external updateReward(_unstakeFor) onlyPool returns (uint256){\n        require(_amount > 0, \"amount = 0\");\n        if(balanceOf[_unstakeFor] > 0) {\n            uint256 amountToUnstake = _amount > balanceOf[_unstakeFor] ? balanceOf[_unstakeFor] : _amount;\n            balanceOf[_unstakeFor] -= amountToUnstake;\n            totalSupply -= amountToUnstake;\n            //        stakingToken.transfer(msg.sender, _amount);\n            emit Unstaked(_unstakeFor, amountToUnstake, block.timestamp);\n            return amountToUnstake;\n        }\n        return 0;\n    }\n\n    function earned(address _account) public view returns (uint) {\n        return\n        ((balanceOf[_account] *\n        (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e18) +\n        rewards[_account];\n    }\n\n    function getRewardsFor(address _user) external updateReward(_user) {\n        uint reward = rewards[_user];\n        if (reward > 0) {\n            rewards[_user] = 0;\n            rewardsToken.transfer(_user, reward);\n        }\n    }\n\n    function setRewardsDuration(uint _duration) external onlyOwner {\n        require(finishAt < block.timestamp, \"reward duration not finished\");\n        duration = _duration;\n    }\n\n    function notifyRewardAmount(uint _amount)\n    external\n    onlyOwner\n    updateReward(address(0))\n    {\n        if (block.timestamp >= finishAt) {\n            rewardRate = _amount / duration;\n        } else {\n            uint remainingRewards = (finishAt - block.timestamp) * rewardRate;\n            rewardRate = (_amount + remainingRewards) / duration;\n        }\n\n        require(rewardRate > 0, \"reward rate = 0\");\n        require(\n            rewardRate * duration <= rewardsToken.balanceOf(address(this)),\n            \"reward amount > balance\"\n        );\n\n        finishAt = block.timestamp + duration;\n        updatedAt = block.timestamp;\n    }\n\n    function _min(uint x, uint y) private pure returns (uint) {\n        return x <= y ? x : y;\n    }\n\n    /**\n      * @dev emitted after staking in the pool\n      * @param user the address that staked\n      * @param timestamp of the staking\n    **/\n    event Staked(address user, uint256 indexed amount, uint256 timestamp);\n\n    /**\n      * @dev emitted after staking in the pool\n      * @param user the address that unstaked\n      * @param timestamp of the unstaking\n    **/\n    event Unstaked(address user, uint256 indexed amount, uint256 timestamp);\n}\n"
    },
    "contracts/proxies/openzeppelinVirtual/BeaconProxyVirtual.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"./ERC1967UpgradeVirtual.sol\";\nimport \"../../interfaces/IDiamondBeacon.sol\";\n\n/**\n * @dev This is a copy of OpenZeppelin BeaconProxy (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol) contract.\n * The only difference is usage of ERC1967UpgradeVirtual contract that allows overriding the ERC1967Upgrade._upgradeBeaconToAndCall method and removing the obsolete BeaconProxy._setBeacon() method.\n */\ncontract BeaconProxyVirtual is Proxy, ERC1967UpgradeVirtual {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IDiamondBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IDiamondBeacon(_getBeacon()).implementation();\n    }\n}"
    },
    "contracts/proxies/openzeppelinVirtual/ERC1967UpgradeVirtual.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"../../interfaces/IDiamondBeacon.sol\";\n\n/**\n * @dev This is a copy of OpenZeppelin ERC1967Upgrade (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/ERC1967/ERC1967Upgrade.sol) contract.\n * The only difference is the possibility of overriding the ERC1967Upgrade._upgradeBeaconToAndCall method.\n */\nabstract contract ERC1967UpgradeVirtual {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) internal {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IDiamondBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal virtual {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            // 0xe1c7392a = init()\n            Address.functionDelegateCall(IDiamondBeacon(newBeacon).implementation(0xe1c7392a), data);\n        }\n    }\n}"
    },
    "contracts/proxies/SmartLoanDiamondProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./openzeppelinVirtual/BeaconProxyVirtual.sol\";\n\n/**\n * @dev This is a copy of OpenZeppelin BeaconProxy (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol) contract.\n * The only difference is usage of overriding the ERC1967Upgrade._upgradeBeaconToAndCall and BeaconProxy._implementation() methods.\n */\n\ncontract SmartLoanDiamondProxy is BeaconProxyVirtual {\n    constructor(address beacon, bytes memory data) payable BeaconProxyVirtual(beacon, data) {}\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable override {}\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IDiamondBeacon(_getBeacon()).implementation(msg.sig);\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal override {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            // 0xc4d66de8 = initialize(address owner)\n            Address.functionDelegateCall(IDiamondBeacon(newBeacon).implementation(0xc4d66de8), data);\n        }\n    }\n}"
    },
    "contracts/proxies/tup/AddressProviderTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract AddressProviderTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/BtcBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract BtcBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/BtcDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract BtcDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/BtcPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract BtcPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/DaiBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract DaiBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/DaiDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract DaiDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/DaiPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract DaiPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/EthBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract EthBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/EthDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract EthDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/EthPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract EthPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/FraxBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract FraxBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/FraxDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract FraxDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/FraxPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract FraxPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/PangolinIntermediaryTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract PangolinIntermediaryTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/TraderJoeIntermediaryTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract TraderJoeIntermediaryTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/UsdcBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdcBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/UsdcDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdcDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/UsdcPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdcPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/UsdtBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdtBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/UsdtDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdtDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/UsdtPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdtPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/WethBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract WethBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/WethDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract WethDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/arbitrum/WethPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract WethPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/BtcBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract BtcBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/BtcDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract BtcDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/BtcPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract BtcPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/EthBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract EthBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/EthDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract EthDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/EthPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract EthPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/PangolinIntermediaryTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract PangolinIntermediaryTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/TraderJoeIntermediaryTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract TraderJoeIntermediaryTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/UsdcBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdcBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/UsdcDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdcDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/UsdcPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdcPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/UsdtBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdtBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/UsdtDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdtDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/UsdtPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UsdtPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/WavaxBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract WavaxBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/WavaxDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract WavaxDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/avalanche/WavaxPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract WavaxPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/celo/CeloBorrowIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract CeloBorrowIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/celo/CeloDepositIndexTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract CeloDepositIndexTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/celo/CeloPoolTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract CeloPoolTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/celo/UbeswapIntermediaryTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract UbeswapIntermediaryTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/SmartLoansFactoryTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract SmartLoansFactoryTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/proxies/tup/TokenManagerTUP.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/transparent/TransparentUpgradeableProxy.sol\";\n\ncontract TokenManagerTUP is TransparentUpgradeableProxy {\n    constructor(address _logic, address admin_, bytes memory _data) TransparentUpgradeableProxy(_logic, admin_, _data) {}\n}\n"
    },
    "contracts/RecoveryManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"./interfaces/facets/avalanche/IRecoveryFacet.sol\";\n\n/// @title DeltaPrime Recovery Manager\ncontract RecoveryManager is Ownable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n\n    struct RecoverData {\n        bytes32 asset;\n        address underlying;\n        address[] accounts;\n        address token0;\n        address token1;\n        uint256 minAmount0;\n        uint256 minAmount1;\n    }\n\n    struct Helper {\n        address helper;\n        bytes4 selector;\n    }\n\n    mapping(bytes32 => Helper) public helpers;\n\n    function addHelper(\n        bytes32 _asset,\n        address _helper,\n        bytes4 _selector\n    ) external onlyOwner {\n        helpers[_asset] = Helper({helper: _helper, selector: _selector});\n\n        emit HelperAdded(_asset, _helper, _selector);\n    }\n\n    function recoverAssets(\n        RecoverData[] memory _data\n    ) external nonReentrant onlyOwner {\n        uint256 length = _data.length;\n        require(length > 0, \"empty array\");\n\n        for (uint256 i; i != length; ++i) {\n            RecoverData memory data = _data[i];\n            Helper memory helper = helpers[data.asset];\n            require(helper.helper != address(0), \"Helper not found\");\n\n            uint256 userLength = data.accounts.length;\n            uint256[] memory recovered = new uint256[](userLength);\n            uint256 totalRecovered;\n\n            for (uint256 j; j != userLength; ++j) {\n                recovered[j] = IRecoveryFacet(data.accounts[j]).emergencyWithdraw(\n                    data.asset\n                );\n                totalRecovered += recovered[j];\n            }\n\n            require(totalRecovered > 0, \"Nothing to recover\");\n\n            uint256 beforeBalance = IERC20(data.underlying).balanceOf(address(this));\n\n            (bool success, ) = helper.helper.delegatecall(\n                abi.encodeWithSelector(\n                    helper.selector,\n                    data.token0,\n                    data.token1,\n                    totalRecovered,\n                    data.minAmount0,\n                    data.minAmount1\n                )\n            );\n            require(success, \"failed to unstake\");\n\n            uint256 recoveredBalance = IERC20(data.underlying).balanceOf(\n                address(this)\n            ) - beforeBalance;\n\n            for (uint256 j; j != userLength; ++j) {\n                address account = data.accounts[j];\n                uint256 refundAmount = (recoveredBalance * recovered[j]) /\n                    totalRecovered;\n                IERC20(data.underlying).safeApprove(account, 0);\n                IERC20(data.underlying).safeApprove(account, refundAmount);\n                IRecoveryFacet(account).notifyRefund(data.underlying, refundAmount);\n            }\n\n            emit AssetRecovered(\n                data.asset,\n                totalRecovered,\n                data.underlying,\n                recoveredBalance\n            );\n        }\n    }\n\n    event HelperAdded(bytes32 asset, address helper, bytes4 selector);\n\n    event AssetRecovered(\n        bytes32 asset,\n        uint256 assetRecovered,\n        address underlying,\n        uint256 underlyingRecovered\n    );\n}\n"
    },
    "contracts/ReentrancyGuardKeccak.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\n// contract that uses keccak slots instead of the standard storage layout.\n\nimport {DiamondStorageLib} from \"./lib/DiamondStorageLib.sol\";\n\npragma solidity 0.8.17;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n */\nabstract contract ReentrancyGuardKeccak {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\n        // On the first call to nonReentrant, _notEntered will be true\n        require(rgs._status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        rgs._status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        rgs._status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/SmartLoanDiamondBeacon.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport {DiamondStorageLib} from \"./lib/DiamondStorageLib.sol\";\nimport {IDiamondCut} from \"./interfaces/IDiamondCut.sol\";\n\n/**\n * @title SmartLoanDiamondBeacon\n * A contract that is authorised to borrow funds using delegated credit.\n * It maintains solvency calculating the current value of assets and borrowings.\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\n * It permits only a limited and safe token transfer.\n *\n */\n\ncontract SmartLoanDiamondBeacon {\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\n        DiamondStorageLib.setContractOwner(_contractOwner);\n        DiamondStorageLib.setContractPauseAdmin(_contractOwner);\n\n        // Add the diamondCut external function from the diamondCutFacet\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](3);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        functionSelectors[1] = IDiamondCut.pause.selector;\n        functionSelectors[2] = IDiamondCut.unpause.selector;\n        cut[0] = IDiamondCut.FacetCut({\n        facetAddress : _diamondCutFacet,\n        action : IDiamondCut.FacetCutAction.Add,\n        functionSelectors : functionSelectors\n        });\n        DiamondStorageLib.diamondCut(cut, address(0), \"\");\n\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        // diamondCut(); unpause()\n        ds.canBeExecutedWhenPaused[0x1f931c1c] = true;\n        ds.canBeExecutedWhenPaused[0x3f4ba83a] = true;\n    }\n\n    function implementation() public view returns (address) {\n        return address(this);\n    }\n\n    function canBeExecutedWhenPaused(bytes4 methodSig) external view returns (bool) {\n        return DiamondStorageLib.getPausedMethodExemption(methodSig);\n    }\n\n    function setPausedMethodExemptions(bytes4[] memory methodSigs, bool[] memory values) public {\n        DiamondStorageLib.enforceIsContractOwner();\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n\n        for(uint i; i<methodSigs.length; i++){\n            require(!(methodSigs[i] == 0x3f4ba83a && values[i] == false), \"The unpause() method must be available during the paused state.\");\n            ds.canBeExecutedWhenPaused[methodSigs[i]] = values[i];\n        }\n    }\n\n    function getStatus() public view returns(bool) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        return ds._active;\n    }\n\n    function implementation(bytes4 funcSignature) public view notPausedOrUpgrading(funcSignature) returns (address) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        // get facet from function selector\n        address facet = ds.selectorToFacetAndPosition[funcSignature].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        // Execute external function from facet using delegatecall and return any value.\n        return facet;\n    }\n\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        address facet = implementation(msg.sig);\n        // Execute external function from facet using delegatecall and return any value.\n        assembly {\n        // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n        // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n        // get any return value\n            returndatacopy(0, 0, returndatasize())\n        // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return (0, returndatasize())\n            }\n        }\n    }\n\n    function proposeBeaconOwnershipTransfer(address _newOwner) external {\n        DiamondStorageLib.enforceIsContractOwner();\n        require(_newOwner != msg.sender, \"Can't propose oneself as a contract owner\");\n        DiamondStorageLib.setProposedOwner(_newOwner);\n\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\n    }\n\n    function proposeBeaconPauseAdminOwnershipTransfer(address _newPauseAdmin) external {\n        DiamondStorageLib.enforceIsPauseAdmin();\n        require(_newPauseAdmin != msg.sender, \"Can't propose oneself as a contract pauseAdmin\");\n        DiamondStorageLib.setProposedPauseAdmin(_newPauseAdmin);\n\n        emit PauseAdminOwnershipProposalCreated(msg.sender, _newPauseAdmin);\n    }\n\n    function acceptBeaconOwnership() external {\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \"Only a proposed user can accept ownership\");\n        DiamondStorageLib.setContractOwner(msg.sender);\n        DiamondStorageLib.setProposedOwner(address(0));\n\n        emit OwnershipProposalAccepted(msg.sender);\n    }\n\n    function acceptBeaconPauseAdminOwnership() external {\n        require(DiamondStorageLib.proposedPauseAdmin() == msg.sender, \"Only a proposed user can accept ownership\");\n        DiamondStorageLib.setContractPauseAdmin(msg.sender);\n        DiamondStorageLib.setProposedPauseAdmin(address(0));\n\n        emit PauseAdminOwnershipProposalAccepted(msg.sender);\n    }\n\n    modifier notPausedOrUpgrading(bytes4 funcSignature) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        if(!ds._active){\n            if(!ds.canBeExecutedWhenPaused[funcSignature]){\n                revert(\"ProtocolUpgrade: paused.\");\n            }\n        }\n        _;\n    }\n\n    /**\n     * @dev emitted after creating a pauseAdmin transfer proposal by the pauseAdmin\n     * @param pauseAdmin address of the current pauseAdmin\n     * @param proposed address of the proposed pauseAdmin\n     **/\n    event PauseAdminOwnershipProposalCreated(address indexed pauseAdmin, address indexed proposed);\n\n    /**\n     * @dev emitted after accepting a pauseAdmin transfer proposal by the new pauseAdmin\n     * @param newPauseAdmin address of the new pauseAdmin\n     **/\n    event PauseAdminOwnershipProposalAccepted(address indexed newPauseAdmin);\n\n    /**\n     * @dev emitted after creating a ownership transfer proposal by the owner\n     * @param owner address of the current owner\n     * @param proposed address of the proposed owner\n     **/\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\n\n    /**\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\n     * @param newOwner address of the new owner\n     **/\n    event OwnershipProposalAccepted(address indexed newOwner);\n}"
    },
    "contracts/SmartLoansFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"./SmartLoanDiamondBeacon.sol\";\nimport \"./proxies/SmartLoanDiamondProxy.sol\";\nimport \"./facets/AssetsOperationsFacet.sol\";\nimport \"./facets/OwnershipFacet.sol\";\nimport \"./facets/SmartLoanViewFacet.sol\";\n\n/**\n * @title SmartLoansFactory\n * @dev Contract responsible for creating new instances of SmartLoans (SmartLoanDiamondBeacon).\n * It's possible to either simply create a new loan or create and fund it with an ERC20 asset as well as borrow in a single transaction.\n * At the time of creating a loan, SmartLoansFactory contract is the owner for the sake of being able to perform the fund() and borrow() operations.\n * At the end of the createAndFundLoan the ownership is transferred to the msg.sender.\n * It's also responsible for keeping track of the loans, ensuring one loan per wallet rule, ownership transfers proposals/execution and\n * authorizes registered loans to borrow from lending pools.\n */\ncontract SmartLoansFactory is OwnableUpgradeable, IBorrowersRegistry, ProxyConnector {\n    using TransferHelper for address;\n    using TransferHelper for address payable;\n\n    modifier hasNoLoan() {\n        require(!_hasLoan(msg.sender), \"Only one loan per owner is allowed\");\n        _;\n    }\n\n\n    SmartLoanDiamondBeacon public smartLoanDiamond;\n\n    mapping(address => address) public ownersToLoans;\n    mapping(address => address) public loansToOwners;\n\n    address[] loans;\n\n    modifier onlyWhitelistedAccounts {\n        if(\n            msg.sender == 0x0E5Bad4108a6A5a8b06820f98026a7f3A77466b2 ||\n            msg.sender == 0x2fFA7E9624B923fA811d9B9995Aa34b715Db1945 ||\n            msg.sender == 0x0d7137feA34BC97819f05544Ec7DE5c98617989C ||\n            msg.sender == 0xC6ba6BB819f1Be84EFeB2E3f2697AD9818151e5D ||\n            msg.sender == 0x14f69F9C351b798dF31fC53E33c09dD29bFAb547 ||\n            msg.sender == 0x5C23Bd1BD272D22766eB3708B8f874CB93B75248 ||\n            msg.sender == 0x000000F406CA147030BE7069149e4a7423E3A264 ||\n            msg.sender == 0x5D80a1c0a5084163F1D2620c1B1F43209cd4dB12 ||\n            msg.sender == 0x6C21A841d6f029243AF87EF01f6772F05832144b\n\n        ){\n            _;\n        } else {\n            revert(\"Not whitelisted\");\n        }\n    }\n\n    function _hasLoan(address user) internal view returns (bool) {\n        return ownersToLoans[user] != address(0);\n    }\n\n    function changeOwnership(address _newOwner) public {\n        address loan = msg.sender;\n        address oldOwner = loansToOwners[loan];\n\n        require(oldOwner != address(0), \"Only a SmartLoan can change it's owner\");\n        require(!_hasLoan(_newOwner), \"New owner already has a loan\");\n\n        ownersToLoans[oldOwner] = address(0);\n        ownersToLoans[_newOwner] = loan;\n        loansToOwners[loan] = _newOwner;\n    }\n\n    function initialize(address payable _smartLoanDiamond) external initializer {\n        smartLoanDiamond = SmartLoanDiamondBeacon(_smartLoanDiamond);\n        __Ownable_init();\n    }\n\n    function createLoan() public virtual hasNoLoan onlyWhitelistedAccounts returns (SmartLoanDiamondBeacon) {\n        SmartLoanDiamondProxy beaconProxy = new SmartLoanDiamondProxy(\n            payable(address(smartLoanDiamond)),\n        // Setting SLFactory as the initial owner and then using .transferOwnership to change the owner to msg.sender\n        // It is possible to set msg.sender as the initial owner if our loan-creation flow would change\n            abi.encodeWithSelector(SmartLoanViewFacet.initialize.selector, msg.sender)\n        );\n        SmartLoanDiamondBeacon smartLoan = SmartLoanDiamondBeacon(payable(address(beaconProxy)));\n\n        //Update registry and emit event\n        updateRegistry(address(smartLoan), msg.sender);\n\n        emit SmartLoanCreated(address(smartLoan), msg.sender, \"\", 0);\n        return smartLoan;\n    }\n\n    function createAndFundLoan(bytes32 _fundedAsset, address _assetAddress, uint256 _amount) public virtual hasNoLoan onlyWhitelistedAccounts returns (SmartLoanDiamondBeacon) {\n        SmartLoanDiamondProxy beaconProxy = new SmartLoanDiamondProxy(payable(address(smartLoanDiamond)),\n            abi.encodeWithSelector(SmartLoanViewFacet.initialize.selector, msg.sender)\n        );\n        SmartLoanDiamondBeacon smartLoan = SmartLoanDiamondBeacon(payable(address(beaconProxy)));\n\n        //Fund account with own funds and credit\n        IERC20Metadata token = IERC20Metadata(_assetAddress);\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\n        address(token).safeApprove(address(smartLoan), _amount);\n\n        //Update registry and emit event\n        updateRegistry(address(smartLoan), msg.sender);\n\n        (bool success, bytes memory result) = address(smartLoan).call(abi.encodeWithSelector(AssetsOperationsFacet.fund.selector, _fundedAsset, _amount));\n        ProxyConnector._prepareReturnValue(success, result);\n\n        emit SmartLoanCreated(address(smartLoan), msg.sender, _fundedAsset, _amount);\n\n        return smartLoan;\n    }\n\n    function updateRegistry(address loan, address owner) internal {\n        ownersToLoans[owner] = loan;\n        loansToOwners[loan] = owner;\n        loans.push(loan);\n    }\n\n    function canBorrow(address _account) external view override returns (bool) {\n        return loansToOwners[_account] != address(0);\n    }\n\n    function getLoanForOwner(address _user) external view override returns (address) {\n        return ownersToLoans[_user];\n    }\n\n    function getOwnerOfLoan(address _loan) external view override returns (address) {\n        return loansToOwners[_loan];\n    }\n\n    function getAllLoans() public view returns (address[] memory) {\n        return loans;\n    }\n\n    function getLoans(uint256 _from, uint256 _count) public view returns (address[] memory _loans) {\n        uint256 length = loans.length;\n        if (_from >= length) {\n            _loans = new address[](0);\n            return _loans;\n        }\n\n        if (_count > length - _from) {\n            _count = length - _from;\n        }\n        _loans = new address[](_count);\n        for (uint256 i; i != _count; ++i) {\n            _loans[i] = loans[_from + i];\n        }\n    }\n\n    function getLoansLength() external view returns (uint256) {\n        return loans.length;\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /**\n     * @dev emitted after creating a loan by the owner\n     * @param accountAddress address of a new SmartLoanDiamondBeacon\n     * @param creator account creating a SmartLoanDiamondBeacon\n     * @param collateralAsset asset used as initial collateral\n     * @param collateralAmount amount of asset used as initial collateral\n     **/\n    event SmartLoanCreated(address indexed accountAddress, address indexed creator, bytes32 collateralAsset, uint256 collateralAmount);\n}"
    },
    "contracts/SmartLoansFactoryRestrictedAccess.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: da3db6d98ac8305a3d43391d37f1b9a30e456c4e;\npragma solidity 0.8.17;\n\nimport \"./SmartLoansFactory.sol\";\n\ncontract SmartLoansFactoryRestrictedAccess is SmartLoansFactory {\n    bytes32 internal constant ACCESS_NFT_SLOT = bytes32(uint256(keccak256('WHITELIST_SLOT_1670605213')) - 1);\n\n    function getWhitelistingMapping() internal view returns(mapping(address=>bool) storage result){\n        bytes32 slot = ACCESS_NFT_SLOT;\n        assembly{\n            result.slot := sload(slot)\n        }\n    }\n    \n    function whitelistBorrowers(address[] memory _borrowers) external onlyOwner {\n\n        for(uint i; i<_borrowers.length; i++){\n            getWhitelistingMapping()[_borrowers[i]] = true;\n            emit BorrowerWhitelisted(_borrowers[i], msg.sender, block.timestamp);\n        }\n    }\n\n    function delistBorrowers(address[] memory _borrowers) external onlyOwner {\n        for(uint i; i<_borrowers.length; i++){\n            getWhitelistingMapping()[_borrowers[i]] = false;\n            emit BorrowerDelisted(_borrowers[i], msg.sender, block.timestamp);\n        }\n    }\n\n    function isBorrowerWhitelisted(address _borrower) public view returns(bool){\n        return getWhitelistingMapping()[_borrower];\n    }\n\n    function createLoan() public virtual override hasNoLoan canCreatePrimeAccount(msg.sender) returns (SmartLoanDiamondBeacon) {\n        return super.createLoan();\n    }\n\n    function createAndFundLoan(bytes32 _fundedAsset, address _assetAddress, uint256 _amount) public virtual override hasNoLoan canCreatePrimeAccount(msg.sender) returns (SmartLoanDiamondBeacon) {\n        return super.createAndFundLoan(_fundedAsset, _assetAddress, _amount);\n    }\n\n    /**\n     * @dev emitted when a new borrower gets whitelisted\n     * @param borrower the address being whitelisted\n     * @param performer the address initiating whitelisting\n     * @param timestamp of the whitelisting\n     **/\n    event BorrowerWhitelisted(address indexed borrower, address performer, uint256 timestamp);\n    \n    /**\n     * @dev emitted when a borrower gets delisted\n     * @param borrower the address being delisted\n     * @param performer the address initiating delisting\n     * @param timestamp of the delisting\n     **/\n    event BorrowerDelisted(address indexed borrower, address performer, uint256 timestamp);\n\n    modifier canCreatePrimeAccount(address _borrower) {\n        require(isBorrowerWhitelisted(_borrower), \"Only whitelisted borrowers can create a Prime Account.\");\n        _;\n    }\n}\n"
    },
    "contracts/TimeLock.sol": {
      "content": "// SPDX-License-Identifier: BSD-3-Clause\npragma solidity ^0.8.10;\n\nimport \"./lib/SafeMath.sol\";\n\ncontract Timelock {\n    using SafeMath for uint;\n\n    event NewAdmin(address indexed newAdmin);\n    event NewPendingAdmin(address indexed newPendingAdmin);\n    event NewDelay(uint indexed newDelay);\n    event CancelTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event ExecuteTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature,  bytes data, uint eta);\n    event QueueTransaction(bytes32 indexed txHash, address indexed target, uint value, string signature, bytes data, uint eta);\n\n    uint public constant GRACE_PERIOD = 7 days;\n    uint public constant MINIMUM_DELAY = 1 days;\n    uint public constant MAXIMUM_DELAY = 30 days;\n\n    address public admin;\n    address public pendingAdmin;\n    uint public delay;\n\n    mapping (bytes32 => bool) public queuedTransactions;\n\n\n    constructor(address admin_, uint delay_) public {\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::constructor: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n\n        admin = admin_;\n        delay = delay_;\n    }\n\n    fallback() external payable { }\n\n    function setDelay(uint delay_) public {\n        require(msg.sender == address(this), \"Timelock::setDelay: Call must come from Timelock.\");\n        require(delay_ >= MINIMUM_DELAY, \"Timelock::setDelay: Delay must exceed minimum delay.\");\n        require(delay_ <= MAXIMUM_DELAY, \"Timelock::setDelay: Delay must not exceed maximum delay.\");\n        delay = delay_;\n\n        emit NewDelay(delay);\n    }\n\n    function acceptAdmin() public {\n        require(msg.sender == pendingAdmin, \"Timelock::acceptAdmin: Call must come from pendingAdmin.\");\n        admin = msg.sender;\n        pendingAdmin = address(0);\n\n        emit NewAdmin(admin);\n    }\n\n    function setPendingAdmin(address pendingAdmin_) public {\n        require(msg.sender == address(this), \"Timelock::setPendingAdmin: Call must come from Timelock.\");\n        pendingAdmin = pendingAdmin_;\n\n        emit NewPendingAdmin(pendingAdmin);\n    }\n\n    function queueTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public returns (bytes32) {\n        require(msg.sender == admin, \"Timelock::queueTransaction: Call must come from admin.\");\n        require(eta >= getBlockTimestamp().add(delay), \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = true;\n\n        emit QueueTransaction(txHash, target, value, signature, data, eta);\n        return txHash;\n    }\n\n    function cancelTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public {\n        require(msg.sender == admin, \"Timelock::cancelTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        queuedTransactions[txHash] = false;\n\n        emit CancelTransaction(txHash, target, value, signature, data, eta);\n    }\n\n    function executeTransaction(address target, uint value, string memory signature, bytes memory data, uint eta) public payable returns (bytes memory) {\n        require(msg.sender == admin, \"Timelock::executeTransaction: Call must come from admin.\");\n\n        bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\n        require(queuedTransactions[txHash], \"Timelock::executeTransaction: Transaction hasn't been queued.\");\n        require(getBlockTimestamp() >= eta, \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\");\n        require(getBlockTimestamp() <= eta.add(GRACE_PERIOD), \"Timelock::executeTransaction: Transaction is stale.\");\n\n        queuedTransactions[txHash] = false;\n\n        bytes memory callData;\n\n        if (bytes(signature).length == 0) {\n            callData = data;\n        } else {\n            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n        }\n\n        // solium-disable-next-line security/no-call-value\n        (bool success, bytes memory returnData) = target.call{value: value}(callData);\n        require(success, \"Timelock::executeTransaction: Transaction execution reverted.\");\n\n        emit ExecuteTransaction(txHash, target, value, signature, data, eta);\n\n        return returnData;\n    }\n\n    function getBlockTimestamp() internal view returns (uint) {\n        // solium-disable-next-line security/no-block-members\n        return block.timestamp;\n    }\n}"
    },
    "contracts/TokenList.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract TokenListOwnableUpgreadable is OwnableUpgradeable {\n    mapping(address => bool) isTokenWhitelisted;\n    mapping(address => uint256) tokenPositionInList;\n    address[] whitelistedTokensList;\n\n    function __TokenList_init(address[] memory _whitelistedTokens) internal onlyInitializing {\n        for (uint256 i = 0; i < _whitelistedTokens.length; i++) {\n            require(_whitelistToken(_whitelistedTokens[i], false), \"Whitelisting token failed\");\n        }\n\n        __Ownable_init();\n    }\n\n    // PUBLIC MUTATIVE FUNCTIONS\n\n    function whitelistTokens(address[] memory tokensToWhitelist) public onlyOwner {\n        for (uint256 i = 0; i < tokensToWhitelist.length; i++) {\n            require(_whitelistToken(tokensToWhitelist[i], true), \"Whitelisting token failed\");\n        }\n    }\n\n    function delistTokens(address[] memory tokensToDelist) public onlyOwner {\n        for (uint256 i = 0; i < tokensToDelist.length; i++) {\n            require(_delistToken(tokensToDelist[i], true), \"Delisting token failed\");\n        }\n    }\n\n    // PUBLIC VIEW FUNCTIONS\n\n    function getAllWhitelistedTokens() public view returns (address[] memory) {\n        return whitelistedTokensList;\n    }\n\n    // Already auto-generated because of the public visibility modifier\n    // function isTokenWhitelisted(address token) public view returns (bool) {\n    //     return isTokenWhitelisted[token];\n    // }\n\n    // INTERNAL MUTATIVE FUNCTIONS\n\n    function _whitelistToken(address token, bool revertOnDuplicates) internal returns (bool){\n        require(token != address(0), \"Cannot whitelist a zero address\");\n\n        if (!isTokenWhitelisted[token]) {\n            whitelistedTokensList.push(token);\n            tokenPositionInList[token] = whitelistedTokensList.length - 1;\n            isTokenWhitelisted[token] = true;\n            emit TokenWhitelisted(msg.sender, token, block.timestamp);\n            return true;\n\n        } else if (revertOnDuplicates) {\n            revert(\"Token already whitelisted\");\n        }\n        return false;\n    }\n\n    function _delistToken(address token, bool revertOnNonListedTokens) internal returns (bool){\n        if (isTokenWhitelisted[token]) {\n            _removeTokenFromList(token);\n            isTokenWhitelisted[token] = false;\n            emit TokenDelisted(msg.sender, token, block.timestamp);\n            return true;\n\n        } else if (revertOnNonListedTokens) {\n            revert(\"Token was not whitelisted before\");\n        }\n        return false;\n    }\n\n    // INTERNAL HELPER MUTATIVE FUNCTIONS\n\n    function _removeTokenFromList(address tokenToRemove) internal {\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] whitelistedTokensList\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\n        if (tokenToRemoveIndex != (whitelistedTokensList.length - 1)) {\n            address currentLastToken = whitelistedTokensList[whitelistedTokensList.length - 1];\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\n            whitelistedTokensList[tokenToRemoveIndex] = currentLastToken;\n        }\n        // Remove last element - that is either the token that is being removed (if was already at the end)\n        // or some other asset that at this point was already copied to the `index` positon\n        whitelistedTokensList.pop();\n        tokenPositionInList[tokenToRemove] = 0;\n    }\n\n    // EVENTS\n    /**\n    * @dev emitted after whitelisting a token\n    * @param user performing the transaction\n    * @param token address of whitelisted token\n    * @param timestamp of change\n    **/\n    event TokenWhitelisted(address indexed user, address token, uint256 timestamp);\n\n    /**\n    * @dev emitted after delisting a token\n    * @param user performing the transaction\n    * @param token address of delisted token\n    * @param timestamp of change\n    **/\n    event TokenDelisted(address indexed user, address token, uint256 timestamp);\n}"
    },
    "contracts/TokenManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: dcb19937650464dc2dd61f4775a367c64670c3ac;\npragma solidity 0.8.17;\n\nimport \"./lib/Bytes32EnumerableMap.sol\";\nimport \"./interfaces/IBorrowersRegistry.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract TokenManager is OwnableUpgradeable {\n    /**\n     * For adding supported assets\n     **/\n    struct Asset {\n        bytes32 asset;\n        address assetAddress;\n        uint256 debtCoverage;\n    }\n\n    /**\n     * For adding supported lending pools\n     **/\n    struct poolAsset {\n        bytes32 asset;\n        address poolAddress;\n    }\n\n    struct Exposure {\n        uint256 current;\n        uint256 max; // Setting max to 0 means no exposure limitations.\n    }\n\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\n\n    uint256 private constant _NOT_SUPPORTED = 0;\n    uint256 private constant _INACTIVE = 1;\n    uint256 private constant _ACTIVE = 2;\n\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\n    mapping(address => bytes32) public tokenAddressToSymbol;\n    mapping(address => uint256) private tokenPositionInList;\n    // used for defining different leverage ratios for tokens\n    mapping(address => uint256) public debtCoverage;\n    address[] public supportedTokensList;\n\n    mapping(address => uint256) public tokenToStatus;\n    // used for defining different leverage ratios for staked assets\n    mapping(bytes32 => uint256) public debtCoverageStaked;\n\n    mapping(bytes32 => bytes32) public identifierToExposureGroup;\n    mapping(bytes32 => Exposure) public groupToExposure;\n\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\n        __Ownable_init();\n\n        addTokenAssets(tokenAssets);\n        addPoolAssets(poolAssets);\n    }\n\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\n        return assetToPoolAddress._inner._keys._inner._values;\n    }\n\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\n        return supportedTokensList;\n    }\n\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\n        return assetToTokenAddress._inner._keys._inner._values;\n    }\n\n    /**\n    * Returns address of an asset\n    **/\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\n        require(assetAddress != address(0), \"Asset not supported.\");\n        if (!allowInactive) {\n            require(tokenToStatus[assetAddress] == _ACTIVE, \"Asset inactive\");\n        }\n\n        return assetAddress;\n    }\n\n    /**\n    * Returns address of an asset's lending pool\n    **/\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\n        require(assetAddress != address(0), \"Pool asset not supported.\");\n\n        return assetAddress;\n    }\n\n    function increaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureIncrease) public onlyPrimeAccountOrOwner {\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\n        if(group != \"\"){\n            Exposure storage exposure = groupToExposure[group];\n            if(exposure.max != 0){\n                exposure.current += exposureIncrease;\n                require(exposure.current <= exposure.max, \"Max asset exposure breached\");\n                emit ProtocolExposureChanged(msg.sender, group, exposureIncrease, block.timestamp);\n            }\n        }\n    }\n\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) public onlyPrimeAccountOrOwner {\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\n        if(group != \"\"){\n            Exposure storage exposure = groupToExposure[group];\n            if(exposure.max != 0){\n                exposure.current = exposure.current <= exposureDecrease ? 0 : exposure.current - exposureDecrease;\n                emit ProtocolExposureChanged(msg.sender, group, exposureDecrease, block.timestamp);\n            }\n        }\n    }\n\n    function setCurrentProtocolExposure(bytes32[] memory groupIdentifiers, uint256[] memory currentExposures) external onlyOwner {\n        require(groupIdentifiers.length == currentExposures.length, \"Arrays lengths mismatch\");\n        for (uint256 i = 0; i < groupIdentifiers.length; i++) {\n            _setCurrentProtocolExposure(groupIdentifiers[i], currentExposures[i]);\n        }\n    }\n\n    function setMaxProtocolsExposure(bytes32[] memory groupIdentifiers, uint256[] memory maxExposures) public onlyOwner {\n        require(groupIdentifiers.length == maxExposures.length, \"Arrays lengths mismatch\");\n        for (uint256 i = 0; i < groupIdentifiers.length; i++) {\n            _setMaxProtocolExposure(groupIdentifiers[i], maxExposures[i]);\n        }\n    }\n\n    function _setMaxProtocolExposure(bytes32 groupIdentifier, uint256 maxExposure) internal {\n        require(groupIdentifier != \"\", \"Cannot set an empty string asset.\");\n        uint256 prevExposure = groupToExposure[groupIdentifier].max;\n        groupToExposure[groupIdentifier].max = maxExposure;\n\n        emit ProtocolExposureSet(msg.sender, groupIdentifier, prevExposure, maxExposure, groupToExposure[groupIdentifier].current , block.timestamp);\n    }\n\n    function _setCurrentProtocolExposure(bytes32 groupIdentifier, uint256 currentExposure) internal {\n        require(groupIdentifier != \"\", \"Cannot set an empty string asset.\");\n        uint256 prevExposure = groupToExposure[groupIdentifier].current;\n        groupToExposure[groupIdentifier].current = currentExposure;\n\n        emit ProtocolCurrentExposureSet(msg.sender, groupIdentifier, prevExposure, currentExposure, block.timestamp);\n    }\n\n    function setIdentifiersToExposureGroups(bytes32[] memory identifiers, bytes32[] memory exposureGroups) public onlyOwner {\n        require(identifiers.length == exposureGroups.length, \"Arrays lengths mismatch\");\n        for(uint i=0; i<identifiers.length; i++){\n            identifierToExposureGroup[identifiers[i]] = exposureGroups[i];\n            emit IdentifierToExposureGroupSet(msg.sender, identifiers[i], exposureGroups[i], block.timestamp);\n        }\n\n    }\n\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\n        for (uint256 i = 0; i < poolAssets.length; i++) {\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\n        }\n    }\n\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\n        require(Address.isContract(_poolAddress), \"TokenManager: Pool must be a contract\");\n        require(!assetToPoolAddress.contains(_asset), \"Asset's pool already exists\");\n        assetToPoolAddress.set(_asset, _poolAddress);\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\n    }\n\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\n        }\n    }\n\n    function isTokenAssetActive(address token) external view returns(bool) {\n        return tokenToStatus[token] == _ACTIVE;\n    }\n\n    function activateToken(address token) public onlyOwner {\n        require(tokenToStatus[token] == _INACTIVE, \"Must be inactive\");\n        tokenToStatus[token] = _ACTIVE;\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\n    }\n\n    function deactivateToken(address token) public onlyOwner {\n        require(tokenToStatus[token] == _ACTIVE, \"Must be active\");\n        tokenToStatus[token] = _INACTIVE;\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\n    }\n\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\n        require(_asset != \"\", \"Cannot set an empty string asset.\");\n        require(_tokenAddress != address(0), \"Cannot set an empty address.\");\n        require(!assetToTokenAddress.contains(_asset), \"Asset's token already exists\");\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \"Asset address is already in use\");\n        setDebtCoverage(_tokenAddress, _debtCoverage);\n\n        assetToTokenAddress.set(_asset, _tokenAddress);\n        tokenAddressToSymbol[_tokenAddress] = _asset;\n        tokenToStatus[_tokenAddress] = _ACTIVE;\n\n        supportedTokensList.push(_tokenAddress);\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\n\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\n    }\n\n    function _removeTokenFromList(address tokenToRemove) internal {\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\n        }\n        // Remove last element - that is either the token that is being removed (if was already at the end)\n        // or some other asset that at this point was already copied to the `index` positon\n        supportedTokensList.pop();\n        tokenPositionInList[tokenToRemove] = 0;\n    }\n\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\n            _removeTokenAsset(_tokenAssets[i]);\n        }\n    }\n\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\n        tokenAddressToSymbol[tokenAddress] = 0;\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\n        debtCoverage[tokenAddress] = 0;\n        _removeTokenFromList(tokenAddress);\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\n    }\n\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\n            _removePoolAsset(_poolAssets[i]);\n        }\n    }\n\n    function _removePoolAsset(bytes32 _poolAsset) internal {\n        address poolAddress = getPoolAddress(_poolAsset);\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\n    }\n\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\n        //LTV must be lower than 5\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\n        debtCoverage[token] = coverage;\n    }\n\n    function setDebtCoverageStaked(bytes32 stakedAsset, uint256 coverage) public onlyOwner {\n        //LTV must be lower than 5\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\n        debtCoverageStaked[stakedAsset] = coverage;\n    }\n\n    function getSmartLoansFactoryAddress() public view virtual returns (address) {\n        return 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyPrimeAccountOrOwner() {\n        IBorrowersRegistry borrowersRegistry = IBorrowersRegistry(getSmartLoansFactoryAddress());\n        require(borrowersRegistry.canBorrow(msg.sender) || owner() == _msgSender(), \"Only PrimeAccount or owner can change protocol exposure\");\n        _;\n    }\n\n    /**\n     * @dev emitted after changing current protocol exposure\n     * @param performer an address of the wallet changing the exposure\n     * @param identifier group identifier\n     * @param newExposure new current protocol exposure\n     * @param timestamp time of associating identifier with a exposure group\n     **/\n    event ProtocolExposureChanged(address indexed performer, bytes32 indexed identifier, uint256 newExposure, uint256 timestamp);\n\n\n    /**\n     * @dev emitted after associating identifier with a exposure group\n     * @param performer an address of the wallet setting max exposure\n     * @param identifier asset identifier\n     * @param exposureGroup exposure group identifier\n     * @param timestamp time of associating identifier with a exposure group\n     **/\n    event IdentifierToExposureGroupSet(address indexed performer, bytes32 indexed identifier, bytes32 indexed exposureGroup, uint256 timestamp);\n\n    /**\n     * @dev emitted after setting max exposure for a given protocol.\n     * @param performer an address of the wallet setting max exposure\n     * @param groupIdentifier exposure group identifier\n     * @param prevMaxExposure previous max protocol exposure\n     * @param newMaxExposure new max protocol exposure\n     * @param currentExposure current protocol exposure\n     * @param timestamp time of setting max exposure\n     **/\n    event ProtocolExposureSet(address indexed performer, bytes32 indexed groupIdentifier, uint256 prevMaxExposure, uint256 newMaxExposure, uint256 currentExposure, uint256 timestamp);\n\n\n    /**\n         * @dev emitted after setting max exposure for a given protocol.\n     * @param performer an address of the wallet setting max exposure\n     * @param groupIdentifier exposure group identifier\n     * @param prevCurrentExposure previous max protocol exposure\n     * @param newCurrentExposure new max protocol exposure\n     * @param timestamp time of setting max exposure\n     **/\n    event ProtocolCurrentExposureSet(address indexed performer, bytes32 indexed groupIdentifier, uint256 prevCurrentExposure, uint256 newCurrentExposure, uint256 timestamp);\n\n\n\n    /**\n     * @dev emitted after adding a token asset\n     * @param performer an address of the wallet adding a token asset\n     * @param tokenAsset token asset\n     * @param assetAddress an address of the token asset\n     * @param timestamp time of adding a token asset\n     **/\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after activating a token asset\n     * @param performer an address of the wallet activating a token asset\n     * @param assetAddress an address of the token asset\n     * @param timestamp time of activating a token asset\n     **/\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after deactivating a token asset\n     * @param performer an address of the wallet deactivating a token asset\n     * @param assetAddress an address of the token asset\n     * @param timestamp time of deactivating a token asset\n     **/\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing a token asset\n     * @param performer an address of the wallet removing a token asset\n     * @param tokenAsset token asset\n     * @param timestamp time a token asset removal\n     **/\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\n\n    /**\n     * @dev emitted after adding a pool asset\n     * @param performer an address of wallet adding the pool asset\n     * @param poolAsset pool asset\n     * @param poolAddress an address of the pool asset\n     * @param timestamp time of the pool asset addition\n     **/\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing a pool asset\n     * @param performer an address of wallet removing the pool asset\n     * @param poolAsset pool asset\n     * @param poolAddress an address of the pool asset\n     * @param timestamp time of a pool asset removal\n     **/\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\n}\n"
    },
    "contracts/VestingDistributor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\npragma solidity 0.8.17;\n\nimport \"./Pool.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\n/**\n * @title VestingDistributor\n * @dev Contract distributing pool's spread among vesting participants.\n */\ncontract VestingDistributor {\n\n    Pool pool;\n    IERC20Metadata poolToken;\n    address keeper;\n    address pendingKeeper;\n\n    uint256 totalLockedMultiplied;\n    address[] public participants;\n    mapping(address => uint256) public locked;\n    mapping(address => uint256) public withdrawn;\n    mapping(address => uint256) public unvestingTime;\n    mapping(address => uint256) public unlockTimestamp;\n    mapping(address => uint256) public multiplier;\n    mapping(uint256 => uint256) rewardAmount;\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\n    mapping(uint256 => uint256) numRewardDistributed;\n\n    uint256 lastUpdated;\n    uint256 updateInterval = 6 hours;\n\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\n\n    modifier onlyPool() {\n        require(msg.sender == address(pool), \"Unauthorized: onlyPool\");\n        _;\n    }\n\n    modifier onlyKeeper() {\n        require(msg.sender == keeper, \"Unauthorized: onlyKeeper\");\n        _;\n    }\n\n    modifier onlyPendingKeeper() {\n        require(msg.sender == pendingKeeper, \"Unauthorized: onlyPendingKeeper\");\n        _;\n    }\n\n    constructor(address poolAddress, address keeperAddress) {\n        pool = Pool(poolAddress);\n        poolToken = IERC20Metadata(pool.tokenAddress());\n        keeper = keeperAddress;\n        lastUpdated = block.timestamp;\n    }\n\n    function transferKeeper(address keeperAddress) external onlyKeeper {\n        pendingKeeper = keeperAddress;\n    }\n\n    function acceptKeeper() external onlyPendingKeeper {\n        keeper = pendingKeeper;\n        pendingKeeper = address(0);\n    }\n\n    /**\n     * Add vesting participant (msg.sender)\n     **/\n    function startVesting(uint256 amount, uint256 time) public {\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\n\n        participants.push(msg.sender);\n        locked[msg.sender] = amount;\n        unvestingTime[msg.sender] = time;\n        multiplier[msg.sender] = getMultiplier(time);\n\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\n    }\n\n    /**\n     * Increase vesting of msg.sender\n     **/\n    function increaseVesting(uint256 amount) public {\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\n\n        locked[msg.sender] += amount;\n\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\n    }\n\n    /**\n     * Unlock funds - start of unvesting\n     **/\n    function unlock() public {\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\n\n        unlockTimestamp[msg.sender] = block.timestamp;\n    }\n\n    /**\n     * Check how much user can withdraw\n     **/\n    function availableToWithdraw(address account) public view returns (uint256) {\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\n        if (unlockTimestamp[account] == 0) revert UserLocked();\n\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\n\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\n    }\n\n    /**\n     * Gets pool's spread and distributes among vesting participants.\n     * @dev _totalLoans total value of loans\n     * @dev _totalDeposits total value of deposits\n     **/\n    //TODO: run periodically by bots\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\n\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\n\n        if (rewardAmount[lastUpdated] == 0) {\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\n        }\n        uint256 rewards = rewardAmount[lastUpdated];\n\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\n            address participant = participants[i];\n            if (rewardDistributed[lastUpdated][participant]) {\n                continue;\n            }\n\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\n\n            pool.transfer(participant, participantReward);\n\n            rewardDistributed[lastUpdated][participant] = true;\n            ++numRewardDistributed[lastUpdated];\n            if (numRewardDistributed[lastUpdated] == participants.length) {\n                lastUpdated = block.timestamp;\n            }\n        }\n    }\n\n    //TODO: run periodically by bots\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\n        for (uint256 i = fromIndex; i <= toIndex;) {\n            address participant = participants[i];\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\n\n                unvestingTime[participant] = 0;\n                locked[participant] = 0;\n                unlockTimestamp[participant] = 0;\n                withdrawn[participant] = 0;\n                multiplier[participant] = 0;\n\n                participants[i] = participants[participants.length - 1];\n                participants.pop();\n                --toIndex;\n            } else {\n                ++i;\n            }\n        }\n    }\n\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\n        withdrawn[account] += amount;\n        if (withdrawn[account] > locked[account]) {\n            revert WithdrawMoreThanLocked();\n        }\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\n    }\n\n    function getMultiplier(uint256 time) public pure returns (uint256){\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\n\n        return 1;\n    }\n\n\n    // Trying to distribute before the update interval has been reached\n    error DistributeTooEarly();\n\n    // Already participates in vesting\n    error AlreadyLocked();\n\n    // Vesting time is out of range\n    error InvalidVestingTime();\n\n    // Insufficient user balance of pool's tokens\n    error InsufficientPoolBalance();\n\n    // User not locked\n    error UserNotLocked();\n\n    // User funds are locked\n    error UserLocked();\n\n    // Too late\n    error TooLate();\n\n    // Withdraw amount is more than locked\n    error WithdrawMoreThanLocked();\n}"
    },
    "contracts/WrappedNativeTokenPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\npragma solidity 0.8.17;\n\nimport \"./Pool.sol\";\nimport \"./interfaces/IWrappedNativeToken.sol\";\n\n/**\n * @title Pool\n * @dev Contract allowing user to deposit to and borrow from a single pot\n * Depositors are rewarded with the interest rates collected from borrowers.\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\n * The interest rates calculation is delegated to the external calculator contract.\n */\ncontract WrappedNativeTokenPool is Pool {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /**\n     * Wraps and deposits amount attached to the transaction\n     **/\n    function depositNativeToken() public payable virtual {\n        if(msg.value == 0) revert ZeroDepositAmount();\n\n        _accumulateDepositInterest(msg.sender);\n\n        if(totalSupplyCap != 0){\n            if(_deposited[address(this)] + msg.value > totalSupplyCap) revert TotalSupplyCapBreached();\n        }\n\n        IWrappedNativeToken(tokenAddress).deposit{value : msg.value}();\n\n        _mint(msg.sender, msg.value);\n        _deposited[address(this)] += msg.value;\n        _updateRates();\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.stakeFor(msg.value, msg.sender);\n        }\n\n        emit Deposit(msg.sender, msg.value, block.timestamp);\n    }\n\n    /**\n     * Unwraps and withdraws selected amount from the user deposits\n     * @dev _amount the amount to be withdrawn\n     **/\n    function withdrawNativeToken(uint256 _amount) external nonReentrant {\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\n\n        _accumulateDepositInterest(msg.sender);\n\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\n        // verified in \"require\" above\n        unchecked {\n            _deposited[address(this)] -= _amount;\n        }\n        _burn(msg.sender, _amount);\n\n        _updateRates();\n\n        IWrappedNativeToken(tokenAddress).withdraw(_amount);\n        payable(msg.sender).safeTransferETH(_amount);\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.withdrawFor(_amount, msg.sender);\n        }\n\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\n    }\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    //needed for withdrawNativeToken\n    receive() external payable {}\n}"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = 0x000000000000000000636F6e736F6c652e6c6f67;\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\t/// @solidity memory-safe-assembly\n\t\tassembly {\n\t\t\tpop(staticcall(gas(), consoleAddress, add(payload, 32), mload(payload), 0, 0))\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int256)\", p0));\n\t}\n\n\tfunction logUint(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint256 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint256 p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint256,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint256,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint256,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint256)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {}
  }
}