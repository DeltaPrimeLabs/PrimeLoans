{
  "address": "0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GetDataServiceIdNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampFromTooLongFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampIsTooOld",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ITokenManager",
          "name": "newTokenManager",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_useOraclePrimeFeed",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "UseOraclePrimeFeedUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISPrime[]",
          "name": "newWhitelistedSPrimeContracts",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "WhitelistedSPrimeContractsUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROWER_YEARLY_V_PRIME_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEPOSITOR_YEARLY_V_PRIME_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_V_PRIME_VESTING_YEARS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RS_PRICE_PRECISION_1e18_COMPLEMENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "V_PRIME_DETERIORATION_DAYS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "V_PRIME_PAIR_RATIO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowersRegistry",
      "outputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataServiceId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getPrimeAccountBorrowedDollarValueAcrossWhitelistedPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISPrime",
          "name": "sPrimeContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenYPrice",
          "type": "uint256"
        }
      ],
      "name": "getPrimeTokenPoolPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserDepositDollarValueAcrossWhiteListedPoolsVestedAndNonVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullyVestedDollarValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonVestedDollarValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserSPrimeDollarValueVestedAndNonVested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullyVestedDollarValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nonVestedDollarValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getUserVPrimeRateAndMaxCap",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWhitelistedPools",
      "outputs": [
        {
          "internalType": "contract IPool[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISPrime[]",
          "name": "_whitelistedSPrimeContracts",
          "type": "address[]"
        },
        {
          "internalType": "contract ITokenManager",
          "name": "_tokenManager",
          "type": "address"
        },
        {
          "internalType": "contract vPrime",
          "name": "_vPrime",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_useOraclePrimeFeed",
          "type": "bool"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_useOraclePrimeFeed",
          "type": "bool"
        }
      ],
      "name": "setUseOraclePrimeFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "setUserNeedsUpdate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenManager",
      "outputs": [
        {
          "internalType": "contract ITokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "newBorrowersRegistry",
          "type": "address"
        }
      ],
      "name": "updateBorrowersRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITokenManager",
          "name": "newTokenManager",
          "type": "address"
        }
      ],
      "name": "updateTokenManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "updateVPrimeSnapshot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        }
      ],
      "name": "updateVPrimeSnapshotsForAccounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISPrime[]",
          "name": "newWhitelistedSPrimeContracts",
          "type": "address[]"
        }
      ],
      "name": "updateWhitelistedSPrimeContracts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "useOraclePrimeFeed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPrimeContract",
      "outputs": [
        {
          "internalType": "contract vPrime",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "whitelistedSPrimeContracts",
      "outputs": [
        {
          "internalType": "contract ISPrime",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6426ec6fb1f3b7b22c2e0a4fd14809cbbda599e70df500b3a7e23c95dafcb813",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b",
    "transactionIndex": 1,
    "gasUsed": "4221719",
    "logsBloom": "0x
    "blockHash": "0x96ac65c233a3561048264fc0188468bd57a872bedf0b3bcac30ac8c5a2e89b37",
    "transactionHash": "0x6426ec6fb1f3b7b22c2e0a4fd14809cbbda599e70df500b3a7e23c95dafcb813",
    "logs": [],
    "blockNumber": 226263847,
    "cumulativeGasUsed": "4221719",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "5f9b4066677330f96d37c849c3cc66a6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetDataServiceIdNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampFromTooLongFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampIsTooOld\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ITokenManager\",\"name\":\"newTokenManager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_useOraclePrimeFeed\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UseOraclePrimeFeedUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISPrime[]\",\"name\":\"newWhitelistedSPrimeContracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"WhitelistedSPrimeContractsUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWER_YEARLY_V_PRIME_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEPOSITOR_YEARLY_V_PRIME_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_V_PRIME_VESTING_YEARS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RS_PRICE_PRECISION_1e18_COMPLEMENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V_PRIME_DETERIORATION_DAYS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V_PRIME_PAIR_RATIO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowersRegistry\",\"outputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataServiceId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getPrimeAccountBorrowedDollarValueAcrossWhitelistedPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISPrime\",\"name\":\"sPrimeContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenYPrice\",\"type\":\"uint256\"}],\"name\":\"getPrimeTokenPoolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserDepositDollarValueAcrossWhiteListedPoolsVestedAndNonVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullyVestedDollarValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonVestedDollarValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserSPrimeDollarValueVestedAndNonVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullyVestedDollarValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonVestedDollarValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getUserVPrimeRateAndMaxCap\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWhitelistedPools\",\"outputs\":[{\"internalType\":\"contract IPool[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISPrime[]\",\"name\":\"_whitelistedSPrimeContracts\",\"type\":\"address[]\"},{\"internalType\":\"contract ITokenManager\",\"name\":\"_tokenManager\",\"type\":\"address\"},{\"internalType\":\"contract vPrime\",\"name\":\"_vPrime\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useOraclePrimeFeed\",\"type\":\"bool\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_useOraclePrimeFeed\",\"type\":\"bool\"}],\"name\":\"setUseOraclePrimeFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"setUserNeedsUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"newBorrowersRegistry\",\"type\":\"address\"}],\"name\":\"updateBorrowersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"newTokenManager\",\"type\":\"address\"}],\"name\":\"updateTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"updateVPrimeSnapshot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"updateVPrimeSnapshotsForAccounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISPrime[]\",\"name\":\"newWhitelistedSPrimeContracts\",\"type\":\"address[]\"}],\"name\":\"updateWhitelistedSPrimeContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"useOraclePrimeFeed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPrimeContract\",\"outputs\":[{\"internalType\":\"contract vPrime\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"whitelistedSPrimeContracts\",\"outputs\":[{\"internalType\":\"contract ISPrime\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"getDataServiceId()\":{\"details\":\"This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\",\"returns\":{\"_0\":\"dataServiceId being consumed by contract\"}},\"getUniqueSignersThreshold()\":{\"details\":\"This function should be overridden by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"updateBorrowersRegistry(address)\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"newBorrowersRegistry\":\"The address of the new borrowers registry contract.\"}},\"updateTokenManager(address)\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"newTokenManager\":\"The address of the new token manager contract.\"}},\"updateWhitelistedSPrimeContracts(address[])\":{\"details\":\"Can only be called by the contract owner.\",\"params\":{\"newWhitelistedSPrimeContracts\":\"An array of addresses representing the new list of whitelisted sPrime contracts.\"}},\"validateTimestamp(uint256)\":{\"details\":\"This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp extracted from calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateBorrowersRegistry(address)\":{\"notice\":\"Updates the borrowers registry contract.\"},\"updateTokenManager(address)\":{\"notice\":\"Updates the token manager contract.\"},\"updateWhitelistedSPrimeContracts(address[])\":{\"notice\":\"Updates the list of whitelisted sPrime contracts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/vPrimeControllerArbitrum.sol\":\"vPrimeControllerArbitrum\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x52a8cfb0f5239d11b457dcdd1b326992ef672714ca8da71a157255bddd13f3ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x7a381362d355b7c2eff8cf9a2b0e0836d7b7c950b32f0fb65f1e4fc43c0c7379\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0x82ab78ed59f4a811f5ab5c32064099235d753f98df42c087476ddabbf0348f21\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  error GetDataServiceIdNotImplemented();\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return dataServiceId which DataServiceWrapper will use if not provided explicitly .\\n   * If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\\n   * @return dataServiceId being consumed by contract\\n   */\\n  function getDataServiceId() public view virtual returns (string memory) {\\n    revert GetDataServiceIdNotImplemented();\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overridden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of authorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x9f67e176ef49bc988486de896bddce913dc0679b6f3f2cf9fd9803e683927d42\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"contracts/abstract/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract PendingOwnableUpgradeable is OwnableUpgradeable, IPendingOwnableUpgradeable {\\n    // keccak256(\\\"pending.owner.slot\\\") = 0x63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2\\n    bytes32 private constant _PENDING_OWNER_SLOT = 0x63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2;\\n\\n    event OwnershipTransferRequested(address indexed from, address indexed to);\\n\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __Ownable_init();\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override(OwnableUpgradeable, IPendingOwnableUpgradeable) onlyOwner {\\n        require(newOwner != address(0), \\\"PendingOwnable: new owner is the zero address\\\");\\n        _setPendingOwner(newOwner);\\n        emit OwnershipTransferRequested(owner(), newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual override {\\n        address pendingOwner = _getPendingOwner();\\n        require(msg.sender == pendingOwner, \\\"PendingOwnable: caller is not the pending owner\\\");\\n        _transferOwnership(pendingOwner);\\n        _setPendingOwner(address(0));\\n    }\\n\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _getPendingOwner();\\n    }\\n\\n    function _getPendingOwner() internal view returns (address) {\\n        address pendingOwner;\\n        bytes32 slot = _PENDING_OWNER_SLOT;\\n        assembly {\\n            pendingOwner := sload(slot)\\n        }\\n        return pendingOwner;\\n    }\\n\\n    function _setPendingOwner(address newOwner) private {\\n        bytes32 slot = _PENDING_OWNER_SLOT;\\n        assembly {\\n            sstore(slot, newOwner)\\n        }\\n    }\\n}\",\"keccak256\":\"0xfde0a2746ea2b29b13049caf81c2cc11c27c316e48f3d2c4124c260a79b687de\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\ninterface IPendingOwnableUpgradeable {\\n    function transferOwnership(address newOwner) external;\\n    function acceptOwnership() external;\\n    function pendingOwner() external view returns (address);\\n}\",\"keccak256\":\"0xe22571fec2c0fe9c804d560317f59ffb7efbe1036d12a3fa1d67319450ba60df\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IPool is IERC20 {\\n    function getLockedBalance(address account) external view returns (uint256);\\n    function lockDeposit(uint256 amount, uint256 lockTime) external;\\n    function getFullyVestedLockedBalance(address account) external view returns (uint256);\\n    function setVPrimeController(address _vPrimeController) external;\\n    function deposit(uint256 _amount) external;\\n    function depositOnBehalf(uint256 _amount, address _of) external;\\n    function withdraw(uint256 _amount) external;\\n    function borrow(uint256 _amount) external;\\n    function repay(uint256 amount) external;\\n    function getBorrowed(address _user) external view returns (uint256);\\n    function balanceOf(address user) external view override returns (uint256);\\n    function getDepositRate() external view returns (uint256);\\n    function getBorrowingRate() external view returns (uint256);\\n    function getFullPoolStatus() external view returns (uint256[5] memory);\\n    function recoverSurplus(uint256 amount, address account) external;\\n    function isWithdrawalAmountAvailable(address account, uint256 amount) external view returns (bool);\\n    function getMaxPoolUtilisationForBorrowing() external view returns (uint256);\\n    function totalBorrowed() external view returns (uint256);\\n    function totalSupply() external view returns (uint256);\\n    function decimals() external view returns (uint8);\\n    function symbol() external view returns (string memory);\\n    function name() external view returns (string memory);\\n    function totalSupplyCap() external view returns (uint256);\\n    function ratesCalculator() external view returns (address);\\n    function borrowersRegistry() external view returns (address);\\n    function poolRewarder() external view returns (address);\\n    function depositIndex() external view returns (address);\\n    function borrowIndex() external view returns (address);\\n    function tokenAddress() external view returns (address);\\n    function vestingDistributor() external view returns (address);\\n    function vPrimeControllerContract() external view returns (address);\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user deposits funds on behalf of other user\\n     * @param user the address performing the deposit\\n     * @param _of the address on behalf of which the deposit is being performed\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n\\n    /**\\n     * @dev emitted after the user locks deposit\\n     * @param user the address that locks the deposit\\n     * @param amount the amount locked\\n     * @param lockTime the time for which the deposit is locked\\n     * @param unlockTime the time when the deposit will be unlocked\\n     **/\\n    event DepositLocked(address indexed user, uint256 amount, uint256 lockTime, uint256 unlockTime);\\n}\",\"keccak256\":\"0x6c64d1a6184d73beb7d92913b3db55a0f48c1e32ef5cd8311afd6708d8ff01cc\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISPrime {\\n    /**\\n    * @dev Struct representing details of a locked amount.\\n    * @param lockPeriod The duration for which the amount is locked.\\n    * @param amount The amount that is locked.\\n    * @param unlockTime The timestamp when the locked amount will be able to released.\\n    */\\n    struct LockDetails {\\n        uint256 lockPeriod;\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    /**\\n    * @dev Users can use withdraw function for withdrawing their share.\\n    * @param shareWithdraw The amount of share to withdraw.\\n    */\\n    function withdraw(\\n        uint256 shareWithdraw\\n    ) external;\\n\\n    function getTokenX() external view returns(IERC20);\\n    function getTokenY() external view returns(IERC20);\\n    function getPoolPrice() external view returns(uint256);\\n    function getUserValueInTokenY(address user, uint256 poolPrice) external view returns (uint256);\\n    function getFullyVestedLockedBalance(address account) external view returns(uint256);\\n}\",\"keccak256\":\"0x44a6e69d8afec39db9947e2895d033ba82a1bd6ec1d6e3e48e31ff6326b26ad4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function getVPrimeControllerAddress ( ) external view returns ( address );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function identifierToExposureGroup ( bytes32 _asset) external view returns ( bytes32 );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setMaxProtocolsExposure (bytes32[] memory groupIdentifiers, uint256[] memory maxExposures) external;\\n    function setIdentifiersToExposureGroups (bytes32[] memory identifiers, bytes32[] memory exposureGroups) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n    function increasePendingExposure ( bytes32 , address, uint256 ) external;\\n    function setPendingExposureToZero ( bytes32, address ) external;\\n}\",\"keccak256\":\"0xa22e1382bb5c6095523b18a851a6f75083d6d72cffb678b8fb81a59a96191d0c\"},\"contracts/interfaces/facets/IOwnershipFacet.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\ninterface IOwnershipFacet {\\n    function proposeOwnershipTransfer(address _newOwner) external;\\n\\n    function acceptOwnership() external;\\n\\n    function owner() external view returns (address owner_);\\n\\n    function proposedOwner() external view returns (address proposedOwner_);\\n\\n    function pauseAdmin() external view returns (address pauseAdmin);\\n\\n    function proposedPauseAdmin() external view returns (address proposedPauseAdmin);\\n}\\n\",\"keccak256\":\"0x5293b6c14b5f035e4fa5ab364b8df770c3cf51dc1ba3bae68a8154f02a47fca2\"},\"contracts/lib/uniswap-v3/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n\\n        //TODO: our change\\n        //https://ethereum.stackexchange.com/questions/96642/unary-operator-minus-cannot-be-applied-to-type-uint256\\n//        uint256 twos = -denominator & denominator;\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e3d614b18e1382e748cc12435bb38e682bb38505202e99304c8c9b582366706\",\"license\":\"MIT\"},\"contracts/token/vPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"../abstract/PendingOwnableUpgradeable.sol\\\";\\nimport {vPrimeController} from \\\"./vPrimeController.sol\\\";\\n\\n\\ncontract vPrime is PendingOwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    struct Checkpoint {\\n        uint32 blockTimestamp;\\n        uint256 balance;\\n        int256 rate; // Tokens per second\\n        uint256 balanceLimit;\\n    }\\n\\n    IBorrowersRegistry public borrowersRegistry;\\n    address public vPrimeControllerAddress;\\n    mapping(address => Checkpoint[]) private _checkpoints; // _checkpoints[address(this)] serves as a total supply checkpoint\\n    mapping(address => bool) public needsUpdate; // Account needs balance recalculating\\n\\n    /* ========== INITIALIZER ========== */\\n\\n    function initialize(IBorrowersRegistry _borrowersRegistry) external initializer {\\n        borrowersRegistry = _borrowersRegistry;\\n        __PendingOwnable_init();\\n    }\\n\\n\\n    /* ========== MODIFIERS ========== */\\n    modifier onlyVPrimeController() virtual {\\n        require(_msgSender() == vPrimeControllerAddress, \\\"Only vPrimeController can call this function\\\");\\n        _;\\n    }\\n\\n\\n    /* ========== MUTATIVE EXTERNAL FUNCTIONS ========== */\\n\\n    function setUserNeedsUpdate(address user) external onlyVPrimeController {\\n        needsUpdate[user] = true;\\n        emit UserNeedsUpdateSet(user, msg.sender, block.timestamp);\\n    }\\n\\n    function clearUserNeedsUpdate(address user) internal {\\n        needsUpdate[user] = false;\\n        emit UserNeedsUpdateCleared(user, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n    * @notice Sets the address of the vPrimeController contract.\\n    * @dev Can only be called by the contract owner.\\n    * @param _vPrimeControllerAddress The address of the vPrimeController contract.\\n    */\\n    function setVPrimeControllerAddress(address _vPrimeControllerAddress) external onlyOwner {\\n        require(_vPrimeControllerAddress != address(0), \\\"vPrime: vPrimeController address cannot be 0\\\");\\n        address oldVPrimeControllerAddress = vPrimeControllerAddress;\\n\\n        vPrimeControllerAddress = _vPrimeControllerAddress;\\n\\n        emit NewVPrimeControllerSet(oldVPrimeControllerAddress, _vPrimeControllerAddress, msg.sender, block.timestamp);\\n    }\\n\\n    // Called by the vPrimeController to adjust the rate and balanceLimit of a user\\n    function adjustRateAndCap(address user, int256 rate, uint256 newBalanceLimit) external onlyVPrimeController nonReentrant {\\n        uint256 lastRecordedVotes = getVotes(user);\\n        uint256 currentVotesBalance = balanceOf(user);\\n        int256 votesDiff = SafeCast.toInt256(currentVotesBalance) - SafeCast.toInt256(lastRecordedVotes);\\n\\n        if (votesDiff > 0) {\\n            increaseTotalSupply(uint256(votesDiff));\\n            _writeCheckpoint(_checkpoints[user], _add, uint256(votesDiff), rate, newBalanceLimit);\\n        } else if (votesDiff < 0) {\\n            decreaseTotalSupply(uint256(- votesDiff));\\n            _writeCheckpoint(_checkpoints[user], _subtract, uint256(- votesDiff), rate, newBalanceLimit);\\n        } else {\\n            _writeCheckpoint(_checkpoints[user], _add, 0, rate, newBalanceLimit);\\n        }\\n        clearUserNeedsUpdate(user);\\n    }\\n\\n    // Called by the vPrimeController to adjust the rate, balanceLimit and overwrite the balance of a user\\n    // Balance overwrite is used when the user's balance is changed by a different mechanism than the rate\\n    // In our case that would be locking deposit/sPrime pairs (up to 3 years) for an instant vPrime unvesting\\n    function adjustRateCapAndBalance(address user, int256 rate, uint256 newBalanceLimit, uint256 balance) external onlyVPrimeController nonReentrant {\\n        uint256 lastRecordedVotes = getVotes(user);\\n        int256 votesDiff = SafeCast.toInt256(balance) - SafeCast.toInt256(lastRecordedVotes);\\n\\n        if (votesDiff > 0) {\\n            increaseTotalSupply(uint256(votesDiff));\\n            _writeCheckpointOverwriteBalance(_checkpoints[user], balance, rate, newBalanceLimit);\\n        } else if (votesDiff < 0) {\\n            decreaseTotalSupply(uint256(- votesDiff));\\n            _writeCheckpointOverwriteBalance(_checkpoints[user], balance, rate, newBalanceLimit);\\n        } else {\\n            _writeCheckpointOverwriteBalance(_checkpoints[user], lastRecordedVotes, rate, newBalanceLimit);\\n        }\\n        clearUserNeedsUpdate(user);\\n    }\\n\\n    /* ========== VIEW EXTERNAL FUNCTIONS ========== */\\n\\n    // Override balanceOf to compute balance dynamically\\n    function balanceOf(address account) public view returns (uint256) {\\n        uint256 userCkpsLen = _checkpoints[account].length;\\n        if (userCkpsLen == 0) {\\n            return 0;\\n        }\\n        Checkpoint memory cp = _checkpoints[account][userCkpsLen - 1];\\n\\n        // If account was updated without recalculations, return the last recorded balance\\n        if(needsUpdate[account]) {\\n            return cp.balance;\\n        }\\n\\n        uint256 elapsedTime = block.timestamp - cp.blockTimestamp;\\n        uint256 newBalance;\\n\\n        if (cp.rate >= 0) {\\n            uint256 balanceIncrease = uint256(cp.rate) * elapsedTime;\\n            newBalance = cp.balance + balanceIncrease;\\n            return (newBalance > cp.balanceLimit) ? cp.balanceLimit : newBalance;\\n        } else {\\n            // If rate is negative, convert to positive for calculation, then subtract\\n            uint256 balanceDecrease = uint256(- cp.rate) * elapsedTime;\\n            if (balanceDecrease > cp.balance) {\\n                // Prevent underflow, setting balance to min cap if decrease exceeds current balance\\n                return cp.balanceLimit;\\n            } else {\\n                newBalance = cp.balance - balanceDecrease;\\n                return (newBalance < cp.balanceLimit) ? cp.balanceLimit : newBalance;\\n            }\\n        }\\n    }\\n\\n\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    // Overrides IERC6372 functions to make the token & governor timestamp-based\\n    function clock() public view returns (uint48) {\\n        return uint48(block.timestamp);\\n    }\\n    /**\\n     * @dev Description of the clockx\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public pure returns (string memory) {\\n        return \\\"mode=timestamp\\\";\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoint memory) {\\n        return _checkpoints[account][pos];\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return SafeCast.toUint32(_checkpoints[account].length);\\n    }\\n\\n    /**\\n     * @dev Gets the last recorded votes balance for `account`\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        uint256 pos = _checkpoints[account].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[account][pos - 1].balance;\\n        }\\n    }\\n\\n    /**\\n     * @dev Retrieve the number of votes for `account` at the end of `timestamp`.\\n     *\\n     * Requirements:\\n     *\\n     * - `timestamp` must be in the past\\n     */\\n    function getPastVotes(address account, uint256 timestamp) public view virtual returns (uint256) {\\n        require(timestamp < clock(), \\\"Future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[account], timestamp);\\n    }\\n\\n    /**\\n     * @dev Retrieve the `totalSupply` at the end of `timestamp`. Note, this value is the sum of all balances.\\n     * It is NOT the sum of all the delegated votes!\\n     *\\n     * Requirements:\\n     *\\n     * - `timestamp` must be in the past\\n     */\\n    function getPastTotalSupply(uint256 timestamp) public view virtual returns (uint256) {\\n        require(timestamp < clock(), \\\"Future lookup\\\");\\n        return _checkpointsLookup(_checkpoints[address(this)], timestamp);\\n    }\\n\\n    function getLastRecordedTotalSupply() public view virtual returns (uint256) {\\n        uint256 pos = _checkpoints[address(this)].length;\\n        unchecked {\\n            return pos == 0 ? 0 : _checkpoints[address(this)][pos - 1].balance;\\n        }\\n    }\\n\\n    /* ========== INTERNAL MUTATIVE FUNCTIONS ========== */\\n\\n    function increaseTotalSupply(uint256 amount) internal {\\n        require(getLastRecordedTotalSupply() + amount <= _maxSupply(), \\\"Total supply risks overflowing votes\\\");\\n        _writeCheckpoint(_checkpoints[address(this)], _add, amount, 0, 0);\\n    }\\n\\n    function decreaseTotalSupply(uint256 amount) internal {\\n        _writeCheckpoint(_checkpoints[address(this)], _subtract, amount, 0, 0);\\n    }\\n\\n    function _writeCheckpoint(\\n        Checkpoint[] storage ckpts,\\n        function(uint256, uint256) view returns (uint256) op,\\n        uint256 delta,\\n        int256 rate,\\n        uint256 balanceLimit\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0, 0, 0) : ckpts[pos - 1];\\n\\n        oldWeight = oldCkpt.balance;\\n        newWeight = op(oldWeight, delta);\\n\\n        if (pos > 0 && oldCkpt.blockTimestamp == clock()) {\\n            oldCkpt.balance = newWeight;\\n            oldCkpt.rate = rate;\\n            oldCkpt.balanceLimit = balanceLimit;\\n        } else {\\n            ckpts.push(Checkpoint({\\n                blockTimestamp: SafeCast.toUint32(clock()),\\n                balance: newWeight,\\n                rate: rate,\\n                balanceLimit: balanceLimit\\n            }));\\n        }\\n    }\\n\\n    function _writeCheckpointOverwriteBalance(\\n        Checkpoint[] storage ckpts,\\n        uint256 balance,\\n        int256 rate,\\n        uint256 balanceLimit\\n    ) private returns (uint256 oldWeight, uint256 newWeight) {\\n        uint256 pos = ckpts.length;\\n        Checkpoint memory oldCkpt = pos == 0 ? Checkpoint(0, 0, 0, 0) : ckpts[pos - 1];\\n\\n        if (pos > 0 && oldCkpt.blockTimestamp == clock()) {\\n            oldCkpt.balance = balance;\\n            oldCkpt.rate = rate;\\n            oldCkpt.balanceLimit = balanceLimit;\\n        } else {\\n            ckpts.push(Checkpoint({\\n                blockTimestamp: SafeCast.toUint32(clock()),\\n                balance: balance,\\n                rate: rate,\\n                balanceLimit: balanceLimit\\n            }));\\n        }\\n    }\\n\\n    /* ========== INTERNAL VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * @dev Lookup a value in a list of (sorted) checkpoints.\\n     */\\n    function _checkpointsLookup(Checkpoint[] storage ckpts, uint256 timestamp) private view returns (uint256) {\\n        // We run a binary search to look for the last (most recent) checkpoint taken before (or at) `timestamp`.\\n        //\\n        // Initially we check if the block is recent to narrow the search range.\\n        // During the loop, the index of the wanted checkpoint remains in the range [low-1, high).\\n        // With each iteration, either `low` or `high` is moved towards the middle of the range to maintain the invariant.\\n        // - If the middle checkpoint is after `timestamp`, we look in [low, mid)\\n        // - If the middle checkpoint is before or equal to `timestamp`, we look in [mid+1, high)\\n        // Once we reach a single value (when low == high), we've found the right checkpoint at the index high-1, if not\\n        // out of bounds (in which case we're looking too far in the past and the result is 0).\\n        // Note that if the latest checkpoint available is exactly for `timestamp`, we end up with an index that is\\n        // past the end of the array, so we technically don't find a checkpoint after `timestamp`, but it works out\\n        // the same.\\n        uint256 length = ckpts.length;\\n\\n        uint256 low = 0;\\n        uint256 high = length;\\n\\n        if (length > 5) {\\n            uint256 mid = length - Math.sqrt(length);\\n            if (_unsafeAccess(ckpts, mid).blockTimestamp > timestamp) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(ckpts, mid).blockTimestamp > timestamp) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        unchecked {\\n            return high == 0 ? 0 : _unsafeAccess(ckpts, high - 1).balance;\\n        }\\n    }\\n\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint224).max` (2^224^ - 1).\\n     */\\n    function _maxSupply() internal view virtual returns (uint224) {\\n        return type(uint224).max;\\n    }\\n\\n\\n    function _add(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint256 a, uint256 b) private pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(Checkpoint[] storage ckpts, uint256 pos) private pure returns (Checkpoint storage result) {\\n        assembly {\\n            mstore(0, ckpts.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    // event for setting new vPrimeContoller with old address, new address, msg.sender and timestamp\\n    event NewVPrimeControllerSet(\\n        address indexed oldVPrimeControllerAddress,\\n        address indexed newVPrimeControllerAddress,\\n        address indexed sender,\\n        uint256 timestamp);\\n\\n    // event for setting user needs update with user address, msg.sender and timestamp\\n    event UserNeedsUpdateSet(\\n        address indexed user,\\n        address indexed sender,\\n        uint256 timestamp);\\n\\n    // event for clearing user needs update with user address, msg.sender and timestamp\\n    event UserNeedsUpdateCleared(\\n        address indexed user,\\n        address indexed sender,\\n        uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x89eb696ba04c8087e7fd474d283f417b5833bbdc1c4426d8466f03bc6ffa6a71\",\"license\":\"BUSL-1.1\"},\"contracts/token/vPrimeController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"../abstract/PendingOwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"../interfaces/facets/IOwnershipFacet.sol\\\";\\nimport \\\"../interfaces/IPool.sol\\\";\\nimport \\\"../interfaces/ISPrime.sol\\\";\\nimport \\\"./vPrime.sol\\\";\\nimport \\\"../lib/uniswap-v3/FullMath.sol\\\";\\n\\nabstract contract vPrimeController is PendingOwnableUpgradeable, RedstoneConsumerNumericBase {\\n    ISPrime[] public whitelistedSPrimeContracts;\\n    ITokenManager public tokenManager;\\n    vPrime public vPrimeContract;\\n    IBorrowersRegistry public borrowersRegistry;\\n    bool public useOraclePrimeFeed;\\n    uint256 public constant BORROWER_YEARLY_V_PRIME_RATE = 1;\\n    uint256 public constant DEPOSITOR_YEARLY_V_PRIME_RATE = 5;\\n    uint256 public constant MAX_V_PRIME_VESTING_YEARS = 3;\\n    uint256 public constant V_PRIME_DETERIORATION_DAYS = 14;\\n    uint256 public constant V_PRIME_PAIR_RATIO = 10;\\n    uint256 public constant RS_PRICE_PRECISION_1e18_COMPLEMENT = 1e10;\\n\\n    struct VPrimeCalculationsStruct {\\n        int256 vPrimeRate;\\n        uint256 vPrimeBalanceLimit;\\n        uint256 vPrimeBalanceAlreadyVested;\\n        uint256 userSPrimeDollarValueFullyVested;\\n        uint256 userSPrimeDollarValueNonVested;\\n        uint256 userDepositFullyVestedDollarValue;\\n        uint256 userDepositNonVestedDollarValue;\\n        uint256 primeAccountBorrowedDollarValue;\\n    }\\n\\n\\n/* ========== INITIALIZER ========== */\\n\\n    function initialize(ISPrime[] memory _whitelistedSPrimeContracts, ITokenManager _tokenManager, vPrime _vPrime, bool _useOraclePrimeFeed) external initializer {\\n        whitelistedSPrimeContracts = _whitelistedSPrimeContracts;\\n        tokenManager = _tokenManager;\\n        vPrimeContract = _vPrime;\\n        useOraclePrimeFeed = _useOraclePrimeFeed;\\n        __PendingOwnable_init();\\n    }\\n\\n\\n    /* ========== MUTATIVE EXTERNAL FUNCTIONS ========== */\\n\\n    // Update vPrime snapshot for `userAddress`\\n    function updateVPrimeSnapshot(address userAddress) public {\\n        (int256 vPrimeRate, uint256 vPrimeBalanceLimit, uint256 alreadyVestedVPrimeBalance) = getUserVPrimeRateAndMaxCap(userAddress);\\n\\n        // alreadyVestedVPrimeBalance > 0 mean that the already vested vPrime is higher than the current balance\\n        if(alreadyVestedVPrimeBalance > 0){\\n            vPrimeContract.adjustRateCapAndBalance(userAddress, vPrimeRate, vPrimeBalanceLimit, alreadyVestedVPrimeBalance);\\n        } else {\\n            vPrimeContract.adjustRateAndCap(userAddress, vPrimeRate, vPrimeBalanceLimit);\\n        }\\n    }\\n\\n    function setUserNeedsUpdate(address userAddress) public onlyPoolOrSPrime {\\n        vPrimeContract.setUserNeedsUpdate(userAddress);\\n    }\\n\\n\\n    function updateVPrimeSnapshotsForAccounts(address[] memory accounts) public {\\n        for (uint i = 0; i < accounts.length; i++) {\\n            updateVPrimeSnapshot(accounts[i]);\\n        }\\n    }\\n\\n\\n    /* ========== SETTERS ========== */\\n\\n    function getWhitelistedPools() public view returns (IPool[] memory) {\\n        bytes32[] memory poolsTokenSymbols = tokenManager.getAllPoolAssets();\\n        IPool[] memory whitelistedPools = new IPool[](poolsTokenSymbols.length);\\n        for (uint i = 0; i < poolsTokenSymbols.length; i++) {\\n            whitelistedPools[i] = IPool(tokenManager.getPoolAddress(poolsTokenSymbols[i]));\\n        }\\n        return whitelistedPools;\\n    }\\n\\n    modifier onlyPoolOrSPrime() {\\n        IPool[] memory whitelistedPools = getWhitelistedPools();\\n        bool isPoolOrSPrime = false;\\n        for (uint i = 0; i < whitelistedPools.length; i++) {\\n            if (address(whitelistedPools[i]) == msg.sender) {\\n                isPoolOrSPrime = true;\\n                break;\\n            }\\n        }\\n        for(uint i = 0; i < whitelistedSPrimeContracts.length; i++){\\n            if (address(whitelistedSPrimeContracts[i]) == msg.sender) {\\n                isPoolOrSPrime = true;\\n                break;\\n            }\\n        }\\n        require(isPoolOrSPrime, \\\"Only Pool or sPrime can call this function\\\");\\n        _;\\n    }\\n\\n    /**\\n    * @notice Updates the list of whitelisted sPrime contracts.\\n    * @dev Can only be called by the contract owner.\\n    * @param newWhitelistedSPrimeContracts An array of addresses representing the new list of whitelisted sPrime contracts.\\n    */\\n    function updateWhitelistedSPrimeContracts(ISPrime[] memory newWhitelistedSPrimeContracts) external onlyOwner {\\n        whitelistedSPrimeContracts = newWhitelistedSPrimeContracts;\\n        emit WhitelistedSPrimeContractsUpdated(newWhitelistedSPrimeContracts, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n    * @notice Updates the token manager contract.\\n    * @dev Can only be called by the contract owner.\\n    * @param newTokenManager The address of the new token manager contract.\\n    */\\n    function updateTokenManager(ITokenManager newTokenManager) external onlyOwner {\\n        tokenManager = newTokenManager;\\n        emit TokenManagerUpdated(newTokenManager, msg.sender, block.timestamp);\\n    }\\n\\n    // only owner setter for useOraclePriceFeed\\n    function setUseOraclePrimeFeed(bool _useOraclePrimeFeed) external onlyOwner {\\n        useOraclePrimeFeed = _useOraclePrimeFeed;\\n        emit UseOraclePrimeFeedUpdated(_useOraclePrimeFeed, msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n    * @notice Updates the borrowers registry contract.\\n    * @dev Can only be called by the contract owner.\\n    * @param newBorrowersRegistry The address of the new borrowers registry contract.\\n    */\\n    function updateBorrowersRegistry(IBorrowersRegistry newBorrowersRegistry) external onlyOwner {\\n        borrowersRegistry = newBorrowersRegistry;\\n    }\\n\\n\\n\\n    /* ========== VIEW EXTERNAL FUNCTIONS ========== */\\n\\n    function getPoolsPrices(IPool[] memory whitelistedPools) internal view returns (uint256[] memory) {\\n        bytes32[] memory poolsTokenSymbols = new bytes32[](whitelistedPools.length);\\n        for (uint i = 0; i < whitelistedPools.length; i++) {\\n            poolsTokenSymbols[i] = tokenManager.tokenAddressToSymbol(whitelistedPools[i].tokenAddress());\\n        }\\n        return getOracleNumericValuesFromTxMsg(poolsTokenSymbols);\\n    }\\n\\n    function getUserDepositDollarValueAcrossWhiteListedPoolsVestedAndNonVested(address userAddress) public view returns (uint256 fullyVestedDollarValue, uint256 nonVestedDollarValue) {\\n        fullyVestedDollarValue = 0;\\n        nonVestedDollarValue = 0;\\n        IPool[] memory whitelistedPools = getWhitelistedPools();\\n        uint256[] memory prices = getPoolsPrices(whitelistedPools);\\n\\n        for (uint i = 0; i < whitelistedPools.length; i++) {\\n            uint256 fullyVestedBalance = whitelistedPools[i].getFullyVestedLockedBalance(userAddress);\\n            uint256 nonVestedBalance = IERC20(whitelistedPools[i]).balanceOf(userAddress) - fullyVestedBalance;\\n\\n            uint256 _denominator = 10 ** whitelistedPools[i].decimals();\\n            fullyVestedDollarValue += FullMath.mulDiv(fullyVestedBalance, prices[i] * RS_PRICE_PRECISION_1e18_COMPLEMENT, _denominator);\\n            nonVestedDollarValue += FullMath.mulDiv(nonVestedBalance, prices[i] * RS_PRICE_PRECISION_1e18_COMPLEMENT, _denominator);\\n        }\\n        return (fullyVestedDollarValue, nonVestedDollarValue);\\n    }\\n\\n    function getPrimeAccountBorrowedDollarValueAcrossWhitelistedPools(address userAddress) public view returns (uint256) {\\n        uint256 totalDollarValue = 0;\\n\\n        address primeAccountAddress = borrowersRegistry.getLoanForOwner(userAddress);\\n        if(primeAccountAddress != address(0)){\\n            IPool[] memory whitelistedPools = getWhitelistedPools();\\n            bytes32[] memory poolsTokenSymbols = new bytes32[](whitelistedPools.length);\\n            for (uint i = 0; i < whitelistedPools.length; i++) {\\n                poolsTokenSymbols[i] = tokenManager.tokenAddressToSymbol(whitelistedPools[i].tokenAddress());\\n            }\\n            uint256[] memory prices = getOracleNumericValuesFromTxMsg(poolsTokenSymbols);\\n\\n            for (uint i = 0; i < whitelistedPools.length; i++) {\\n                uint256 poolBorrowedAmount = whitelistedPools[i].getBorrowed(primeAccountAddress);\\n                uint256 poolDollarValue = FullMath.mulDiv(poolBorrowedAmount, prices[i] * RS_PRICE_PRECISION_1e18_COMPLEMENT, 10 ** whitelistedPools[i].decimals());\\n                totalDollarValue += poolDollarValue;\\n            }\\n        }\\n\\n        return totalDollarValue;\\n    }\\n\\n    function getPrimeTokenPoolPrice(ISPrime sPrimeContract, uint256 tokenYPrice) public view returns (uint256) {\\n        if(useOraclePrimeFeed){\\n            bytes32 primeSymbol = \\\"PRIME\\\";\\n            uint256 primePrice = getOracleNumericValueFromTxMsg(primeSymbol);\\n            return primePrice * 1e8 / tokenYPrice; // both tokenYPrice and primePrice have 8 decimals\\n        } else {\\n            uint256 poolPrice = sPrimeContract.getPoolPrice(); // returns price with 8 decimals\\n            if(poolPrice * tokenYPrice / 1e8 > 13125 * 1e5){ // 13.125 with 8 decimals which comes from 10xinitialPrice MAX PRICE CAP before oracle feed will be ready\\n                poolPrice = 13125 * 1e13 / tokenYPrice; // 13125 * 1e5 * 1e8 / tokenYPrice\\n            }\\n            return poolPrice;\\n        }\\n    }\\n\\n    function getUserSPrimeDollarValueVestedAndNonVested(address userAddress) public view returns (uint256 fullyVestedDollarValue, uint256 nonVestedDollarValue) {\\n        fullyVestedDollarValue = 0;\\n        nonVestedDollarValue = 0;\\n        for (uint i = 0; i < whitelistedSPrimeContracts.length; i++) {\\n            bytes32 sPrimeTokenYSymbol = tokenManager.tokenAddressToSymbol(address(whitelistedSPrimeContracts[i].getTokenY()));\\n            uint256 sPrimeTokenYDecimals = IERC20Metadata(address(whitelistedSPrimeContracts[i].getTokenY())).decimals();\\n            uint256 sPrimeTokenYPrice = getOracleNumericValueFromTxMsg(sPrimeTokenYSymbol);\\n            uint256 poolPrice = getPrimeTokenPoolPrice(whitelistedSPrimeContracts[i], sPrimeTokenYPrice);\\n            uint256 sPrimeBalance = IERC20Metadata(address(whitelistedSPrimeContracts[i])).balanceOf(userAddress);\\n            uint256 fullyVestedBalance = whitelistedSPrimeContracts[i].getFullyVestedLockedBalance(userAddress);\\n            uint256 nonVestedBalance = sPrimeBalance - fullyVestedBalance;\\n            uint256 userSPrimeValueInTokenY = whitelistedSPrimeContracts[i].getUserValueInTokenY(userAddress, poolPrice);\\n            if(sPrimeBalance > 0) {\\n                uint256 _denominator = sPrimeBalance * 10 ** sPrimeTokenYDecimals;\\n                fullyVestedDollarValue += FullMath.mulDiv(userSPrimeValueInTokenY, sPrimeTokenYPrice * RS_PRICE_PRECISION_1e18_COMPLEMENT * fullyVestedBalance, _denominator);\\n                nonVestedDollarValue += FullMath.mulDiv(userSPrimeValueInTokenY, sPrimeTokenYPrice * RS_PRICE_PRECISION_1e18_COMPLEMENT * nonVestedBalance, _denominator);\\n            }\\n        }\\n        return (fullyVestedDollarValue, nonVestedDollarValue);\\n    }\\n\\n    /*\\n    * For every $10 deposited and $1 $sPRIME owned, your balance increases with 5 $vPRIME per year.\\n    * For every $10 borrowed and $1 $sPRIME owned, your balance increases with 1 $vPRIME per year.\\n    * Only full ${V_PRIME_PAIR_RATIO}-1 pairs can produce $vPRIME.\\n    */\\n    function getUserVPrimeRateAndMaxCap(address userAddress) public view returns (int256, uint256, uint256){\\n        VPrimeCalculationsStruct memory vPrimeCalculations = VPrimeCalculationsStruct({\\n            vPrimeRate: 0,\\n            vPrimeBalanceLimit: 0,\\n            vPrimeBalanceAlreadyVested: 0,\\n            userSPrimeDollarValueFullyVested: 0,\\n            userSPrimeDollarValueNonVested: 0,\\n            userDepositFullyVestedDollarValue: 0,\\n            userDepositNonVestedDollarValue: 0,\\n            primeAccountBorrowedDollarValue: 0\\n        });\\n\\n        {\\n            (uint256 _userSPrimeDollarValueFullyVested, uint256 _userSPrimeDollarValueNonVested) = getUserSPrimeDollarValueVestedAndNonVested(userAddress);\\n            (uint256 _userDepositFullyVestedDollarValue, uint256 _userDepositNonVestedDollarValue) = getUserDepositDollarValueAcrossWhiteListedPoolsVestedAndNonVested(userAddress);\\n            uint256 _primeAccountBorrowedDollarValue = getPrimeAccountBorrowedDollarValueAcrossWhitelistedPools(userAddress);\\n            vPrimeCalculations.userSPrimeDollarValueFullyVested = _userSPrimeDollarValueFullyVested;\\n            vPrimeCalculations.userSPrimeDollarValueNonVested = _userSPrimeDollarValueNonVested;\\n            vPrimeCalculations.userDepositFullyVestedDollarValue = _userDepositFullyVestedDollarValue;\\n            vPrimeCalculations.userDepositNonVestedDollarValue = _userDepositNonVestedDollarValue;\\n            vPrimeCalculations.primeAccountBorrowedDollarValue = _primeAccountBorrowedDollarValue;\\n        }\\n\\n\\n        // How many pairs can be created based on the sPrime\\n        uint256 maxSPrimePairsCount = (vPrimeCalculations.userSPrimeDollarValueFullyVested + vPrimeCalculations.userSPrimeDollarValueNonVested) / 1e18;\\n        // How many pairs can be created based on the deposits\\n        uint256 maxDepositPairsCount = ((vPrimeCalculations.userDepositFullyVestedDollarValue + vPrimeCalculations.userDepositNonVestedDollarValue) / V_PRIME_PAIR_RATIO) / 1e18;\\n        // How many pairs can be created based on the borrowings\\n        uint256 maxBorrowerPairsCount = vPrimeCalculations.primeAccountBorrowedDollarValue / V_PRIME_PAIR_RATIO / 1e18;\\n\\n        // How many sPrime-depositor pairs can be created\\n        uint256 maxSPrimeDepositorPairsCount = Math.min(maxSPrimePairsCount, maxDepositPairsCount);\\n        // How many sPrime-borrower pairs can be created taken into account sPrime used by sPrime-depositor pairs\\n        uint256 maxSPrimeBorrowerPairsCount = Math.min(maxSPrimePairsCount - maxSPrimeDepositorPairsCount, maxBorrowerPairsCount);\\n\\n        // Increase vPrimeCalculations.vPrimeBalanceLimit and vPrimeCalculations.vPrimeBalanceAlreadyVested based on the sPrime-depositor pairs\\n        if(maxSPrimeDepositorPairsCount > 0){\\n            uint256 balanceLimitIncrease = maxSPrimeDepositorPairsCount * DEPOSITOR_YEARLY_V_PRIME_RATE * MAX_V_PRIME_VESTING_YEARS * 1e18;\\n            vPrimeCalculations.vPrimeBalanceLimit += balanceLimitIncrease;\\n\\n            uint256 depositVestedPairsCount = Math.min(vPrimeCalculations.userDepositFullyVestedDollarValue / V_PRIME_PAIR_RATIO, vPrimeCalculations.userSPrimeDollarValueFullyVested) / 1e18;\\n            if(depositVestedPairsCount > 0){\\n                vPrimeCalculations.vPrimeBalanceAlreadyVested += balanceLimitIncrease * depositVestedPairsCount / maxSPrimeDepositorPairsCount;\\n            }\\n        }\\n\\n        // Increase vPrimeCalculations.vPrimeBalanceLimit based on the sPrime-borrower pairs\\n        if(maxSPrimeBorrowerPairsCount > 0){\\n            vPrimeCalculations.vPrimeBalanceLimit += maxSPrimeBorrowerPairsCount * BORROWER_YEARLY_V_PRIME_RATE * MAX_V_PRIME_VESTING_YEARS * 1e18;\\n        }\\n\\n        // Check current vPrime balance\\n        uint256 currentVPrimeBalance = vPrimeContract.balanceOf(userAddress);\\n\\n        // If already vested vPrime balance is higher than the current balance, then the current balance should be replaced with the already vested balance\\n        bool balanceShouldBeReplaced = false;\\n        if(currentVPrimeBalance < vPrimeCalculations.vPrimeBalanceAlreadyVested){\\n            currentVPrimeBalance = vPrimeCalculations.vPrimeBalanceAlreadyVested;\\n            balanceShouldBeReplaced = true;\\n        }\\n\\n        int256 vPrimeBalanceDelta = int256(vPrimeCalculations.vPrimeBalanceLimit) - int256(currentVPrimeBalance);\\n        if(vPrimeBalanceDelta < 0){\\n            vPrimeCalculations.vPrimeRate = vPrimeBalanceDelta / int256(V_PRIME_DETERIORATION_DAYS) / 1 days;\\n        } else {\\n            vPrimeCalculations.vPrimeRate = vPrimeBalanceDelta / int256(MAX_V_PRIME_VESTING_YEARS) / 365 days;\\n        }\\n\\n        if(balanceShouldBeReplaced){\\n            return (vPrimeCalculations.vPrimeRate, vPrimeCalculations.vPrimeBalanceLimit, vPrimeCalculations.vPrimeBalanceAlreadyVested);\\n        } else {\\n            return (vPrimeCalculations.vPrimeRate, vPrimeCalculations.vPrimeBalanceLimit, 0);\\n        }\\n    }\\n\\n\\n    // EVENTS\\n    event WhitelistedSPrimeContractsUpdated(ISPrime[] newWhitelistedSPrimeContracts, address userAddress, uint256 timestamp);\\n    event TokenManagerUpdated(ITokenManager newTokenManager, address userAddress, uint256 timestamp);\\n    event UseOraclePrimeFeedUpdated(bool _useOraclePrimeFeed, address userAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0xb6d4f6a43ad366d83af1fa4dad652c958e96632e17d0473d47f45ebfc547f02b\",\"license\":\"BUSL-1.1\"},\"contracts/token/vPrimeControllerArbitrum.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c01f75e2bf34101db273d19406f08014faf1e524;\\npragma solidity 0.8.17;\\n\\nimport \\\"./vPrimeController.sol\\\";\\n\\ncontract vPrimeControllerArbitrum is vPrimeController {\\n    function getDataServiceId() public view virtual override returns (string memory) {\\n    return \\\"redstone-arbitrum-prod\\\";\\n  }\\n\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x345Efd26098e173F811e3B9Af1B0e0a11872B38b) {\\n      return 0;\\n    } else if (signerAddress == 0xbD0c5ccd85D5831B10E3e49527B8Cd67e2EFAf39) {\\n      return 1;\\n    } else if (signerAddress == 0x2F3E8EC88C01593d10ca9461c807660fF2D8DB28) {\\n      return 2;\\n    } else if (signerAddress == 0xb7f154bB5491565D215F4EB1c3fe3e84960627aF) {\\n      return 3;\\n    } else if (signerAddress == 0xE6b0De8F4B31F137d3c59b5a0A71e66e7D504Ef9) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x1ddc724d7c2fa15ba85cd30784a276fa284a2db633f6b024ca47779f1c5fc2a7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061350b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ac5760003560e01c806319a63896146101b1578063255d77ba146101da5780632808db58146101ef5780632a709b14146102055780632f589aaf14610225578063364fa2da1461023857806336d863c81461024057806338454a11146102485780633ce142f5146102505780634764f8fc146102755780634f01e51b1461028857806355a547d51461029b5780635be95d78146102a35780635f5c578c146102cb5780636415f7d9146102de578063684572bb146102f15780636cec3461146102f9578063715018a61461030c578063760a8c521461031457806379ba509714610327578063812744d71461032f5780638cb64e29146103425780638da5cb5b14610355578063a21b36ca1461035d578063a760520d14610369578063b07c0a561461037c578063b24ebfcc146103aa578063bf18c239146103bd578063c274583a146103d0578063d06dca8914610408578063d4c9b9051461041b578063e30c39781461042e578063f2fde38b14610436578063f50b2efe14610449578063f90c49241461045c578063fb13605d14610463575b600080fd5b6068546101c590600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6101ed6101e8366004612e20565b610478565b005b6101f7600181565b6040519081526020016101d1565b606654610218906001600160a01b031681565b6040516101d19190612e54565b6101ed610233366004612e68565b6104d2565b6101f7600381565b6101f7600e81565b6101f7600581565b61026361025e366004612e68565b6104fc565b60405160ff90911681526020016101d1565b6101f7610283366004612e85565b610603565b6101ed610296366004612e68565b6106f8565b6101f761075a565b6102b66102b1366004612e68565b610872565b604080519283526020830191909152016101d1565b6101f76102d9366004612e68565b610d02565b606754610218906001600160a01b031681565b6101f7600a81565b6101ed610307366004612e68565b611094565b6101ed61119c565b610218610322366004612eb1565b6111b0565b6101ed6111da565b6102b661033d366004612e68565b61126c565b6101ed610350366004612eda565b6114bc565b61021861162e565b6101f76402540be40081565b6101ed610377366004612f4c565b61163d565b61038f61038a366004612e68565b61169e565b604080519384526020840192909252908201526060016101d1565b6101f76103b8366004612f67565b611a03565b6101ed6103cb366004612e68565b611a0e565b60408051808201825260168152751c99591cdd1bdb994b585c989a5d1c9d5b4b5c1c9bd960521b602082015290516101d19190612ff7565b606854610218906001600160a01b031681565b6101ed610429366004613045565b611b9c565b610218611be0565b6101ed610444366004612e68565b611bef565b6101ed610457366004612eb1565b611cb6565b6003610263565b61046b611cbf565b6040516101d191906130d3565b610480611e5f565b8051610493906065906020840190612cb4565b507f113ac889396ba7fb22b98d97cc6e90f009ca8ea79a91f79f25f789e1e087fa4d8133426040516104c793929190613120565b60405180910390a150565b6104da611e5f565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03821673345efd26098e173f811e3b9af1b0e0a11872b38b0361052a57506000919050565b6001600160a01b03821673bd0c5ccd85d5831b10e3e49527b8cd67e2efaf390361055657506001919050565b6001600160a01b038216732f3e8ec88c01593d10ca9461c807660ff2d8db280361058257506002919050565b6001600160a01b03821673b7f154bb5491565d215f4eb1c3fe3e84960627af036105ae57506003919050565b6001600160a01b03821673e6b0de8f4b31f137d3c59b5a0a71e66e7d504ef9036105da57506004919050565b816040516303b1166f60e61b81526004016105f59190612e54565b60405180910390fd5b919050565b606854600090600160a01b900460ff161561065057645052494d4560d81b600061062c82611ebe565b90508361063d826305f5e100613195565b61064791906131c2565b925050506106f2565b6000836001600160a01b031663885a08e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906131d6565b9050634e3b29206305f5e1006106ca8584613195565b6106d491906131c2565b11156106ef576106ec836701d24b2dfac520006131c2565b90505b90505b92915050565b610700611e5f565b606680546001600160a01b0319166001600160a01b0383169081179091556040805191825233602083015242908201527f0fce8ca0e21ef947788ca67a8b70d53df8a6eec19241eca622a0f4a695ac3eca906060016104c7565b600080610765611f2e565b9050600061077282611fdc565b61ffff1690508060000361079957604051632154bfcf60e21b815260040160405180910390fd5b6107a46002836131ef565b915060005b8181101561086c5760006107bc84612016565b90506000806107cc6068876131ef565b905060006107da8236613202565b9050803592508265ffffffffffff1660000361080957604051630336dc9d60e41b815260040160405180910390fd5b87600003610821578265ffffffffffff169750610849565b878365ffffffffffff16146108495760405163d9d1f46560e01b815260040160405180910390fd5b61085384886131ef565b965050505050808061086490613215565b9150506107a9565b50505090565b600080805b606554811015610cfc57606654606580546000926001600160a01b03169163f823f1e091859081106108ab576108ab61322e565b6000918252602091829020015460408051633684184360e21b815290516001600160a01b039092169263da10610c926004808401938290030181865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190613244565b6040518263ffffffff1660e01b81526004016109399190612e54565b602060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a91906131d6565b90506000606583815481106109915761099161322e565b6000918252602091829020015460408051633684184360e21b815290516001600160a01b039092169263da10610c926004808401938290030181865afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190613244565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190613261565b60ff1690506000610a7483611ebe565b90506000610aa960658681548110610a8e57610a8e61322e565b6000918252602090912001546001600160a01b031683610603565b9050600060658681548110610ac057610ac061322e565b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190610af9908c90600401612e54565b602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a91906131d6565b9050600060658781548110610b5157610b5161322e565b600091825260209091200154604051631899cc6b60e31b81526001600160a01b039091169063c4ce635890610b8a908d90600401612e54565b602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906131d6565b90506000610bd98284613202565b9050600060658981548110610bf057610bf061322e565b60009182526020909120015460405163eddeebf360e01b81526001600160a01b038e81166004830152602482018890529091169063eddeebf390604401602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e91906131d6565b90508315610ce1576000610c8388600a613368565b610c8d9086613195565b9050610cb38285610ca36402540be4008b613195565b610cad9190613195565b83612052565b610cbd908d6131ef565b9b50610cd38284610ca36402540be4008b613195565b610cdd908c6131ef565b9a50505b50505050505050508080610cf490613215565b915050610877565b50915091565b606854604051633344a55560e01b8152600091829182916001600160a01b031690633344a55590610d37908790600401612e54565b602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190613244565b90506001600160a01b0381161561108d576000610d93611cbf565b9050600081516001600160401b03811115610db057610db0612d2e565b604051908082528060200260200182016040528015610dd9578160200160208202803683370190505b50905060005b8251811015610f065760665483516001600160a01b039091169063f823f1e090859084908110610e1157610e1161322e565b60200260200101516001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a9190613244565b6040518263ffffffff1660e01b8152600401610e969190612e54565b602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed791906131d6565b828281518110610ee957610ee961322e565b602090810291909101015280610efe81613215565b915050610ddf565b506000610f12826121cb565b905060005b8351811015611088576000848281518110610f3457610f3461322e565b60200260200101516001600160a01b0316636011163e876040518263ffffffff1660e01b8152600401610f679190612e54565b602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906131d6565b90506000611065826402540be400868681518110610fc857610fc861322e565b6020026020010151610fda9190613195565b888681518110610fec57610fec61322e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110559190613261565b61106090600a613374565b612052565b905061107181896131ef565b97505050808061108090613215565b915050610f17565b505050505b5092915050565b60008060006110a28461169e565b9194509250905080156111285760675460405163011c0de760e61b81526001600160a01b0386811660048301526024820186905260448201859052606482018490529091169063470379c090608401600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b50505050611196565b606754604051631f859d6760e31b81526001600160a01b03868116600483015260248201869052604482018590529091169063fc2ceb3890606401600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b505050505b50505050565b6111a4611e5f565b6111ae60006121d6565b565b606581815481106111c057600080fd5b6000918252602090912001546001600160a01b0316905081565b60006111e4612228565b9050336001600160a01b038216146112565760405162461bcd60e51b815260206004820152602f60248201527f50656e64696e674f776e61626c653a2063616c6c6572206973206e6f7420746860448201526e32903832b73234b7339037bbb732b960891b60648201526084016105f5565b61125f816121d6565b611269600061223b565b50565b60008080611278611cbf565b905060006112858261224d565b905060005b82518110156114b45760008382815181106112a7576112a761322e565b60200260200101516001600160a01b031663c4ce6358886040518263ffffffff1660e01b81526004016112da9190612e54565b602060405180830381865afa1580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b91906131d6565b90506000818584815181106113325761133261322e565b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016113659190612e54565b602060405180830381865afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a691906131d6565b6113b09190613202565b905060008584815181106113c6576113c661322e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561140b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142f9190613261565b61143a90600a613374565b905061146a836402540be4008787815181106114585761145861322e565b6020026020010151610cad9190613195565b61147490896131ef565b9750611492826402540be4008787815181106114585761145861322e565b61149c90886131ef565b965050505080806114ac90613215565b91505061128a565b505050915091565b600054610100900460ff16158080156114dc5750600054600160ff909116105b806114f65750303b1580156114f6575060005460ff166001145b6115595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105f5565b6000805460ff19166001179055801561157c576000805461ff0019166101001790555b845161158f906065906020880190612cb4565b50606680546001600160a01b038087166001600160a01b031992831617909255606780549286169290911691909117905560688054831515600160a01b0260ff60a01b199091161790556115e16123ca565b8015611627576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6033546001600160a01b031690565b611645611e5f565b6068805460ff60a01b1916600160a01b831515908102919091179091556040805191825233602083015242908201527ff85e9b14a3442aa137bf4cddc5f7039bf877c99d78b161457a577242f7ec96ac906060016104c7565b60008060008060405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090506000806116f487610872565b915091506000806117048961126c565b9150915060006117138a610d02565b606087018690526080870185905260a08701939093525060c085015260e0840152600091670de0b6b3a76400009161174a916131ef565b61175491906131c2565b90506000670de0b6b3a7640000600a8460c001518560a0015161177791906131ef565b61178191906131c2565b61178b91906131c2565b90506000670de0b6b3a7640000600a8560e001516117a991906131c2565b6117b391906131c2565b905060006117c184846123f9565b905060006117d86117d28387613202565b846123f9565b9050811561188d57600060036117ef600585613195565b6117f99190613195565b61180b90670de0b6b3a7640000613195565b9050808760200181815161181f91906131ef565b90525060a0870151600090670de0b6b3a76400009061184e9061184490600a906131c2565b8a606001516123f9565b61185891906131c2565b9050801561188a578361186b8284613195565b61187591906131c2565b8860400181815161188691906131ef565b9052505b50505b80156118d15760036118a0600183613195565b6118aa9190613195565b6118bc90670de0b6b3a7640000613195565b866020018181516118cd91906131ef565b9052505b6067546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611902908e90600401612e54565b602060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194391906131d6565b90506000876040015182101561195d575050604086015160015b600082896020015161196f9190613383565b9050600081121561199a5762015180611989600e836133a3565b61199391906133a3565b89526119b7565b6301e133806119aa6003836133a3565b6119b491906133a3565b89525b81156119e057886000015189602001518a604001519b509b509b505050505050505050506119fc565b8860000151896020015160009b509b509b505050505050505050505b9193909250565b60006106f28261240f565b6000611a18611cbf565b90506000805b8251811015611a7457336001600160a01b0316838281518110611a4357611a4361322e565b60200260200101516001600160a01b031603611a625760019150611a74565b80611a6c81613215565b915050611a1e565b5060005b606554811015611ad457336001600160a01b031660658281548110611a9f57611a9f61322e565b6000918252602090912001546001600160a01b031603611ac25760019150611ad4565b80611acc81613215565b915050611a78565b5080611b355760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920506f6f6c206f7220735072696d652063616e2063616c6c207468696044820152693990333ab731ba34b7b760b11b60648201526084016105f5565b60675460405163bf18c23960e01b81526001600160a01b039091169063bf18c23990611b65908690600401612e54565b600060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b50505050505050565b60005b8151811015611bdc57611bca828281518110611bbd57611bbd61322e565b6020026020010151611094565b80611bd481613215565b915050611b9f565b5050565b6000611bea612228565b905090565b611bf7611e5f565b6001600160a01b038116611c635760405162461bcd60e51b815260206004820152602d60248201527f50656e64696e674f776e61626c653a206e6577206f776e65722069732074686560448201526c207a65726f206164647265737360981b60648201526084016105f5565b611c6c8161223b565b806001600160a01b0316611c7e61162e565b6001600160a01b03167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6112698161241a565b60606000606660009054906101000a90046001600160a01b03166001600160a01b03166366273c196040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d3e91908101906133d1565b9050600081516001600160401b03811115611d5b57611d5b612d2e565b604051908082528060200260200182016040528015611d84578160200160208202803683370190505b50905060005b825181101561108d5760665483516001600160a01b0390911690630edc25b690859084908110611dbc57611dbc61322e565b60200260200101516040518263ffffffff1660e01b8152600401611de291815260200190565b602060405180830381865afa158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190613244565b828281518110611e3557611e3561322e565b6001600160a01b039092166020928302919091019091015280611e5781613215565b915050611d8a565b33611e6861162e565b6001600160a01b0316146111ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f5565b604080516001808252818301909252600091829190602080830190803683370190505090508281600081518110611ef757611ef761322e565b602002602001018181525050611f0c816121cb565b600081518110611f1e57611f1e61322e565b6020026020010151915050919050565b60006602ed57011e0000601f1936013581161480611f5f576040516373bb264f60e11b815260040160405180910390fd5b60003660291115611f8357604051632bcb7bc560e11b815260040160405180910390fd5b5060281936013560006009611f9e600362ffffff85166131ef565b611fa891906131ef565b905036611fb66002836131ef565b1115611fd55760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080611fea6020846131ef565b90503681111561200d57604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b60008060006120248461249a565b9092509050604e6120368260206131ef565b6120409084613195565b61204a91906131ef565b949350505050565b600080806000198587098587029250828110838203039150508060000361208b576000841161208057600080fd5b508290049050611fd5565b80841161209757600080fd5b60008486880980840393811190920391905060006120b7861960016131ef565b86169586900495938490049360008190030460010190506120d88184613195565b9093179260006120e9876003613195565b60021890506120f88188613195565b612103906002613202565b61210d9082613195565b90506121198188613195565b612124906002613202565b61212e9082613195565b905061213a8188613195565b612145906002613202565b61214f9082613195565b905061215b8188613195565b612166906002613202565b6121709082613195565b905061217c8188613195565b612187906002613202565b6121919082613195565b905061219d8188613195565b6121a8906002613202565b6121b29082613195565b90506121be8186613195565b9998505050505050505050565b60606106f2826124f1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805160206134b68339815191525490565b6000805160206134b683398151915255565b6060600082516001600160401b0381111561226a5761226a612d2e565b604051908082528060200260200182016040528015612293578160200160208202803683370190505b50905060005b83518110156123c05760665484516001600160a01b039091169063f823f1e0908690849081106122cb576122cb61322e565b60200260200101516001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123349190613244565b6040518263ffffffff1660e01b81526004016123509190612e54565b602060405180830381865afa15801561236d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239191906131d6565b8282815181106123a3576123a361322e565b6020908102919091010152806123b881613215565b915050612299565b50611fd5816121cb565b600054610100900460ff166123f15760405162461bcd60e51b81526004016105f590613456565b6111ae6126b3565b600081831061240857816106ef565b5090919050565b60006106f2826126e2565b60006124286103e8836131c2565b90508042101561246657603c61243e4283613202565b1115611bdc5760405163b6b0916d60e01b8152600481018290524260248201526044016105f5565b60b46124728242613202565b1115611bdc57604051630321d0b560e01b8152600481018290524260248201526044016105f5565b6000808080806124ab6041876131ef565b905060006124c46124bd6020846131ef565b369061279d565b8035945090506124d581600361279d565b62ffffff9490941697933563ffffffff16965092945050505050565b6060600082516001600160401b0381111561250e5761250e612d2e565b604051908082528060200260200182016040528015612537578160200160208202803683370190505b509050600083516001600160401b0381111561255557612555612d2e565b60405190808252806020026020018201604052801561257e578160200160208202803683370190505b509050600084516001600160401b0381111561259c5761259c612d2e565b6040519080825280602002602001820160405280156125cf57816020015b60608152602001906001900390816125ba5790505b50905060005b855181101561262d576040805160038082526080820190925290602082016060803683370190505082828151811061260f5761260f61322e565b6020026020010181905250808061262590613215565b9150506125d5565b506000612638611f2e565b9050600061264582611fdc565b61ffff1690506126566002836131ef565b60405190925060005b8281101561269c5760006126768a898989896127a9565b905061268281866131ef565b94508260405250808061269490613215565b91505061265f565b506126a78487612a35565b98975050505050505050565b600054610100900460ff166126da5760405162461bcd60e51b81526004016105f590613456565b6111ae612b4d565b6000815160000361270657604051639e198af960e01b815260040160405180910390fd5b61270f82612b7d565b60006002835161271f91906131c2565b90506002835161272f91906134a1565b60000361278b57600061277e84612747600185613202565b815181106127575761275761322e565b60200260200101518584815181106127715761277161322e565b6020026020010151612bc5565b905061204a6002826131c2565b828181518110611f1e57611f1e61322e565b60006106ef8284613202565b6000806000806127b88561249a565b909250905060008080606081600d6127db6127d46020896131ef565b8990612bd1565b6127e591906131ef565b905060006127f76124bd60688d6131ef565b905060006128148361280a60418f6131ef565b6124bd91906131ef565b90506128208382612833565b9350826020850120945081359650612857565b60408051838152602081850181019092526000910183838237601f19019392505050565b6128688765ffffffffffff16611cb6565b61287c8561287760418f6131ef565b612bdd565b9550612887866104fc565b60ff1699505050505050505060008060005b84811015612a0f576128ac888583612c55565b909350915060005b8c518110156129fc578c81815181106128cf576128cf61322e565b602002602001015184036129ea5760008b82815181106128f1576128f161322e565b6020026020010151905061290a81896001901b16151590565b1580156129335750600360ff168d83815181106129295761292961322e565b6020026020010151105b156129e4578c828151811061294a5761294a61322e565b60200260200101805180919061295f90613215565b81525050838b83815181106129765761297661322e565b602002602001015160018f85815181106129925761299261322e565b60200260200101516129a49190613202565b815181106129b4576129b461322e565b60209081029190910101526001881b81178c83815181106129d7576129d761322e565b6020026020010181815250505b506129fc565b806129f481613215565b9150506128b4565b5080612a0781613215565b915050612899565b50505081602082612a2091906131ef565b612a2a9190613195565b6121be90604e6131ef565b6060600083516001600160401b03811115612a5257612a52612d2e565b604051908082528060200260200182016040528015612a7b578160200160208202803683370190505b509050600360005b8551811015612b435781858281518110612a9f57612a9f61322e565b60200260200101511015612aec57848181518110612abf57612abf61322e565b602002602001015182604051632b13aef560e01b81526004016105f5929190918252602082015260400190565b6000612b10878381518110612b0357612b0361322e565b6020026020010151611a03565b905080848381518110612b2557612b2561322e565b60209081029190910101525080612b3b81613215565b915050612a83565b5090949350505050565b600054610100900460ff16612b745760405162461bcd60e51b81526004016105f590613456565b6111ae336121d6565b8051602082016020820281019150805b8281101561119657815b81811015612bbc578151815180821015612bb2578084528183525b5050602001612b97565b50602001612b8d565b60006106ef82846131ef565b60006106ef8284613195565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015612c40573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080612c64604e876131ef565b90506000612c91612c8a612c796020896131ef565b612c848860016131ef565b90612bd1565b8390612bc5565b90506000612c9f368361279d565b80359960209091013598509650505050505050565b828054828255906000526020600020908101928215612d09579160200282015b82811115612d0957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612cd4565b50612d15929150612d19565b5090565b5b80821115612d155760008155600101612d1a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d6c57612d6c612d2e565b604052919050565b60006001600160401b03821115612d8d57612d8d612d2e565b5060051b60200190565b6001600160a01b038116811461126957600080fd5b600082601f830112612dbd57600080fd5b81356020612dd2612dcd83612d74565b612d44565b82815260059290921b84018101918181019086841115612df157600080fd5b8286015b84811015612e15578035612e0881612d97565b8352918301918301612df5565b509695505050505050565b600060208284031215612e3257600080fd5b81356001600160401b03811115612e4857600080fd5b61204a84828501612dac565b6001600160a01b0391909116815260200190565b600060208284031215612e7a57600080fd5b8135611fd581612d97565b60008060408385031215612e9857600080fd5b8235612ea381612d97565b946020939093013593505050565b600060208284031215612ec357600080fd5b5035919050565b803580151581146105fe57600080fd5b60008060008060808587031215612ef057600080fd5b84356001600160401b03811115612f0657600080fd5b612f1287828801612dac565b9450506020850135612f2381612d97565b92506040850135612f3381612d97565b9150612f4160608601612eca565b905092959194509250565b600060208284031215612f5e57600080fd5b6106ef82612eca565b60006020808385031215612f7a57600080fd5b82356001600160401b03811115612f9057600080fd5b8301601f81018513612fa157600080fd5b8035612faf612dcd82612d74565b81815260059190911b82018301908381019087831115612fce57600080fd5b928401925b82841015612fec57833582529284019290840190612fd3565b979650505050505050565b600060208083528351808285015260005b8181101561302457858101830151858201604001528201613008565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602080838503121561305857600080fd5b82356001600160401b0381111561306e57600080fd5b8301601f8101851361307f57600080fd5b803561308d612dcd82612d74565b81815260059190911b820183019083810190878311156130ac57600080fd5b928401925b82841015612fec5783356130c481612d97565b825292840192908401906130b1565b6020808252825182820181905260009190848201906040850190845b818110156131145783516001600160a01b0316835292840192918401916001016130ef565b50909695505050505050565b606080825284519082018190526000906020906080840190828801845b828110156131625781516001600160a01b03168452928401929084019060010161313d565b5050506001600160a01b0395909516908301525060400152919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106f2576106f261317f565b634e487b7160e01b600052601260045260246000fd5b6000826131d1576131d16131ac565b500490565b6000602082840312156131e857600080fd5b5051919050565b808201808211156106f2576106f261317f565b818103818111156106f2576106f261317f565b6000600182016132275761322761317f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561325657600080fd5b8151611fd581612d97565b60006020828403121561327357600080fd5b815160ff81168114611fd557600080fd5b600181815b808511156132bf5781600019048211156132a5576132a561317f565b808516156132b257918102915b93841c9390800290613289565b509250929050565b6000826132d6575060016106f2565b816132e3575060006106f2565b81600181146132f957600281146133035761331f565b60019150506106f2565b60ff8411156133145761331461317f565b50506001821b6106f2565b5060208310610133831016604e8410600b8410161715613342575081810a6106f2565b61334c8383613284565b80600019048211156133605761336061317f565b029392505050565b60006106ef83836132c7565b60006106ef60ff8416836132c7565b818103600083128015838313168383128216171561108d5761108d61317f565b6000826133b2576133b26131ac565b600160ff1b8214600019841416156133cc576133cc61317f565b500590565b600060208083850312156133e457600080fd5b82516001600160401b038111156133fa57600080fd5b8301601f8101851361340b57600080fd5b8051613419612dcd82612d74565b81815260059190911b8201830190838101908783111561343857600080fd5b928401925b82841015612fec5783518252928401929084019061343d565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000826134b0576134b06131ac565b50069056fe63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2a2646970667358221220f312e236d70a4b9a2846e3af563452777336d9ca12f9e36f96a28a49d8f6d46b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ac5760003560e01c806319a63896146101b1578063255d77ba146101da5780632808db58146101ef5780632a709b14146102055780632f589aaf14610225578063364fa2da1461023857806336d863c81461024057806338454a11146102485780633ce142f5146102505780634764f8fc146102755780634f01e51b1461028857806355a547d51461029b5780635be95d78146102a35780635f5c578c146102cb5780636415f7d9146102de578063684572bb146102f15780636cec3461146102f9578063715018a61461030c578063760a8c521461031457806379ba509714610327578063812744d71461032f5780638cb64e29146103425780638da5cb5b14610355578063a21b36ca1461035d578063a760520d14610369578063b07c0a561461037c578063b24ebfcc146103aa578063bf18c239146103bd578063c274583a146103d0578063d06dca8914610408578063d4c9b9051461041b578063e30c39781461042e578063f2fde38b14610436578063f50b2efe14610449578063f90c49241461045c578063fb13605d14610463575b600080fd5b6068546101c590600160a01b900460ff1681565b60405190151581526020015b60405180910390f35b6101ed6101e8366004612e20565b610478565b005b6101f7600181565b6040519081526020016101d1565b606654610218906001600160a01b031681565b6040516101d19190612e54565b6101ed610233366004612e68565b6104d2565b6101f7600381565b6101f7600e81565b6101f7600581565b61026361025e366004612e68565b6104fc565b60405160ff90911681526020016101d1565b6101f7610283366004612e85565b610603565b6101ed610296366004612e68565b6106f8565b6101f761075a565b6102b66102b1366004612e68565b610872565b604080519283526020830191909152016101d1565b6101f76102d9366004612e68565b610d02565b606754610218906001600160a01b031681565b6101f7600a81565b6101ed610307366004612e68565b611094565b6101ed61119c565b610218610322366004612eb1565b6111b0565b6101ed6111da565b6102b661033d366004612e68565b61126c565b6101ed610350366004612eda565b6114bc565b61021861162e565b6101f76402540be40081565b6101ed610377366004612f4c565b61163d565b61038f61038a366004612e68565b61169e565b604080519384526020840192909252908201526060016101d1565b6101f76103b8366004612f67565b611a03565b6101ed6103cb366004612e68565b611a0e565b60408051808201825260168152751c99591cdd1bdb994b585c989a5d1c9d5b4b5c1c9bd960521b602082015290516101d19190612ff7565b606854610218906001600160a01b031681565b6101ed610429366004613045565b611b9c565b610218611be0565b6101ed610444366004612e68565b611bef565b6101ed610457366004612eb1565b611cb6565b6003610263565b61046b611cbf565b6040516101d191906130d3565b610480611e5f565b8051610493906065906020840190612cb4565b507f113ac889396ba7fb22b98d97cc6e90f009ca8ea79a91f79f25f789e1e087fa4d8133426040516104c793929190613120565b60405180910390a150565b6104da611e5f565b606880546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03821673345efd26098e173f811e3b9af1b0e0a11872b38b0361052a57506000919050565b6001600160a01b03821673bd0c5ccd85d5831b10e3e49527b8cd67e2efaf390361055657506001919050565b6001600160a01b038216732f3e8ec88c01593d10ca9461c807660ff2d8db280361058257506002919050565b6001600160a01b03821673b7f154bb5491565d215f4eb1c3fe3e84960627af036105ae57506003919050565b6001600160a01b03821673e6b0de8f4b31f137d3c59b5a0a71e66e7d504ef9036105da57506004919050565b816040516303b1166f60e61b81526004016105f59190612e54565b60405180910390fd5b919050565b606854600090600160a01b900460ff161561065057645052494d4560d81b600061062c82611ebe565b90508361063d826305f5e100613195565b61064791906131c2565b925050506106f2565b6000836001600160a01b031663885a08e06040518163ffffffff1660e01b8152600401602060405180830381865afa158015610690573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b491906131d6565b9050634e3b29206305f5e1006106ca8584613195565b6106d491906131c2565b11156106ef576106ec836701d24b2dfac520006131c2565b90505b90505b92915050565b610700611e5f565b606680546001600160a01b0319166001600160a01b0383169081179091556040805191825233602083015242908201527f0fce8ca0e21ef947788ca67a8b70d53df8a6eec19241eca622a0f4a695ac3eca906060016104c7565b600080610765611f2e565b9050600061077282611fdc565b61ffff1690508060000361079957604051632154bfcf60e21b815260040160405180910390fd5b6107a46002836131ef565b915060005b8181101561086c5760006107bc84612016565b90506000806107cc6068876131ef565b905060006107da8236613202565b9050803592508265ffffffffffff1660000361080957604051630336dc9d60e41b815260040160405180910390fd5b87600003610821578265ffffffffffff169750610849565b878365ffffffffffff16146108495760405163d9d1f46560e01b815260040160405180910390fd5b61085384886131ef565b965050505050808061086490613215565b9150506107a9565b50505090565b600080805b606554811015610cfc57606654606580546000926001600160a01b03169163f823f1e091859081106108ab576108ab61322e565b6000918252602091829020015460408051633684184360e21b815290516001600160a01b039092169263da10610c926004808401938290030181865afa1580156108f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091d9190613244565b6040518263ffffffff1660e01b81526004016109399190612e54565b602060405180830381865afa158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a91906131d6565b90506000606583815481106109915761099161322e565b6000918252602091829020015460408051633684184360e21b815290516001600160a01b039092169263da10610c926004808401938290030181865afa1580156109df573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a039190613244565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a649190613261565b60ff1690506000610a7483611ebe565b90506000610aa960658681548110610a8e57610a8e61322e565b6000918252602090912001546001600160a01b031683610603565b9050600060658681548110610ac057610ac061322e565b6000918252602090912001546040516370a0823160e01b81526001600160a01b03909116906370a0823190610af9908c90600401612e54565b602060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3a91906131d6565b9050600060658781548110610b5157610b5161322e565b600091825260209091200154604051631899cc6b60e31b81526001600160a01b039091169063c4ce635890610b8a908d90600401612e54565b602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906131d6565b90506000610bd98284613202565b9050600060658981548110610bf057610bf061322e565b60009182526020909120015460405163eddeebf360e01b81526001600160a01b038e81166004830152602482018890529091169063eddeebf390604401602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e91906131d6565b90508315610ce1576000610c8388600a613368565b610c8d9086613195565b9050610cb38285610ca36402540be4008b613195565b610cad9190613195565b83612052565b610cbd908d6131ef565b9b50610cd38284610ca36402540be4008b613195565b610cdd908c6131ef565b9a50505b50505050505050508080610cf490613215565b915050610877565b50915091565b606854604051633344a55560e01b8152600091829182916001600160a01b031690633344a55590610d37908790600401612e54565b602060405180830381865afa158015610d54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d789190613244565b90506001600160a01b0381161561108d576000610d93611cbf565b9050600081516001600160401b03811115610db057610db0612d2e565b604051908082528060200260200182016040528015610dd9578160200160208202803683370190505b50905060005b8251811015610f065760665483516001600160a01b039091169063f823f1e090859084908110610e1157610e1161322e565b60200260200101516001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e7a9190613244565b6040518263ffffffff1660e01b8152600401610e969190612e54565b602060405180830381865afa158015610eb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed791906131d6565b828281518110610ee957610ee961322e565b602090810291909101015280610efe81613215565b915050610ddf565b506000610f12826121cb565b905060005b8351811015611088576000848281518110610f3457610f3461322e565b60200260200101516001600160a01b0316636011163e876040518263ffffffff1660e01b8152600401610f679190612e54565b602060405180830381865afa158015610f84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa891906131d6565b90506000611065826402540be400868681518110610fc857610fc861322e565b6020026020010151610fda9190613195565b888681518110610fec57610fec61322e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611031573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110559190613261565b61106090600a613374565b612052565b905061107181896131ef565b97505050808061108090613215565b915050610f17565b505050505b5092915050565b60008060006110a28461169e565b9194509250905080156111285760675460405163011c0de760e61b81526001600160a01b0386811660048301526024820186905260448201859052606482018490529091169063470379c090608401600060405180830381600087803b15801561110b57600080fd5b505af115801561111f573d6000803e3d6000fd5b50505050611196565b606754604051631f859d6760e31b81526001600160a01b03868116600483015260248201869052604482018590529091169063fc2ceb3890606401600060405180830381600087803b15801561117d57600080fd5b505af1158015611191573d6000803e3d6000fd5b505050505b50505050565b6111a4611e5f565b6111ae60006121d6565b565b606581815481106111c057600080fd5b6000918252602090912001546001600160a01b0316905081565b60006111e4612228565b9050336001600160a01b038216146112565760405162461bcd60e51b815260206004820152602f60248201527f50656e64696e674f776e61626c653a2063616c6c6572206973206e6f7420746860448201526e32903832b73234b7339037bbb732b960891b60648201526084016105f5565b61125f816121d6565b611269600061223b565b50565b60008080611278611cbf565b905060006112858261224d565b905060005b82518110156114b45760008382815181106112a7576112a761322e565b60200260200101516001600160a01b031663c4ce6358886040518263ffffffff1660e01b81526004016112da9190612e54565b602060405180830381865afa1580156112f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131b91906131d6565b90506000818584815181106113325761133261322e565b60200260200101516001600160a01b03166370a082318a6040518263ffffffff1660e01b81526004016113659190612e54565b602060405180830381865afa158015611382573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113a691906131d6565b6113b09190613202565b905060008584815181106113c6576113c661322e565b60200260200101516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561140b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061142f9190613261565b61143a90600a613374565b905061146a836402540be4008787815181106114585761145861322e565b6020026020010151610cad9190613195565b61147490896131ef565b9750611492826402540be4008787815181106114585761145861322e565b61149c90886131ef565b965050505080806114ac90613215565b91505061128a565b505050915091565b600054610100900460ff16158080156114dc5750600054600160ff909116105b806114f65750303b1580156114f6575060005460ff166001145b6115595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016105f5565b6000805460ff19166001179055801561157c576000805461ff0019166101001790555b845161158f906065906020880190612cb4565b50606680546001600160a01b038087166001600160a01b031992831617909255606780549286169290911691909117905560688054831515600160a01b0260ff60a01b199091161790556115e16123ca565b8015611627576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b6033546001600160a01b031690565b611645611e5f565b6068805460ff60a01b1916600160a01b831515908102919091179091556040805191825233602083015242908201527ff85e9b14a3442aa137bf4cddc5f7039bf877c99d78b161457a577242f7ec96ac906060016104c7565b60008060008060405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090506000806116f487610872565b915091506000806117048961126c565b9150915060006117138a610d02565b606087018690526080870185905260a08701939093525060c085015260e0840152600091670de0b6b3a76400009161174a916131ef565b61175491906131c2565b90506000670de0b6b3a7640000600a8460c001518560a0015161177791906131ef565b61178191906131c2565b61178b91906131c2565b90506000670de0b6b3a7640000600a8560e001516117a991906131c2565b6117b391906131c2565b905060006117c184846123f9565b905060006117d86117d28387613202565b846123f9565b9050811561188d57600060036117ef600585613195565b6117f99190613195565b61180b90670de0b6b3a7640000613195565b9050808760200181815161181f91906131ef565b90525060a0870151600090670de0b6b3a76400009061184e9061184490600a906131c2565b8a606001516123f9565b61185891906131c2565b9050801561188a578361186b8284613195565b61187591906131c2565b8860400181815161188691906131ef565b9052505b50505b80156118d15760036118a0600183613195565b6118aa9190613195565b6118bc90670de0b6b3a7640000613195565b866020018181516118cd91906131ef565b9052505b6067546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611902908e90600401612e54565b602060405180830381865afa15801561191f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194391906131d6565b90506000876040015182101561195d575050604086015160015b600082896020015161196f9190613383565b9050600081121561199a5762015180611989600e836133a3565b61199391906133a3565b89526119b7565b6301e133806119aa6003836133a3565b6119b491906133a3565b89525b81156119e057886000015189602001518a604001519b509b509b505050505050505050506119fc565b8860000151896020015160009b509b509b505050505050505050505b9193909250565b60006106f28261240f565b6000611a18611cbf565b90506000805b8251811015611a7457336001600160a01b0316838281518110611a4357611a4361322e565b60200260200101516001600160a01b031603611a625760019150611a74565b80611a6c81613215565b915050611a1e565b5060005b606554811015611ad457336001600160a01b031660658281548110611a9f57611a9f61322e565b6000918252602090912001546001600160a01b031603611ac25760019150611ad4565b80611acc81613215565b915050611a78565b5080611b355760405162461bcd60e51b815260206004820152602a60248201527f4f6e6c7920506f6f6c206f7220735072696d652063616e2063616c6c207468696044820152693990333ab731ba34b7b760b11b60648201526084016105f5565b60675460405163bf18c23960e01b81526001600160a01b039091169063bf18c23990611b65908690600401612e54565b600060405180830381600087803b158015611b7f57600080fd5b505af1158015611b93573d6000803e3d6000fd5b50505050505050565b60005b8151811015611bdc57611bca828281518110611bbd57611bbd61322e565b6020026020010151611094565b80611bd481613215565b915050611b9f565b5050565b6000611bea612228565b905090565b611bf7611e5f565b6001600160a01b038116611c635760405162461bcd60e51b815260206004820152602d60248201527f50656e64696e674f776e61626c653a206e6577206f776e65722069732074686560448201526c207a65726f206164647265737360981b60648201526084016105f5565b611c6c8161223b565b806001600160a01b0316611c7e61162e565b6001600160a01b03167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b6112698161241a565b60606000606660009054906101000a90046001600160a01b03166001600160a01b03166366273c196040518163ffffffff1660e01b8152600401600060405180830381865afa158015611d16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d3e91908101906133d1565b9050600081516001600160401b03811115611d5b57611d5b612d2e565b604051908082528060200260200182016040528015611d84578160200160208202803683370190505b50905060005b825181101561108d5760665483516001600160a01b0390911690630edc25b690859084908110611dbc57611dbc61322e565b60200260200101516040518263ffffffff1660e01b8152600401611de291815260200190565b602060405180830381865afa158015611dff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e239190613244565b828281518110611e3557611e3561322e565b6001600160a01b039092166020928302919091019091015280611e5781613215565b915050611d8a565b33611e6861162e565b6001600160a01b0316146111ae5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105f5565b604080516001808252818301909252600091829190602080830190803683370190505090508281600081518110611ef757611ef761322e565b602002602001018181525050611f0c816121cb565b600081518110611f1e57611f1e61322e565b6020026020010151915050919050565b60006602ed57011e0000601f1936013581161480611f5f576040516373bb264f60e11b815260040160405180910390fd5b60003660291115611f8357604051632bcb7bc560e11b815260040160405180910390fd5b5060281936013560006009611f9e600362ffffff85166131ef565b611fa891906131ef565b905036611fb66002836131ef565b1115611fd55760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080611fea6020846131ef565b90503681111561200d57604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b60008060006120248461249a565b9092509050604e6120368260206131ef565b6120409084613195565b61204a91906131ef565b949350505050565b600080806000198587098587029250828110838203039150508060000361208b576000841161208057600080fd5b508290049050611fd5565b80841161209757600080fd5b60008486880980840393811190920391905060006120b7861960016131ef565b86169586900495938490049360008190030460010190506120d88184613195565b9093179260006120e9876003613195565b60021890506120f88188613195565b612103906002613202565b61210d9082613195565b90506121198188613195565b612124906002613202565b61212e9082613195565b905061213a8188613195565b612145906002613202565b61214f9082613195565b905061215b8188613195565b612166906002613202565b6121709082613195565b905061217c8188613195565b612187906002613202565b6121919082613195565b905061219d8188613195565b6121a8906002613202565b6121b29082613195565b90506121be8186613195565b9998505050505050505050565b60606106f2826124f1565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805160206134b68339815191525490565b6000805160206134b683398151915255565b6060600082516001600160401b0381111561226a5761226a612d2e565b604051908082528060200260200182016040528015612293578160200160208202803683370190505b50905060005b83518110156123c05760665484516001600160a01b039091169063f823f1e0908690849081106122cb576122cb61322e565b60200260200101516001600160a01b0316639d76ea586040518163ffffffff1660e01b8152600401602060405180830381865afa158015612310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123349190613244565b6040518263ffffffff1660e01b81526004016123509190612e54565b602060405180830381865afa15801561236d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061239191906131d6565b8282815181106123a3576123a361322e565b6020908102919091010152806123b881613215565b915050612299565b50611fd5816121cb565b600054610100900460ff166123f15760405162461bcd60e51b81526004016105f590613456565b6111ae6126b3565b600081831061240857816106ef565b5090919050565b60006106f2826126e2565b60006124286103e8836131c2565b90508042101561246657603c61243e4283613202565b1115611bdc5760405163b6b0916d60e01b8152600481018290524260248201526044016105f5565b60b46124728242613202565b1115611bdc57604051630321d0b560e01b8152600481018290524260248201526044016105f5565b6000808080806124ab6041876131ef565b905060006124c46124bd6020846131ef565b369061279d565b8035945090506124d581600361279d565b62ffffff9490941697933563ffffffff16965092945050505050565b6060600082516001600160401b0381111561250e5761250e612d2e565b604051908082528060200260200182016040528015612537578160200160208202803683370190505b509050600083516001600160401b0381111561255557612555612d2e565b60405190808252806020026020018201604052801561257e578160200160208202803683370190505b509050600084516001600160401b0381111561259c5761259c612d2e565b6040519080825280602002602001820160405280156125cf57816020015b60608152602001906001900390816125ba5790505b50905060005b855181101561262d576040805160038082526080820190925290602082016060803683370190505082828151811061260f5761260f61322e565b6020026020010181905250808061262590613215565b9150506125d5565b506000612638611f2e565b9050600061264582611fdc565b61ffff1690506126566002836131ef565b60405190925060005b8281101561269c5760006126768a898989896127a9565b905061268281866131ef565b94508260405250808061269490613215565b91505061265f565b506126a78487612a35565b98975050505050505050565b600054610100900460ff166126da5760405162461bcd60e51b81526004016105f590613456565b6111ae612b4d565b6000815160000361270657604051639e198af960e01b815260040160405180910390fd5b61270f82612b7d565b60006002835161271f91906131c2565b90506002835161272f91906134a1565b60000361278b57600061277e84612747600185613202565b815181106127575761275761322e565b60200260200101518584815181106127715761277161322e565b6020026020010151612bc5565b905061204a6002826131c2565b828181518110611f1e57611f1e61322e565b60006106ef8284613202565b6000806000806127b88561249a565b909250905060008080606081600d6127db6127d46020896131ef565b8990612bd1565b6127e591906131ef565b905060006127f76124bd60688d6131ef565b905060006128148361280a60418f6131ef565b6124bd91906131ef565b90506128208382612833565b9350826020850120945081359650612857565b60408051838152602081850181019092526000910183838237601f19019392505050565b6128688765ffffffffffff16611cb6565b61287c8561287760418f6131ef565b612bdd565b9550612887866104fc565b60ff1699505050505050505060008060005b84811015612a0f576128ac888583612c55565b909350915060005b8c518110156129fc578c81815181106128cf576128cf61322e565b602002602001015184036129ea5760008b82815181106128f1576128f161322e565b6020026020010151905061290a81896001901b16151590565b1580156129335750600360ff168d83815181106129295761292961322e565b6020026020010151105b156129e4578c828151811061294a5761294a61322e565b60200260200101805180919061295f90613215565b81525050838b83815181106129765761297661322e565b602002602001015160018f85815181106129925761299261322e565b60200260200101516129a49190613202565b815181106129b4576129b461322e565b60209081029190910101526001881b81178c83815181106129d7576129d761322e565b6020026020010181815250505b506129fc565b806129f481613215565b9150506128b4565b5080612a0781613215565b915050612899565b50505081602082612a2091906131ef565b612a2a9190613195565b6121be90604e6131ef565b6060600083516001600160401b03811115612a5257612a52612d2e565b604051908082528060200260200182016040528015612a7b578160200160208202803683370190505b509050600360005b8551811015612b435781858281518110612a9f57612a9f61322e565b60200260200101511015612aec57848181518110612abf57612abf61322e565b602002602001015182604051632b13aef560e01b81526004016105f5929190918252602082015260400190565b6000612b10878381518110612b0357612b0361322e565b6020026020010151611a03565b905080848381518110612b2557612b2561322e565b60209081029190910101525080612b3b81613215565b915050612a83565b5090949350505050565b600054610100900460ff16612b745760405162461bcd60e51b81526004016105f590613456565b6111ae336121d6565b8051602082016020820281019150805b8281101561119657815b81811015612bbc578151815180821015612bb2578084528183525b5050602001612b97565b50602001612b8d565b60006106ef82846131ef565b60006106ef8284613195565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015612c40573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080612c64604e876131ef565b90506000612c91612c8a612c796020896131ef565b612c848860016131ef565b90612bd1565b8390612bc5565b90506000612c9f368361279d565b80359960209091013598509650505050505050565b828054828255906000526020600020908101928215612d09579160200282015b82811115612d0957825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190612cd4565b50612d15929150612d19565b5090565b5b80821115612d155760008155600101612d1a565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612d6c57612d6c612d2e565b604052919050565b60006001600160401b03821115612d8d57612d8d612d2e565b5060051b60200190565b6001600160a01b038116811461126957600080fd5b600082601f830112612dbd57600080fd5b81356020612dd2612dcd83612d74565b612d44565b82815260059290921b84018101918181019086841115612df157600080fd5b8286015b84811015612e15578035612e0881612d97565b8352918301918301612df5565b509695505050505050565b600060208284031215612e3257600080fd5b81356001600160401b03811115612e4857600080fd5b61204a84828501612dac565b6001600160a01b0391909116815260200190565b600060208284031215612e7a57600080fd5b8135611fd581612d97565b60008060408385031215612e9857600080fd5b8235612ea381612d97565b946020939093013593505050565b600060208284031215612ec357600080fd5b5035919050565b803580151581146105fe57600080fd5b60008060008060808587031215612ef057600080fd5b84356001600160401b03811115612f0657600080fd5b612f1287828801612dac565b9450506020850135612f2381612d97565b92506040850135612f3381612d97565b9150612f4160608601612eca565b905092959194509250565b600060208284031215612f5e57600080fd5b6106ef82612eca565b60006020808385031215612f7a57600080fd5b82356001600160401b03811115612f9057600080fd5b8301601f81018513612fa157600080fd5b8035612faf612dcd82612d74565b81815260059190911b82018301908381019087831115612fce57600080fd5b928401925b82841015612fec57833582529284019290840190612fd3565b979650505050505050565b600060208083528351808285015260005b8181101561302457858101830151858201604001528201613008565b506000604082860101526040601f19601f8301168501019250505092915050565b6000602080838503121561305857600080fd5b82356001600160401b0381111561306e57600080fd5b8301601f8101851361307f57600080fd5b803561308d612dcd82612d74565b81815260059190911b820183019083810190878311156130ac57600080fd5b928401925b82841015612fec5783356130c481612d97565b825292840192908401906130b1565b6020808252825182820181905260009190848201906040850190845b818110156131145783516001600160a01b0316835292840192918401916001016130ef565b50909695505050505050565b606080825284519082018190526000906020906080840190828801845b828110156131625781516001600160a01b03168452928401929084019060010161313d565b5050506001600160a01b0395909516908301525060400152919050565b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176106f2576106f261317f565b634e487b7160e01b600052601260045260246000fd5b6000826131d1576131d16131ac565b500490565b6000602082840312156131e857600080fd5b5051919050565b808201808211156106f2576106f261317f565b818103818111156106f2576106f261317f565b6000600182016132275761322761317f565b5060010190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561325657600080fd5b8151611fd581612d97565b60006020828403121561327357600080fd5b815160ff81168114611fd557600080fd5b600181815b808511156132bf5781600019048211156132a5576132a561317f565b808516156132b257918102915b93841c9390800290613289565b509250929050565b6000826132d6575060016106f2565b816132e3575060006106f2565b81600181146132f957600281146133035761331f565b60019150506106f2565b60ff8411156133145761331461317f565b50506001821b6106f2565b5060208310610133831016604e8410600b8410161715613342575081810a6106f2565b61334c8383613284565b80600019048211156133605761336061317f565b029392505050565b60006106ef83836132c7565b60006106ef60ff8416836132c7565b818103600083128015838313168383128216171561108d5761108d61317f565b6000826133b2576133b26131ac565b600160ff1b8214600019841416156133cc576133cc61317f565b500590565b600060208083850312156133e457600080fd5b82516001600160401b038111156133fa57600080fd5b8301601f8101851361340b57600080fd5b8051613419612dcd82612d74565b81815260059190911b8201830190838101908783111561343857600080fd5b928401925b82841015612fec5783518252928401929084019061343d565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6000826134b0576134b06131ac565b50069056fe63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2a2646970667358221220f312e236d70a4b9a2846e3af563452777336d9ca12f9e36f96a28a49d8f6d46b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "getDataServiceId()": {
        "details": "This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.",
        "returns": {
          "_0": "dataServiceId being consumed by contract"
        }
      },
      "getUniqueSignersThreshold()": {
        "details": "This function should be overridden by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "updateBorrowersRegistry(address)": {
        "details": "Can only be called by the contract owner.",
        "params": {
          "newBorrowersRegistry": "The address of the new borrowers registry contract."
        }
      },
      "updateTokenManager(address)": {
        "details": "Can only be called by the contract owner.",
        "params": {
          "newTokenManager": "The address of the new token manager contract."
        }
      },
      "updateWhitelistedSPrimeContracts(address[])": {
        "details": "Can only be called by the contract owner.",
        "params": {
          "newWhitelistedSPrimeContracts": "An array of addresses representing the new list of whitelisted sPrime contracts."
        }
      },
      "validateTimestamp(uint256)": {
        "details": "This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp extracted from calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "updateBorrowersRegistry(address)": {
        "notice": "Updates the borrowers registry contract."
      },
      "updateTokenManager(address)": {
        "notice": "Updates the token manager contract."
      },
      "updateWhitelistedSPrimeContracts(address[])": {
        "notice": "Updates the list of whitelisted sPrime contracts."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 755,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 7153,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "whitelistedSPrimeContracts",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_contract(ISPrime)5592)dyn_storage"
      },
      {
        "astId": 7156,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "tokenManager",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ITokenManager)5816"
      },
      {
        "astId": 7159,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "vPrimeContract",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(vPrime)7132"
      },
      {
        "astId": 7162,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "borrowersRegistry",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IBorrowersRegistry)5256"
      },
      {
        "astId": 7164,
        "contract": "contracts/token/vPrimeControllerArbitrum.sol:vPrimeControllerArbitrum",
        "label": "useOraclePrimeFeed",
        "offset": 20,
        "slot": "104",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(ISPrime)5592)dyn_storage": {
        "base": "t_contract(ISPrime)5592",
        "encoding": "dynamic_array",
        "label": "contract ISPrime[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBorrowersRegistry)5256": {
        "encoding": "inplace",
        "label": "contract IBorrowersRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ISPrime)5592": {
        "encoding": "inplace",
        "label": "contract ISPrime",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenManager)5816": {
        "encoding": "inplace",
        "label": "contract ITokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(vPrime)7132": {
        "encoding": "inplace",
        "label": "contract vPrime",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}