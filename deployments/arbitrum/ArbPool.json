{
  "address": "0x5292aF35A0442f46Bb51d9d65F031A310D236399",
  "abi": [
    {
      "inputs": [],
      "name": "BorrowersRegistryNotConfigured",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsAvailableForUser",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        }
      ],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientPoolFunds",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientSurplus",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxPoolUtilisationBreached",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintToAddressZero",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "NotAContract",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotAuthorizedToBorrow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PoolFrozen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RepayingMoreThanWasBorrowed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SpenderZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TotalSupplyCapBreached",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "name": "TransferAmountExceedsBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToPoolAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferToZeroAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroDepositAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BorrowerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BorrowersRegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "name": "DepositLocked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_of",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositOnBehalfOf",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DepositorInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InterestCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "poolRewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolRewarderChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "calculator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RatesCalculatorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "VestingDistributorChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "contract IIndex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowersRegistry",
      "outputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "checkRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "containsOracleCalldata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositIndex",
      "outputs": [
        {
          "internalType": "contract IIndex",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_of",
          "type": "address"
        }
      ],
      "name": "depositOnBehalf",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFullPoolStatus",
      "outputs": [
        {
          "internalType": "uint256[5]",
          "name": "",
          "type": "uint256[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFullyVestedLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullyVestedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxPoolUtilisationForBorrowing",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getNotLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "notLockedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVPrimeControllerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "ratesCalculator_",
          "type": "address"
        },
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "borrowersRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract IIndex",
          "name": "depositIndex_",
          "type": "address"
        },
        {
          "internalType": "contract IIndex",
          "name": "borrowIndex_",
          "type": "address"
        },
        {
          "internalType": "address payable",
          "name": "tokenAddress_",
          "type": "address"
        },
        {
          "internalType": "contract IPoolRewarder",
          "name": "poolRewarder_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalSupplyCap_",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "borrowers",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "initializeBorrows",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "depositors",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "depositAmounts",
          "type": "uint256[]"
        }
      ],
      "name": "initializeDeposits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "isWithdrawalAmountAvailable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        }
      ],
      "name": "lockDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolRewarder",
      "outputs": [
        {
          "internalType": "contract IPoolRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ratesCalculator",
      "outputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "recoverSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "borrowersRegistry_",
          "type": "address"
        }
      ],
      "name": "setBorrowersRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IPoolRewarder",
          "name": "_poolRewarder",
          "type": "address"
        }
      ],
      "name": "setPoolRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "ratesCalculator_",
          "type": "address"
        }
      ],
      "name": "setRatesCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITokenManager",
          "name": "_tokenManager",
          "type": "address"
        }
      ],
      "name": "setTokenManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newTotalSupplyCap",
          "type": "uint256"
        }
      ],
      "name": "setTotalSupplyCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_distributor",
          "type": "address"
        }
      ],
      "name": "setVestingDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenAddress",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenManager",
      "outputs": [
        {
          "internalType": "contract ITokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupplyCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingDistributor",
      "outputs": [
        {
          "internalType": "contract VestingDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d9c9c28e0f43b7a3b1381ea05c9c7178a727d18cdaf2f8e808d4a8c3c84b785",
  "receipt": {
    "to": null,
    "from": "0x5Ee7673Ba06a87f125d14F2C009ec2C4dE02728C",
    "contractAddress": "0x5292aF35A0442f46Bb51d9d65F031A310D236399",
    "transactionIndex": 3,
    "gasUsed": "7146125",
    "logsBloom": "0x
    "blockHash": "0xafe81d6028bf3af948434f41f96424a116588ff7e9a70d91f08c7fffc823691b",
    "transactionHash": "0x6d9c9c28e0f43b7a3b1381ea05c9c7178a727d18cdaf2f8e808d4a8c3c84b785",
    "logs": [],
    "blockNumber": 261308850,
    "cumulativeGasUsed": "9231694",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 4,
  "solcInputHash": "2351a2b95a76b1dbe9e6ac8e04b8d032",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BorrowersRegistryNotConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsAvailableForUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientPoolFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSurplus\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxPoolUtilisationBreached\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorizedToBorrow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolFrozen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayingMoreThanWasBorrowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SpenderZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSupplyCapBreached\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"name\":\"TransferAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToPoolAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDepositAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BorrowerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BorrowersRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"DepositLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositOnBehalfOf\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DepositorInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"poolRewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolRewarderChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"calculator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RatesCalculatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VestingDistributorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"contract IIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowersRegistry\",\"outputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"containsOracleCalldata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositIndex\",\"outputs\":[{\"internalType\":\"contract IIndex\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_of\",\"type\":\"address\"}],\"name\":\"depositOnBehalf\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullPoolStatus\",\"outputs\":[{\"internalType\":\"uint256[5]\",\"name\":\"\",\"type\":\"uint256[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFullyVestedLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullyVestedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxPoolUtilisationForBorrowing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getNotLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"notLockedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVPrimeControllerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"ratesCalculator_\",\"type\":\"address\"},{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"borrowersRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract IIndex\",\"name\":\"depositIndex_\",\"type\":\"address\"},{\"internalType\":\"contract IIndex\",\"name\":\"borrowIndex_\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"tokenAddress_\",\"type\":\"address\"},{\"internalType\":\"contract IPoolRewarder\",\"name\":\"poolRewarder_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalSupplyCap_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"initializeBorrows\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"depositors\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositAmounts\",\"type\":\"uint256[]\"}],\"name\":\"initializeDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"isWithdrawalAmountAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"lockDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolRewarder\",\"outputs\":[{\"internalType\":\"contract IPoolRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ratesCalculator\",\"outputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"recoverSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"borrowersRegistry_\",\"type\":\"address\"}],\"name\":\"setBorrowersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPoolRewarder\",\"name\":\"_poolRewarder\",\"type\":\"address\"}],\"name\":\"setPoolRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"ratesCalculator_\",\"type\":\"address\"}],\"name\":\"setRatesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"_tokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTotalSupplyCap\",\"type\":\"uint256\"}],\"name\":\"setTotalSupplyCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_distributor\",\"type\":\"address\"}],\"name\":\"setVestingDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract ITokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupplyCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDistributor\",\"outputs\":[{\"internalType\":\"contract VestingDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract allowing user to deposit to and borrow ARB from a dedicated user account\",\"errors\":{\"InsufficientAllowance(uint256,uint256)\":[{\"params\":{\"allowance\":\"current allowance\",\"requested\":\"requested transfer amount\"}}],\"TransferAmountExceedsBalance(uint256,uint256)\":[{\"params\":{\"amount\":\"transfer amount\",\"balance\":\"available balance\"}}]},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"_user the address of queried depositor*\"},\"borrow(uint256)\":{\"details\":\"_amount the amount to be borrowedIt is only meant to be used by a SmartLoanDiamondProxy*\"},\"getFullyVestedLockedBalance(address)\":{\"details\":\"The fully vested locked balance is used in the governance mechanism of the system, specifically for the allocation of vPrime tokens. The method calculates the fully vested locked balance by iterating over all the locks of the account and summing up the amounts of those locks that are still active (i.e., their `unlockTime` is greater than the current block timestamp). However, the amount of each lock is scaled by the ratio of its `lockTime` to the `MAX_LOCK_TIME` (3 years). This means that the longer the lock time, the larger the contribution of the lock to the fully vested locked balance. The fully vested locked balance is used to calculate the maximum vPrime allocation for a user. Users accrue vPrime over a period of 3 years, from 0 to the maximum vPrime based on their 10-1 pairs of pool-deposit and sPrime. Locking pool deposits and sPrime immediately vests the vPrime.\",\"params\":{\"account\":\"The address of the account for which to calculate the fully vested locked balance.\"},\"returns\":{\"fullyVestedBalance\":\"The fully vested locked balance of the provided account.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"It is only meant to be used by a SmartLoanDiamondProxy*\"},\"setBorrowersRegistry(address)\":{\"details\":\"borrowersRegistry the address of borrowers registry*\"},\"setPoolRewarder(address)\":{\"details\":\"_poolRewarder the address of PoolRewarder*\"},\"setRatesCalculator(address)\":{\"details\":\"ratesCalculator the address of rates calculator*\"},\"setTotalSupplyCap(uint256)\":{\"details\":\"_newTotalSupplyCap new deposit cap*\"},\"setVestingDistributor(address)\":{\"details\":\"_distributor the address of vestingDistributor*\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"withdraw(uint256)\":{\"details\":\"_amount the amount to be withdrawn*\"}},\"title\":\"`ArbPool`\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the current deposited amount for the given user The value includes the interest rates earned at the current moment\"},\"borrow(uint256)\":{\"notice\":\"Borrows the specified amount It updates user borrowed balance, total borrowed amount and rates\"},\"deposit(uint256)\":{\"notice\":\"Deposits the amount It updates user deposited balance, total deposited and rates*\"},\"depositOnBehalf(uint256,address)\":{\"notice\":\"Deposits the amount on behalf of `_of` user. It updates `_of` user deposited balance, total deposited and rates*\"},\"getBorrowingRate()\":{\"notice\":\"Returns the current interest rate for borrowings*\"},\"getDepositRate()\":{\"notice\":\"Returns the current interest rate for deposits*\"},\"getFullPoolStatus()\":{\"notice\":\"Returns full pool status\"},\"getFullyVestedLockedBalance(address)\":{\"notice\":\"Calculates and returns the fully vested locked balance for a given account.\"},\"recoverSurplus(uint256,address)\":{\"notice\":\"Recovers the surplus funds resultant from difference between deposit and borrowing rates*\"},\"repay(uint256)\":{\"notice\":\"Repays the amount It updates user borrowed balance, total borrowed amount and rates\"},\"setBorrowersRegistry(address)\":{\"notice\":\"Sets the new borrowers registry contract. The borrowers registry decides if an account can borrow funds. Only the owner of the Contract can execute this function.\"},\"setPoolRewarder(address)\":{\"notice\":\"Sets the new Pool Rewarder. The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance. Only the owner of the Contract can execute this function.\"},\"setRatesCalculator(address)\":{\"notice\":\"Sets the new rate calculator. The calculator is an external contract that contains the logic for calculating deposit and borrowing rates. Only the owner of the Contract can execute this function.\"},\"setTotalSupplyCap(uint256)\":{\"notice\":\"Sets new totalSupplyCap limiting how much in total can be deposited to the Pool. Only the owner of the Contract can execute this function.\"},\"setVestingDistributor(address)\":{\"notice\":\"Sets the new Vesting Distributor. Only the owner of the Contract can execute this function.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws selected amount from the user deposits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/arbitrum/ArbPool.sol\":\"ArbPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x7a381362d355b7c2eff8cf9a2b0e0836d7b7c950b32f0fb65f1e4fc43c0c7379\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xd4da1675371846ec37f8a37fbaff7f19a57bf1a8b0de392f66db36d13b1cf074\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0x82ab78ed59f4a811f5ab5c32064099235d753f98df42c087476ddabbf0348f21\",\"license\":\"BUSL-1.1\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c2bfee98a59745a565435d8d8abe7a9391c35493;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./abstract/PendingOwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/ITokenManager.sol\\\";\\nimport \\\"./interfaces/IVPrimeController.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\nimport \\\"./VestingDistributor.sol\\\";\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is PendingOwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20, ProxyConnector {\\n    using TransferHelper for address payable;\\n    using Math for uint256;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    VestingDistributor public vestingDistributor; // Needs to stay here in order to preserve the storage layout\\n\\n    uint8 internal _decimals;\\n\\n    struct LockDetails {\\n        uint256 lockTime;\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n    mapping(address => LockDetails[]) public locks;\\n    uint256 public constant MAX_LOCK_TIME = 3 * 365 days;\\n\\n    ITokenManager public tokenManager;\\n\\n\\n    /* ========== METHODS ========== */\\n\\n\\n    function getLockedBalance(address account) public view returns (uint256) {\\n        uint256 lockedBalance = 0;\\n        for (uint i = 0; i < locks[account].length; i++) {\\n            if (locks[account][i].unlockTime > block.timestamp) {\\n                lockedBalance += locks[account][i].amount;\\n            }\\n        }\\n        return lockedBalance;\\n    }\\n\\n    function getNotLockedBalance(address account) public view returns (uint256 notLockedBalance) {\\n        uint256 lockedBalance = getLockedBalance(account);\\n        uint256 balance = balanceOf(account);\\n        if(balance < lockedBalance) {\\n            notLockedBalance = 0;\\n        } else {\\n            return balance - lockedBalance;\\n        }\\n    }\\n\\n\\n    function lockDeposit(uint256 amount, uint256 lockTime) public  {\\n        require(getNotLockedBalance(msg.sender) >= amount, \\\"Insufficient balance to lock\\\");\\n        require(lockTime <= MAX_LOCK_TIME, \\\"Cannot lock for more than 3 years\\\");\\n        locks[msg.sender].push(LockDetails(lockTime, amount, block.timestamp + lockTime));\\n\\n        emit DepositLocked(msg.sender, amount, lockTime, block.timestamp + lockTime);\\n\\n        notifyVPrimeController(msg.sender);\\n    }\\n\\n\\n    /**\\n     * @notice Calculates and returns the fully vested locked balance for a given account.\\n     * @dev The fully vested locked balance is used in the governance mechanism of the system, specifically for the allocation of vPrime tokens.\\n     * The method calculates the fully vested locked balance by iterating over all the locks of the account and summing up the amounts of those locks that are still active (i.e., their `unlockTime` is greater than the current block timestamp). However, the amount of each lock is scaled by the ratio of its `lockTime` to the `MAX_LOCK_TIME` (3 years). This means that the longer the lock time, the larger the contribution of the lock to the fully vested locked balance.\\n     * The fully vested locked balance is used to calculate the maximum vPrime allocation for a user. Users accrue vPrime over a period of 3 years, from 0 to the maximum vPrime based on their 10-1 pairs of pool-deposit and sPrime. Locking pool deposits and sPrime immediately vests the vPrime.\\n     * @param account The address of the account for which to calculate the fully vested locked balance.\\n     * @return fullyVestedBalance The fully vested locked balance of the provided account.\\n     */\\n    function getFullyVestedLockedBalance(address account) public view returns (uint256 fullyVestedBalance) {\\n        fullyVestedBalance = 0;\\n        for (uint i = 0; i < locks[account].length; i++) {\\n            if (locks[account][i].unlockTime > block.timestamp) { // Lock is still active\\n                fullyVestedBalance += locks[account][i].amount * locks[account][i].lockTime / MAX_LOCK_TIME;\\n            }\\n        }\\n    }\\n\\n    function setTokenManager(ITokenManager _tokenManager) public onlyOwner  {\\n        tokenManager = _tokenManager;\\n    }\\n\\n    function getVPrimeControllerAddress() public view returns (address) {\\n        if(address(tokenManager) != address(0)) {\\n            return tokenManager.getVPrimeControllerAddress();\\n        }\\n        return address(0);\\n    }\\n\\n    function initialize(\\n        IRatesCalculator ratesCalculator_,\\n        IBorrowersRegistry borrowersRegistry_,\\n        IIndex depositIndex_,\\n        IIndex borrowIndex_,\\n        address payable tokenAddress_,\\n        IPoolRewarder poolRewarder_,\\n        uint256 totalSupplyCap_\\n    ) public initializer {\\n        require(\\n            AddressUpgradeable.isContract(address(ratesCalculator_)) &&\\n                AddressUpgradeable.isContract(address(borrowersRegistry_)) &&\\n                AddressUpgradeable.isContract(address(depositIndex_)) &&\\n                AddressUpgradeable.isContract(address(borrowIndex_)) &&\\n                (AddressUpgradeable.isContract(address(poolRewarder_)) ||\\n                    address(poolRewarder_) == address(0)),\\n            \\\"Wrong init arguments\\\"\\n        );\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = totalSupplyCap_;\\n        _decimals = IERC20Metadata(tokenAddress_).decimals();\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n     **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner  {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n     **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if (\\n            !AddressUpgradeable.isContract(address(_poolRewarder)) &&\\n            address(_poolRewarder) != address(0)\\n        ) revert NotAContract(address(_poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(\\n        IRatesCalculator ratesCalculator_\\n    ) external onlyOwner  {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if (\\n            !AddressUpgradeable.isContract(address(ratesCalculator_)) &&\\n            address(ratesCalculator_) != address(0)\\n        ) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(\\n        IBorrowersRegistry borrowersRegistry_\\n    ) external onlyOwner  {\\n        if (!AddressUpgradeable.isContract(address(borrowersRegistry_)))\\n            revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new Vesting Distributor.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _distributor the address of vestingDistributor\\n     **/\\n    function setVestingDistributor(address _distributor) external onlyOwner  {\\n        if (\\n            !AddressUpgradeable.isContract(_distributor) && _distributor != address(0)\\n        ) revert NotAContract(_distributor);\\n        vestingDistributor = VestingDistributor(_distributor);\\n\\n        emit VestingDistributorChanged(_distributor, block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override nonReentrant  returns (bool) {\\n        if (recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if (recipient == address(this)) revert TransferToPoolAddress();\\n\\n        address account = msg.sender;\\n        _accumulateDepositInterest(account);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if (amount > transferrableAmount)\\n            revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if (\\n            address(poolRewarder) != address(0) &&\\n            amount != 0 &&\\n            !isDepositorExcludedFromRewarder(account) &&\\n            !isDepositorExcludedFromRewarder(recipient)\\n        ) {\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, account);\\n            if (unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(account, recipient, amount);\\n\\n        notifyVPrimeController(msg.sender);\\n        notifyVPrimeController(recipient);\\n\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool) {\\n        if (spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external  returns (bool) {\\n        if (spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if (currentAllowance < subtractedValue)\\n            revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external  override returns (bool) {\\n        if (spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override  nonReentrant returns (bool) {\\n        if (_allowed[sender][msg.sender] < amount)\\n            revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if (recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if (recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(sender);\\n        if (amount > transferrableAmount)\\n            revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(sender, amount, lockedAmount);\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if (\\n            address(poolRewarder) != address(0) &&\\n            amount != 0 &&\\n            !isDepositorExcludedFromRewarder(sender) &&\\n            !isDepositorExcludedFromRewarder(recipient)\\n        ) {\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if (unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        notifyVPrimeController(sender);\\n        notifyVPrimeController(recipient);\\n\\n        return true;\\n    }\\n\\n    function initializeDeposits(\\n        address[] calldata depositors,\\n        uint256[] calldata depositAmounts\\n    ) public virtual nonReentrant onlyOwner {\\n        require(depositAmounts.length == depositors.length, \\\"Arrays length mismatch\\\");\\n\\n        for(uint i = 0; i < depositors.length; i++) {\\n            uint256 _amount = depositAmounts[i];\\n            address _of = depositors[i];\\n\\n            if (_amount == 0) revert ZeroDepositAmount();\\n            require(_of != address(0), \\\"Address zero\\\");\\n            require(_of != address(this), \\\"Cannot deposit on behalf of pool\\\");\\n            require(_deposited[_of] == 0, \\\"Depositor already initialized\\\");\\n\\n//            _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n            _accumulateDepositInterest(_of);\\n\\n            if (totalSupplyCap != 0) {\\n                if (_deposited[address(this)] + _amount > totalSupplyCap)\\n                    revert TotalSupplyCapBreached();\\n            }\\n\\n//            _transferToPool(msg.sender, _amount);\\n\\n            _mint(_of, _amount);\\n            _deposited[address(this)] += _amount;\\n            _updateRates();\\n\\n            if (address(poolRewarder) != address(0) && !isDepositorExcludedFromRewarder(_of)) {\\n                poolRewarder.stakeFor(_amount, _of);\\n            }\\n\\n            emit DepositorInitialized(msg.sender, _of, _amount, block.timestamp);\\n\\n            notifyVPrimeController(_of);\\n        }\\n    }\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public  virtual {\\n        depositOnBehalf(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * Deposits the amount on behalf of `_of` user.\\n     * It updates `_of` user deposited balance, total deposited and rates\\n     **/\\n    function depositOnBehalf(\\n        uint256 _amount,\\n        address _of\\n    ) public virtual nonReentrant  {\\n        if (_amount == 0) revert ZeroDepositAmount();\\n        require(_of != address(0), \\\"Address zero\\\");\\n        require(_of != address(this), \\\"Cannot deposit on behalf of pool\\\");\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(_of);\\n\\n        if (totalSupplyCap != 0) {\\n            if (_deposited[address(this)] + _amount > totalSupplyCap)\\n                revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(_of, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0) && !isDepositorExcludedFromRewarder(_of)) {\\n            poolRewarder.stakeFor(_amount, _of);\\n        }\\n\\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\\n\\n        notifyVPrimeController(_of);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    function isWithdrawalAmountAvailable(address account, uint256 amount) public view returns (bool) {\\n        return amount <= getNotLockedBalance(account);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant  {\\n        require(isWithdrawalAmountAvailable(msg.sender, _amount) , \\\"Balance is locked\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n        _amount = Math.min(_amount, _deposited[msg.sender]);\\n\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this)))\\n            revert InsufficientPoolFunds();\\n\\n        if (_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        if (address(poolRewarder) != address(0) && !isDepositorExcludedFromRewarder(msg.sender)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n\\n        notifyVPrimeController(msg.sender);\\n    }\\n\\n    function initializeBorrows(address[] calldata borrowers, uint256[] calldata amounts) public virtual nonReentrant onlyOwner {\\n        require(borrowers.length == amounts.length, \\\"Arrays length mismatch\\\");\\n\\n        for(uint i = 0; i < borrowers.length; i++) {\\n            address _borrower = borrowers[i];\\n            uint256 _amount = amounts[i];\\n            if(!checkIfCanBorrow(_borrower)) {\\n                revert NotAuthorizedToBorrow();\\n            }\\n            require(borrowed[_borrower] == 0, \\\"Borrower already initialized\\\");\\n//            if (_amount > IERC20(tokenAddress).balanceOf(address(this)))\\n//                revert InsufficientPoolFunds();\\n\\n            _accumulateBorrowingInterest(_borrower);\\n\\n            borrowed[_borrower] += _amount;\\n            borrowed[address(this)] += _amount;\\n\\n//            _transferFromPool(msg.sender, _amount);\\n\\n            _updateRates();\\n\\n            emit BorrowerInitialized(msg.sender, _borrower, _amount, block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant  {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this)))\\n            revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant  {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if (amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    function notifyVPrimeController(address account) internal {\\n        address vPrimeControllerAddress = getVPrimeControllerAddress();\\n        if(vPrimeControllerAddress != address(0)){\\n            if(containsOracleCalldata()) {\\n                proxyCalldata(\\n                    vPrimeControllerAddress,\\n                    abi.encodeWithSignature\\n                    (\\\"updateVPrimeSnapshot(address)\\\", account),\\n                    false\\n                );\\n            } else {\\n                IVPrimeController(vPrimeControllerAddress).setUserNeedsUpdate(account);\\n            }\\n        }\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function name() public pure virtual returns (string memory _name) {\\n        _name = \\\"\\\";\\n    }\\n\\n    function symbol() public pure virtual returns (string memory _symbol) {\\n        _symbol = \\\"\\\";\\n    }\\n\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing()\\n        public\\n        view\\n        virtual\\n        returns (uint256)\\n    {\\n        return 0.925e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return\\n            ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns full pool status\\n     */\\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\\n        return [\\n            totalSupply(),\\n            getDepositRate(),\\n            getBorrowingRate(),\\n            totalBorrowed(),\\n            getMaxPoolUtilisationForBorrowing()\\n        ];\\n    }\\n\\n    function isDepositorExcludedFromRewarder(address _depositor) internal view returns (bool) {\\n        if(\\n            _depositor == 0x1d3b1350026195670F8b228711977561Fe3E6001 ||\\n            _depositor == 0xf03E2984e549ddc747bc709E6c6eF4791882A502 ||\\n            _depositor == 0x6edBA4a5dbB3aEc671f2E1b16a67FA3A076a2ed8 ||\\n            _depositor == 0x114989e03993EDc97a5946bBb7Be885EF0aEe9Eb\\n        ) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function containsOracleCalldata() public view returns (bool) {\\n        // Checking if the calldata ends with the RedStone marker\\n        bool hasValidRedstoneMarker;\\n        assembly {\\n            let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n            hasValidRedstoneMarker := eq(\\n                REDSTONE_MARKER_MASK,\\n                and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n            )\\n        }\\n        return hasValidRedstoneMarker;\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(\\n        uint256 amount,\\n        address account\\n    ) public onlyOwner nonReentrant  {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if (amount > balance) revert InsufficientPoolFunds();\\n        if (surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if (to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if (amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if (amount > transferrableAmount)\\n            revert BurnAmountExceedsAvailableForUser();\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _getAmounts(\\n        address account\\n    ) internal view returns (uint256 lockedAmount, uint256 transferrableAmount) {\\n        if (address(vestingDistributor) != address(0)) {\\n            lockedAmount = vestingDistributor.locked(account);\\n            if (lockedAmount > 0) {\\n                transferrableAmount =\\n                    _deposited[account] -\\n                    (lockedAmount - vestingDistributor.availableToWithdraw(account));\\n            } else {\\n                transferrableAmount = _deposited[account];\\n            }\\n        } else {\\n            transferrableAmount = _deposited[account];\\n        }\\n    }\\n\\n    function _updateWithdrawn(\\n        address account,\\n        uint256 amount,\\n        uint256 lockedAmount\\n    ) internal {\\n        uint256 availableUnvested = _deposited[account] - lockedAmount;\\n        if (\\n            amount > availableUnvested && address(vestingDistributor) != address(0)\\n        ) {\\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\\n        }\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if (address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(\\n            ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply)\\n        );\\n        borrowIndex.setRate(\\n            ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply)\\n        );\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    function checkIfCanBorrow(address account) internal view returns (bool) {\\n        if (address(borrowersRegistry) == address(0))\\n            revert BorrowersRegistryNotConfigured();\\n        if (!borrowersRegistry.canBorrow(account))\\n            revert NotAuthorizedToBorrow();\\n        return true;\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if (address(borrowersRegistry) == address(0))\\n            revert BorrowersRegistryNotConfigured();\\n        if (!borrowersRegistry.canBorrow(msg.sender))\\n            revert NotAuthorizedToBorrow();\\n        if (totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if (\\n            (totalBorrowed() * 1e18) / totalSupply() >\\n            getMaxPoolUtilisationForBorrowing()\\n        ) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user deposits funds on behalf of other user\\n     * @param user the address performing the deposit\\n     * @param _of the address on behalf of which the deposit is being performed\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event DepositOnBehalfOf(\\n        address indexed user,\\n        address indexed _of,\\n        uint256 value,\\n        uint256 timestamp\\n    );\\n\\n    event DepositorInitialized(\\n        address indexed user,\\n        address indexed depositor,\\n        uint256 value,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    event BorrowerInitialized(address indexed user, address indexed borrower, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(\\n        address indexed user,\\n        uint256 value,\\n        uint256 timestamp\\n    );\\n\\n    /**\\n     * @dev emitted after changing borrowers registry\\n     * @param registry an address of the newly set borrowers registry\\n     * @param timestamp of the borrowers registry change\\n     **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after changing rates calculator\\n     * @param calculator an address of the newly set rates calculator\\n     * @param timestamp of the borrowers registry change\\n     **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after changing pool rewarder\\n     * @param poolRewarder an address of the newly set pool rewarder\\n     * @param timestamp of the pool rewarder change\\n     **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n\\n    /**\\n     * @dev emitted after the user locks deposit\\n     * @param user the address that locks the deposit\\n     * @param amount the amount locked\\n     * @param lockTime the time for which the deposit is locked\\n     * @param unlockTime the time when the deposit will be unlocked\\n     **/\\n    event DepositLocked(address indexed user, uint256 amount, uint256 lockTime, uint256 unlockTime);\\n    \\n    /**\\n     * @dev emitted after changing vesting distributor\\n     * @param distributor an address of the newly set distributor\\n     * @param timestamp of the distributor change\\n     **/\\n    event VestingDistributorChanged(\\n        address indexed distributor,\\n        uint256 timestamp\\n    );\\n\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    // ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    // ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    // ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    // ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    // ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    // This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // ERC20: burn amount exceeds current amount available (including vesting)\\n    error BurnAmountExceedsAvailableForUser();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\\n\",\"keccak256\":\"0x27e70fb1f7ec4dcb2450a120e2afff6eb40f4c6332f848e6b5a52b255fca9c2a\",\"license\":\"BUSL-1.1\"},\"contracts/VestingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VestingDistributor\\n * @dev Contract distributing pool's spread among vesting participants.\\n */\\ncontract VestingDistributor {\\n\\n    Pool immutable pool;\\n    IERC20Metadata immutable poolToken;\\n    address keeper;\\n    address pendingKeeper;\\n\\n    uint256 totalLockedMultiplied;\\n    address[] public participants;\\n    mapping(address => uint256) public locked;\\n    mapping(address => uint256) public withdrawn;\\n    mapping(address => uint256) public unvestingTime;\\n    mapping(address => uint256) public unlockTimestamp;\\n    mapping(address => uint256) public multiplier;\\n    mapping(uint256 => uint256) rewardAmount;\\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\\n    mapping(uint256 => uint256) numRewardDistributed;\\n\\n    uint256 lastUpdated;\\n    uint256 updateInterval = 6 hours;\\n\\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\\n\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"Unauthorized: onlyPool\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"Unauthorized: onlyKeeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingKeeper() {\\n        require(msg.sender == pendingKeeper, \\\"Unauthorized: onlyPendingKeeper\\\");\\n        _;\\n    }\\n\\n    constructor(address poolAddress, address keeperAddress) {\\n        pool = Pool(poolAddress);\\n        poolToken = IERC20Metadata(pool.tokenAddress());\\n        keeper = keeperAddress;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    function transferKeeper(address keeperAddress) external onlyKeeper {\\n        pendingKeeper = keeperAddress;\\n    }\\n\\n    function acceptKeeper() external onlyPendingKeeper {\\n        keeper = pendingKeeper;\\n        pendingKeeper = address(0);\\n    }\\n\\n    /**\\n     * Add vesting participant (msg.sender)\\n     **/\\n    function startVesting(uint256 amount, uint256 time) public {\\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\\n\\n        participants.push(msg.sender);\\n        locked[msg.sender] = amount;\\n        unvestingTime[msg.sender] = time;\\n        uint256 _multiplier = getMultiplier(time);\\n        multiplier[msg.sender] = _multiplier;\\n\\n        totalLockedMultiplied += amount * _multiplier / 1e18;\\n    }\\n\\n    /**\\n     * Increase vesting of msg.sender\\n     **/\\n    function increaseVesting(uint256 amount) public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\\n\\n        locked[msg.sender] += amount;\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Unlock funds - start of unvesting\\n     **/\\n    function unlock() public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n\\n        unlockTimestamp[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * Check how much user can withdraw\\n     **/\\n    function availableToWithdraw(address account) public view returns (uint256) {\\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\\n        if (unlockTimestamp[account] == 0) revert UserLocked();\\n\\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\\n\\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\\n    }\\n\\n    /**\\n     * Gets pool's spread and distributes among vesting participants.\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    //TODO: run periodically by bots\\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\\n\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n\\n        if (rewardAmount[lastUpdated] == 0) {\\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\\n        }\\n        uint256 rewards = rewardAmount[lastUpdated];\\n\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            address participant = participants[i];\\n            if (rewardDistributed[lastUpdated][participant]) {\\n                continue;\\n            }\\n\\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\\n\\n            pool.transfer(participant, participantReward);\\n\\n            rewardDistributed[lastUpdated][participant] = true;\\n            ++numRewardDistributed[lastUpdated];\\n            if (numRewardDistributed[lastUpdated] == participants.length) {\\n                lastUpdated = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    //TODO: run periodically by bots\\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n        for (uint256 i = fromIndex; i <= toIndex;) {\\n            address participant = participants[i];\\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\\n\\n                unvestingTime[participant] = 0;\\n                locked[participant] = 0;\\n                unlockTimestamp[participant] = 0;\\n                withdrawn[participant] = 0;\\n                multiplier[participant] = 0;\\n\\n                participants[i] = participants[participants.length - 1];\\n                participants.pop();\\n                --toIndex;\\n            } else {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\\n        withdrawn[account] += amount;\\n        if (withdrawn[account] > availableToWithdraw(account)) {\\n            revert WithdrawMoreThanLocked();\\n        }\\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\\n    }\\n\\n    function getMultiplier(uint256 time) public pure returns (uint256){\\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\\n\\n        return 1e18;\\n    }\\n\\n\\n    // Trying to distribute before the update interval has been reached\\n    error DistributeTooEarly();\\n\\n    // Already participates in vesting\\n    error AlreadyLocked();\\n\\n    // Vesting time is out of range\\n    error InvalidVestingTime();\\n\\n    // Insufficient user balance of pool's tokens\\n    error InsufficientPoolBalance();\\n\\n    // User not locked\\n    error UserNotLocked();\\n\\n    // User funds are locked\\n    error UserLocked();\\n\\n    // Too late\\n    error TooLate();\\n\\n    // Withdraw amount is more than locked\\n    error WithdrawMoreThanLocked();\\n}\",\"keccak256\":\"0x171e59daca51f73e77c784f20da3d62eb7721f619ba76b6f8ba09395dc2e1a8d\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract PendingOwnableUpgradeable is OwnableUpgradeable, IPendingOwnableUpgradeable {\\n    // keccak256(\\\"pending.owner.slot\\\") = 0x63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2\\n    bytes32 private constant _PENDING_OWNER_SLOT = 0x63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2;\\n\\n    event OwnershipTransferRequested(address indexed from, address indexed to);\\n\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __Ownable_init();\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override(OwnableUpgradeable, IPendingOwnableUpgradeable) onlyOwner {\\n        require(newOwner != address(0), \\\"PendingOwnable: new owner is the zero address\\\");\\n        _setPendingOwner(newOwner);\\n        emit OwnershipTransferRequested(owner(), newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual override {\\n        address pendingOwner = _getPendingOwner();\\n        require(msg.sender == pendingOwner, \\\"PendingOwnable: caller is not the pending owner\\\");\\n        _transferOwnership(pendingOwner);\\n        _setPendingOwner(address(0));\\n    }\\n\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _getPendingOwner();\\n    }\\n\\n    function _getPendingOwner() internal view returns (address) {\\n        address pendingOwner;\\n        bytes32 slot = _PENDING_OWNER_SLOT;\\n        assembly {\\n            pendingOwner := sload(slot)\\n        }\\n        return pendingOwner;\\n    }\\n\\n    function _setPendingOwner(address newOwner) private {\\n        bytes32 slot = _PENDING_OWNER_SLOT;\\n        assembly {\\n            sstore(slot, newOwner)\\n        }\\n    }\\n}\",\"keccak256\":\"0xfde0a2746ea2b29b13049caf81c2cc11c27c316e48f3d2c4124c260a79b687de\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/arbitrum/ArbPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: dd55c504f56a3b35ef5ee926b79820670a9f8344;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../Pool.sol\\\";\\n\\n\\n/**\\n * @title `ArbPool`\\n * @dev Contract allowing user to deposit to and borrow ARB from a dedicated user account\\n */\\ncontract ArbPool is Pool {\\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\\n        return 0.925e18;\\n    }\\n\\n    function name() public virtual override pure returns(string memory _name){\\n        _name = \\\"DeltaPrimeArbibtrum\\\";\\n    }\\n\\n    function symbol() public virtual override pure returns(string memory _symbol){\\n        _symbol = \\\"DPARB\\\";\\n    }\\n\\n    function decimals() public virtual override pure returns(uint8 decimals){\\n        decimals = 18;\\n    }\\n}\",\"keccak256\":\"0x9174064aee3b6ecb2b43da006cd6f3307d9d92223fa0780d9d8e0d3931ec94e9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\ninterface IPendingOwnableUpgradeable {\\n    function transferOwnership(address newOwner) external;\\n    function acceptOwnership() external;\\n    function pendingOwner() external view returns (address);\\n}\",\"keccak256\":\"0xe22571fec2c0fe9c804d560317f59ffb7efbe1036d12a3fa1d67319450ba60df\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function getVPrimeControllerAddress ( ) external view returns ( address );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function identifierToExposureGroup ( bytes32 _asset) external view returns ( bytes32 );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setMaxProtocolsExposure (bytes32[] memory groupIdentifiers, uint256[] memory maxExposures) external;\\n    function setIdentifiersToExposureGroups (bytes32[] memory identifiers, bytes32[] memory exposureGroups) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n    function increasePendingExposure ( bytes32 , address, uint256 ) external;\\n    function setPendingExposureToZero ( bytes32, address ) external;\\n}\",\"keccak256\":\"0xa22e1382bb5c6095523b18a851a6f75083d6d72cffb678b8fb81a59a96191d0c\"},\"contracts/interfaces/IVPrimeController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IVPrimeController {\\n    function updateVPrimeSnapshotsForAccounts(address[] memory accounts) external;\\n    function updateVPrimeSnapshot(address userAddress) external;\\n    function setUserNeedsUpdate(address userAddress) external;\\n}\",\"keccak256\":\"0x706f6a58b4041c0f7976cf08511e549ba179f243b09162acee29b46ec2baf657\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102a95760003560e01c80630572b0cc146102ae57806306fdde03146102b85780630790ef9a146102f957806307bbebdd1461030c5780630941cb3d1461032c578063095ea7b31461035a5780630d1870df1461037d5780631457db34146103855780631460e3901461039857806318160ddd146103ab57806323b872dd146103b357806329194a7c146103c65780632a709b14146103d95780632aeaa291146103ec5780632e1a7d4d146103f4578063313ce5671461040757806331d05b1114610416578063371fd8e614610429578063395093511461043c57806341da9b541461044f5780634c19386c1461046257806355a547d51461046a5780636011163e1461047257806361215aa8146104855780636ca6d5d0146104935780636cf55ea2146104a657806370a08231146104b957806370d4cea0146104cc578063715018a6146102b6578063726cd415146104df57806379ba5097146104e75780637b898939146104ef5780637cb2b79c146105025780637f75ad0f146105155780638c1a3811146105285780638da5cb5b1461053b57806395d89b41146105435780639d76ea5814610564578063a457c2d714610577578063a9059cbb1461058a578063aa5af0fd1461059d578063ab9eb148146105b0578063b425f802146105c3578063b6b55f25146105f1578063b75c42bd14610604578063b790634e14610619578063bb102aea14610621578063c40868931461062a578063c4ce63581461063d578063c5ebeaec14610650578063d06dca8914610663578063dd62ed3e14610676578063e2b9442e146106af578063e30c3978146106c2578063ee61bd6e146106ca578063f2fde38b146106dd578063f36b2425146106f0578063fa78668f146106f8578063fc68f66114610703575b600080fd5b6102b6610716565b005b60408051808201909152601381527244656c74615072696d6541726269627472756d60681b60208201525b6040516102f09190613d85565b60405180910390f35b6102b6610307366004613dad565b61077a565b60a15461031f906001600160a01b031681565b6040516102f09190613ddd565b61034c61033a366004613df1565b609a6020526000908152604090205481565b6040519081526020016102f0565b61036d610368366004613e0e565b610882565b60405190151581526020016102f0565b61036d6108fe565b6102b6610393366004613df1565b610912565b6102b66103a6366004613e3a565b6109b6565b61034c610c62565b61036d6103c1366004613ec7565b610c72565b6102b66103d4366004613f53565b610fa7565b60a35461031f906001600160a01b031681565b61034c611184565b6102b6610402366004613fbe565b6111f4565b604051601281526020016102f0565b6102b6610424366004613fbe565b611453565b6102b6610437366004613fbe565b611460565b61036d61044a366004613e0e565b611549565b61036d61045d366004613e0e565b6115f6565b61034c61160b565b61034c611616565b61034c610480366004613df1565b61172e565b670cd64299613c800061034c565b609d5461031f906001600160a01b031681565b6102b66104b4366004613dad565b6117b5565b61034c6104c7366004613df1565b611a23565b6102b66104da366004613df1565b611a69565b61031f611b17565b6102b6611ba8565b609e5461031f906001600160a01b031681565b6102b6610510366004613df1565b611c37565b61034c610523366004613df1565b611c61565b6102b6610536366004613df1565b611ca6565b61031f611d3a565b604080518082019091526005815264222820a92160d91b60208201526102e3565b60a05461031f906001600160a01b031681565b61036d610585366004613e0e565b611d49565b61036d610598366004613e0e565b611e1d565b609f5461031f906001600160a01b031681565b6102b66105be366004613f53565b61209b565b6105d66105d1366004613e0e565b61236c565b604080519384526020840192909252908201526060016102f0565b6102b66105ff366004613fbe565b6123ae565b61060c6123b8565b6040516102f09190613fd7565b61034c61240f565b61034c60975481565b61034c610638366004613df1565b612450565b61034c61064b366004613df1565b61251d565b6102b661065e366004613fbe565b61263d565b609c5461031f906001600160a01b031681565b61034c610684366004614008565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b6102b66106bd366004614036565b6128ba565b61031f612a2b565b609b5461031f906001600160a01b031681565b6102b66106eb366004613df1565b612a35565b61034c612afc565b61034c6305a39a8081565b6102b6610711366004613df1565b612b18565b609d546040516311305c1f60e11b81526001600160a01b0390911690632260b83e90610746903390600401613ddd565b600060405180830381600087803b15801561076057600080fd5b505af1158015610774573d6000803e3d6000fd5b50505050565b610782612b96565b61078a612bf5565b60a0546040516370a0823160e01b81526000916001600160a01b0316906370a08231906107bb903090600401613ddd565b602060405180830381865afa1580156107d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fc9190614058565b90506000610808610c62565b61081061160b565b61081a9084614087565b610824919061409a565b905081841115610847576040516316d5c93f60e21b815260040160405180910390fd5b83811015610868576040516394290ab960e01b815260040160405180910390fd5b6108728385612c4e565b505061087e6001606555565b5050565b60006001600160a01b0383166108ab57604051633d6601c760e11b815260040160405180910390fd5b3360008181526098602090815260408083206001600160a01b03881680855290835292819020869055518581529192916000805160206142e8833981519152910160405180910390a35060015b92915050565b6602ed57011e0000601f1936013581161490565b61091a612b96565b61092381612c6c565b15801561093857506001600160a01b03811615155b1561096157806040516322a2d07b60e21b81526004016109589190613ddd565b60405180910390fd5b609d80546001600160a01b0319166001600160a01b0383169081179091556040514281527f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e5906020015b60405180910390a250565b600054610100900460ff16158080156109d65750600054600160ff909116105b806109f757506109e530612c6c565b1580156109f7575060005460ff166001145b610a5a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610958565b6000805460ff191660011790558015610a7d576000805461ff0019166101001790555b610a8688612c6c565b8015610a965750610a9687612c6c565b8015610aa65750610aa686612c6c565b8015610ab65750610ab685612c6c565b8015610ad85750610ac683612c6c565b80610ad857506001600160a01b038316155b610b1b5760405162461bcd60e51b815260206004820152601460248201527357726f6e6720696e697420617267756d656e747360601b6044820152606401610958565b609c80546001600160a01b03199081166001600160a01b038a811691909117909255609b805482168b8416179055609e80548216898416179055609f80548216888416179055609d8054821686841617905560a08054909116918616918217905560978390556040805163313ce56760e01b8152905163313ce567916004818101926020929091908290030181865afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be091906140ad565b60a160146101000a81548160ff021916908360ff160217905550610c02612c7b565b610c0a612caa565b610c12612cd9565b8015610c58576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6000610c6d30611a23565b905090565b6000610c7c612bf5565b6001600160a01b0384166000908152609860209081526040808320338452909152902054821115610ce7576001600160a01b03841660009081526098602090815260408083203384529091529081902054905163054365bb60e31b81526109589184916004016140d0565b6001600160a01b038316610d0e57604051633a954ecd60e21b815260040160405180910390fd5b306001600160a01b03841603610d375760405163ed728e5760e01b815260040160405180910390fd5b610d4084612ebc565b600080610d4c86612fe7565b9150915080841115610d755783816040516350d2479d60e11b81526004016109589291906140d0565b610d8086858461313a565b6001600160a01b03861660009081526099602052604081208054869290610da890849061409a565b90915550506001600160a01b038616600090815260986020908152604080832033845290915281208054869290610de090849061409a565b90915550610def905085612ebc565b6001600160a01b03851660009081526099602052604081208054869290610e17908490614087565b9091555050609d546001600160a01b031615801590610e3557508315155b8015610e475750610e45866131e5565b155b8015610e595750610e57856131e5565b155b15610f4357609d54604051630d5dbdb360e21b81526000916001600160a01b031690633576f6cc90610e919088908b906004016140de565b6020604051808303816000875af1158015610eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ed49190614058565b90508015610f4157609d546040516328ba35d960e11b81526001600160a01b03909116906351746bb290610f0e9084908a906004016140de565b600060405180830381600087803b158015610f2857600080fd5b505af1158015610f3c573d6000803e3d6000fd5b505050505b505b846001600160a01b0316866001600160a01b03166000805160206142c883398151915286604051610f7691815260200190565b60405180910390a3610f8786613291565b610f9085613291565b600192505050610fa06001606555565b9392505050565b610faf612bf5565b610fb7612b96565b828114610fd65760405162461bcd60e51b8152600401610958906140f5565b60005b83811015611179576000858583818110610ff557610ff5614125565b905060200201602081019061100a9190613df1565b9050600084848481811061102057611020614125565b90506020020135905061103282613330565b61104f57604051637582fa9b60e11b815260040160405180910390fd5b6001600160a01b0382166000908152609a6020526040902054156110b45760405162461bcd60e51b815260206004820152601c60248201527b109bdc9c9bddd95c88185b1c9958591e481a5b9a5d1a585b1a5e995960221b6044820152606401610958565b6110bd826133f2565b6001600160a01b0382166000908152609a6020526040812080548392906110e5908490614087565b9091555050306000908152609a602052604081208054839290611109908490614087565b909155506111179050612cd9565b816001600160a01b0316336001600160a01b03167f3b9a3aee39a2a7e2a67dfc91feeddddff04dccb47d2f13be4d8938e08ffae5c9834260405161115c9291906140d0565b60405180910390a3505080806111719061413b565b915050610fd9565b506107746001606555565b609d546040516246613160e11b81526000916001600160a01b031690628cc262906111b3903390600401613ddd565b602060405180830381865afa1580156111d0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d9190614058565b6111fc612bf5565b61120633826115f6565b6112465760405162461bcd60e51b815260206004820152601160248201527010985b185b98d9481a5cc81b1bd8dad959607a1b6044820152606401610958565b61124f33612ebc565b3360009081526099602052604090205461126a9082906134f8565b60a0546040516370a0823160e01b81529192506001600160a01b0316906370a082319061129b903090600401613ddd565b602060405180830381865afa1580156112b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dc9190614058565b8111156112fc576040516316d5c93f60e21b815260040160405180910390fd5b3060009081526099602052604090205481111561132c57604051630bba337f60e11b815260040160405180910390fd5b3060009081526099602052604090208054829003905561134c338261350e565b611354612cd9565b61135e3382612c4e565b609d546001600160a01b03161580159061137e575061137c336131e5565b155b156113fa57609d54604051630d5dbdb360e21b81526001600160a01b0390911690633576f6cc906113b590849033906004016140de565b6020604051808303816000875af11580156113d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f89190614058565b505b336001600160a01b03167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb82426040516114359291906140d0565b60405180910390a261144633613291565b6114506001606555565b50565b61145b612b96565b609755565b611468612bf5565b611471336133f2565b336000908152609a60205260409020548111156114a157604051630dcad43360e11b815260040160405180910390fd5b6114ab33826135cb565b336000908152609a6020526040812080548392906114ca90849061409a565b9091555050306000908152609a6020526040812080548392906114ee90849061409a565b909155506114fc9050612cd9565b336001600160a01b03167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d82426040516115379291906140d0565b60405180910390a26114506001606555565b60006001600160a01b03831661157257604051633d6601c760e11b815260040160405180910390fd5b3360009081526098602090815260408083206001600160a01b03871684529091528120546115a1908490614087565b3360008181526098602090815260408083206001600160a01b038a16808552908352928190208590555184815293945090926000805160206142e8833981519152910160405180910390a35060019392505050565b600061160183611c61565b9091111592915050565b6000610c6d3061172e565b6000806116216135e3565b9050600061162e8261368a565b61ffff1690508060000361165557604051632154bfcf60e21b815260040160405180910390fd5b611660600283614087565b915060005b81811015611728576000611678846136c4565b9050600080611688606887614087565b90506000611696823661409a565b9050803592508265ffffffffffff166000036116c557604051630336dc9d60e41b815260040160405180910390fd5b876000036116dd578265ffffffffffff169750611705565b878365ffffffffffff16146117055760405163d9d1f46560e01b815260040160405180910390fd5b61170f8488614087565b96505050505080806117209061413b565b915050611665565b50505090565b609f546001600160a01b038281166000908152609a602052604080822054905163966da88960e01b81529193929092169163966da88991611774919086906004016140de565b602060405180830381865afa158015611791573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f89190614058565b6117bd612bf5565b816000036117de5760405163078e1d8560e01b815260040160405180910390fd5b6001600160a01b0381166118045760405162461bcd60e51b815260040161095890614154565b306001600160a01b0382160361182c5760405162461bcd60e51b81526004016109589061417a565b60a0546040516370a0823160e01b81526118a89184916001600160a01b03909116906370a0823190611862903390600401613ddd565b602060405180830381865afa15801561187f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118a39190614058565b6134f8565b91506118b381612ebc565b609754156118f857609754306000908152609960205260409020546118d9908490614087565b11156118f857604051633f27d61760e01b815260040160405180910390fd5b61190233836135cb565b61190c81836136f8565b306000908152609960205260408120805484929061192b908490614087565b909155506119399050612cd9565b609d546001600160a01b0316158015906119595750611957816131e5565b155b156119c357609d546040516328ba35d960e11b81526001600160a01b03909116906351746bb29061199090859085906004016140de565b600060405180830381600087803b1580156119aa57600080fd5b505af11580156119be573d6000803e3d6000fd5b505050505b806001600160a01b0316336001600160a01b03167fef0ada5ca19bede6a40b575865a6ce451938d26835b7215e6a5e03bb2c4392128442604051611a089291906140d0565b60405180910390a3611a1981613291565b61087e6001606555565b609e546001600160a01b0382811660009081526099602052604080822054905163966da88960e01b81529193929092169163966da88991611774919086906004016140de565b611a71612b96565b611a7a81612c6c565b158015611a8f57506001600160a01b03811615155b15611aaf57806040516322a2d07b60e21b81526004016109589190613ddd565b609b80546001600160a01b0319166001600160a01b03831690811790915515611ada57611ada612cd9565b806001600160a01b03167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e0182426040516109ab91815260200190565b565b60a3546000906001600160a01b031615611ba25760a360009054906101000a90046001600160a01b03166001600160a01b031663726cd4156040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6d91906141af565b50600090565b6000611bb261377f565b9050336001600160a01b03821614611c245760405162461bcd60e51b815260206004820152602f60248201527f50656e64696e674f776e61626c653a2063616c6c6572206973206e6f7420746860448201526e32903832b73234b7339037bbb732b960891b6064820152608401610958565b611c2d81613792565b61145060006137e4565b611c3f612b96565b60a380546001600160a01b0319166001600160a01b0392909216919091179055565b600080611c6d83612450565b90506000611c7a84611a23565b905081811015611c8d5760009250611c9f565b611c97828261409a565b949350505050565b5050919050565b611cae612b96565b611cb781612c6c565b158015611ccc57506001600160a01b03811615155b15611cec57806040516322a2d07b60e21b81526004016109589190613ddd565b60a180546001600160a01b0319166001600160a01b0383169081179091556040514281527f8e6481d1924c9bb8cdfd9d6140f3e5570c34c6c580d915144728bbbf394eed0a906020016109ab565b6033546001600160a01b031690565b60006001600160a01b038316611d7257604051633d6601c760e11b815260040160405180910390fd5b3360009081526098602090815260408083206001600160a01b038716845290915290205482811015611dbb57828160405163054365bb60e31b81526004016109589291906140d0565b6000611dc7848361409a565b3360008181526098602090815260408083206001600160a01b038b16808552908352928190208590555184815293945090926000805160206142e8833981519152910160405180910390a3506001949350505050565b6000611e27612bf5565b6001600160a01b038316611e4e57604051633a954ecd60e21b815260040160405180910390fd5b306001600160a01b03841603611e775760405163ed728e5760e01b815260040160405180910390fd5b33611e8181612ebc565b600080611e8d83612fe7565b9150915080851115611eb65784816040516350d2479d60e11b81526004016109589291906140d0565b611ec183868461313a565b6001600160a01b038316600090815260996020526040902080548690039055611ee986612ebc565b6001600160a01b03861660009081526099602052604081208054879290611f11908490614087565b9091555050609d546001600160a01b031615801590611f2f57508415155b8015611f415750611f3f836131e5565b155b8015611f535750611f51866131e5565b155b1561203d57609d54604051630d5dbdb360e21b81526000916001600160a01b031690633576f6cc90611f8b90899088906004016140de565b6020604051808303816000875af1158015611faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fce9190614058565b9050801561203b57609d546040516328ba35d960e11b81526001600160a01b03909116906351746bb2906120089084908b906004016140de565b600060405180830381600087803b15801561202257600080fd5b505af1158015612036573d6000803e3d6000fd5b505050505b505b856001600160a01b0316836001600160a01b03166000805160206142c88339815191528760405161207091815260200190565b60405180910390a361208133613291565b61208a86613291565b600193505050506108f86001606555565b6120a3612bf5565b6120ab612b96565b8083146120ca5760405162461bcd60e51b8152600401610958906140f5565b60005b838110156111795760008383838181106120e9576120e9614125565b905060200201359050600086868481811061210657612106614125565b905060200201602081019061211b9190613df1565b90508160000361213e5760405163078e1d8560e01b815260040160405180910390fd5b6001600160a01b0381166121645760405162461bcd60e51b815260040161095890614154565b306001600160a01b0382160361218c5760405162461bcd60e51b81526004016109589061417a565b6001600160a01b038116600090815260996020526040902054156121f25760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f7220616c726561647920696e697469616c697a65640000006044820152606401610958565b6121fb81612ebc565b609754156122405760975430600090815260996020526040902054612221908490614087565b111561224057604051633f27d61760e01b815260040160405180910390fd5b61224a81836136f8565b3060009081526099602052604081208054849290612269908490614087565b909155506122779050612cd9565b609d546001600160a01b0316158015906122975750612295816131e5565b155b1561230157609d546040516328ba35d960e11b81526001600160a01b03909116906351746bb2906122ce90859085906004016140de565b600060405180830381600087803b1580156122e857600080fd5b505af11580156122fc573d6000803e3d6000fd5b505050505b806001600160a01b0316336001600160a01b03167fb5a680d9a22629ee5eef8f54bfbe6204ddb674ca26425ddadb06cb4b53313d5684426040516123469291906140d0565b60405180910390a361235781613291565b505080806123649061413b565b9150506120cd565b60a2602052816000526040600020818154811061238857600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b61145081336117b5565b6123c0613d17565b6040518060a001604052806123d3610c62565b81526020016123e061240f565b81526020016123ed612afc565b81526020016123fa61160b565b8152602001670cd64299613c80009052919050565b609b546000906001600160a01b0316637cd0833161242b61160b565b612433610c62565b6040518363ffffffff1660e01b81526004016111b39291906140d0565b600080805b6001600160a01b038416600090815260a26020526040902054811015612516576001600160a01b038416600090815260a2602052604090208054429190839081106124a2576124a2614125565b9060005260206000209060030201600201541115612504576001600160a01b038416600090815260a2602052604090208054829081106124e4576124e4614125565b906000526020600020906003020160010154826125019190614087565b91505b8061250e8161413b565b915050612455565b5092915050565b6000805b6001600160a01b038316600090815260a26020526040902054811015612637576001600160a01b038316600090815260a26020526040902080544291908390811061256e5761256e614125565b9060005260206000209060030201600201541115612625576001600160a01b038316600090815260a26020526040902080546305a39a809190839081106125b7576125b7614125565b600091825260208083206003909202909101546001600160a01b038716835260a290915260409091208054849081106125f2576125f2614125565b90600052602060002090600302016001015461260e91906141cc565b61261891906141e3565b6126229083614087565b91505b8061262f8161413b565b915050612521565b50919050565b609c546001600160a01b031661266657604051631c038dab60e21b815260040160405180910390fd5b609c5460405163039ff21960e21b81526001600160a01b0390911690630e7fc86490612696903390600401613ddd565b602060405180830381865afa1580156126b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126d79190614205565b6126f457604051637582fa9b60e11b815260040160405180910390fd5b6126fc610c62565b60000361271c576040516316d5c93f60e21b815260040160405180910390fd5b612724612bf5565b60a0546040516370a0823160e01b81526001600160a01b03909116906370a0823190612754903090600401613ddd565b602060405180830381865afa158015612771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127959190614058565b8111156127b5576040516316d5c93f60e21b815260040160405180910390fd5b6127be336133f2565b336000908152609a6020526040812080548392906127dd908490614087565b9091555050306000908152609a602052604081208054839290612801908490614087565b9091555061281190503382612c4e565b612819612cd9565b336001600160a01b03167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d582426040516128549291906140d0565b60405180910390a26128666001606555565b670cd64299613c8000612877610c62565b61287f61160b565b61289190670de0b6b3a76400006141cc565b61289b91906141e3565b1115611450576040516372b9ce3f60e11b815260040160405180910390fd5b816128c433611c61565b10156129115760405162461bcd60e51b815260206004820152601c60248201527b496e73756666696369656e742062616c616e636520746f206c6f636b60201b6044820152606401610958565b6305a39a8081111561296f5760405162461bcd60e51b815260206004820152602160248201527f43616e6e6f74206c6f636b20666f72206d6f7265207468616e203320796561726044820152607360f81b6064820152608401610958565b33600090815260a2602090815260409182902082516060810184528481529182018590529181016129a08442614087565b905281546001818101845560009384526020938490208351600390930201918255928201519281019290925560400151600290910155337fada80de846c2fa6289ae8db8bd0145346851ca76d49946df18240ebbf97200a78383612a048142614087565b6040805193845260208401929092529082015260600160405180910390a261087e33613291565b6000610c6d61377f565b612a3d612b96565b6001600160a01b038116612aa95760405162461bcd60e51b815260206004820152602d60248201527f50656e64696e674f776e61626c653a206e6577206f776e65722069732074686560448201526c207a65726f206164647265737360981b6064820152608401610958565b612ab2816137e4565b806001600160a01b0316612ac4611d3a565b6001600160a01b03167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b609b546000906001600160a01b031663df841eec61242b61160b565b612b20612b96565b612b2981612c6c565b612b4857806040516322a2d07b60e21b81526004016109589190613ddd565b609c80546001600160a01b0319166001600160a01b0383169081179091556040514281527f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b920469906020016109ab565b33612b9f611d3a565b6001600160a01b031614611b155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610958565b600260655403612c475760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610958565b6002606555565b60a05461087e906001600160a01b031683836137f6565b6001606555565b6001600160a01b03163b151590565b600054610100900460ff16612ca25760405162461bcd60e51b815260040161095890614227565b611b15613922565b600054610100900460ff16612cd15760405162461bcd60e51b815260040161095890614227565b611b15613952565b6000612ce361160b565b90506000612cef610c62565b609b549091506001600160a01b0316612d1b5760405163fd4851e960e01b815260040160405180910390fd5b609e54609b54604051637cd0833160e01b81526001600160a01b03928316926334fcf437921690637cd0833190612d5890879087906004016140d0565b602060405180830381865afa158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d999190614058565b6040518263ffffffff1660e01b8152600401612db791815260200190565b600060405180830381600087803b158015612dd157600080fd5b505af1158015612de5573d6000803e3d6000fd5b5050609f54609b546040516337e107bb60e21b81526001600160a01b0392831694506334fcf437935091169063df841eec90612e2790879087906004016140d0565b602060405180830381865afa158015612e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e689190614058565b6040518263ffffffff1660e01b8152600401612e8691815260200190565b600060405180830381600087803b158015612ea057600080fd5b505af1158015612eb4573d6000803e3d6000fd5b505050505050565b6001600160a01b038116600090815260996020526040812054612ede83611a23565b612ee8919061409a565b9050612ef482826136f8565b612efd30611a23565b306000908152609960205260409081902091909155516001600160a01b038316907f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e216190612f4d90849042906140d0565b60405180910390a2609e54604051637681d99b60e11b81526001600160a01b039091169063ed03b33690612f85908590600401613ddd565b600060405180830381600087803b158015612f9f57600080fd5b505af1158015612fb3573d6000803e3d6000fd5b5050609e54604051637681d99b60e11b81526001600160a01b03909116925063ed03b3369150612e86903090600401613ddd565b60a15460009081906001600160a01b03161561311b5760a15460405163cbf9fe5f60e01b81526001600160a01b039091169063cbf9fe5f9061302d908690600401613ddd565b602060405180830381865afa15801561304a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306e9190614058565b9150811561311b5760a15460405163512edc6760e11b81526001600160a01b039091169063a25db8ce906130a6908690600401613ddd565b602060405180830381865afa1580156130c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130e79190614058565b6130f1908361409a565b6001600160a01b038416600090815260996020526040902054613114919061409a565b9050915091565b506001600160a01b038216600090815260996020526040902054915091565b6001600160a01b03831660009081526099602052604081205461315e90839061409a565b90508083118015613179575060a1546001600160a01b031615155b156107745760a1546001600160a01b03166349c1de3f8561319a848761409a565b6040518363ffffffff1660e01b81526004016131b7929190614272565b600060405180830381600087803b1580156131d157600080fd5b505af1158015610c58573d6000803e3d6000fd5b6000731d3b1350026195670f8b228711977561fe3e60016001600160a01b038316148061322e575073f03e2984e549ddc747bc709e6c6ef4791882a5026001600160a01b038316145b806132555750736edba4a5dbb3aec671f2e1b16a67fa3a076a2ed86001600160a01b038316145b8061327c575073114989e03993edc97a5946bbb7be885ef0aee9eb6001600160a01b038316145b1561328957506001919050565b506000919050565b600061329b611b17565b90506001600160a01b0381161561087e576132b46108fe565b15613304576132ff81836040516024016132ce9190613ddd565b60408051601f198184030181529190526020810180516001600160e01b0316636cec346160e01b1790526000613979565b505050565b60405163bf18c23960e01b81526001600160a01b0382169063bf18c23990612e86908590600401613ddd565b609c546000906001600160a01b031661335c57604051631c038dab60e21b815260040160405180910390fd5b609c5460405163039ff21960e21b81526001600160a01b0390911690630e7fc8649061338c908590600401613ddd565b602060405180830381865afa1580156133a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133cd9190614205565b6133ea57604051637582fa9b60e11b815260040160405180910390fd5b506001919050565b6133fb8161172e565b6001600160a01b0382166000908152609a602052604090205561341d3061172e565b306000908152609a60205260409081902091909155609f549051637681d99b60e11b81526001600160a01b039091169063ed03b33690613461908490600401613ddd565b600060405180830381600087803b15801561347b57600080fd5b505af115801561348f573d6000803e3d6000fd5b5050609f54604051637681d99b60e11b81526001600160a01b03909116925063ed03b33691506134c3903090600401613ddd565b600060405180830381600087803b1580156134dd57600080fd5b505af11580156134f1573d6000803e3d6000fd5b5050505050565b60008183106135075781610fa0565b5090919050565b6001600160a01b03821660009081526099602052604090205481111561354757604051630bba337f60e11b815260040160405180910390fd5b60008061355384612fe7565b91509150808311156135785760405163a06a83a160e01b815260040160405180910390fd5b61358384848461313a565b6001600160a01b038416600081815260996020908152604080832080548890039055518681529192916000805160206142c8833981519152910160405180910390a350505050565b60a05461087e906001600160a01b0316833084613a0d565b60006602ed57011e0000601f1936013581161480613614576040516373bb264f60e11b815260040160405180910390fd5b6000366029111561363857604051632bcb7bc560e11b815260040160405180910390fd5b5060281936013560006009613653600362ffffff8516614087565b61365d9190614087565b90503661366b600283614087565b1115610fa05760405163c30a7bd760e01b815260040160405180910390fd5b600080613698602084614087565b9050368111156136bb57604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b60008060006136d284613b43565b9092509050604e6136e4826020614087565b6136ee90846141cc565b611c979190614087565b6001600160a01b03821661371f576040516346dbfb6d60e11b815260040160405180910390fd5b6001600160a01b03821660009081526099602052604081208054839290613747908490614087565b90915550506040518181526001600160a01b038316906000906000805160206142c88339815191529060200160405180910390a35050565b6000805160206142a88339815191525490565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000805160206142a883398151915255565b600080846001600160a01b031663a9059cbb858560405160240161381b929190614272565b6040516020818303038152906040529060e01b6020820180516001600160e01b038381831617835250505050604051613854919061428b565b6000604051808303816000865af19150503d8060008114613891576040519150601f19603f3d011682016040523d82523d6000602084013e613896565b606091505b50915091508180156138c05750805115806138c05750808060200190518101906138c09190614205565b6134f15760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610958565b600054610100900460ff166139495760405162461bcd60e51b815260040161095890614227565b611b1533613792565b600054610100900460ff16612c655760405162461bcd60e51b815260040161095890614227565b6060600061398684613b9a565b9050600080866001600160a01b0316856139a15760006139a3565b345b846040516139b1919061428b565b60006040518083038185875af1925050503d80600081146139ee576040519150601f19603f3d011682016040523d82523d6000602084013e6139f3565b606091505b5091509150613a028282613c29565b979650505050505050565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691613a71919061428b565b6000604051808303816000865af19150503d8060008114613aae576040519150601f19603f3d011682016040523d82523d6000602084013e613ab3565b606091505b5091509150818015613add575080511580613add575080806020019051810190613add9190614205565b612eb45760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610958565b600080808080613b54604187614087565b90506000613b6d613b66602084614087565b3690613ca0565b803594509050613b7e816003613ca0565b62ffffff9490941697933563ffffffff16965092945050505050565b80516060906000613ba9613cac565b90506000613bb78284614087565b905036821115613bda57604051632bcb7bc560e11b815260040160405180910390fd5b6060604051905081815285602001848101826020015b81831015613c08578251815260209283019201613bf0565b50505082833603856020018301379190920181016020016040529392505050565b606082612637578151600003613c5257604051632b3ff13d60e11b815260040160405180910390fd5b602082015162461bcd60e51b148015613c85576040516301efd04f60e31b81526044840190610958908290600401613d85565b8260405163fd36fde360e01b81526004016109589190613d85565b6000610fa0828461409a565b600080613cb76135e3565b90506000613cc48261368a565b61ffff169050613cd5600283614087565b915060005b81811015613d0f576000613ced846136c4565b9050613cf98185614087565b9350508080613d079061413b565b915050613cda565b509092915050565b6040518060a001604052806005906020820280368337509192915050565b60005b83811015613d50578181015183820152602001613d38565b50506000910152565b60008151808452613d71816020860160208601613d35565b601f01601f19169290920160200192915050565b602081526000610fa06020830184613d59565b6001600160a01b038116811461145057600080fd5b60008060408385031215613dc057600080fd5b823591506020830135613dd281613d98565b809150509250929050565b6001600160a01b0391909116815260200190565b600060208284031215613e0357600080fd5b8135610fa081613d98565b60008060408385031215613e2157600080fd5b8235613e2c81613d98565b946020939093013593505050565b600080600080600080600060e0888a031215613e5557600080fd5b8735613e6081613d98565b96506020880135613e7081613d98565b95506040880135613e8081613d98565b94506060880135613e9081613d98565b93506080880135613ea081613d98565b925060a0880135613eb081613d98565b8092505060c0880135905092959891949750929550565b600080600060608486031215613edc57600080fd5b8335613ee781613d98565b92506020840135613ef781613d98565b929592945050506040919091013590565b60008083601f840112613f1a57600080fd5b5081356001600160401b03811115613f3157600080fd5b6020830191508360208260051b8501011115613f4c57600080fd5b9250929050565b60008060008060408587031215613f6957600080fd5b84356001600160401b0380821115613f8057600080fd5b613f8c88838901613f08565b90965094506020870135915080821115613fa557600080fd5b50613fb287828801613f08565b95989497509550505050565b600060208284031215613fd057600080fd5b5035919050565b60a08101818360005b6005811015613fff578151835260209283019290910190600101613fe0565b50505092915050565b6000806040838503121561401b57600080fd5b823561402681613d98565b91506020830135613dd281613d98565b6000806040838503121561404957600080fd5b50508035926020909101359150565b60006020828403121561406a57600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156108f8576108f8614071565b818103818111156108f8576108f8614071565b6000602082840312156140bf57600080fd5b815160ff81168114610fa057600080fd5b918252602082015260400190565b9182526001600160a01b0316602082015260400190565b602080825260169082015275082e4e4c2f2e640d8cadccee8d040dad2e6dac2e8c6d60531b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006001820161414d5761414d614071565b5060010190565b6020808252600c908201526b41646472657373207a65726f60a01b604082015260600190565b6020808252818101527f43616e6e6f74206465706f736974206f6e20626568616c66206f6620706f6f6c604082015260600190565b6000602082840312156141c157600080fd5b8151610fa081613d98565b80820281158282048414176108f8576108f8614071565b60008261420057634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561421757600080fd5b81518015158114610fa057600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03929092168252602082015260400190565b6000825161429d818460208701613d35565b919091019291505056fe63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925a2646970667358221220effba85d04e99dfdc9c4a4fce56350fe5421b11cb9b06ad88c4ba2e209e05b1364736f6c63430008110033",
  "devdoc": {
    "details": "Contract allowing user to deposit to and borrow ARB from a dedicated user account",
    "errors": {
      "InsufficientAllowance(uint256,uint256)": [
        {
          "params": {
            "allowance": "current allowance",
            "requested": "requested transfer amount"
          }
        }
      ],
      "TransferAmountExceedsBalance(uint256,uint256)": [
        {
          "params": {
            "amount": "transfer amount",
            "balance": "available balance"
          }
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "_user the address of queried depositor*"
      },
      "borrow(uint256)": {
        "details": "_amount the amount to be borrowedIt is only meant to be used by a SmartLoanDiamondProxy*"
      },
      "getFullyVestedLockedBalance(address)": {
        "details": "The fully vested locked balance is used in the governance mechanism of the system, specifically for the allocation of vPrime tokens. The method calculates the fully vested locked balance by iterating over all the locks of the account and summing up the amounts of those locks that are still active (i.e., their `unlockTime` is greater than the current block timestamp). However, the amount of each lock is scaled by the ratio of its `lockTime` to the `MAX_LOCK_TIME` (3 years). This means that the longer the lock time, the larger the contribution of the lock to the fully vested locked balance. The fully vested locked balance is used to calculate the maximum vPrime allocation for a user. Users accrue vPrime over a period of 3 years, from 0 to the maximum vPrime based on their 10-1 pairs of pool-deposit and sPrime. Locking pool deposits and sPrime immediately vests the vPrime.",
        "params": {
          "account": "The address of the account for which to calculate the fully vested locked balance."
        },
        "returns": {
          "fullyVestedBalance": "The fully vested locked balance of the provided account."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "It is only meant to be used by a SmartLoanDiamondProxy*"
      },
      "setBorrowersRegistry(address)": {
        "details": "borrowersRegistry the address of borrowers registry*"
      },
      "setPoolRewarder(address)": {
        "details": "_poolRewarder the address of PoolRewarder*"
      },
      "setRatesCalculator(address)": {
        "details": "ratesCalculator the address of rates calculator*"
      },
      "setTotalSupplyCap(uint256)": {
        "details": "_newTotalSupplyCap new deposit cap*"
      },
      "setVestingDistributor(address)": {
        "details": "_distributor the address of vestingDistributor*"
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "withdraw(uint256)": {
        "details": "_amount the amount to be withdrawn*"
      }
    },
    "title": "`ArbPool`",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the current deposited amount for the given user The value includes the interest rates earned at the current moment"
      },
      "borrow(uint256)": {
        "notice": "Borrows the specified amount It updates user borrowed balance, total borrowed amount and rates"
      },
      "deposit(uint256)": {
        "notice": "Deposits the amount It updates user deposited balance, total deposited and rates*"
      },
      "depositOnBehalf(uint256,address)": {
        "notice": "Deposits the amount on behalf of `_of` user. It updates `_of` user deposited balance, total deposited and rates*"
      },
      "getBorrowingRate()": {
        "notice": "Returns the current interest rate for borrowings*"
      },
      "getDepositRate()": {
        "notice": "Returns the current interest rate for deposits*"
      },
      "getFullPoolStatus()": {
        "notice": "Returns full pool status"
      },
      "getFullyVestedLockedBalance(address)": {
        "notice": "Calculates and returns the fully vested locked balance for a given account."
      },
      "recoverSurplus(uint256,address)": {
        "notice": "Recovers the surplus funds resultant from difference between deposit and borrowing rates*"
      },
      "repay(uint256)": {
        "notice": "Repays the amount It updates user borrowed balance, total borrowed amount and rates"
      },
      "setBorrowersRegistry(address)": {
        "notice": "Sets the new borrowers registry contract. The borrowers registry decides if an account can borrow funds. Only the owner of the Contract can execute this function."
      },
      "setPoolRewarder(address)": {
        "notice": "Sets the new Pool Rewarder. The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance. Only the owner of the Contract can execute this function."
      },
      "setRatesCalculator(address)": {
        "notice": "Sets the new rate calculator. The calculator is an external contract that contains the logic for calculating deposit and borrowing rates. Only the owner of the Contract can execute this function."
      },
      "setTotalSupplyCap(uint256)": {
        "notice": "Sets new totalSupplyCap limiting how much in total can be deposited to the Pool. Only the owner of the Contract can execute this function."
      },
      "setVestingDistributor(address)": {
        "notice": "Sets the new Vesting Distributor. Only the owner of the Contract can execute this function."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws selected amount from the user deposits"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 755,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2879,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "totalSupplyCap",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 2885,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_allowed",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2889,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_deposited",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2893,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "borrowed",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2896,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "ratesCalculator",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IRatesCalculator)6951"
      },
      {
        "astId": 2899,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "borrowersRegistry",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(IBorrowersRegistry)6848"
      },
      {
        "astId": 2902,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "poolRewarder",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(IPoolRewarder)6929"
      },
      {
        "astId": 2905,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "depositIndex",
        "offset": 0,
        "slot": "158",
        "type": "t_contract(IIndex)6875"
      },
      {
        "astId": 2908,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "159",
        "type": "t_contract(IIndex)6875"
      },
      {
        "astId": 2910,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "160",
        "type": "t_address_payable"
      },
      {
        "astId": 2913,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "vestingDistributor",
        "offset": 0,
        "slot": "161",
        "type": "t_contract(VestingDistributor)6613"
      },
      {
        "astId": 2915,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "_decimals",
        "offset": 20,
        "slot": "161",
        "type": "t_uint8"
      },
      {
        "astId": 2928,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "locks",
        "offset": 0,
        "slot": "162",
        "type": "t_mapping(t_address,t_array(t_struct(LockDetails)2922_storage)dyn_storage)"
      },
      {
        "astId": 2936,
        "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
        "label": "tokenManager",
        "offset": 0,
        "slot": "163",
        "type": "t_contract(ITokenManager)7175"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(LockDetails)2922_storage)dyn_storage": {
        "base": "t_struct(LockDetails)2922_storage",
        "encoding": "dynamic_array",
        "label": "struct Pool.LockDetails[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBorrowersRegistry)6848": {
        "encoding": "inplace",
        "label": "contract IBorrowersRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IIndex)6875": {
        "encoding": "inplace",
        "label": "contract IIndex",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolRewarder)6929": {
        "encoding": "inplace",
        "label": "contract IPoolRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(IRatesCalculator)6951": {
        "encoding": "inplace",
        "label": "contract IRatesCalculator",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenManager)7175": {
        "encoding": "inplace",
        "label": "contract ITokenManager",
        "numberOfBytes": "20"
      },
      "t_contract(VestingDistributor)6613": {
        "encoding": "inplace",
        "label": "contract VestingDistributor",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(LockDetails)2922_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Pool.LockDetails[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockDetails)2922_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(LockDetails)2922_storage": {
        "encoding": "inplace",
        "label": "struct Pool.LockDetails",
        "members": [
          {
            "astId": 2917,
            "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
            "label": "lockTime",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2919,
            "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2921,
            "contract": "contracts/deployment/arbitrum/ArbPool.sol:ArbPool",
            "label": "unlockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}