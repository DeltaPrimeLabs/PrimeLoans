{
  "address": "0xb5034979bAf764aA944ca1050CF39283aba4c3da",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e40157ecf6cd0919c4ee1c9db9c6b5dcc80b97995d7205225f54c1cdc5a4fed",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xb5034979bAf764aA944ca1050CF39283aba4c3da",
    "transactionIndex": 1,
    "gasUsed": "25118196",
    "logsBloom": "0x
    "blockHash": "0xae5c18c0a19c5c87a60c05fff7716b14585abc45a12ac10e908e1b327db5d847",
    "transactionHash": "0x3e40157ecf6cd0919c4ee1c9db9c6b5dcc80b97995d7205225f54c1cdc5a4fed",
    "logs": [],
    "blockNumber": 123626462,
    "cumulativeGasUsed": "25118196",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "995f2b43e77f872280aac82066829aa3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a pool contract\",\"events\":{\"PoolDeployed(address,address,uint256)\":{\"details\":\"emitted after pool is deployed by any user\",\"params\":{\"poolAddress\":\"of deployed pool\",\"timestamp\":\"of the deployment*\",\"user\":\"the address initiating the deployment\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"PoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/arbitrum/DaiPoolFactory.sol\":\"DaiPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\nimport \\\"./VestingDistributor.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    VestingDistributor public vestingDistributor;\\n\\n    uint8 internal _decimals;\\n\\n    modifier onlyWhitelistedAccounts {\\n        if(\\n            msg.sender == 0x0E5Bad4108a6A5a8b06820f98026a7f3A77466b2 ||\\n            msg.sender == 0x2fFA7E9624B923fA811d9B9995Aa34b715Db1945 ||\\n            msg.sender == 0x0d7137feA34BC97819f05544Ec7DE5c98617989C ||\\n            msg.sender == 0xC6ba6BB819f1Be84EFeB2E3f2697AD9818151e5D ||\\n            msg.sender == 0x14f69F9C351b798dF31fC53E33c09dD29bFAb547 ||\\n            msg.sender == 0x5C23Bd1BD272D22766eB3708B8f874CB93B75248 ||\\n            msg.sender == 0x000000F406CA147030BE7069149e4a7423E3A264 ||\\n            msg.sender == 0x5D80a1c0a5084163F1D2620c1B1F43209cd4dB12 ||\\n            msg.sender == 0x6C21A841d6f029243AF87EF01f6772F05832144b\\n\\n        ){\\n            _;\\n        } else {\\n            revert(\\\"Not whitelisted\\\");\\n        }\\n    }\\n\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        _decimals = IERC20Metadata(tokenAddress_).decimals();\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setVestingDistributor(address _distributor) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(_distributor) && _distributor != address(0)) revert NotAContract(_distributor);\\n        vestingDistributor = VestingDistributor(_distributor);\\n\\n        emit VestingDistributorChanged(_distributor, block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        address account = msg.sender;\\n        _accumulateDepositInterest(account);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, account);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(account, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(sender);\\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(sender, amount, lockedAmount);\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual onlyWhitelistedAccounts{\\n        depositOnBehalf(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * Deposits the amount on behalf of `_of` user.\\n     * It updates `_of` user deposited balance, total deposited and rates\\n     **/\\n    function depositOnBehalf(uint256 _amount, address _of) public virtual nonReentrant onlyWhitelistedAccounts {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n        require(_of != address(0), \\\"Address zero\\\");\\n        require(_of != address(this), \\\"Cannot deposit on behalf of pool\\\");\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(_of);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(_of, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, _of);\\n        }\\n\\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant onlyWhitelistedAccounts {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function name() public virtual pure returns(string memory _name){\\n        _name = \\\"\\\";\\n    }\\n\\n    function symbol() public virtual pure returns(string memory _symbol){\\n        _symbol = \\\"\\\";\\n    }\\n\\n    function decimals() public virtual view returns(uint8){\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\n        return 0.9e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns full pool status\\n     */\\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\\n        return [\\n            totalSupply(),\\n            getDepositRate(),\\n            getBorrowingRate(),\\n            totalBorrowed(),\\n            getMaxPoolUtilisationForBorrowing()\\n        ];\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if(amount > transferrableAmount) revert BurnAmountExceedsAvailableForUser();\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _getAmounts(address account) internal view returns (uint256 lockedAmount, uint256 transferrableAmount) {\\n        if (address(vestingDistributor) != address(0)) {\\n            lockedAmount = vestingDistributor.locked(account);\\n            transferrableAmount = _deposited[account] - (lockedAmount - vestingDistributor.availableToWithdraw(account));\\n        } else {\\n            transferrableAmount = _deposited[account];\\n        }\\n    }\\n\\n    function _updateWithdrawn(address account, uint256 amount, uint256 lockedAmount) internal {\\n        uint256 availableUnvested = _deposited[account] - lockedAmount;\\n        if (amount > availableUnvested && address(vestingDistributor) != address(0)) {\\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\\n        }\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user deposits funds on behalf of other user\\n     * @param user the address performing the deposit\\n     * @param _of the address on behalf of which the deposit is being performed\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing vesting distributor\\n    * @param distributor an address of the newly set distributor\\n    * @param timestamp of the distributor change\\n    **/\\n    event VestingDistributorChanged(address indexed distributor, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // ERC20: burn amount exceeds current amount available (including vesting)\\n    error BurnAmountExceedsAvailableForUser();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x94f4764b7d6f7772fc1261890da6e5448aaefa5069e50178f4108cd59f74f047\",\"license\":\"BUSL-1.1\"},\"contracts/VestingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VestingDistributor\\n * @dev Contract distributing pool's spread among vesting participants.\\n */\\ncontract VestingDistributor {\\n\\n    Pool pool;\\n    IERC20Metadata poolToken;\\n    address keeper;\\n    address pendingKeeper;\\n\\n    uint256 totalLockedMultiplied;\\n    address[] public participants;\\n    mapping(address => uint256) public locked;\\n    mapping(address => uint256) public withdrawn;\\n    mapping(address => uint256) public unvestingTime;\\n    mapping(address => uint256) public unlockTimestamp;\\n    mapping(address => uint256) public multiplier;\\n    mapping(uint256 => uint256) rewardAmount;\\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\\n    mapping(uint256 => uint256) numRewardDistributed;\\n\\n    uint256 lastUpdated;\\n    uint256 updateInterval = 6 hours;\\n\\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\\n\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"Unauthorized: onlyPool\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"Unauthorized: onlyKeeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingKeeper() {\\n        require(msg.sender == pendingKeeper, \\\"Unauthorized: onlyPendingKeeper\\\");\\n        _;\\n    }\\n\\n    constructor(address poolAddress, address keeperAddress) {\\n        pool = Pool(poolAddress);\\n        poolToken = IERC20Metadata(pool.tokenAddress());\\n        keeper = keeperAddress;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    function transferKeeper(address keeperAddress) external onlyKeeper {\\n        pendingKeeper = keeperAddress;\\n    }\\n\\n    function acceptKeeper() external onlyPendingKeeper {\\n        keeper = pendingKeeper;\\n        pendingKeeper = address(0);\\n    }\\n\\n    /**\\n     * Add vesting participant (msg.sender)\\n     **/\\n    function startVesting(uint256 amount, uint256 time) public {\\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\\n\\n        participants.push(msg.sender);\\n        locked[msg.sender] = amount;\\n        unvestingTime[msg.sender] = time;\\n        multiplier[msg.sender] = getMultiplier(time);\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Increase vesting of msg.sender\\n     **/\\n    function increaseVesting(uint256 amount) public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\\n\\n        locked[msg.sender] += amount;\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Unlock funds - start of unvesting\\n     **/\\n    function unlock() public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n\\n        unlockTimestamp[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * Check how much user can withdraw\\n     **/\\n    function availableToWithdraw(address account) public view returns (uint256) {\\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\\n        if (unlockTimestamp[account] == 0) revert UserLocked();\\n\\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\\n\\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\\n    }\\n\\n    /**\\n     * Gets pool's spread and distributes among vesting participants.\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    //TODO: run periodically by bots\\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\\n\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n\\n        if (rewardAmount[lastUpdated] == 0) {\\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\\n        }\\n        uint256 rewards = rewardAmount[lastUpdated];\\n\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            address participant = participants[i];\\n            if (rewardDistributed[lastUpdated][participant]) {\\n                continue;\\n            }\\n\\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\\n\\n            pool.transfer(participant, participantReward);\\n\\n            rewardDistributed[lastUpdated][participant] = true;\\n            ++numRewardDistributed[lastUpdated];\\n            if (numRewardDistributed[lastUpdated] == participants.length) {\\n                lastUpdated = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    //TODO: run periodically by bots\\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n        for (uint256 i = fromIndex; i <= toIndex;) {\\n            address participant = participants[i];\\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\\n\\n                unvestingTime[participant] = 0;\\n                locked[participant] = 0;\\n                unlockTimestamp[participant] = 0;\\n                withdrawn[participant] = 0;\\n                multiplier[participant] = 0;\\n\\n                participants[i] = participants[participants.length - 1];\\n                participants.pop();\\n                --toIndex;\\n            } else {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\\n        withdrawn[account] += amount;\\n        if (withdrawn[account] > locked[account]) {\\n            revert WithdrawMoreThanLocked();\\n        }\\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\\n    }\\n\\n    function getMultiplier(uint256 time) public pure returns (uint256){\\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\\n\\n        return 1;\\n    }\\n\\n\\n    // Trying to distribute before the update interval has been reached\\n    error DistributeTooEarly();\\n\\n    // Already participates in vesting\\n    error AlreadyLocked();\\n\\n    // Vesting time is out of range\\n    error InvalidVestingTime();\\n\\n    // Insufficient user balance of pool's tokens\\n    error InsufficientPoolBalance();\\n\\n    // User not locked\\n    error UserNotLocked();\\n\\n    // User funds are locked\\n    error UserLocked();\\n\\n    // Too late\\n    error TooLate();\\n\\n    // Withdraw amount is more than locked\\n    error WithdrawMoreThanLocked();\\n}\",\"keccak256\":\"0xfb092253ce5fa6bbce3b33e653b0bdee658c45e03e7f02bbeb0066d515679a0f\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/arbitrum/DaiPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../Pool.sol\\\";\\n\\n\\n/**\\n * @title DaiPool\\n * @dev Contract allowing user to deposit to and borrow DAI from a dedicated user account\\n */\\ncontract DaiPool is Pool {\\n    function name() public virtual override pure returns(string memory _name){\\n        _name = \\\"DeltaPrimeDAIToken\\\";\\n    }\\n\\n    function symbol() public virtual override pure returns(string memory _symbol){\\n        _symbol = \\\"DPDAI\\\";\\n    }\\n\\n    function decimals() public virtual override pure returns(uint8 decimals){\\n        decimals = 18;\\n    }\\n}\",\"keccak256\":\"0xf6cdcf4dcd8ad42df6669f6a28124e9c97736e8adee0c8742fef561150453604\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/arbitrum/DaiPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ac51526ea73cc486f4527cf20f228688d343110b;\\npragma solidity 0.8.17;\\n\\nimport \\\"./DaiPool.sol\\\";\\n\\n\\n/**\\n * @title PoolFactory\\n * @dev Contract factory allowing anyone to deploy a pool contract\\n */\\ncontract DaiPoolFactory {\\n    function deployPool() public {\\n        DaiPool pool = new DaiPool();\\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\\n    }\\n\\n    /**\\n     * @dev emitted after pool is deployed by any user\\n     * @param user the address initiating the deployment\\n     * @param poolAddress of deployed pool\\n     * @param timestamp of the deployment\\n     **/\\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\\n}\",\"keccak256\":\"0xb1bac0a571c7e457c2a81366c7329f01b21bb532ec42b33052b4fb5e3374e460\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061333c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100b2565b604051809103906000f080158015610064573d6000803e3d6000fd5b50604080513381526001600160a01b0383166020820152428183015290519192507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a2659188919081900360600190a150565b613247806100c08339019056fe608060405234801561001057600080fd5b50613227806100206000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c806370a0823111610151578063b6b55f25116100c3578063d06dca8911610087578063d06dca8914610550578063dd62ed3e14610563578063ee61bd6e1461059c578063f2fde38b146105af578063f36b2425146105c2578063fc68f661146105ca57600080fd5b8063b6b55f2514610504578063b75c42bd14610517578063b790634e1461052c578063bb102aea14610534578063c5ebeaec1461053d57600080fd5b80638da5cb5b116101155780638da5cb5b1461048657806395d89b41146104975780639d76ea58146104b8578063a457c2d7146104cb578063a9059cbb146104de578063aa5af0fd146104f157600080fd5b806370a082311461043a57806370d4cea01461044d578063715018a6146102765780637b898939146104605780638c1a38111461047357600080fd5b80632aeaa291116101ea57806339509351116101ae57806339509351146103d85780634c19386c146103eb5780636011163e146103f357806361215aa8146104065780636ca6d5d0146104145780636cf55ea21461042757600080fd5b80632aeaa291146103885780632e1a7d4d14610390578063313ce567146103a357806331d05b11146103b2578063371fd8e6146103c557600080fd5b8063095ea7b311610231578063095ea7b3146103245780631457db34146103475780631460e3901461035a57806318160ddd1461036d57806323b872dd1461037557600080fd5b80630572b0cc1461026e57806306fdde03146102785780630790ef9a146102b857806307bbebdd146102cb5780630941cb3d146102f6575b600080fd5b6102766105dd565b005b6040805180820190915260128152712232b63a30a83934b6b2a220a4aa37b5b2b760711b60208201525b6040516102af9190612e24565b60405180910390f35b6102766102c6366004612e6c565b61063c565b60a1546102de906001600160a01b031681565b6040516001600160a01b0390911681526020016102af565b610316610304366004612e9c565b609a6020526000908152604090205481565b6040519081526020016102af565b610337610332366004612eb9565b610784565b60405190151581526020016102af565b610276610355366004612e9c565b610812565b610276610368366004612ee5565b6108de565b610316610b4a565b610337610383366004612f72565b610b5a565b610316610e57565b61027661039e366004612fb3565b610ec3565b604051601281526020016102af565b6102766103c0366004612fb3565b6111f3565b6102766103d3366004612fb3565b611222565b6103376103e6366004612eb9565b61131f565b6103166113de565b610316610401366004612e9c565b6113e5565b670c7d713b49da0000610316565b609d546102de906001600160a01b031681565b610276610435366004612e6c565b611470565b610316610448366004612e9c565b61182c565b61027661045b366004612e9c565b61187a565b609e546102de906001600160a01b031681565b610276610481366004612e9c565b611955565b6033546001600160a01b03166102de565b604080518082019091526005815264445044414960d81b60208201526102a2565b60a0546102de906001600160a01b031681565b6103376104d9366004612eb9565b611a16565b6103376104ec366004612eb9565b611b02565b609f546102de906001600160a01b031681565b610276610512366004612fb3565b611d33565b61051f611e49565b6040516102af9190612fcc565b610316611ea0565b61031660975481565b61027661054b366004612fb3565b611eed565b609c546102de906001600160a01b031681565b610316610571366004612ffd565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b609b546102de906001600160a01b031681565b6102766105bd366004612e9c565b612171565b610316612209565b6102766105d8366004612e9c565b612225565b609d546040516311305c1f60e11b81523360048201526001600160a01b0390911690632260b83e90602401600060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b50505050565b6033546001600160a01b0316331461066f5760405162461bcd60e51b81526004016106669061302b565b60405180910390fd5b6002606554036106915760405162461bcd60e51b815260040161066690613060565b600260655560a0546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190613097565b9050600061070f610b4a565b6107176113de565b61072190846130c6565b61072b91906130d9565b90508184111561074e576040516316d5c93f60e21b815260040160405180910390fd5b8381101561076f576040516394290ab960e01b815260040160405180910390fd5b61077983856122d0565b505060016065555050565b60006001600160a01b0383166107ad57604051633d6601c760e11b815260040160405180910390fd5b3360008181526098602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b6033546001600160a01b0316331461083c5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b15801561085c57506001600160a01b03811615155b1561088957609d546040516322a2d07b60e21b81526001600160a01b039091166004820152602401610666565b609d80546001600160a01b0319166001600160a01b0383169081179091556040514281527f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e5906020015b60405180910390a250565b600054610100900460ff166108f95760005460ff16156108fd565b303b155b6109605760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610666565b600054610100900460ff16158015610982576000805461ffff19166101011790555b6001600160a01b0388163b151580156109a457506001600160a01b0387163b15155b80156109b957506001600160a01b0386163b15155b80156109ce57506001600160a01b0385163b15155b80156109f457506001600160a01b0383163b1515806109f457506001600160a01b038316155b610a375760405162461bcd60e51b815260206004820152601460248201527357726f6e6720696e697420617267756d656e747360601b6044820152606401610666565b609c80546001600160a01b03199081166001600160a01b038a811691909117909255609b805482168b8416179055609e80548216898416179055609f80548216888416179055609d8054821686841617905560a08054909116918616918217905560978390556040805163313ce56760e01b8152905163313ce567916004818101926020929091908290030181865afa158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906130ec565b60a160146101000a81548160ff021916908360ff160217905550610b1e6122eb565b610b2661231a565b610b2e612349565b8015610b40576000805461ff00191690555b5050505050505050565b6000610b553061182c565b905090565b6001600160a01b0383166000908152609860209081526040808320338452909152812054821115610bce576001600160a01b03841660009081526098602090815260408083203384529091529081902054905163054365bb60e31b8152610666918491600401918252602082015260400190565b6001600160a01b038316610bf557604051633a954ecd60e21b815260040160405180910390fd5b306001600160a01b03841603610c1e5760405163ed728e5760e01b815260040160405180910390fd5b610c278461252e565b600080610c338661265f565b9150915080841115610c62576040516350d2479d60e11b81526004810185905260248101829052604401610666565b610c6d8685846127a6565b6001600160a01b03861660009081526099602052604081208054869290610c959084906130d9565b90915550506001600160a01b038616600090815260986020908152604080832033845290915281208054869290610ccd9084906130d9565b90915550610cdc90508561252e565b6001600160a01b03851660009081526099602052604081208054869290610d049084906130c6565b9091555050609d546001600160a01b031615801590610d2257508315155b15610e1057609d54604051630d5dbdb360e21b8152600481018690526001600160a01b0388811660248301526000921690633576f6cc906044016020604051808303816000875af1158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190613097565b90508015610e0e57609d546040516328ba35d960e11b8152600481018390526001600160a01b038881166024830152909116906351746bb290604401600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050505b505b846001600160a01b0316866001600160a01b03166000805160206131d283398151915286604051610e4391815260200190565b60405180910390a350600195945050505050565b609d546040516246613160e11b81523360048201526000916001600160a01b031690628cc262906024015b602060405180830381865afa158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190613097565b600260655403610ee55760405162461bcd60e51b815260040161066690613060565b6002606555730e5bad4108a6a5a8b06820f98026a7f3a77466b2331480610f1f5750732ffa7e9624b923fa811d9b9995aa34b715db194533145b80610f3d5750730d7137fea34bc97819f05544ec7de5c98617989c33145b80610f5b575073c6ba6bb819f1be84efeb2e3f2697ad9818151e5d33145b80610f7957507314f69f9c351b798df31fc53e33c09dd29bfab54733145b80610f975750735c23bd1bd272d22766eb3708b8f874cb93b7524833145b80610fb2575070f406ca147030be7069149e4a7423e3a26433145b80610fd05750735d80a1c0a5084163f1d2620c1b1f43209cd4db1233145b80610fee5750736c21a841d6f029243af87ef01f6772f05832144b33145b156111b15760a0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190613097565b81111561107f576040516316d5c93f60e21b815260040160405180910390fd5b6110883361252e565b306000908152609960205260409020548111156110b857604051630bba337f60e11b815260040160405180910390fd5b306000908152609960205260409020805482900390556110d83382612860565b6110e0612349565b6110ea33826122d0565b609d546001600160a01b03161561117257609d54604051630d5dbdb360e21b8152600481018390523360248201526001600160a01b0390911690633576f6cc906044016020604051808303816000875af115801561114c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111709190613097565b505b6040805182815242602082015233917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb910160405180910390a26111eb565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401610666565b506001606555565b6033546001600160a01b0316331461121d5760405162461bcd60e51b81526004016106669061302b565b609755565b6002606554036112445760405162461bcd60e51b815260040161066690613060565b60026065556112523361291d565b336000908152609a602052604090205481111561128257604051630dcad43360e11b815260040160405180910390fd5b61128c3382612a1b565b336000908152609a6020526040812080548392906112ab9084906130d9565b9091555050306000908152609a6020526040812080548392906112cf9084906130d9565b909155506112dd9050612349565b6040805182815242602082015233917f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d910160405180910390a2506001606555565b60006001600160a01b03831661134857604051633d6601c760e11b815260040160405180910390fd5b3360009081526098602090815260408083206001600160a01b03871684529091528120546113779084906130c6565b3360008181526098602090815260408083206001600160a01b038a16808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b6000610b55305b609f546001600160a01b038281166000818152609a602052604080822054905163966da88960e01b81526004810191909152602481019290925292919091169063966da889906044015b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190613097565b6002606554036114925760405162461bcd60e51b815260040161066690613060565b6002606555730e5bad4108a6a5a8b06820f98026a7f3a77466b23314806114cc5750732ffa7e9624b923fa811d9b9995aa34b715db194533145b806114ea5750730d7137fea34bc97819f05544ec7de5c98617989c33145b80611508575073c6ba6bb819f1be84efeb2e3f2697ad9818151e5d33145b8061152657507314f69f9c351b798df31fc53e33c09dd29bfab54733145b806115445750735c23bd1bd272d22766eb3708b8f874cb93b7524833145b8061155f575070f406ca147030be7069149e4a7423e3a26433145b8061157d5750735d80a1c0a5084163f1d2620c1b1f43209cd4db1233145b8061159b5750736c21a841d6f029243af87ef01f6772f05832144b33145b156111b157816000036115c15760405163078e1d8560e01b815260040160405180910390fd5b6001600160a01b0381166116065760405162461bcd60e51b815260206004820152600c60248201526b41646472657373207a65726f60a01b6044820152606401610666565b306001600160a01b0382160361165e5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206465706f736974206f6e20626568616c66206f6620706f6f6c6044820152606401610666565b60a0546040516370a0823160e01b81523360048201526116d59184916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190613097565b612a33565b91506116e08161252e565b6097541561172557609754306000908152609960205260409020546117069084906130c6565b111561172557604051633f27d61760e01b815260040160405180910390fd5b61172f3383612a1b565b6117398183612a4b565b30600090815260996020526040812080548492906117589084906130c6565b909155506117669050612349565b609d546001600160a01b0316156117de57609d546040516328ba35d960e11b8152600481018490526001600160a01b038381166024830152909116906351746bb290604401600060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b505050505b604080518381524260208201526001600160a01b0383169133917fef0ada5ca19bede6a40b575865a6ce451938d26835b7215e6a5e03bb2c439212910160405180910390a350506001606555565b609e546001600160a01b0382811660008181526099602052604080822054905163966da88960e01b81526004810191909152602481019290925292919091169063966da8899060440161142f565b6033546001600160a01b031633146118a45760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b1580156118c457506001600160a01b03811615155b156118ed576040516322a2d07b60e21b81526001600160a01b0382166004820152602401610666565b609b80546001600160a01b0319166001600160a01b0383169081179091551561191857611918612349565b806001600160a01b03167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e0182426040516108d391815260200190565b565b6033546001600160a01b0316331461197f5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b15801561199f57506001600160a01b03811615155b156119c8576040516322a2d07b60e21b81526001600160a01b0382166004820152602401610666565b60a180546001600160a01b0319166001600160a01b0383169081179091556040514281527f8e6481d1924c9bb8cdfd9d6140f3e5570c34c6c580d915144728bbbf394eed0a906020016108d3565b60006001600160a01b038316611a3f57604051633d6601c760e11b815260040160405180910390fd5b3360009081526098602090815260408083206001600160a01b038716845290915290205482811015611a8e5760405163054365bb60e31b81526004810184905260248101829052604401610666565b6000611a9a84836130d9565b3360008181526098602090815260408083206001600160a01b038b16808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3506001949350505050565b60006001600160a01b038316611b2b57604051633a954ecd60e21b815260040160405180910390fd5b306001600160a01b03841603611b545760405163ed728e5760e01b815260040160405180910390fd5b33611b5e8161252e565b600080611b6a8361265f565b9150915080851115611b99576040516350d2479d60e11b81526004810186905260248101829052604401610666565b611ba48386846127a6565b6001600160a01b038316600090815260996020526040902080548690039055611bcc8661252e565b6001600160a01b03861660009081526099602052604081208054879290611bf49084906130c6565b9091555050609d546001600160a01b031615801590611c1257508415155b15611d0057609d54604051630d5dbdb360e21b8152600481018790526001600160a01b0385811660248301526000921690633576f6cc906044016020604051808303816000875af1158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f9190613097565b90508015611cfe57609d546040516328ba35d960e11b8152600481018390526001600160a01b038981166024830152909116906351746bb290604401600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b505050505b505b856001600160a01b0316836001600160a01b03166000805160206131d283398151915287604051610e4391815260200190565b730e5bad4108a6a5a8b06820f98026a7f3a77466b2331480611d685750732ffa7e9624b923fa811d9b9995aa34b715db194533145b80611d865750730d7137fea34bc97819f05544ec7de5c98617989c33145b80611da4575073c6ba6bb819f1be84efeb2e3f2697ad9818151e5d33145b80611dc257507314f69f9c351b798df31fc53e33c09dd29bfab54733145b80611de05750735c23bd1bd272d22766eb3708b8f874cb93b7524833145b80611dfb575070f406ca147030be7069149e4a7423e3a26433145b80611e195750735d80a1c0a5084163f1d2620c1b1f43209cd4db1233145b80611e375750736c21a841d6f029243af87ef01f6772f05832144b33145b156111b157611e468133611470565b50565b611e51612de2565b6040518060a00160405280611e64610b4a565b8152602001611e71611ea0565b8152602001611e7e612209565b8152602001611e8b6113de565b8152602001670c7d713b49da00009052919050565b609b546000906001600160a01b0316637cd08331611ebc6113de565b611ec4610b4a565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401610e82565b609c546001600160a01b0316611f1657604051631c038dab60e21b815260040160405180910390fd5b609c5460405163039ff21960e21b81523360048201526001600160a01b0390911690630e7fc86490602401602060405180830381865afa158015611f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f82919061310f565b611f9f57604051637582fa9b60e11b815260040160405180910390fd5b611fa7610b4a565b600003611fc7576040516316d5c93f60e21b815260040160405180910390fd5b600260655403611fe95760405162461bcd60e51b815260040161066690613060565b600260655560a0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205a9190613097565b81111561207a576040516316d5c93f60e21b815260040160405180910390fd5b6120833361291d565b336000908152609a6020526040812080548392906120a29084906130c6565b9091555050306000908152609a6020526040812080548392906120c69084906130c6565b909155506120d6905033826122d0565b6120de612349565b6040805182815242602082015233917fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d5910160405180910390a26001606555670c7d713b49da000061212e610b4a565b6121366113de565b61214890670de0b6b3a7640000613131565b6121529190613148565b1115611e46576040516372b9ce3f60e11b815260040160405180910390fd5b6033546001600160a01b0316331461219b5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381166122005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610666565b611e4681612ad2565b609b546000906001600160a01b031663df841eec611ebc6113de565b6033546001600160a01b0316331461224f5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b612282576040516322a2d07b60e21b81526001600160a01b0382166004820152602401610666565b609c80546001600160a01b0319166001600160a01b0383169081179091556040514281527f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b920469906020016108d3565b60a0546122e7906001600160a01b03168383612b24565b5050565b600054610100900460ff166123125760405162461bcd60e51b81526004016106669061316a565b611953612c4e565b600054610100900460ff166123415760405162461bcd60e51b81526004016106669061316a565b611953612c7e565b60006123536113de565b9050600061235f610b4a565b609b549091506001600160a01b031661238b5760405163fd4851e960e01b815260040160405180910390fd5b609e54609b54604051637cd0833160e01b815260048101859052602481018490526001600160a01b03928316926334fcf437921690637cd0833190604401602060405180830381865afa1580156123e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240a9190613097565b6040518263ffffffff1660e01b815260040161242891815260200190565b600060405180830381600087803b15801561244257600080fd5b505af1158015612456573d6000803e3d6000fd5b5050609f54609b546040516337e107bb60e21b815260048101879052602481018690526001600160a01b0392831694506334fcf437935091169063df841eec90604401602060405180830381865afa1580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da9190613097565b6040518263ffffffff1660e01b81526004016124f891815260200190565b600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152609960205260408120546125508361182c565b61255a91906130d9565b90506125668282612a4b565b61256f3061182c565b306000908152609960205260409081902091909155516001600160a01b038316907f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e2161906125c89084904290918252602082015260400190565b60405180910390a2609e54604051637681d99b60e11b81526001600160a01b0384811660048301529091169063ed03b33690602401600060405180830381600087803b15801561261757600080fd5b505af115801561262b573d6000803e3d6000fd5b5050609e54604051637681d99b60e11b81523060048201526001600160a01b03909116925063ed03b33691506024016124f8565b60a15460009081906001600160a01b0316156127875760a15460405163cbf9fe5f60e01b81526001600160a01b0385811660048301529091169063cbf9fe5f90602401602060405180830381865afa1580156126bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e39190613097565b60a15460405163512edc6760e11b81526001600160a01b03868116600483015292945091169063a25db8ce90602401602060405180830381865afa15801561272f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127539190613097565b61275d90836130d9565b6001600160a01b03841660009081526099602052604090205461278091906130d9565b9050915091565b506001600160a01b038216600090815260996020526040902054915091565b6001600160a01b0383166000908152609960205260408120546127ca9083906130d9565b905080831180156127e5575060a1546001600160a01b031615155b156106365760a1546001600160a01b03166349c1de3f8561280684876130d9565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561284c57600080fd5b505af1158015610b40573d6000803e3d6000fd5b6001600160a01b03821660009081526099602052604090205481111561289957604051630bba337f60e11b815260040160405180910390fd5b6000806128a58461265f565b91509150808311156128ca5760405163a06a83a160e01b815260040160405180910390fd5b6128d58484846127a6565b6001600160a01b038416600081815260996020908152604080832080548890039055518681529192916000805160206131d2833981519152910160405180910390a350505050565b612926816113e5565b6001600160a01b0382166000908152609a6020526040902055612948306113e5565b306000908152609a60205260409081902091909155609f549051637681d99b60e11b81526001600160a01b0383811660048301529091169063ed03b33690602401600060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b5050609f54604051637681d99b60e11b81523060048201526001600160a01b03909116925063ed03b3369150602401600060405180830381600087803b158015612a0057600080fd5b505af1158015612a14573d6000803e3d6000fd5b5050505050565b60a0546122e7906001600160a01b0316833084612cac565b6000818310612a425781612a44565b825b9392505050565b6001600160a01b038216612a72576040516346dbfb6d60e11b815260040160405180910390fd5b6001600160a01b03821660009081526099602052604081208054839290612a9a9084906130c6565b90915550506040518181526001600160a01b038316906000906000805160206131d28339815191529060200160405180910390a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612b8091906131b5565b6000604051808303816000865af19150503d8060008114612bbd576040519150601f19603f3d011682016040523d82523d6000602084013e612bc2565b606091505b5091509150818015612bec575080511580612bec575080806020019051810190612bec919061310f565b612a145760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610666565b600054610100900460ff16612c755760405162461bcd60e51b81526004016106669061316a565b61195333612ad2565b600054610100900460ff16612ca55760405162461bcd60e51b81526004016106669061316a565b6001606555565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612d1091906131b5565b6000604051808303816000865af19150503d8060008114612d4d576040519150601f19603f3d011682016040523d82523d6000602084013e612d52565b606091505b5091509150818015612d7c575080511580612d7c575080806020019051810190612d7c919061310f565b6125265760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610666565b6040518060a001604052806005906020820280368337509192915050565b60005b83811015612e1b578181015183820152602001612e03565b50506000910152565b6020815260008251806020840152612e43816040850160208701612e00565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611e4657600080fd5b60008060408385031215612e7f57600080fd5b823591506020830135612e9181612e57565b809150509250929050565b600060208284031215612eae57600080fd5b8135612a4481612e57565b60008060408385031215612ecc57600080fd5b8235612ed781612e57565b946020939093013593505050565b600080600080600080600060e0888a031215612f0057600080fd5b8735612f0b81612e57565b96506020880135612f1b81612e57565b95506040880135612f2b81612e57565b94506060880135612f3b81612e57565b93506080880135612f4b81612e57565b925060a0880135612f5b81612e57565b8092505060c0880135905092959891949750929550565b600080600060608486031215612f8757600080fd5b8335612f9281612e57565b92506020840135612fa281612e57565b929592945050506040919091013590565b600060208284031215612fc557600080fd5b5035919050565b60a08101818360005b6005811015612ff4578151835260209283019290910190600101612fd5565b50505092915050565b6000806040838503121561301057600080fd5b823561301b81612e57565b91506020830135612e9181612e57565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156130a957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561080c5761080c6130b0565b8181038181111561080c5761080c6130b0565b6000602082840312156130fe57600080fd5b815160ff81168114612a4457600080fd5b60006020828403121561312157600080fd5b81518015158114612a4457600080fd5b808202811582820484141761080c5761080c6130b0565b60008261316557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516131c7818460208701612e00565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122045a57d995bf171577ed363943f220c99c144b10a207a528902f262c352306cac64736f6c63430008110033a2646970667358221220c806c194e0d19e14c06dabe93ab8eb194c60b844766389a77e71c95a406679a864736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100b2565b604051809103906000f080158015610064573d6000803e3d6000fd5b50604080513381526001600160a01b0383166020820152428183015290519192507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a2659188919081900360600190a150565b613247806100c08339019056fe608060405234801561001057600080fd5b50613227806100206000396000f3fe608060405234801561001057600080fd5b50600436106102695760003560e01c806370a0823111610151578063b6b55f25116100c3578063d06dca8911610087578063d06dca8914610550578063dd62ed3e14610563578063ee61bd6e1461059c578063f2fde38b146105af578063f36b2425146105c2578063fc68f661146105ca57600080fd5b8063b6b55f2514610504578063b75c42bd14610517578063b790634e1461052c578063bb102aea14610534578063c5ebeaec1461053d57600080fd5b80638da5cb5b116101155780638da5cb5b1461048657806395d89b41146104975780639d76ea58146104b8578063a457c2d7146104cb578063a9059cbb146104de578063aa5af0fd146104f157600080fd5b806370a082311461043a57806370d4cea01461044d578063715018a6146102765780637b898939146104605780638c1a38111461047357600080fd5b80632aeaa291116101ea57806339509351116101ae57806339509351146103d85780634c19386c146103eb5780636011163e146103f357806361215aa8146104065780636ca6d5d0146104145780636cf55ea21461042757600080fd5b80632aeaa291146103885780632e1a7d4d14610390578063313ce567146103a357806331d05b11146103b2578063371fd8e6146103c557600080fd5b8063095ea7b311610231578063095ea7b3146103245780631457db34146103475780631460e3901461035a57806318160ddd1461036d57806323b872dd1461037557600080fd5b80630572b0cc1461026e57806306fdde03146102785780630790ef9a146102b857806307bbebdd146102cb5780630941cb3d146102f6575b600080fd5b6102766105dd565b005b6040805180820190915260128152712232b63a30a83934b6b2a220a4aa37b5b2b760711b60208201525b6040516102af9190612e24565b60405180910390f35b6102766102c6366004612e6c565b61063c565b60a1546102de906001600160a01b031681565b6040516001600160a01b0390911681526020016102af565b610316610304366004612e9c565b609a6020526000908152604090205481565b6040519081526020016102af565b610337610332366004612eb9565b610784565b60405190151581526020016102af565b610276610355366004612e9c565b610812565b610276610368366004612ee5565b6108de565b610316610b4a565b610337610383366004612f72565b610b5a565b610316610e57565b61027661039e366004612fb3565b610ec3565b604051601281526020016102af565b6102766103c0366004612fb3565b6111f3565b6102766103d3366004612fb3565b611222565b6103376103e6366004612eb9565b61131f565b6103166113de565b610316610401366004612e9c565b6113e5565b670c7d713b49da0000610316565b609d546102de906001600160a01b031681565b610276610435366004612e6c565b611470565b610316610448366004612e9c565b61182c565b61027661045b366004612e9c565b61187a565b609e546102de906001600160a01b031681565b610276610481366004612e9c565b611955565b6033546001600160a01b03166102de565b604080518082019091526005815264445044414960d81b60208201526102a2565b60a0546102de906001600160a01b031681565b6103376104d9366004612eb9565b611a16565b6103376104ec366004612eb9565b611b02565b609f546102de906001600160a01b031681565b610276610512366004612fb3565b611d33565b61051f611e49565b6040516102af9190612fcc565b610316611ea0565b61031660975481565b61027661054b366004612fb3565b611eed565b609c546102de906001600160a01b031681565b610316610571366004612ffd565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b609b546102de906001600160a01b031681565b6102766105bd366004612e9c565b612171565b610316612209565b6102766105d8366004612e9c565b612225565b609d546040516311305c1f60e11b81523360048201526001600160a01b0390911690632260b83e90602401600060405180830381600087803b15801561062257600080fd5b505af1158015610636573d6000803e3d6000fd5b50505050565b6033546001600160a01b0316331461066f5760405162461bcd60e51b81526004016106669061302b565b60405180910390fd5b6002606554036106915760405162461bcd60e51b815260040161066690613060565b600260655560a0546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa1580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190613097565b9050600061070f610b4a565b6107176113de565b61072190846130c6565b61072b91906130d9565b90508184111561074e576040516316d5c93f60e21b815260040160405180910390fd5b8381101561076f576040516394290ab960e01b815260040160405180910390fd5b61077983856122d0565b505060016065555050565b60006001600160a01b0383166107ad57604051633d6601c760e11b815260040160405180910390fd5b3360008181526098602090815260408083206001600160a01b03881680855290835292819020869055518581529192917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060015b92915050565b6033546001600160a01b0316331461083c5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b15801561085c57506001600160a01b03811615155b1561088957609d546040516322a2d07b60e21b81526001600160a01b039091166004820152602401610666565b609d80546001600160a01b0319166001600160a01b0383169081179091556040514281527f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e5906020015b60405180910390a250565b600054610100900460ff166108f95760005460ff16156108fd565b303b155b6109605760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610666565b600054610100900460ff16158015610982576000805461ffff19166101011790555b6001600160a01b0388163b151580156109a457506001600160a01b0387163b15155b80156109b957506001600160a01b0386163b15155b80156109ce57506001600160a01b0385163b15155b80156109f457506001600160a01b0383163b1515806109f457506001600160a01b038316155b610a375760405162461bcd60e51b815260206004820152601460248201527357726f6e6720696e697420617267756d656e747360601b6044820152606401610666565b609c80546001600160a01b03199081166001600160a01b038a811691909117909255609b805482168b8416179055609e80548216898416179055609f80548216888416179055609d8054821686841617905560a08054909116918616918217905560978390556040805163313ce56760e01b8152905163313ce567916004818101926020929091908290030181865afa158015610ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afc91906130ec565b60a160146101000a81548160ff021916908360ff160217905550610b1e6122eb565b610b2661231a565b610b2e612349565b8015610b40576000805461ff00191690555b5050505050505050565b6000610b553061182c565b905090565b6001600160a01b0383166000908152609860209081526040808320338452909152812054821115610bce576001600160a01b03841660009081526098602090815260408083203384529091529081902054905163054365bb60e31b8152610666918491600401918252602082015260400190565b6001600160a01b038316610bf557604051633a954ecd60e21b815260040160405180910390fd5b306001600160a01b03841603610c1e5760405163ed728e5760e01b815260040160405180910390fd5b610c278461252e565b600080610c338661265f565b9150915080841115610c62576040516350d2479d60e11b81526004810185905260248101829052604401610666565b610c6d8685846127a6565b6001600160a01b03861660009081526099602052604081208054869290610c959084906130d9565b90915550506001600160a01b038616600090815260986020908152604080832033845290915281208054869290610ccd9084906130d9565b90915550610cdc90508561252e565b6001600160a01b03851660009081526099602052604081208054869290610d049084906130c6565b9091555050609d546001600160a01b031615801590610d2257508315155b15610e1057609d54604051630d5dbdb360e21b8152600481018690526001600160a01b0388811660248301526000921690633576f6cc906044016020604051808303816000875af1158015610d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9f9190613097565b90508015610e0e57609d546040516328ba35d960e11b8152600481018390526001600160a01b038881166024830152909116906351746bb290604401600060405180830381600087803b158015610df557600080fd5b505af1158015610e09573d6000803e3d6000fd5b505050505b505b846001600160a01b0316866001600160a01b03166000805160206131d283398151915286604051610e4391815260200190565b60405180910390a350600195945050505050565b609d546040516246613160e11b81523360048201526000916001600160a01b031690628cc262906024015b602060405180830381865afa158015610e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b559190613097565b600260655403610ee55760405162461bcd60e51b815260040161066690613060565b6002606555730e5bad4108a6a5a8b06820f98026a7f3a77466b2331480610f1f5750732ffa7e9624b923fa811d9b9995aa34b715db194533145b80610f3d5750730d7137fea34bc97819f05544ec7de5c98617989c33145b80610f5b575073c6ba6bb819f1be84efeb2e3f2697ad9818151e5d33145b80610f7957507314f69f9c351b798df31fc53e33c09dd29bfab54733145b80610f975750735c23bd1bd272d22766eb3708b8f874cb93b7524833145b80610fb2575070f406ca147030be7069149e4a7423e3a26433145b80610fd05750735d80a1c0a5084163f1d2620c1b1f43209cd4db1233145b80610fee5750736c21a841d6f029243af87ef01f6772f05832144b33145b156111b15760a0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa15801561103b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105f9190613097565b81111561107f576040516316d5c93f60e21b815260040160405180910390fd5b6110883361252e565b306000908152609960205260409020548111156110b857604051630bba337f60e11b815260040160405180910390fd5b306000908152609960205260409020805482900390556110d83382612860565b6110e0612349565b6110ea33826122d0565b609d546001600160a01b03161561117257609d54604051630d5dbdb360e21b8152600481018390523360248201526001600160a01b0390911690633576f6cc906044016020604051808303816000875af115801561114c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111709190613097565b505b6040805182815242602082015233917fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb910160405180910390a26111eb565b60405162461bcd60e51b815260206004820152600f60248201526e139bdd081dda1a5d195b1a5cdd1959608a1b6044820152606401610666565b506001606555565b6033546001600160a01b0316331461121d5760405162461bcd60e51b81526004016106669061302b565b609755565b6002606554036112445760405162461bcd60e51b815260040161066690613060565b60026065556112523361291d565b336000908152609a602052604090205481111561128257604051630dcad43360e11b815260040160405180910390fd5b61128c3382612a1b565b336000908152609a6020526040812080548392906112ab9084906130d9565b9091555050306000908152609a6020526040812080548392906112cf9084906130d9565b909155506112dd9050612349565b6040805182815242602082015233917f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d910160405180910390a2506001606555565b60006001600160a01b03831661134857604051633d6601c760e11b815260040160405180910390fd5b3360009081526098602090815260408083206001600160a01b03871684529091528120546113779084906130c6565b3360008181526098602090815260408083206001600160a01b038a16808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a35060019392505050565b6000610b55305b609f546001600160a01b038281166000818152609a602052604080822054905163966da88960e01b81526004810191909152602481019290925292919091169063966da889906044015b602060405180830381865afa15801561144c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080c9190613097565b6002606554036114925760405162461bcd60e51b815260040161066690613060565b6002606555730e5bad4108a6a5a8b06820f98026a7f3a77466b23314806114cc5750732ffa7e9624b923fa811d9b9995aa34b715db194533145b806114ea5750730d7137fea34bc97819f05544ec7de5c98617989c33145b80611508575073c6ba6bb819f1be84efeb2e3f2697ad9818151e5d33145b8061152657507314f69f9c351b798df31fc53e33c09dd29bfab54733145b806115445750735c23bd1bd272d22766eb3708b8f874cb93b7524833145b8061155f575070f406ca147030be7069149e4a7423e3a26433145b8061157d5750735d80a1c0a5084163f1d2620c1b1f43209cd4db1233145b8061159b5750736c21a841d6f029243af87ef01f6772f05832144b33145b156111b157816000036115c15760405163078e1d8560e01b815260040160405180910390fd5b6001600160a01b0381166116065760405162461bcd60e51b815260206004820152600c60248201526b41646472657373207a65726f60a01b6044820152606401610666565b306001600160a01b0382160361165e5760405162461bcd60e51b815260206004820181905260248201527f43616e6e6f74206465706f736974206f6e20626568616c66206f6620706f6f6c6044820152606401610666565b60a0546040516370a0823160e01b81523360048201526116d59184916001600160a01b03909116906370a0823190602401602060405180830381865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190613097565b612a33565b91506116e08161252e565b6097541561172557609754306000908152609960205260409020546117069084906130c6565b111561172557604051633f27d61760e01b815260040160405180910390fd5b61172f3383612a1b565b6117398183612a4b565b30600090815260996020526040812080548492906117589084906130c6565b909155506117669050612349565b609d546001600160a01b0316156117de57609d546040516328ba35d960e11b8152600481018490526001600160a01b038381166024830152909116906351746bb290604401600060405180830381600087803b1580156117c557600080fd5b505af11580156117d9573d6000803e3d6000fd5b505050505b604080518381524260208201526001600160a01b0383169133917fef0ada5ca19bede6a40b575865a6ce451938d26835b7215e6a5e03bb2c439212910160405180910390a350506001606555565b609e546001600160a01b0382811660008181526099602052604080822054905163966da88960e01b81526004810191909152602481019290925292919091169063966da8899060440161142f565b6033546001600160a01b031633146118a45760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b1580156118c457506001600160a01b03811615155b156118ed576040516322a2d07b60e21b81526001600160a01b0382166004820152602401610666565b609b80546001600160a01b0319166001600160a01b0383169081179091551561191857611918612349565b806001600160a01b03167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e0182426040516108d391815260200190565b565b6033546001600160a01b0316331461197f5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b15801561199f57506001600160a01b03811615155b156119c8576040516322a2d07b60e21b81526001600160a01b0382166004820152602401610666565b60a180546001600160a01b0319166001600160a01b0383169081179091556040514281527f8e6481d1924c9bb8cdfd9d6140f3e5570c34c6c580d915144728bbbf394eed0a906020016108d3565b60006001600160a01b038316611a3f57604051633d6601c760e11b815260040160405180910390fd5b3360009081526098602090815260408083206001600160a01b038716845290915290205482811015611a8e5760405163054365bb60e31b81526004810184905260248101829052604401610666565b6000611a9a84836130d9565b3360008181526098602090815260408083206001600160a01b038b16808552908352928190208590555184815293945090927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3506001949350505050565b60006001600160a01b038316611b2b57604051633a954ecd60e21b815260040160405180910390fd5b306001600160a01b03841603611b545760405163ed728e5760e01b815260040160405180910390fd5b33611b5e8161252e565b600080611b6a8361265f565b9150915080851115611b99576040516350d2479d60e11b81526004810186905260248101829052604401610666565b611ba48386846127a6565b6001600160a01b038316600090815260996020526040902080548690039055611bcc8661252e565b6001600160a01b03861660009081526099602052604081208054879290611bf49084906130c6565b9091555050609d546001600160a01b031615801590611c1257508415155b15611d0057609d54604051630d5dbdb360e21b8152600481018790526001600160a01b0385811660248301526000921690633576f6cc906044016020604051808303816000875af1158015611c6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8f9190613097565b90508015611cfe57609d546040516328ba35d960e11b8152600481018390526001600160a01b038981166024830152909116906351746bb290604401600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b505050505b505b856001600160a01b0316836001600160a01b03166000805160206131d283398151915287604051610e4391815260200190565b730e5bad4108a6a5a8b06820f98026a7f3a77466b2331480611d685750732ffa7e9624b923fa811d9b9995aa34b715db194533145b80611d865750730d7137fea34bc97819f05544ec7de5c98617989c33145b80611da4575073c6ba6bb819f1be84efeb2e3f2697ad9818151e5d33145b80611dc257507314f69f9c351b798df31fc53e33c09dd29bfab54733145b80611de05750735c23bd1bd272d22766eb3708b8f874cb93b7524833145b80611dfb575070f406ca147030be7069149e4a7423e3a26433145b80611e195750735d80a1c0a5084163f1d2620c1b1f43209cd4db1233145b80611e375750736c21a841d6f029243af87ef01f6772f05832144b33145b156111b157611e468133611470565b50565b611e51612de2565b6040518060a00160405280611e64610b4a565b8152602001611e71611ea0565b8152602001611e7e612209565b8152602001611e8b6113de565b8152602001670c7d713b49da00009052919050565b609b546000906001600160a01b0316637cd08331611ebc6113de565b611ec4610b4a565b6040516001600160e01b031960e085901b16815260048101929092526024820152604401610e82565b609c546001600160a01b0316611f1657604051631c038dab60e21b815260040160405180910390fd5b609c5460405163039ff21960e21b81523360048201526001600160a01b0390911690630e7fc86490602401602060405180830381865afa158015611f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f82919061310f565b611f9f57604051637582fa9b60e11b815260040160405180910390fd5b611fa7610b4a565b600003611fc7576040516316d5c93f60e21b815260040160405180910390fd5b600260655403611fe95760405162461bcd60e51b815260040161066690613060565b600260655560a0546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401602060405180830381865afa158015612036573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205a9190613097565b81111561207a576040516316d5c93f60e21b815260040160405180910390fd5b6120833361291d565b336000908152609a6020526040812080548392906120a29084906130c6565b9091555050306000908152609a6020526040812080548392906120c69084906130c6565b909155506120d6905033826122d0565b6120de612349565b6040805182815242602082015233917fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d5910160405180910390a26001606555670c7d713b49da000061212e610b4a565b6121366113de565b61214890670de0b6b3a7640000613131565b6121529190613148565b1115611e46576040516372b9ce3f60e11b815260040160405180910390fd5b6033546001600160a01b0316331461219b5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381166122005760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610666565b611e4681612ad2565b609b546000906001600160a01b031663df841eec611ebc6113de565b6033546001600160a01b0316331461224f5760405162461bcd60e51b81526004016106669061302b565b6001600160a01b0381163b612282576040516322a2d07b60e21b81526001600160a01b0382166004820152602401610666565b609c80546001600160a01b0319166001600160a01b0383169081179091556040514281527f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b920469906020016108d3565b60a0546122e7906001600160a01b03168383612b24565b5050565b600054610100900460ff166123125760405162461bcd60e51b81526004016106669061316a565b611953612c4e565b600054610100900460ff166123415760405162461bcd60e51b81526004016106669061316a565b611953612c7e565b60006123536113de565b9050600061235f610b4a565b609b549091506001600160a01b031661238b5760405163fd4851e960e01b815260040160405180910390fd5b609e54609b54604051637cd0833160e01b815260048101859052602481018490526001600160a01b03928316926334fcf437921690637cd0833190604401602060405180830381865afa1580156123e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061240a9190613097565b6040518263ffffffff1660e01b815260040161242891815260200190565b600060405180830381600087803b15801561244257600080fd5b505af1158015612456573d6000803e3d6000fd5b5050609f54609b546040516337e107bb60e21b815260048101879052602481018690526001600160a01b0392831694506334fcf437935091169063df841eec90604401602060405180830381865afa1580156124b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124da9190613097565b6040518263ffffffff1660e01b81526004016124f891815260200190565b600060405180830381600087803b15801561251257600080fd5b505af1158015612526573d6000803e3d6000fd5b505050505050565b6001600160a01b0381166000908152609960205260408120546125508361182c565b61255a91906130d9565b90506125668282612a4b565b61256f3061182c565b306000908152609960205260409081902091909155516001600160a01b038316907f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e2161906125c89084904290918252602082015260400190565b60405180910390a2609e54604051637681d99b60e11b81526001600160a01b0384811660048301529091169063ed03b33690602401600060405180830381600087803b15801561261757600080fd5b505af115801561262b573d6000803e3d6000fd5b5050609e54604051637681d99b60e11b81523060048201526001600160a01b03909116925063ed03b33691506024016124f8565b60a15460009081906001600160a01b0316156127875760a15460405163cbf9fe5f60e01b81526001600160a01b0385811660048301529091169063cbf9fe5f90602401602060405180830381865afa1580156126bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126e39190613097565b60a15460405163512edc6760e11b81526001600160a01b03868116600483015292945091169063a25db8ce90602401602060405180830381865afa15801561272f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127539190613097565b61275d90836130d9565b6001600160a01b03841660009081526099602052604090205461278091906130d9565b9050915091565b506001600160a01b038216600090815260996020526040902054915091565b6001600160a01b0383166000908152609960205260408120546127ca9083906130d9565b905080831180156127e5575060a1546001600160a01b031615155b156106365760a1546001600160a01b03166349c1de3f8561280684876130d9565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561284c57600080fd5b505af1158015610b40573d6000803e3d6000fd5b6001600160a01b03821660009081526099602052604090205481111561289957604051630bba337f60e11b815260040160405180910390fd5b6000806128a58461265f565b91509150808311156128ca5760405163a06a83a160e01b815260040160405180910390fd5b6128d58484846127a6565b6001600160a01b038416600081815260996020908152604080832080548890039055518681529192916000805160206131d2833981519152910160405180910390a350505050565b612926816113e5565b6001600160a01b0382166000908152609a6020526040902055612948306113e5565b306000908152609a60205260409081902091909155609f549051637681d99b60e11b81526001600160a01b0383811660048301529091169063ed03b33690602401600060405180830381600087803b1580156129a357600080fd5b505af11580156129b7573d6000803e3d6000fd5b5050609f54604051637681d99b60e11b81523060048201526001600160a01b03909116925063ed03b3369150602401600060405180830381600087803b158015612a0057600080fd5b505af1158015612a14573d6000803e3d6000fd5b5050505050565b60a0546122e7906001600160a01b0316833084612cac565b6000818310612a425781612a44565b825b9392505050565b6001600160a01b038216612a72576040516346dbfb6d60e11b815260040160405180910390fd5b6001600160a01b03821660009081526099602052604081208054839290612a9a9084906130c6565b90915550506040518181526001600160a01b038316906000906000805160206131d28339815191529060200160405180910390a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663a9059cbb60e01b1790529151600092839290871691612b8091906131b5565b6000604051808303816000865af19150503d8060008114612bbd576040519150601f19603f3d011682016040523d82523d6000602084013e612bc2565b606091505b5091509150818015612bec575080511580612bec575080806020019051810190612bec919061310f565b612a145760405162461bcd60e51b815260206004820152602d60248201527f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260448201526c185b9cd9995c8819985a5b1959609a1b6064820152608401610666565b600054610100900460ff16612c755760405162461bcd60e51b81526004016106669061316a565b61195333612ad2565b600054610100900460ff16612ca55760405162461bcd60e51b81526004016106669061316a565b6001606555565b604080516001600160a01b0385811660248301528481166044830152606480830185905283518084039091018152608490920183526020820180516001600160e01b03166323b872dd60e01b1790529151600092839290881691612d1091906131b5565b6000604051808303816000865af19150503d8060008114612d4d576040519150601f19603f3d011682016040523d82523d6000602084013e612d52565b606091505b5091509150818015612d7c575080511580612d7c575080806020019051810190612d7c919061310f565b6125265760405162461bcd60e51b815260206004820152603160248201527f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a207472604482015270185b9cd9995c919c9bdb4819985a5b1959607a1b6064820152608401610666565b6040518060a001604052806005906020820280368337509192915050565b60005b83811015612e1b578181015183820152602001612e03565b50506000910152565b6020815260008251806020840152612e43816040850160208701612e00565b601f01601f19169190910160400192915050565b6001600160a01b0381168114611e4657600080fd5b60008060408385031215612e7f57600080fd5b823591506020830135612e9181612e57565b809150509250929050565b600060208284031215612eae57600080fd5b8135612a4481612e57565b60008060408385031215612ecc57600080fd5b8235612ed781612e57565b946020939093013593505050565b600080600080600080600060e0888a031215612f0057600080fd5b8735612f0b81612e57565b96506020880135612f1b81612e57565b95506040880135612f2b81612e57565b94506060880135612f3b81612e57565b93506080880135612f4b81612e57565b925060a0880135612f5b81612e57565b8092505060c0880135905092959891949750929550565b600080600060608486031215612f8757600080fd5b8335612f9281612e57565b92506020840135612fa281612e57565b929592945050506040919091013590565b600060208284031215612fc557600080fd5b5035919050565b60a08101818360005b6005811015612ff4578151835260209283019290910190600101612fd5565b50505092915050565b6000806040838503121561301057600080fd5b823561301b81612e57565b91506020830135612e9181612e57565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000602082840312156130a957600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561080c5761080c6130b0565b8181038181111561080c5761080c6130b0565b6000602082840312156130fe57600080fd5b815160ff81168114612a4457600080fd5b60006020828403121561312157600080fd5b81518015158114612a4457600080fd5b808202811582820484141761080c5761080c6130b0565b60008261316557634e487b7160e01b600052601260045260246000fd5b500490565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516131c7818460208701612e00565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122045a57d995bf171577ed363943f220c99c144b10a207a528902f262c352306cac64736f6c63430008110033a2646970667358221220c806c194e0d19e14c06dabe93ab8eb194c60b844766389a77e71c95a406679a864736f6c63430008110033",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a pool contract",
    "events": {
      "PoolDeployed(address,address,uint256)": {
        "details": "emitted after pool is deployed by any user",
        "params": {
          "poolAddress": "of deployed pool",
          "timestamp": "of the deployment*",
          "user": "the address initiating the deployment"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "PoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}