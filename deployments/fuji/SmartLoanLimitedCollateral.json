{
  "address": "0xec1624FcD45866557BA946a4A574CFE212166566",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "LoanClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "contract IAssetsExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFullLoanStatus",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxBlockTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDataTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinSelloutLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPercentagePrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAvaxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receivedSigner",
          "type": "address"
        }
      ],
      "name": "isSignerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receivedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "isTimestampValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAvaxAmountOut",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6d86a4e42bef340b2b98b47699507956a50cf12053e67c129749719b96c7445c",
  "receipt": {
    "to": null,
    "from": "0xb5690580D0CBfa0eBAFDb6aa6171c4205B9E31dE",
    "contractAddress": "0xec1624FcD45866557BA946a4A574CFE212166566",
    "transactionIndex": 0,
    "gasUsed": "4644959",
    "logsBloom": "0x
    "blockHash": "0x8248b79c382f6f019c1a2c2729903275e2e481a5de7f841c705f95616fa365cd",
    "transactionHash": "0x6d86a4e42bef340b2b98b47699507956a50cf12053e67c129749719b96c7445c",
    "logs": [],
    "blockNumber": 6738023,
    "cumulativeGasUsed": "4644959",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "3b4e8c522484def583a710d0176a0c53",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"contract IAssetsExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullLoanStatus\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBlockTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDataTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinSelloutLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentagePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAvaxAmountIn\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivedSigner\",\"type\":\"address\"}],\"name\":\"isSignerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedTimestamp\",\"type\":\"uint256\"}],\"name\":\"isTimestampValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAvaxAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"of funds to borrow\"}},\"closeLoan()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getAllAssetsPrices()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getBalance(address,bytes32)\":{\"details\":\"_asset the code of an asset_user the address of queried user*\"},\"getLTV()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getTotalValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"invest(bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_asset\":\"code of the asset\",\"_exactERC20AmountOut\":\"exact amount of asset to buy\",\"_maxAvaxAmountIn\":\"maximum amount of AVAX to sell\"}},\"isSolvent()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"liquidateLoan(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_asset\":\"code of the asset\",\"_exactERC20AmountIn\":\"exact amount of token to sell\",\"_minAvaxAmountOut\":\"minimum amount of the AVAX token to buy\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"of funds to repay\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"to be withdrawn\"}},\"withdrawAsset(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256)\":{\"notice\":\"Borrows funds from the pool\"},\"closeLoan()\":{\"notice\":\"This function can only be accessed by the owner and allows selling all of the assets.\"},\"fund()\":{\"notice\":\"Funds a loan with the value attached to the transaction Allows to add up to 1.25 AVAX of collateral in total*\"},\"getAllAssetsBalances()\":{\"notice\":\"Returns the balances of all assets served by the price provider It could be used as a helper method for UI*\"},\"getAllAssetsPrices()\":{\"notice\":\"Returns the prices of all assets served by the price provider It could be used as a helper method for UI\"},\"getBalance(address,bytes32)\":{\"notice\":\"Returns the current balance of the asset held by a given user\"},\"getDebt()\":{\"notice\":\"Returns the current debt associated with the loan*\"},\"getLTV()\":{\"notice\":\"LoanToValue ratio is calculated as the ratio between debt and collateral. The collateral is equal to total loan value takeaway debt.\"},\"getMaxBlockTimestampDelay()\":{\"notice\":\"Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy*\"},\"getTotalValue()\":{\"notice\":\"Returns the current value of a loan in AVAX including cash and investments\"},\"invest(bytes32,uint256,uint256)\":{\"notice\":\"Invests an amount to buy an asset\"},\"isSignerAuthorized(address)\":{\"notice\":\"Override PriceAware method, addresses below belong to authorized signers of data feeds*\"},\"isSolvent()\":{\"notice\":\"Checks if the loan is solvent. It means that the ratio between debt and collateral is below safe level, which is parametrized by the getMaxLtv()\"},\"redeem(bytes32,uint256,uint256)\":{\"notice\":\"Redeem an investment by selling an asset\"},\"repay(uint256)\":{\"notice\":\"Repays funds to the pool\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws an amount from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgraded/SmartLoanLimitedCollateral.sol\":\"SmartLoanLimitedCollateral\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * CompoundingIndex\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\n * @dev updatedRate the value of updated rate\\n **/\\ncontract CompoundingIndex is Ownable {\\n  using WadRayMath for uint256;\\n\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\n  uint256 private constant BASE_RATE = 1e18;\\n\\n  uint256 public start = block.timestamp;\\n\\n  uint256 public index = BASE_RATE;\\n  uint256 public indexUpdateTime = start;\\n\\n  mapping(uint256 => uint256) prevIndex;\\n  mapping(address => uint256) userUpdateTime;\\n\\n  uint256 public rate;\\n\\n  constructor(address owner_) {\\n    if (address(owner_) != address(0)) {\\n      transferOwnership(owner_);\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate\\n   * Before the new rate is set, the index is updated accumulating interest\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  function setRate(uint256 _rate) public onlyOwner {\\n    updateIndex();\\n    rate = _rate;\\n    emit RateUpdated(rate);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * Updates user index\\n   * It persists the update time and the update index time->index mapping\\n   * @dev user address of the index owner\\n   **/\\n  function updateUser(address user) public onlyOwner {\\n    userUpdateTime[user] = block.timestamp;\\n    prevIndex[block.timestamp] = getIndex();\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Gets current value of the compounding index\\n   * It recalculates the value on-demand without updating the storage\\n   **/\\n  function getIndex() public view returns (uint256) {\\n    uint256 period = block.timestamp - indexUpdateTime;\\n    if (period > 0) {\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\n    } else {\\n      return index;\\n    }\\n  }\\n\\n  /**\\n   * Gets the user value recalculated to the current index\\n   * It recalculates the value on-demand without updating the storage\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\n   * of 1 Wei)\\n   **/\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\n    uint256 userTime = userUpdateTime[user];\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\n\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function updateIndex() internal {\\n    prevIndex[indexUpdateTime] = index;\\n\\n    index = getIndex();\\n    indexUpdateTime = block.timestamp;\\n  }\\n\\n  /**\\n   * Returns compounded factor in Ray\\n   **/\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  event RateUpdated(uint256 updatedRate);\\n}\\n\",\"keccak256\":\"0x8b50fbe2e0442685282a77b976ee57643d5ef2f9e63c4e38ed00cf5a5b095d19\",\"license\":\"UNLICENSED\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./CompoundingIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit and borrow funds from a single pot\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\n * The interest rates calculation is delegated to the external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n  using TransferHelper for address payable;\\n\\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n  mapping(address => mapping(address => uint256)) private _allowed;\\n  mapping(address => uint256) private _deposited;\\n\\n  mapping(address => uint256) public borrowed;\\n\\n  IRatesCalculator private _ratesCalculator;\\n  IBorrowersRegistry private _borrowersRegistry;\\n\\n  CompoundingIndex private _depositIndex;\\n  CompoundingIndex private _borrowIndex;\\n\\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    _ratesCalculator = ratesCalculator_;\\n    _depositIndex = depositIndex_;\\n    _borrowIndex = borrowIndex_;\\n\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    _updateRates();\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate calculator.\\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _ratesCalculator the address of rates calculator\\n   **/\\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n    // setting address(0) ratesCalculator_ freezes the pool\\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n    _ratesCalculator = ratesCalculator_;\\n    if (address(ratesCalculator_) != address(0)) {\\n      _updateRates();\\n    }\\n  }\\n\\n  /**\\n   * Sets the new borrowers registry contract.\\n   * The borrowers registry decides if an account can borrow funds.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _borrowersRegistry the address of borrowers registry\\n   **/\\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n    require(address(borrowersRegistry_) != address(0), \\\"The borrowers registry cannot set to a null address\\\");\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    // (this is verified in \\\"require\\\" above)\\n    unchecked {\\n      _deposited[msg.sender] -= amount;\\n    }\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(msg.sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 currentAllowance = _allowed[msg.sender][spender];\\n    require(currentAllowance >= subtractedValue, \\\"Current allowance is smaller than the subtractedValue\\\");\\n\\n    uint256 newAllowance = currentAllowance - subtractedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    _allowed[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed to transfer required amount\\\");\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    _deposited[sender] -= amount;\\n    _allowed[sender][msg.sender] -= amount;\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Deposits the message value\\n   * It updates user deposited balance, total deposited and rates\\n   **/\\n  function deposit() public payable virtual nonReentrant {\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _mint(msg.sender, msg.value);\\n    _updateRates();\\n\\n    emit Deposit(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /**\\n   * Withdraws selected amount from the user deposits\\n   * @dev _amount the amount to be withdrawn\\n   **/\\n  function withdraw(uint256 _amount) external nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough funds in the pool to fund the loan\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _burn(msg.sender, _amount);\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Borrows the specified amount\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev _amount the amount to be borrowed\\n   **/\\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n    require(address(this).balance >= _amount);\\n\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    borrowed[msg.sender] += _amount;\\n    borrowed[address(this)] += _amount;\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Borrowing(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Repays the message value\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev It is only meant to be used by the SmartLoan.\\n   **/\\n  function repay() external payable nonReentrant {\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    require(borrowed[msg.sender] >= msg.value, \\\"You are trying to repay more that was borrowed by a user\\\");\\n\\n    borrowed[msg.sender] -= msg.value;\\n    borrowed[address(this)] -= msg.value;\\n\\n    _updateRates();\\n\\n    emit Repayment(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /* =========\\n\\n\\n  /**\\n   * Returns the current borrowed amount for the given user\\n   * The value includes the interest rates owned at the current moment\\n   * @dev _user the address of queried borrower\\n  **/\\n  function getBorrowed(address _user) public view returns (uint256) {\\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return balanceOf(address(this));\\n  }\\n\\n  function totalBorrowed() public view returns (uint256) {\\n    return getBorrowed(address(this));\\n  }\\n\\n  /**\\n   * Returns the current deposited amount for the given user\\n   * The value includes the interest rates earned at the current moment\\n   * @dev _user the address of queried depositor\\n   **/\\n  function balanceOf(address user) public view override returns (uint256) {\\n    return _depositIndex.getIndexedValue(_deposited[user], user);\\n  }\\n\\n  /**\\n   * Returns the current interest rate for deposits\\n   **/\\n  function getDepositRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Returns the current interest rate for borrowings\\n   **/\\n  function getBorrowingRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n   **/\\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\\n\\n    require(amount <= address(this).balance, \\\"Trying to recover more surplus funds than pool balance\\\");\\n    require(amount <= surplus, \\\"Trying to recover more funds than current surplus\\\");\\n\\n    payable(account).safeTransferETH(amount);\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n    _deposited[account] += amount;\\n    _deposited[address(this)] += amount;\\n\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n    require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n    // verified in \\\"require\\\" above\\n    unchecked {\\n      _deposited[account] -= amount;\\n      _deposited[address(this)] -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _updateRates() internal {\\n    require(address(_ratesCalculator) != address(0), \\\"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\\\");\\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\\n  }\\n\\n  function _accumulateDepositInterest(address user) internal {\\n    uint256 depositedWithInterest = balanceOf(user);\\n    uint256 interest = depositedWithInterest - _deposited[user];\\n\\n    _mint(user, interest);\\n\\n    emit InterestCollected(user, interest, block.timestamp);\\n\\n    _depositIndex.updateUser(user);\\n    _depositIndex.updateUser(address(this));\\n  }\\n\\n  function _accumulateBorrowingInterest(address user) internal {\\n    uint256 borrowedWithInterest = getBorrowed(user);\\n    uint256 interest = borrowedWithInterest - borrowed[user];\\n    borrowed[user] = borrowedWithInterest;\\n    borrowed[address(this)] += interest;\\n\\n    _borrowIndex.updateUser(user);\\n    _borrowIndex.updateUser(address(this));\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier canBorrow() {\\n    require(address(_borrowersRegistry) != address(0), \\\"Borrowers registry is not configured\\\");\\n    require(_borrowersRegistry.canBorrow(msg.sender), \\\"Only the accounts authorised by borrowers registry may borrow\\\");\\n    require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n    _;\\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after the user deposits funds\\n   * @param user the address performing the deposit\\n   * @param value the amount deposited\\n   * @param timestamp of the deposit\\n   **/\\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user withdraws funds\\n   * @param user the address performing the withdrawal\\n   * @param value the amount withdrawn\\n   * @param timestamp of the withdrawal\\n   **/\\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user borrows funds\\n   * @param user the address that borrows\\n   * @param value the amount borrowed\\n   * @param timestamp of the borrowing\\n   **/\\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user repays debt\\n   * @param user the address that repays\\n   * @param value the amount repaid\\n   * @param timestamp of the repayment\\n   **/\\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after accumulating deposit interest\\n   * @param user the address that the deposit interest is accumulated\\n   * @param value the amount accumulated interest\\n   * @param timestamp of the interest accumulation\\n   **/\\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n  * @dev emitted after changing borrowers registry\\n  * @param registry an address of the newly set borrowers registry\\n  * @param timestamp of the borrowers registry change\\n  **/\\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n}\",\"keccak256\":\"0x6288b96978a9ecc2162ba35c879ce0045fa4aa2dc5742415be2558c69ac5f18a\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoan.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./SmartLoanProperties.sol\\\";\\n\\n/**\\n * @title SmartLoan\\n * A contract that is authorised to borrow funds using delegated credit.\\n * It maintains solvency calculating the current value of assets and borrowings.\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\n * It permits only a limited and safe token transfer.\\n *\\n */\\ncontract SmartLoan is SmartLoanProperties, PriceAware, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n  using TransferHelper for address payable;\\n  using TransferHelper for address;\\n\\n  function initialize() external initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n  }\\n\\n  /**\\n   * Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy\\n   **/\\n  function getMaxBlockTimestampDelay() public virtual override view returns (uint256) {\\n    return MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  /**\\n   * Override PriceAware method, addresses below belong to authorized signers of data feeds\\n   **/\\n  function isSignerAuthorized(address _receivedSigner) public override virtual view returns (bool) {\\n    return (_receivedSigner == getPriceProvider1()) || (_receivedSigner == getPriceProvider2());\\n  }\\n\\n  /**\\n   * Funds a loan with the value attached to the transaction\\n   **/\\n  function fund() public virtual payable {\\n    emit Funded(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /**\\n   * This function allows selling assets without checking if the loan will remain solvent after this operation.\\n   * It is used as part of the sellout() function which sells part/all of assets in order to bring the loan back to solvency.\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\n   **/\\n  function sellAsset(bytes32 asset, uint256 _amount, uint256 _minAvaxOut) private {\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\n    address(token).safeTransfer(address(getExchange()), _amount);\\n    getExchange().sellAsset(asset, _amount, _minAvaxOut);\\n  }\\n\\n  /**\\n   * @dev This function uses the redstone-evm-connector\\n  **/\\n  function withdrawAsset(bytes32 asset, uint256 amount) external onlyOwner nonReentrant remainsSolvent {\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\n    address(token).safeTransfer(msg.sender, amount);\\n  }\\n\\n  /**\\n   * This function attempts to sell just enough asset to receive targetAvaxAmount.\\n   * If there is not enough asset's balance to cover the whole targetAvaxAmount then the whole asset's balance\\n   * is being sold.\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\n   **/\\n  function sellAssetForTargetAvax(bytes32 asset, uint256 targetAvaxAmount) private {\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\n    uint256 balance = token.balanceOf(address(this));\\n    if (balance > 0) {\\n      uint256 minSaleAmount = getExchange().getMinimumERC20TokenAmountForExactAVAX(targetAvaxAmount, address(token));\\n      if (balance < minSaleAmount) {\\n        sellAsset(asset, balance, 0);\\n      } else {\\n        sellAsset(asset, minSaleAmount, targetAvaxAmount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * This function attempts to repay the _repayAmount back to the pool.\\n   * If there is not enough AVAX balance to repay the _repayAmount then the available AVAX balance will be repaid.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function attemptRepay(uint256 _repayAmount) internal {\\n    repay(Math.min(address(this).balance, _repayAmount));\\n  }\\n\\n  function payBonus(uint256 _bonus) internal {\\n    payable(msg.sender).safeTransferETH(Math.min(_bonus, address(this).balance));\\n  }\\n\\n  /**\\n   * This function can only be accessed by the owner and allows selling all of the assets.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function closeLoan() external payable onlyOwner nonReentrant remainsSolvent {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      uint256 balance = getERC20TokenInstance(assets[i]).balanceOf(address(this));\\n      if (balance > 0) {\\n        sellAsset(assets[i], balance, 0);\\n      }\\n    }\\n\\n    uint256 debt = getDebt();\\n    require(address(this).balance >= debt, \\\"Selling out all assets without repaying the whole debt is not allowed\\\");\\n    repay(debt);\\n    emit LoanClosed(debt, address(this).balance, block.timestamp);\\n\\n    uint256 balance = address(this).balance;\\n    if (balance > 0) {\\n      payable(msg.sender).safeTransferETH(balance);\\n      emit Withdrawn(msg.sender, balance, block.timestamp);\\n    }\\n  }\\n\\n  /**\\n  * @dev This function uses the redstone-evm-connector\\n  **/\\n  function liquidateLoan(uint256 repayAmount) external payable nonReentrant successfulLiquidation {\\n    require(!isSolvent(), \\\"Cannot sellout a solvent account\\\");\\n\\n    uint256 debt = getDebt();\\n    if (repayAmount > debt) {\\n      repayAmount = debt;\\n    }\\n    uint256 bonus = (repayAmount * getLiquidationBonus()) / getPercentagePrecision();\\n    uint256 totalRepayAmount = repayAmount + bonus;\\n\\n    sellout(totalRepayAmount);\\n    attemptRepay(repayAmount);\\n    payBonus(bonus);\\n    emit Liquidated(msg.sender, repayAmount, bonus, getLTV(), block.timestamp);\\n  }\\n\\n  /**\\n   * This function role is to sell part/all of the available assets in order to receive the targetAvaxAmount.\\n   *\\n   **/\\n  function sellout(uint256 targetAvaxAmount) private {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      if (address(this).balance >= targetAvaxAmount) break;\\n      sellAssetForTargetAvax(assets[i], targetAvaxAmount - address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * Withdraws an amount from the loan\\n   * This method could be used to cash out profits from investments\\n   * The loan needs to remain solvent after the withdrawal\\n   * @param _amount to be withdrawn\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function withdraw(uint256 _amount) public virtual onlyOwner nonReentrant remainsSolvent {\\n    require(address(this).balance >= _amount, \\\"There is not enough funds to withdraw\\\");\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    emit Withdrawn(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Invests an amount to buy an asset\\n   * @param _asset code of the asset\\n   * @param _exactERC20AmountOut exact amount of asset to buy\\n   * @param _maxAvaxAmountIn maximum amount of AVAX to sell\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function invest(bytes32 _asset, uint256 _exactERC20AmountOut, uint256 _maxAvaxAmountIn) external onlyOwner nonReentrant remainsSolvent {\\n    require(address(this).balance >= _maxAvaxAmountIn, \\\"Not enough funds are available to invest in an asset\\\");\\n\\n    bool success = getExchange().buyAsset{value: _maxAvaxAmountIn}(_asset, _exactERC20AmountOut);\\n    require(success, \\\"Investment failed\\\");\\n\\n    emit Invested(msg.sender, _asset, _exactERC20AmountOut, block.timestamp);\\n  }\\n\\n  /**\\n   * Redeem an investment by selling an asset\\n   * @param _asset code of the asset\\n   * @param _exactERC20AmountIn exact amount of token to sell\\n   * @param _minAvaxAmountOut minimum amount of the AVAX token to buy\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function redeem(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external nonReentrant onlyOwner remainsSolvent {\\n    IERC20Metadata token = getERC20TokenInstance(_asset);\\n    address(token).safeTransfer(address(getExchange()), _exactERC20AmountIn);\\n    bool success = getExchange().sellAsset(_asset, _exactERC20AmountIn, _minAvaxAmountOut);\\n    require(success, \\\"Redemption failed\\\");\\n\\n    emit Redeemed(msg.sender, _asset, _exactERC20AmountIn, block.timestamp);\\n  }\\n\\n  /**\\n   * Borrows funds from the pool\\n   * @param _amount of funds to borrow\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function borrow(uint256 _amount) external onlyOwner remainsSolvent {\\n    getPool().borrow(_amount);\\n\\n    emit Borrowed(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Repays funds to the pool\\n   * @param _amount of funds to repay\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function repay(uint256 _amount) public payable {\\n    if (isSolvent()) {\\n      require(msg.sender == owner());\\n    }\\n\\n    _amount = Math.min(_amount, getDebt());\\n    require(address(this).balance >= _amount, \\\"There is not enough funds to repay the loan\\\");\\n\\n    getPool().repay{value: _amount}();\\n\\n    emit Repaid(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  receive() external payable {}\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Returns the current value of a loan in AVAX including cash and investments\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function getTotalValue() public view virtual returns (uint256) {\\n    uint256 total = address(this).balance;\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    uint256[] memory prices = getPricesFromMsg(assets);\\n    uint256 avaxPrice = prices[0];\\n    require(avaxPrice != 0, \\\"Avax price returned from oracle is zero\\\");\\n\\n    for (uint256 i = 1; i < prices.length; i++) {\\n      require(prices[i] != 0, \\\"Asset price returned from oracle is zero\\\");\\n\\n      bytes32 _asset = assets[i];\\n      IERC20Metadata token = getERC20TokenInstance(_asset);\\n      uint256 assetBalance = getBalance(address(this), _asset);\\n\\n      total = total + (prices[i] * 10**18 * assetBalance) / (avaxPrice * 10**token.decimals());\\n    }\\n\\n    return total;\\n  }\\n\\n  /**\\n   * Returns the current balance of the asset held by a given user\\n   * @dev _asset the code of an asset\\n   * @dev _user the address of queried user\\n   **/\\n  function getBalance(address _user, bytes32 _asset) public view returns (uint256) {\\n    IERC20 token = IERC20(getExchange().getAssetAddress(_asset));\\n    return token.balanceOf(_user);\\n  }\\n\\n  function getERC20TokenInstance(bytes32 _asset) internal view returns (IERC20Metadata) {\\n    address assetAddress = getExchange().getAssetAddress(_asset);\\n    IERC20Metadata token = IERC20Metadata(assetAddress);\\n    return token;\\n  }\\n\\n  /**\\n   * Returns the current debt associated with the loan\\n   **/\\n  function getDebt() public view virtual returns (uint256) {\\n    return getPool().getBorrowed(address(this));\\n  }\\n\\n  /**\\n   * LoanToValue ratio is calculated as the ratio between debt and collateral.\\n   * The collateral is equal to total loan value takeaway debt.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function getLTV() public view returns (uint256) {\\n    uint256 debt = getDebt();\\n    uint256 totalValue = getTotalValue();\\n    if (debt == 0) {\\n      return 0;\\n    } else if (debt < totalValue) {\\n      return (debt * getPercentagePrecision()) / (totalValue - debt);\\n    } else {\\n      return getMaxLtv();\\n    }\\n  }\\n\\n  function getFullLoanStatus() public view returns (uint256[4] memory) {\\n    return [getTotalValue(), getDebt(), getLTV(), isSolvent() ? uint256(1) : uint256(0)];\\n  }\\n\\n  /**\\n   * Checks if the loan is solvent.\\n   * It means that the ratio between debt and collateral is below safe level,\\n   * which is parametrized by the getMaxLtv()\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function isSolvent() public view returns (bool) {\\n    return getLTV() < getMaxLtv();\\n  }\\n\\n  /**\\n   * Returns the balances of all assets served by the price provider\\n   * It could be used as a helper method for UI\\n   **/\\n  function getAllAssetsBalances() public view returns (uint256[] memory) {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    uint256[] memory balances = new uint256[](assets.length);\\n\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      balances[i] = getBalance(address(this), assets[i]);\\n    }\\n\\n    return balances;\\n  }\\n\\n  /**\\n   * Returns the prices of all assets served by the price provider\\n   * It could be used as a helper method for UI\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function getAllAssetsPrices() public view returns (uint256[] memory) {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n\\n    return getPricesFromMsg(assets);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  /**\\n  * @dev This modifier uses the redstone-evm-connector\\n  **/\\n  modifier remainsSolvent() {\\n    _;\\n    require(isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\n  }\\n\\n  /**\\n   * This modifier checks if the LTV is between MIN_SELLOUT_LTV and _MAX_LTV after performing the liquidateLoan() operation.\\n   * If the liquidateLoan() was not called by the owner then an additional check of making sure that LTV > MIN_SELLOUT_LTV is applied.\\n   * It protects the user from an unnecessarily costly liquidation.\\n   * The loan must be solvent after the liquidateLoan() operation.\\n   * @dev This modifier uses the redstone-evm-connector\\n   **/\\n  modifier successfulLiquidation() {\\n    _;\\n    uint256 LTV = getLTV();\\n    if (msg.sender != owner()) {\\n      require(LTV >= getMinSelloutLtv(), \\\"This operation would result in a loan with LTV lower than Minimal Sellout LTV which would put loan's owner in a risk of an unnecessarily high loss\\\");\\n    }\\n    require(LTV < getMaxLtv(), \\\"This operation would not result in bringing the loan back to a solvent state\\\");\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after a loan is funded\\n   * @param funder the address which funded the loan\\n   * @param amount the amount of funds\\n   * @param time of funding\\n   **/\\n  event Funded(address indexed funder, uint256 amount, uint256 time);\\n\\n  /**\\n   * @dev emitted after the funds are withdrawn from the loan\\n   * @param owner the address which withdraws funds from the loan\\n   * @param amount the amount of funds withdrawn\\n   * @param time of the withdrawal\\n   **/\\n  event Withdrawn(address indexed owner, uint256 amount, uint256 time);\\n\\n  /**\\n   * @dev emitted after the funds are invested into an asset\\n   * @param investor the address of investor making the purchase\\n   * @param asset bought by the investor\\n   * @param amount the investment\\n   * @param time of the investment\\n   **/\\n  event Invested(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 time);\\n\\n  /**\\n   * @dev emitted after the investment is sold\\n   * @param investor the address of investor selling the asset\\n   * @param asset sold by the investor\\n   * @param amount the investment\\n   * @param time of the redemption\\n   **/\\n  event Redeemed(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 time);\\n\\n  /**\\n   * @dev emitted when funds are borrowed from the pool\\n   * @param borrower the address of borrower\\n   * @param amount of the borrowed funds\\n   * @param time of the borrowing\\n   **/\\n  event Borrowed(address indexed borrower, uint256 amount, uint256 time);\\n\\n  /**\\n   * @dev emitted when funds are repaid to the pool\\n   * @param borrower the address initiating repayment\\n   * @param amount of repaid funds\\n   * @param time of the repayment\\n   **/\\n  event Repaid(address indexed borrower, uint256 amount, uint256 time);\\n\\n  /**\\n   * @dev emitted after a successful liquidation operation\\n   * @param liquidator the address that initiated the liquidation operation\\n   * @param repayAmount requested amount (AVAX) of liquidation\\n   * @param bonus an amount of bonus (AVAX) received by the liquidator\\n   * @param ltv a new LTV after the liquidation operation\\n   * @param time a time of the liquidation\\n   **/\\n  event Liquidated(address indexed liquidator, uint256 repayAmount, uint256 bonus, uint256 ltv, uint256 time);\\n\\n  /**\\n   * @dev emitted after closing a loan by the owner\\n   * @param debtRepaid the amount of a borrowed AVAX that was repaid back to the pool\\n   * @param withdrawalAmount the amount of AVAX that was withdrawn by the owner after closing the loan\\n   * @param time a time of the loan's closure\\n   **/\\n  event LoanClosed(uint256 debtRepaid, uint256 withdrawalAmount, uint256 time);\\n}\",\"keccak256\":\"0xbfa44ad3dd2418f489e4f4027aab8ccc08925b5ecd4909e1eb6d1e27a414586b\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoanProperties.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\n/**\\n * @title SmartLoanProperties\\n * A contract that holds SmartLoan related properties.\\n * Every property has a virtual getter to allow overriding when upgrading a SmartLoan contract.\\n *\\n */\\ncontract SmartLoanProperties {\\n\\n  uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n  // 10%\\n  uint256 private constant _LIQUIDATION_BONUS = 100;\\n\\n  // 500%\\n  uint256 private constant _MAX_LTV = 5000;\\n  // 400%\\n  uint256 private constant _MIN_SELLOUT_LTV = 4000;\\n\\n  address private constant _EXCHANGE_ADDRESS = 0xf1Ca0cEF19B051b4491EE2ccFd424aD7583C80C7;\\n\\n  address private constant _POOL_ADDRESS = 0x3cCC54365De98C59Dab0d418d613a37657011CC2;\\n\\n  // redstone-evm-connector price providers\\n  address private constant _PRICE_PROVIDER_1 = 0x981bdA8276ae93F567922497153de7A5683708d3;\\n\\n  address private constant _PRICE_PROVIDER_2 = 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48;\\n\\n  // redstone-evm-connector max block.timestamp acceptable delay\\n  uint256 internal constant MAX_BLOCK_TIMESTAMP_DELAY = 30; // 30 seconds\\n\\n\\n  /* ========== GETTERS ========== */\\n\\n\\n  function getPercentagePrecision() public virtual view returns (uint256) {\\n    return _PERCENTAGE_PRECISION;\\n  }\\n\\n  function getLiquidationBonus() public virtual view returns (uint256) {\\n    return _LIQUIDATION_BONUS;\\n  }\\n\\n  function getMaxLtv() public virtual view returns (uint256) {\\n    return _MAX_LTV;\\n  }\\n\\n  function getMinSelloutLtv() public virtual view returns (uint256) {\\n    return _MIN_SELLOUT_LTV;\\n  }\\n\\n  function getExchange() public virtual view returns (IAssetsExchange) {\\n    return IAssetsExchange(_EXCHANGE_ADDRESS);\\n  }\\n\\n  function getPool() public virtual view returns (Pool) {\\n    return Pool(_POOL_ADDRESS);\\n  }\\n\\n  function getPriceProvider1() public virtual view returns (address) {\\n    return _PRICE_PROVIDER_1;\\n  }\\n\\n  function getPriceProvider2() public virtual view returns (address) {\\n    return _PRICE_PROVIDER_2;\\n  }\\n}\",\"keccak256\":\"0x4632722f0a6f429b62a32ba15955701667491420b4742580dbfeaa97b21f0272\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IAssetExchange\\n * @dev Basic interface for investing into assets\\n * It could be linked either to DEX or to a synthetic assets platform\\n */\\ninterface IAssetsExchange {\\n  /**\\n   * For adding supported assets\\n   **/\\n  struct Asset {\\n    bytes32 asset;\\n    address assetAddress;\\n  }\\n\\n  /**\\n   * Buys selected asset with AVAX\\n   * @dev _asset asset code\\n   * @dev _exactERC20AmountOut exact amount of asset to be bought\\n   **/\\n  function buyAsset(bytes32 _asset, uint256 _exactERC20AmountOut) external payable returns (bool);\\n\\n  /**\\n   * Sells selected asset for AVAX\\n   * @dev _asset asset code\\n   * @dev _exactERC20AmountIn amount to be bought\\n   * @dev _minAvaxAmountOut minimum amount of the AVAX token to be bought\\n   **/\\n  function sellAsset(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external returns (bool);\\n\\n  /**\\n   * Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.\\n   **/\\n  function getEstimatedAVAXFromERC20Token(uint256 _amountIn, address _token) external returns (uint256);\\n\\n  /**\\n   * Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.\\n   **/\\n  function getMinimumERC20TokenAmountForExactAVAX(uint256 _exactAmountOut, address _token) external returns (uint256);\\n\\n  /**\\n   * Adds or updates supported assets\\n   * First asset must be a blockchain native currency\\n   * @dev _assets assets to be added or updated\\n   **/\\n  function updateAssets(Asset[] memory _assets) external;\\n\\n  /**\\n   * Removes supported assets\\n   * @dev _assets assets to be removed\\n   **/\\n  function removeAssets(bytes32[] calldata _assets) external;\\n\\n  /**\\n   * Returns all the supported assets keys\\n   **/\\n  function getAllAssets() external view returns (bytes32[] memory);\\n\\n  /**\\n   * Returns address of an asset\\n   **/\\n  function getAssetAddress(bytes32 _asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb7f937c7eff1596aabf6fef207be3dddf9ff83fe479664a5108ecbb44939a354\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n  function canBorrow(address _account) external view returns (bool);\\n\\n  function getLoanForOwner(address _owner) external view returns (address);\\n\\n  function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2b1669e9eec367260824bc0c3d3903bdbb4e78f79b25de7ebcdb7e6d00789bf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x953a720aee8eb8e0861259d568fc0c123d3e72f81be777dc087166885b8cf05c\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\npragma solidity ^0.8.4;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\n    return (halfWAD + (a * b)) / WAD;\\n  }\\n\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(WAD)).div(b);\\n    return (halfB + (a * WAD)) / b;\\n  }\\n\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\n    return (halfRAY + (a * b)) / RAY;\\n  }\\n\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(RAY)).div(b);\\n    return (halfB + (a * RAY)) / b;\\n  }\\n\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\n  }\\n\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    //return a.mul(WAD_RAY_RATIO);\\n    return a * WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\n   */\\n  //solium-disable-next-line\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rayMul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rayMul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xef7c4f4bff6fb6054160dad2dce84a7d46c92058f0842bd08ebede11be88b752\",\"license\":\"AGPL3\"},\"contracts/upgraded/SmartLoanLimitedCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: d29cd2d7a16ea352fea481f59b5d78a047bf841f;\\npragma solidity ^0.8.4;\\nimport \\\"../SmartLoan.sol\\\";\\n\\ncontract SmartLoanLimitedCollateral is SmartLoan {\\n    using TransferHelper for address payable;\\n\\n    bytes32 internal constant COLLATERAL_SUM_SLOT = bytes32(uint256(keccak256('COLLATERAL_SUM')) - 1);\\n\\n   /**\\n    * Funds a loan with the value attached to the transaction\\n    * Allows to add up to 1.25 AVAX of collateral in total\\n   **/\\n    function fund() public override payable {\\n        bytes32 slot = COLLATERAL_SUM_SLOT;\\n        uint256 collateralSum;\\n\\n        assembly {\\n            collateralSum := sload(slot)\\n        }\\n        collateralSum += msg.value;\\n\\n        require(collateralSum <= 1.25 ether, \\\"Adding more than 1.25 AVAX is not allowed\\\");\\n\\n        assembly {\\n            sstore(slot, collateralSum)\\n        }\\n\\n        super.fund();\\n    }\\n\\n\\n   /**\\n    * Withdraws an amount from the loan\\n    * This method could be used to cash out profits from investments\\n    * The loan needs to remain solvent after the withdrawal\\n    * @param _amount to be withdrawn\\n    * @dev This function uses the redstone-evm-connector\\n   **/\\n    function withdraw(uint256 _amount) public override {\\n        super.withdraw(_amount);\\n        bytes32 slot = COLLATERAL_SUM_SLOT;\\n        uint256 collateralSum;\\n\\n        assembly {\\n            collateralSum := sload(slot)\\n        }\\n        if(_amount > collateralSum) {\\n            collateralSum = 0;\\n        } else {\\n            collateralSum -= _amount;\\n        }\\n\\n        assembly {\\n            sstore(slot, collateralSum)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32059a1c21f91cb738012f4ad67ad3e29c627bb41b66761c356d8cddbc8035f6\",\"license\":\"UNLICENSED\"},\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n\\n    return true;\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0x7274ad3680576603cdecca3d8f8b38dd0e67ac57f384e813654f45d1ea3be970\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615396806100206000396000f3fe6080604052600436106101f25760003560e01c8063715018a61161010d578063c5ebeaec116100a0578063d2b29d701161006f578063d2b29d7014610658578063d44e282b14610681578063f2fde38b146106ac578063f31a210a146106d5578063f807cd2214610700576101f9565b8063c5ebeaec146105ab578063c79d5ec5146105d4578063caa648b414610611578063ccdd9f5d1461063c576101f9565b80638da5cb5b116100dc5780638da5cb5b14610520578063a935310f1461054b578063b5dbd7f014610576578063b60d4288146105a1576101f9565b8063715018a61461048c57806375058205146104a35780638129fc1c146104e05780638a027cb3146104f7576101f9565b8063371fd8e61161018557806352154a261161015457806352154a26146103e057806359aa9e721461040b5780635ce23950146104365780636b6c92d914610461576101f9565b8063371fd8e6146103435780634ed2b8ac1461035f5780634fcaf08f1461038a5780635118af5a146103b5576101f9565b806314a6bf0f116101c157806314a6bf0f146102ba578063232fa733146102e55780632802fdc8146102ef5780632e1a7d4d1461031a576101f9565b8063026b1d5f146101fe57806305d58c211461022957806311c89b1014610252578063132e1d391461028f576101f9565b366101f957005b600080fd5b34801561020a57600080fd5b5061021361072b565b6040516102209190614118565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190613920565b610747565b005b34801561025e57600080fd5b5061027960048036038101906102749190613828565b61089d565b6040516102869190614022565b60405180910390f35b34801561029b57600080fd5b506102a4610919565b6040516102b19190614473565b60405180910390f35b3480156102c657600080fd5b506102cf610923565b6040516102dc9190614473565b60405180910390f35b6102ed6109ba565b005b3480156102fb57600080fd5b50610304610dcd565b6040516103119190613fa1565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c91906139ab565b610de9565b005b61035d600480360381019061035891906139ab565b610e57565b005b34801561036b57600080fd5b50610374610fb5565b6040516103819190614473565b60405180910390f35b34801561039657600080fd5b5061039f61102c565b6040516103ac9190613fa1565b60405180910390f35b3480156103c157600080fd5b506103ca611048565b6040516103d79190614473565b60405180910390f35b3480156103ec57600080fd5b506103f5611051565b6040516104029190614473565b60405180910390f35b34801561041757600080fd5b5061042061105b565b60405161042d9190614473565b60405180910390f35b34801561044257600080fd5b5061044b611064565b6040516104589190614022565b60405180910390f35b34801561046d57600080fd5b5061047661107c565b6040516104839190614000565b60405180910390f35b34801561049857600080fd5b506104a1611237565b005b3480156104af57600080fd5b506104ca60048036038101906104c591906139ab565b6112bf565b6040516104d79190614022565b60405180910390f35b3480156104ec57600080fd5b506104f56112ca565b005b34801561050357600080fd5b5061051e6004803603810190610519919061395c565b6113be565b005b34801561052c57600080fd5b5061053561164a565b6040516105429190613fa1565b60405180910390f35b34801561055757600080fd5b50610560611674565b60405161056d9190614000565b60405180910390f35b34801561058257600080fd5b5061058b611713565b6040516105989190614473565b60405180910390f35b6105a961171d565b005b3480156105b757600080fd5b506105d260048036038101906105cd91906139ab565b6117c2565b005b3480156105e057600080fd5b506105fb60048036038101906105f6919061387a565b61194a565b6040516106089190614473565b60405180910390f35b34801561061d57600080fd5b50610626611a71565b6040516106339190614473565b60405180910390f35b610656600480360381019061065191906139ab565b611dbc565b005b34801561066457600080fd5b5061067f600480360381019061067a919061395c565b612002565b005b34801561068d57600080fd5b5061069661228c565b6040516106a39190613fe5565b60405180910390f35b3480156106b857600080fd5b506106d360048036038101906106ce9190613828565b6122e4565b005b3480156106e157600080fd5b506106ea6123dc565b6040516106f79190614473565b60405180910390f35b34801561070c57600080fd5b506107156123e5565b60405161072291906140fd565b60405180910390f35b6000733ccc54365de98c59dab0d418d613a37657011cc2905090565b61074f612401565b73ffffffffffffffffffffffffffffffffffffffff1661076d61164a565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90614373565b60405180910390fd5b60026065541415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090614453565b60405180910390fd5b6002606581905550600061081c83612409565b905061084933838373ffffffffffffffffffffffffffffffffffffffff166124ad9092919063ffffffff16565b50610852611064565b610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890614393565b60405180910390fd5b60016065819055505050565b60006108a7610dcd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061091257506108e361102c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006103e8905090565b600061092d61072b565b73ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016109659190613fa1565b60206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906139d4565b905090565b6109c2612401565b73ffffffffffffffffffffffffffffffffffffffff166109e061164a565b73ffffffffffffffffffffffffffffffffffffffff1614610a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2d90614373565b60405180910390fd5b60026065541415610a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7390614453565b60405180910390fd5b60026065819055506000610a8e6123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610ad357600080fd5b505afa158015610ae7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1091906138b6565b905060005b8151811015610c5d576000610b69838381518110610b5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612409565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ba19190613fa1565b60206040518083038186803b158015610bb957600080fd5b505afa158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf191906139d4565b90506000811115610c4957610c48838381518110610c38577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518260006125e3565b5b508080610c5590614a58565b915050610b15565b506000610c68610923565b905080471015610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca490614193565b60405180910390fd5b610cb681610e57565b7f4acb957de3799dd3d95bb7da6bcfbca6f5a33812d69ad37816ed87e79b6327d6814742604051610ce9939291906144e0565b60405180910390a160004790506000811115610d7957610d28813373ffffffffffffffffffffffffffffffffffffffff166126bf90919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68242604051610d709291906144b7565b60405180910390a25b505050610d84611064565b610dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dba90614393565b60405180910390fd5b6001606581905550565b600073981bda8276ae93f567922497153de7a5683708d3905090565b610df2816127e5565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c610e24919061490b565b60001b905060008154905080831115610e405760009050610e4f565b8281610e4c919061490b565b90505b808255505050565b610e5f611064565b15610ea457610e6c61164a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ea357600080fd5b5b610eb581610eb0610923565b6129bd565b905080471015610efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef1906141d3565b60405180910390fd5b610f0261072b565b73ffffffffffffffffffffffffffffffffffffffff1663402d8883826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b50505050503373ffffffffffffffffffffffffffffffffffffffff167f1b8cd61ed43bec7c6bdad3a18ffee613f99c853d16c50678d248d879e1b434388242604051610faa9291906144b7565b60405180910390a250565b600080610fc0610923565b90506000610fcc611a71565b90506000821415610fe257600092505050611029565b8082101561101c578181610ff6919061490b565b610ffe610919565b8361100991906148b1565b61101391906146d3565b92505050611029565b611024611713565b925050505b90565b6000733befdd935b50f172e696a5187dbacfef0d208e48905090565b6000601e905090565b6000610fa0905090565b60006064905090565b600061106e611713565b611076610fb5565b10905090565b606060006110886123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156110cd57600080fd5b505afa1580156110e1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061110a91906138b6565b90506000815167ffffffffffffffff81111561114f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561117d5781602001602082028036833780820191505090505b50905060005b825181101561122e576111d6308483815181106111c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161194a565b82828151811061120f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061122690614a58565b915050611183565b50809250505090565b61123f612401565b73ffffffffffffffffffffffffffffffffffffffff1661125d61164a565b73ffffffffffffffffffffffffffffffffffffffff16146112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa90614373565b60405180910390fd5b6112bd60006129d6565b565b600060019050919050565b600060019054906101000a900460ff166112f25760008054906101000a900460ff16156112fb565b6112fa612a9c565b5b61133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190614313565b60405180910390fd5b60008060019054906101000a900460ff16159050801561138a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611392612aad565b61139a612b06565b80156113bb5760008060016101000a81548160ff0219169083151502179055505b50565b6113c6612401565b73ffffffffffffffffffffffffffffffffffffffff166113e461164a565b73ffffffffffffffffffffffffffffffffffffffff161461143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190614373565b60405180910390fd5b60026065541415611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790614453565b60405180910390fd5b6002606581905550804710156114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c290614413565b60405180910390fd5b60006114d56123e5565b73ffffffffffffffffffffffffffffffffffffffff16635d8874e98386866040518463ffffffff1660e01b8152600401611510929190614058565b6020604051808303818588803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061156291906138f7565b9050806115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b90614433565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f8c4f7b2f9ad7fde21c3ebf69d91938c2731761edd5820e45c17ea61d9c2ab90a85426040516115ed9291906144b7565b60405180910390a3506115fe611064565b61163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163490614393565b60405180910390fd5b6001606581905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006116806123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156116c557600080fd5b505afa1580156116d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061170291906138b6565b905061170d81612b5f565b91505090565b6000611388905090565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c61174f919061490b565b60001b90506000815490503481611766919061467d565b9050671158e460913d00008111156117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa906141b3565b60405180910390fd5b8082556117be612cc7565b5050565b6117ca612401565b73ffffffffffffffffffffffffffffffffffffffff166117e861164a565b73ffffffffffffffffffffffffffffffffffffffff161461183e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183590614373565b60405180910390fd5b61184661072b565b73ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b815260040161187e9190614473565b600060405180830381600087803b15801561189857600080fd5b505af11580156118ac573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167feae9cfbc77fdd40ca899f36b608256063b2bc9d8178b0220f7ad513e178d673082426040516118f89291906144b7565b60405180910390a2611908611064565b611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e90614393565b60405180910390fd5b50565b6000806119556123e5565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b815260040161198d919061403d565b60206040518083038186803b1580156119a557600080fd5b505afa1580156119b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dd9190613851565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611a189190613fa1565b60206040518083038186803b158015611a3057600080fd5b505afa158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6891906139d4565b91505092915050565b6000804790506000611a816123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b0391906138b6565b90506000611b1082612b5f565b9050600081600081518110611b4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811415611b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9390614253565b60405180910390fd5b6000600190505b8251811015611db1576000838281518110611be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511415611c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c27906142f3565b60405180910390fd5b6000848281518110611c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000611c8082612409565b90506000611c8e308461194a565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd657600080fd5b505afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e91906139fd565b600a611d1a9190614757565b85611d2591906148b1565b81670de0b6b3a7640000888781518110611d68577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611d7a91906148b1565b611d8491906148b1565b611d8e91906146d3565b88611d99919061467d565b97505050508080611da990614a58565b915050611ba3565b508394505050505090565b60026065541415611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df990614453565b60405180910390fd5b6002606581905550611e12611064565b15611e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4990614293565b60405180910390fd5b6000611e5c610923565b905080821115611e6a578091505b6000611e74610919565b611e7c61105b565b84611e8791906148b1565b611e9191906146d3565b905060008184611ea1919061467d565b9050611eac81612d19565b611eb584612e2c565b611ebe82612e41565b3373ffffffffffffffffffffffffffffffffffffffff167f7abe212d4944ae75cf0a0477af92aa0db98c15aaf21d06c37c97c641427b8eb38584611f00610fb5565b42604051611f119493929190614517565b60405180910390a25050506000611f26610fb5565b9050611f3061164a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fad57611f6a611051565b811015611fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa390614353565b60405180910390fd5b5b611fb5611713565b8110611ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fed90614233565b60405180910390fd5b50600160658190555050565b60026065541415612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90614453565b60405180910390fd5b6002606581905550612058612401565b73ffffffffffffffffffffffffffffffffffffffff1661207661164a565b73ffffffffffffffffffffffffffffffffffffffff16146120cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c390614373565b60405180910390fd5b60006120d784612409565b905061210b6120e46123e5565b848373ffffffffffffffffffffffffffffffffffffffff166124ad9092919063ffffffff16565b60006121156123e5565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8686866040518463ffffffff1660e01b815260040161215193929190614081565b602060405180830381600087803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a391906138f7565b9050806121e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121dc906143b3565b60405180910390fd5b843373ffffffffffffffffffffffffffffffffffffffff167fc95bd7ebbed9b9c3e9477753bcb60d02b328f1e5bce8b1a25986d6c73991c182864260405161222e9291906144b7565b60405180910390a35050612240611064565b61227f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227690614393565b60405180910390fd5b6001606581905550505050565b6122946136c8565b60405180608001604052806122a7611a71565b81526020016122b4610923565b81526020016122c1610fb5565b81526020016122ce611064565b6122d95760006122dc565b60015b815250905090565b6122ec612401565b73ffffffffffffffffffffffffffffffffffffffff1661230a61164a565b73ffffffffffffffffffffffffffffffffffffffff1614612360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235790614373565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c7906141f3565b60405180910390fd5b6123d9816129d6565b50565b600060b4905090565b600073f1ca0cef19b051b4491ee2ccfd424ad7583c80c7905090565b600033905090565b6000806124146123e5565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b815260040161244c919061403d565b60206040518083038186803b15801561246457600080fd5b505afa158015612478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249c9190613851565b905060008190508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016124df929190613fbc565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161252d9190613f64565b6000604051808303816000865af19150503d806000811461256a576040519150601f19603f3d011682016040523d82523d6000602084013e61256f565b606091505b509150915081801561259d575060008151148061259c57508080602001905181019061259b91906138f7565b5b5b6125dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d3906143f3565b60405180910390fd5b5050505050565b60006125ee84612409565b90506126226125fb6123e5565b848373ffffffffffffffffffffffffffffffffffffffff166124ad9092919063ffffffff16565b61262a6123e5565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8585856040518463ffffffff1660e01b815260040161266693929190614081565b602060405180830381600087803b15801561268057600080fd5b505af1158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b891906138f7565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561271a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561274c5781602001600182028036833780820191505090505b5060405161275a9190613f64565b60006040518083038185875af1925050503d8060008114612797576040519150601f19603f3d011682016040523d82523d6000602084013e61279c565b606091505b50509050806127e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d790614273565b60405180910390fd5b505050565b6127ed612401565b73ffffffffffffffffffffffffffffffffffffffff1661280b61164a565b73ffffffffffffffffffffffffffffffffffffffff1614612861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285890614373565b60405180910390fd5b600260655414156128a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289e90614453565b60405180910390fd5b6002606581905550804710156128f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e9906142d3565b60405180910390fd5b61291b813373ffffffffffffffffffffffffffffffffffffffff166126bf90919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc682426040516129639291906144b7565b60405180910390a2612973611064565b6129b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a990614393565b60405180910390fd5b600160658190555050565b60008183106129cc57816129ce565b825b905092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000612aa730612e76565b15905090565b600060019054906101000a900460ff16612afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af3906143d3565b60405180910390fd5b612b04612e99565b565b600060019054906101000a900460ff16612b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4c906143d3565b60405180910390fd5b612b5d612efa565b565b60606000606136033590506000602060408360ff16612b7e9190614875565b612b889190614645565b90506060604051905081815281604283013603602083013760208101604052600081805190602001209050600081604051602001612bc69190613f7b565b604051602081830303815290604052805190602001209050606060405190506041815260418036036020830137602081016040526000612c0f8284612f5390919063ffffffff16565b9050612c1a8161089d565b612c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5090614213565b60405180910390fd5b600060623603359050612c6b816112bf565b612caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca190614173565b60405180910390fd5b612cb88a8960ff1689612f7a565b98505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af3442604051612d0f9291906144b7565b60405180910390a2565b6000612d236123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015612d6857600080fd5b505afa158015612d7c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612da591906138b6565b905060005b8151811015612e2757824710612dbf57612e27565b612e14828281518110612dfb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101514785612e0f919061490b565b613020565b8080612e1f90614a58565b915050612daa565b505050565b612e3e612e3947836129bd565b610e57565b50565b612e73612e4e82476129bd565b3373ffffffffffffffffffffffffffffffffffffffff166126bf90919063ffffffff16565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edf906143d3565b60405180910390fd5b612ef8612ef3612401565b6129d6565b565b600060019054906101000a900460ff16612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f40906143d3565b60405180910390fd5b6001606581905550565b6000806000612f628585613188565b91509150612f6f8161320b565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b8885101561301057604085028101359150600093505b895184101561300557816020850260208c0101511415612fed5760206040860282010135602085026020880101526001830192505b8951831415612ffa578894505b600184019350612fb8565b600185019450612fa2565b5084955050505050509392505050565b600061302b83612409565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016130689190613fa1565b60206040518083038186803b15801561308057600080fd5b505afa158015613094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b891906139d4565b905060008111156131825760006130cd6123e5565b73ffffffffffffffffffffffffffffffffffffffff16639ac34dd385856040518363ffffffff1660e01b815260040161310792919061448e565b602060405180830381600087803b15801561312157600080fd5b505af1158015613135573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315991906139d4565b9050808210156131745761316f858360006125e3565b613180565b61317f8582866125e3565b5b505b50505050565b6000806041835114156131ca5760008060006020860151925060408601519150606086015160001a90506131be8782858561355c565b94509450505050613204565b6040835114156131fb5760008060208501519150604085015190506131f0868383613669565b935093505050613204565b60006002915091505b9250929050565b60006004811115613245577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561327e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561328957613559565b600160048111156132c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156132fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561333d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333490614133565b60405180910390fd5b60026004811115613377577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156133f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e890614153565b60405180910390fd5b6003600481111561342b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613464577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156134a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349c906142b3565b60405180910390fd5b6004808111156134de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613517577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354f90614333565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613597576000600391509150613660565b601b8560ff16141580156135af5750601c8560ff1614155b156135c1576000600491509150613660565b6000600187878787604051600081526020016040526040516135e694939291906140b8565b6020604051602081039080840390855afa158015613608573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561365757600060019250925050613660565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6136ac919061467d565b90506136ba8782888561355c565b935093505050935093915050565b6040518060800160405280600490602082028036833780820191505090505090565b60006136fd6136f884614581565b61455c565b9050808382526020820190508285602086028201111561371c57600080fd5b60005b8581101561374c578161373288826137d4565b84526020840193506020830192505060018101905061371f565b5050509392505050565b600081359050613765816152ed565b92915050565b60008151905061377a816152ed565b92915050565b600082601f83011261379157600080fd5b81516137a18482602086016136ea565b91505092915050565b6000815190506137b981615304565b92915050565b6000813590506137ce8161531b565b92915050565b6000815190506137e38161531b565b92915050565b6000813590506137f881615332565b92915050565b60008151905061380d81615332565b92915050565b60008151905061382281615349565b92915050565b60006020828403121561383a57600080fd5b600061384884828501613756565b91505092915050565b60006020828403121561386357600080fd5b60006138718482850161376b565b91505092915050565b6000806040838503121561388d57600080fd5b600061389b85828601613756565b92505060206138ac858286016137bf565b9150509250929050565b6000602082840312156138c857600080fd5b600082015167ffffffffffffffff8111156138e257600080fd5b6138ee84828501613780565b91505092915050565b60006020828403121561390957600080fd5b6000613917848285016137aa565b91505092915050565b6000806040838503121561393357600080fd5b6000613941858286016137bf565b9250506020613952858286016137e9565b9150509250929050565b60008060006060848603121561397157600080fd5b600061397f868287016137bf565b9350506020613990868287016137e9565b92505060406139a1868287016137e9565b9150509250925092565b6000602082840312156139bd57600080fd5b60006139cb848285016137e9565b91505092915050565b6000602082840312156139e657600080fd5b60006139f4848285016137fe565b91505092915050565b600060208284031215613a0f57600080fd5b6000613a1d84828501613813565b91505092915050565b6000613a328383613f37565b60208301905092915050565b613a478161493f565b82525050565b613a56816145c7565b613a608184614602565b9250613a6b826145ad565b8060005b83811015613a9c578151613a838782613a26565b9650613a8e836145e8565b925050600181019050613a6f565b505050505050565b6000613aaf826145d2565b613ab9818561460d565b9350613ac4836145b7565b8060005b83811015613af5578151613adc8882613a26565b9750613ae7836145f5565b925050600181019050613ac8565b5085935050505092915050565b613b0b81614951565b82525050565b613b1a8161495d565b82525050565b613b31613b2c8261495d565b614aa1565b82525050565b6000613b42826145dd565b613b4c818561461e565b9350613b5c8185602086016149f4565b80840191505092915050565b613b71816149ac565b82525050565b613b80816149d0565b82525050565b6000613b93601883614629565b9150613b9e82614b56565b602082019050919050565b6000613bb6601f83614629565b9150613bc182614b7f565b602082019050919050565b6000613bd9601c8361463a565b9150613be482614ba8565b601c82019050919050565b6000613bfc601983614629565b9150613c0782614bd1565b602082019050919050565b6000613c1f604583614629565b9150613c2a82614bfa565b606082019050919050565b6000613c42602983614629565b9150613c4d82614c6f565b604082019050919050565b6000613c65602b83614629565b9150613c7082614cbe565b604082019050919050565b6000613c88602683614629565b9150613c9382614d0d565b604082019050919050565b6000613cab601583614629565b9150613cb682614d5c565b602082019050919050565b6000613cce604c83614629565b9150613cd982614d85565b606082019050919050565b6000613cf1602783614629565b9150613cfc82614dfa565b604082019050919050565b6000613d14603483614629565b9150613d1f82614e49565b604082019050919050565b6000613d37602083614629565b9150613d4282614e98565b602082019050919050565b6000613d5a602283614629565b9150613d6582614ec1565b604082019050919050565b6000613d7d602583614629565b9150613d8882614f10565b604082019050919050565b6000613da0602883614629565b9150613dab82614f5f565b604082019050919050565b6000613dc3602e83614629565b9150613dce82614fae565b604082019050919050565b6000613de6602283614629565b9150613df182614ffd565b604082019050919050565b6000613e09609283614629565b9150613e148261504c565b60a082019050919050565b6000613e2c602083614629565b9150613e378261510d565b602082019050919050565b6000613e4f603383614629565b9150613e5a82615136565b604082019050919050565b6000613e72601183614629565b9150613e7d82615185565b602082019050919050565b6000613e95602b83614629565b9150613ea0826151ae565b604082019050919050565b6000613eb8602d83614629565b9150613ec3826151fd565b604082019050919050565b6000613edb603483614629565b9150613ee68261524c565b604082019050919050565b6000613efe601183614629565b9150613f098261529b565b602082019050919050565b6000613f21601f83614629565b9150613f2c826152c4565b602082019050919050565b613f4081614995565b82525050565b613f4f81614995565b82525050565b613f5e8161499f565b82525050565b6000613f708284613b37565b915081905092915050565b6000613f8682613bcc565b9150613f928284613b20565b60208201915081905092915050565b6000602082019050613fb66000830184613a3e565b92915050565b6000604082019050613fd16000830185613a3e565b613fde6020830184613f46565b9392505050565b6000608082019050613ffa6000830184613a4d565b92915050565b6000602082019050818103600083015261401a8184613aa4565b905092915050565b60006020820190506140376000830184613b02565b92915050565b60006020820190506140526000830184613b11565b92915050565b600060408201905061406d6000830185613b11565b61407a6020830184613f46565b9392505050565b60006060820190506140966000830186613b11565b6140a36020830185613f46565b6140b06040830184613f46565b949350505050565b60006080820190506140cd6000830187613b11565b6140da6020830186613f55565b6140e76040830185613b11565b6140f46060830184613b11565b95945050505050565b60006020820190506141126000830184613b68565b92915050565b600060208201905061412d6000830184613b77565b92915050565b6000602082019050818103600083015261414c81613b86565b9050919050565b6000602082019050818103600083015261416c81613ba9565b9050919050565b6000602082019050818103600083015261418c81613bef565b9050919050565b600060208201905081810360008301526141ac81613c12565b9050919050565b600060208201905081810360008301526141cc81613c35565b9050919050565b600060208201905081810360008301526141ec81613c58565b9050919050565b6000602082019050818103600083015261420c81613c7b565b9050919050565b6000602082019050818103600083015261422c81613c9e565b9050919050565b6000602082019050818103600083015261424c81613cc1565b9050919050565b6000602082019050818103600083015261426c81613ce4565b9050919050565b6000602082019050818103600083015261428c81613d07565b9050919050565b600060208201905081810360008301526142ac81613d2a565b9050919050565b600060208201905081810360008301526142cc81613d4d565b9050919050565b600060208201905081810360008301526142ec81613d70565b9050919050565b6000602082019050818103600083015261430c81613d93565b9050919050565b6000602082019050818103600083015261432c81613db6565b9050919050565b6000602082019050818103600083015261434c81613dd9565b9050919050565b6000602082019050818103600083015261436c81613dfc565b9050919050565b6000602082019050818103600083015261438c81613e1f565b9050919050565b600060208201905081810360008301526143ac81613e42565b9050919050565b600060208201905081810360008301526143cc81613e65565b9050919050565b600060208201905081810360008301526143ec81613e88565b9050919050565b6000602082019050818103600083015261440c81613eab565b9050919050565b6000602082019050818103600083015261442c81613ece565b9050919050565b6000602082019050818103600083015261444c81613ef1565b9050919050565b6000602082019050818103600083015261446c81613f14565b9050919050565b60006020820190506144886000830184613f46565b92915050565b60006040820190506144a36000830185613f46565b6144b06020830184613a3e565b9392505050565b60006040820190506144cc6000830185613f46565b6144d96020830184613f46565b9392505050565b60006060820190506144f56000830186613f46565b6145026020830185613f46565b61450f6040830184613f46565b949350505050565b600060808201905061452c6000830187613f46565b6145396020830186613f46565b6145466040830185613f46565b6145536060830184613f46565b95945050505050565b6000614566614577565b90506145728282614a27565b919050565b6000604051905090565b600067ffffffffffffffff82111561459c5761459b614b09565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061465082614967565b915061465b83614967565b92508261ffff0382111561467257614671614aab565b5b828201905092915050565b600061468882614995565b915061469383614995565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146c8576146c7614aab565b5b828201905092915050565b60006146de82614995565b91506146e983614995565b9250826146f9576146f8614ada565b5b828204905092915050565b6000808291508390505b600185111561474e5780860481111561472a57614729614aab565b5b60018516156147395780820291505b808102905061474785614b49565b945061470e565b94509492505050565b600061476282614995565b915061476d8361499f565b925061479a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846147a2565b905092915050565b6000826147b2576001905061486e565b816147c0576000905061486e565b81600181146147d657600281146147e05761480f565b600191505061486e565b60ff8411156147f2576147f1614aab565b5b8360020a91508482111561480957614808614aab565b5b5061486e565b5060208310610133831016604e8410600b84101617156148445782820a90508381111561483f5761483e614aab565b5b61486e565b6148518484846001614704565b9250905081840481111561486857614867614aab565b5b81810290505b9392505050565b600061488082614967565b915061488b83614967565b92508161ffff04831182151516156148a6576148a5614aab565b5b828202905092915050565b60006148bc82614995565b91506148c783614995565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614900576148ff614aab565b5b828202905092915050565b600061491682614995565b915061492183614995565b92508282101561493457614933614aab565b5b828203905092915050565b600061494a82614975565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006149b7826149be565b9050919050565b60006149c982614975565b9050919050565b60006149db826149e2565b9050919050565b60006149ed82614975565b9050919050565b60005b83811015614a125780820151818401526020810190506149f7565b83811115614a21576000848401525b50505050565b614a3082614b38565b810181811067ffffffffffffffff82111715614a4f57614a4e614b09565b5b80604052505050565b6000614a6382614995565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a9657614a95614aab565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b7f53656c6c696e67206f757420616c6c2061737365747320776974686f7574207260008201527f65706179696e67207468652077686f6c652064656274206973206e6f7420616c60208201527f6c6f776564000000000000000000000000000000000000000000000000000000604082015250565b7f416464696e67206d6f7265207468616e20312e32352041564158206973206e6f60008201527f7420616c6c6f7765640000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2072657060008201527f617920746865206c6f616e000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f54686973206f7065726174696f6e20776f756c64206e6f7420726573756c742060008201527f696e206272696e67696e6720746865206c6f616e206261636b20746f2061207360208201527f6f6c76656e742073746174650000000000000000000000000000000000000000604082015250565b7f417661782070726963652072657475726e65642066726f6d206f7261636c652060008201527f6973207a65726f00000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f43616e6e6f742073656c6c6f7574206120736f6c76656e74206163636f756e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2077697460008201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b7f41737365742070726963652072657475726e65642066726f6d206f7261636c6560008201527f206973207a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686973206f7065726174696f6e20776f756c6420726573756c7420696e206160008201527f206c6f616e2077697468204c5456206c6f776572207468616e204d696e696d6160208201527f6c2053656c6c6f7574204c545620776869636820776f756c6420707574206c6f60408201527f616e2773206f776e657220696e2061207269736b206f6620616e20756e6e656360608201527f6573736172696c792068696768206c6f73730000000000000000000000000000608082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b7f526564656d7074696f6e206661696c6564000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e64732061726520617661696c61626c65207460008201527f6f20696e7665737420696e20616e206173736574000000000000000000000000602082015250565b7f496e766573746d656e74206661696c6564000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6152f68161493f565b811461530157600080fd5b50565b61530d81614951565b811461531857600080fd5b50565b6153248161495d565b811461532f57600080fd5b50565b61533b81614995565b811461534657600080fd5b50565b6153528161499f565b811461535d57600080fd5b5056fea2646970667358221220b1a10cba9750065aabfb3a5a88799b959e48670200d14f5075ee1479aa7ecb2c64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c8063715018a61161010d578063c5ebeaec116100a0578063d2b29d701161006f578063d2b29d7014610658578063d44e282b14610681578063f2fde38b146106ac578063f31a210a146106d5578063f807cd2214610700576101f9565b8063c5ebeaec146105ab578063c79d5ec5146105d4578063caa648b414610611578063ccdd9f5d1461063c576101f9565b80638da5cb5b116100dc5780638da5cb5b14610520578063a935310f1461054b578063b5dbd7f014610576578063b60d4288146105a1576101f9565b8063715018a61461048c57806375058205146104a35780638129fc1c146104e05780638a027cb3146104f7576101f9565b8063371fd8e61161018557806352154a261161015457806352154a26146103e057806359aa9e721461040b5780635ce23950146104365780636b6c92d914610461576101f9565b8063371fd8e6146103435780634ed2b8ac1461035f5780634fcaf08f1461038a5780635118af5a146103b5576101f9565b806314a6bf0f116101c157806314a6bf0f146102ba578063232fa733146102e55780632802fdc8146102ef5780632e1a7d4d1461031a576101f9565b8063026b1d5f146101fe57806305d58c211461022957806311c89b1014610252578063132e1d391461028f576101f9565b366101f957005b600080fd5b34801561020a57600080fd5b5061021361072b565b6040516102209190614118565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b9190613920565b610747565b005b34801561025e57600080fd5b5061027960048036038101906102749190613828565b61089d565b6040516102869190614022565b60405180910390f35b34801561029b57600080fd5b506102a4610919565b6040516102b19190614473565b60405180910390f35b3480156102c657600080fd5b506102cf610923565b6040516102dc9190614473565b60405180910390f35b6102ed6109ba565b005b3480156102fb57600080fd5b50610304610dcd565b6040516103119190613fa1565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c91906139ab565b610de9565b005b61035d600480360381019061035891906139ab565b610e57565b005b34801561036b57600080fd5b50610374610fb5565b6040516103819190614473565b60405180910390f35b34801561039657600080fd5b5061039f61102c565b6040516103ac9190613fa1565b60405180910390f35b3480156103c157600080fd5b506103ca611048565b6040516103d79190614473565b60405180910390f35b3480156103ec57600080fd5b506103f5611051565b6040516104029190614473565b60405180910390f35b34801561041757600080fd5b5061042061105b565b60405161042d9190614473565b60405180910390f35b34801561044257600080fd5b5061044b611064565b6040516104589190614022565b60405180910390f35b34801561046d57600080fd5b5061047661107c565b6040516104839190614000565b60405180910390f35b34801561049857600080fd5b506104a1611237565b005b3480156104af57600080fd5b506104ca60048036038101906104c591906139ab565b6112bf565b6040516104d79190614022565b60405180910390f35b3480156104ec57600080fd5b506104f56112ca565b005b34801561050357600080fd5b5061051e6004803603810190610519919061395c565b6113be565b005b34801561052c57600080fd5b5061053561164a565b6040516105429190613fa1565b60405180910390f35b34801561055757600080fd5b50610560611674565b60405161056d9190614000565b60405180910390f35b34801561058257600080fd5b5061058b611713565b6040516105989190614473565b60405180910390f35b6105a961171d565b005b3480156105b757600080fd5b506105d260048036038101906105cd91906139ab565b6117c2565b005b3480156105e057600080fd5b506105fb60048036038101906105f6919061387a565b61194a565b6040516106089190614473565b60405180910390f35b34801561061d57600080fd5b50610626611a71565b6040516106339190614473565b60405180910390f35b610656600480360381019061065191906139ab565b611dbc565b005b34801561066457600080fd5b5061067f600480360381019061067a919061395c565b612002565b005b34801561068d57600080fd5b5061069661228c565b6040516106a39190613fe5565b60405180910390f35b3480156106b857600080fd5b506106d360048036038101906106ce9190613828565b6122e4565b005b3480156106e157600080fd5b506106ea6123dc565b6040516106f79190614473565b60405180910390f35b34801561070c57600080fd5b506107156123e5565b60405161072291906140fd565b60405180910390f35b6000733ccc54365de98c59dab0d418d613a37657011cc2905090565b61074f612401565b73ffffffffffffffffffffffffffffffffffffffff1661076d61164a565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90614373565b60405180910390fd5b60026065541415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090614453565b60405180910390fd5b6002606581905550600061081c83612409565b905061084933838373ffffffffffffffffffffffffffffffffffffffff166124ad9092919063ffffffff16565b50610852611064565b610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890614393565b60405180910390fd5b60016065819055505050565b60006108a7610dcd565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061091257506108e361102c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006103e8905090565b600061092d61072b565b73ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016109659190613fa1565b60206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b591906139d4565b905090565b6109c2612401565b73ffffffffffffffffffffffffffffffffffffffff166109e061164a565b73ffffffffffffffffffffffffffffffffffffffff1614610a36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2d90614373565b60405180910390fd5b60026065541415610a7c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7390614453565b60405180910390fd5b60026065819055506000610a8e6123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610ad357600080fd5b505afa158015610ae7573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b1091906138b6565b905060005b8151811015610c5d576000610b69838381518110610b5c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612409565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ba19190613fa1565b60206040518083038186803b158015610bb957600080fd5b505afa158015610bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf191906139d4565b90506000811115610c4957610c48838381518110610c38577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518260006125e3565b5b508080610c5590614a58565b915050610b15565b506000610c68610923565b905080471015610cad576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca490614193565b60405180910390fd5b610cb681610e57565b7f4acb957de3799dd3d95bb7da6bcfbca6f5a33812d69ad37816ed87e79b6327d6814742604051610ce9939291906144e0565b60405180910390a160004790506000811115610d7957610d28813373ffffffffffffffffffffffffffffffffffffffff166126bf90919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc68242604051610d709291906144b7565b60405180910390a25b505050610d84611064565b610dc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dba90614393565b60405180910390fd5b6001606581905550565b600073981bda8276ae93f567922497153de7a5683708d3905090565b610df2816127e5565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c610e24919061490b565b60001b905060008154905080831115610e405760009050610e4f565b8281610e4c919061490b565b90505b808255505050565b610e5f611064565b15610ea457610e6c61164a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ea357600080fd5b5b610eb581610eb0610923565b6129bd565b905080471015610efa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef1906141d3565b60405180910390fd5b610f0261072b565b73ffffffffffffffffffffffffffffffffffffffff1663402d8883826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4957600080fd5b505af1158015610f5d573d6000803e3d6000fd5b50505050503373ffffffffffffffffffffffffffffffffffffffff167f1b8cd61ed43bec7c6bdad3a18ffee613f99c853d16c50678d248d879e1b434388242604051610faa9291906144b7565b60405180910390a250565b600080610fc0610923565b90506000610fcc611a71565b90506000821415610fe257600092505050611029565b8082101561101c578181610ff6919061490b565b610ffe610919565b8361100991906148b1565b61101391906146d3565b92505050611029565b611024611713565b925050505b90565b6000733befdd935b50f172e696a5187dbacfef0d208e48905090565b6000601e905090565b6000610fa0905090565b60006064905090565b600061106e611713565b611076610fb5565b10905090565b606060006110886123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156110cd57600080fd5b505afa1580156110e1573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061110a91906138b6565b90506000815167ffffffffffffffff81111561114f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561117d5781602001602082028036833780820191505090505b50905060005b825181101561122e576111d6308483815181106111c9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161194a565b82828151811061120f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001018181525050808061122690614a58565b915050611183565b50809250505090565b61123f612401565b73ffffffffffffffffffffffffffffffffffffffff1661125d61164a565b73ffffffffffffffffffffffffffffffffffffffff16146112b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112aa90614373565b60405180910390fd5b6112bd60006129d6565b565b600060019050919050565b600060019054906101000a900460ff166112f25760008054906101000a900460ff16156112fb565b6112fa612a9c565b5b61133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190614313565b60405180910390fd5b60008060019054906101000a900460ff16159050801561138a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b611392612aad565b61139a612b06565b80156113bb5760008060016101000a81548160ff0219169083151502179055505b50565b6113c6612401565b73ffffffffffffffffffffffffffffffffffffffff166113e461164a565b73ffffffffffffffffffffffffffffffffffffffff161461143a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143190614373565b60405180910390fd5b60026065541415611480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147790614453565b60405180910390fd5b6002606581905550804710156114cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c290614413565b60405180910390fd5b60006114d56123e5565b73ffffffffffffffffffffffffffffffffffffffff16635d8874e98386866040518463ffffffff1660e01b8152600401611510929190614058565b6020604051808303818588803b15801561152957600080fd5b505af115801561153d573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061156291906138f7565b9050806115a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161159b90614433565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f8c4f7b2f9ad7fde21c3ebf69d91938c2731761edd5820e45c17ea61d9c2ab90a85426040516115ed9291906144b7565b60405180910390a3506115fe611064565b61163d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163490614393565b60405180910390fd5b6001606581905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006116806123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156116c557600080fd5b505afa1580156116d9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061170291906138b6565b905061170d81612b5f565b91505090565b6000611388905090565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c61174f919061490b565b60001b90506000815490503481611766919061467d565b9050671158e460913d00008111156117b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117aa906141b3565b60405180910390fd5b8082556117be612cc7565b5050565b6117ca612401565b73ffffffffffffffffffffffffffffffffffffffff166117e861164a565b73ffffffffffffffffffffffffffffffffffffffff161461183e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183590614373565b60405180910390fd5b61184661072b565b73ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b815260040161187e9190614473565b600060405180830381600087803b15801561189857600080fd5b505af11580156118ac573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167feae9cfbc77fdd40ca899f36b608256063b2bc9d8178b0220f7ad513e178d673082426040516118f89291906144b7565b60405180910390a2611908611064565b611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e90614393565b60405180910390fd5b50565b6000806119556123e5565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b815260040161198d919061403d565b60206040518083038186803b1580156119a557600080fd5b505afa1580156119b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119dd9190613851565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401611a189190613fa1565b60206040518083038186803b158015611a3057600080fd5b505afa158015611a44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6891906139d4565b91505092915050565b6000804790506000611a816123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015611ac657600080fd5b505afa158015611ada573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611b0391906138b6565b90506000611b1082612b5f565b9050600081600081518110611b4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811415611b9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b9390614253565b60405180910390fd5b6000600190505b8251811015611db1576000838281518110611be7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511415611c30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c27906142f3565b60405180910390fd5b6000848281518110611c6b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000611c8082612409565b90506000611c8e308461194a565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611cd657600080fd5b505afa158015611cea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d0e91906139fd565b600a611d1a9190614757565b85611d2591906148b1565b81670de0b6b3a7640000888781518110611d68577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611d7a91906148b1565b611d8491906148b1565b611d8e91906146d3565b88611d99919061467d565b97505050508080611da990614a58565b915050611ba3565b508394505050505090565b60026065541415611e02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611df990614453565b60405180910390fd5b6002606581905550611e12611064565b15611e52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e4990614293565b60405180910390fd5b6000611e5c610923565b905080821115611e6a578091505b6000611e74610919565b611e7c61105b565b84611e8791906148b1565b611e9191906146d3565b905060008184611ea1919061467d565b9050611eac81612d19565b611eb584612e2c565b611ebe82612e41565b3373ffffffffffffffffffffffffffffffffffffffff167f7abe212d4944ae75cf0a0477af92aa0db98c15aaf21d06c37c97c641427b8eb38584611f00610fb5565b42604051611f119493929190614517565b60405180910390a25050506000611f26610fb5565b9050611f3061164a565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611fad57611f6a611051565b811015611fac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fa390614353565b60405180910390fd5b5b611fb5611713565b8110611ff6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fed90614233565b60405180910390fd5b50600160658190555050565b60026065541415612048576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203f90614453565b60405180910390fd5b6002606581905550612058612401565b73ffffffffffffffffffffffffffffffffffffffff1661207661164a565b73ffffffffffffffffffffffffffffffffffffffff16146120cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120c390614373565b60405180910390fd5b60006120d784612409565b905061210b6120e46123e5565b848373ffffffffffffffffffffffffffffffffffffffff166124ad9092919063ffffffff16565b60006121156123e5565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8686866040518463ffffffff1660e01b815260040161215193929190614081565b602060405180830381600087803b15801561216b57600080fd5b505af115801561217f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a391906138f7565b9050806121e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121dc906143b3565b60405180910390fd5b843373ffffffffffffffffffffffffffffffffffffffff167fc95bd7ebbed9b9c3e9477753bcb60d02b328f1e5bce8b1a25986d6c73991c182864260405161222e9291906144b7565b60405180910390a35050612240611064565b61227f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161227690614393565b60405180910390fd5b6001606581905550505050565b6122946136c8565b60405180608001604052806122a7611a71565b81526020016122b4610923565b81526020016122c1610fb5565b81526020016122ce611064565b6122d95760006122dc565b60015b815250905090565b6122ec612401565b73ffffffffffffffffffffffffffffffffffffffff1661230a61164a565b73ffffffffffffffffffffffffffffffffffffffff1614612360576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161235790614373565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156123d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c7906141f3565b60405180910390fd5b6123d9816129d6565b50565b600060b4905090565b600073f1ca0cef19b051b4491ee2ccfd424ad7583c80c7905090565b600033905090565b6000806124146123e5565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b815260040161244c919061403d565b60206040518083038186803b15801561246457600080fd5b505afa158015612478573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061249c9190613851565b905060008190508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016124df929190613fbc565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161252d9190613f64565b6000604051808303816000865af19150503d806000811461256a576040519150601f19603f3d011682016040523d82523d6000602084013e61256f565b606091505b509150915081801561259d575060008151148061259c57508080602001905181019061259b91906138f7565b5b5b6125dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125d3906143f3565b60405180910390fd5b5050505050565b60006125ee84612409565b90506126226125fb6123e5565b848373ffffffffffffffffffffffffffffffffffffffff166124ad9092919063ffffffff16565b61262a6123e5565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8585856040518463ffffffff1660e01b815260040161266693929190614081565b602060405180830381600087803b15801561268057600080fd5b505af1158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b891906138f7565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561271a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561274c5781602001600182028036833780820191505090505b5060405161275a9190613f64565b60006040518083038185875af1925050503d8060008114612797576040519150601f19603f3d011682016040523d82523d6000602084013e61279c565b606091505b50509050806127e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d790614273565b60405180910390fd5b505050565b6127ed612401565b73ffffffffffffffffffffffffffffffffffffffff1661280b61164a565b73ffffffffffffffffffffffffffffffffffffffff1614612861576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285890614373565b60405180910390fd5b600260655414156128a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161289e90614453565b60405180910390fd5b6002606581905550804710156128f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128e9906142d3565b60405180910390fd5b61291b813373ffffffffffffffffffffffffffffffffffffffff166126bf90919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc682426040516129639291906144b7565b60405180910390a2612973611064565b6129b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129a990614393565b60405180910390fd5b600160658190555050565b60008183106129cc57816129ce565b825b905092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000612aa730612e76565b15905090565b600060019054906101000a900460ff16612afc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af3906143d3565b60405180910390fd5b612b04612e99565b565b600060019054906101000a900460ff16612b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4c906143d3565b60405180910390fd5b612b5d612efa565b565b60606000606136033590506000602060408360ff16612b7e9190614875565b612b889190614645565b90506060604051905081815281604283013603602083013760208101604052600081805190602001209050600081604051602001612bc69190613f7b565b604051602081830303815290604052805190602001209050606060405190506041815260418036036020830137602081016040526000612c0f8284612f5390919063ffffffff16565b9050612c1a8161089d565b612c59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c5090614213565b60405180910390fd5b600060623603359050612c6b816112bf565b612caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ca190614173565b60405180910390fd5b612cb88a8960ff1689612f7a565b98505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af3442604051612d0f9291906144b7565b60405180910390a2565b6000612d236123e5565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015612d6857600080fd5b505afa158015612d7c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612da591906138b6565b905060005b8151811015612e2757824710612dbf57612e27565b612e14828281518110612dfb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101514785612e0f919061490b565b613020565b8080612e1f90614a58565b915050612daa565b505050565b612e3e612e3947836129bd565b610e57565b50565b612e73612e4e82476129bd565b3373ffffffffffffffffffffffffffffffffffffffff166126bf90919063ffffffff16565b50565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff16612ee8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612edf906143d3565b60405180910390fd5b612ef8612ef3612401565b6129d6565b565b600060019054906101000a900460ff16612f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f40906143d3565b60405180910390fd5b6001606581905550565b6000806000612f628585613188565b91509150612f6f8161320b565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b8885101561301057604085028101359150600093505b895184101561300557816020850260208c0101511415612fed5760206040860282010135602085026020880101526001830192505b8951831415612ffa578894505b600184019350612fb8565b600185019450612fa2565b5084955050505050509392505050565b600061302b83612409565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016130689190613fa1565b60206040518083038186803b15801561308057600080fd5b505afa158015613094573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130b891906139d4565b905060008111156131825760006130cd6123e5565b73ffffffffffffffffffffffffffffffffffffffff16639ac34dd385856040518363ffffffff1660e01b815260040161310792919061448e565b602060405180830381600087803b15801561312157600080fd5b505af1158015613135573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315991906139d4565b9050808210156131745761316f858360006125e3565b613180565b61317f8582866125e3565b5b505b50505050565b6000806041835114156131ca5760008060006020860151925060408601519150606086015160001a90506131be8782858561355c565b94509450505050613204565b6040835114156131fb5760008060208501519150604085015190506131f0868383613669565b935093505050613204565b60006002915091505b9250929050565b60006004811115613245577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561327e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561328957613559565b600160048111156132c3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156132fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561333d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161333490614133565b60405180910390fd5b60026004811115613377577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133b0577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156133f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133e890614153565b60405180910390fd5b6003600481111561342b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613464577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156134a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161349c906142b3565b60405180910390fd5b6004808111156134de577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613517577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613558576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161354f90614333565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613597576000600391509150613660565b601b8560ff16141580156135af5750601c8560ff1614155b156135c1576000600491509150613660565b6000600187878787604051600081526020016040526040516135e694939291906140b8565b6020604051602081039080840390855afa158015613608573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561365757600060019250925050613660565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c6136ac919061467d565b90506136ba8782888561355c565b935093505050935093915050565b6040518060800160405280600490602082028036833780820191505090505090565b60006136fd6136f884614581565b61455c565b9050808382526020820190508285602086028201111561371c57600080fd5b60005b8581101561374c578161373288826137d4565b84526020840193506020830192505060018101905061371f565b5050509392505050565b600081359050613765816152ed565b92915050565b60008151905061377a816152ed565b92915050565b600082601f83011261379157600080fd5b81516137a18482602086016136ea565b91505092915050565b6000815190506137b981615304565b92915050565b6000813590506137ce8161531b565b92915050565b6000815190506137e38161531b565b92915050565b6000813590506137f881615332565b92915050565b60008151905061380d81615332565b92915050565b60008151905061382281615349565b92915050565b60006020828403121561383a57600080fd5b600061384884828501613756565b91505092915050565b60006020828403121561386357600080fd5b60006138718482850161376b565b91505092915050565b6000806040838503121561388d57600080fd5b600061389b85828601613756565b92505060206138ac858286016137bf565b9150509250929050565b6000602082840312156138c857600080fd5b600082015167ffffffffffffffff8111156138e257600080fd5b6138ee84828501613780565b91505092915050565b60006020828403121561390957600080fd5b6000613917848285016137aa565b91505092915050565b6000806040838503121561393357600080fd5b6000613941858286016137bf565b9250506020613952858286016137e9565b9150509250929050565b60008060006060848603121561397157600080fd5b600061397f868287016137bf565b9350506020613990868287016137e9565b92505060406139a1868287016137e9565b9150509250925092565b6000602082840312156139bd57600080fd5b60006139cb848285016137e9565b91505092915050565b6000602082840312156139e657600080fd5b60006139f4848285016137fe565b91505092915050565b600060208284031215613a0f57600080fd5b6000613a1d84828501613813565b91505092915050565b6000613a328383613f37565b60208301905092915050565b613a478161493f565b82525050565b613a56816145c7565b613a608184614602565b9250613a6b826145ad565b8060005b83811015613a9c578151613a838782613a26565b9650613a8e836145e8565b925050600181019050613a6f565b505050505050565b6000613aaf826145d2565b613ab9818561460d565b9350613ac4836145b7565b8060005b83811015613af5578151613adc8882613a26565b9750613ae7836145f5565b925050600181019050613ac8565b5085935050505092915050565b613b0b81614951565b82525050565b613b1a8161495d565b82525050565b613b31613b2c8261495d565b614aa1565b82525050565b6000613b42826145dd565b613b4c818561461e565b9350613b5c8185602086016149f4565b80840191505092915050565b613b71816149ac565b82525050565b613b80816149d0565b82525050565b6000613b93601883614629565b9150613b9e82614b56565b602082019050919050565b6000613bb6601f83614629565b9150613bc182614b7f565b602082019050919050565b6000613bd9601c8361463a565b9150613be482614ba8565b601c82019050919050565b6000613bfc601983614629565b9150613c0782614bd1565b602082019050919050565b6000613c1f604583614629565b9150613c2a82614bfa565b606082019050919050565b6000613c42602983614629565b9150613c4d82614c6f565b604082019050919050565b6000613c65602b83614629565b9150613c7082614cbe565b604082019050919050565b6000613c88602683614629565b9150613c9382614d0d565b604082019050919050565b6000613cab601583614629565b9150613cb682614d5c565b602082019050919050565b6000613cce604c83614629565b9150613cd982614d85565b606082019050919050565b6000613cf1602783614629565b9150613cfc82614dfa565b604082019050919050565b6000613d14603483614629565b9150613d1f82614e49565b604082019050919050565b6000613d37602083614629565b9150613d4282614e98565b602082019050919050565b6000613d5a602283614629565b9150613d6582614ec1565b604082019050919050565b6000613d7d602583614629565b9150613d8882614f10565b604082019050919050565b6000613da0602883614629565b9150613dab82614f5f565b604082019050919050565b6000613dc3602e83614629565b9150613dce82614fae565b604082019050919050565b6000613de6602283614629565b9150613df182614ffd565b604082019050919050565b6000613e09609283614629565b9150613e148261504c565b60a082019050919050565b6000613e2c602083614629565b9150613e378261510d565b602082019050919050565b6000613e4f603383614629565b9150613e5a82615136565b604082019050919050565b6000613e72601183614629565b9150613e7d82615185565b602082019050919050565b6000613e95602b83614629565b9150613ea0826151ae565b604082019050919050565b6000613eb8602d83614629565b9150613ec3826151fd565b604082019050919050565b6000613edb603483614629565b9150613ee68261524c565b604082019050919050565b6000613efe601183614629565b9150613f098261529b565b602082019050919050565b6000613f21601f83614629565b9150613f2c826152c4565b602082019050919050565b613f4081614995565b82525050565b613f4f81614995565b82525050565b613f5e8161499f565b82525050565b6000613f708284613b37565b915081905092915050565b6000613f8682613bcc565b9150613f928284613b20565b60208201915081905092915050565b6000602082019050613fb66000830184613a3e565b92915050565b6000604082019050613fd16000830185613a3e565b613fde6020830184613f46565b9392505050565b6000608082019050613ffa6000830184613a4d565b92915050565b6000602082019050818103600083015261401a8184613aa4565b905092915050565b60006020820190506140376000830184613b02565b92915050565b60006020820190506140526000830184613b11565b92915050565b600060408201905061406d6000830185613b11565b61407a6020830184613f46565b9392505050565b60006060820190506140966000830186613b11565b6140a36020830185613f46565b6140b06040830184613f46565b949350505050565b60006080820190506140cd6000830187613b11565b6140da6020830186613f55565b6140e76040830185613b11565b6140f46060830184613b11565b95945050505050565b60006020820190506141126000830184613b68565b92915050565b600060208201905061412d6000830184613b77565b92915050565b6000602082019050818103600083015261414c81613b86565b9050919050565b6000602082019050818103600083015261416c81613ba9565b9050919050565b6000602082019050818103600083015261418c81613bef565b9050919050565b600060208201905081810360008301526141ac81613c12565b9050919050565b600060208201905081810360008301526141cc81613c35565b9050919050565b600060208201905081810360008301526141ec81613c58565b9050919050565b6000602082019050818103600083015261420c81613c7b565b9050919050565b6000602082019050818103600083015261422c81613c9e565b9050919050565b6000602082019050818103600083015261424c81613cc1565b9050919050565b6000602082019050818103600083015261426c81613ce4565b9050919050565b6000602082019050818103600083015261428c81613d07565b9050919050565b600060208201905081810360008301526142ac81613d2a565b9050919050565b600060208201905081810360008301526142cc81613d4d565b9050919050565b600060208201905081810360008301526142ec81613d70565b9050919050565b6000602082019050818103600083015261430c81613d93565b9050919050565b6000602082019050818103600083015261432c81613db6565b9050919050565b6000602082019050818103600083015261434c81613dd9565b9050919050565b6000602082019050818103600083015261436c81613dfc565b9050919050565b6000602082019050818103600083015261438c81613e1f565b9050919050565b600060208201905081810360008301526143ac81613e42565b9050919050565b600060208201905081810360008301526143cc81613e65565b9050919050565b600060208201905081810360008301526143ec81613e88565b9050919050565b6000602082019050818103600083015261440c81613eab565b9050919050565b6000602082019050818103600083015261442c81613ece565b9050919050565b6000602082019050818103600083015261444c81613ef1565b9050919050565b6000602082019050818103600083015261446c81613f14565b9050919050565b60006020820190506144886000830184613f46565b92915050565b60006040820190506144a36000830185613f46565b6144b06020830184613a3e565b9392505050565b60006040820190506144cc6000830185613f46565b6144d96020830184613f46565b9392505050565b60006060820190506144f56000830186613f46565b6145026020830185613f46565b61450f6040830184613f46565b949350505050565b600060808201905061452c6000830187613f46565b6145396020830186613f46565b6145466040830185613f46565b6145536060830184613f46565b95945050505050565b6000614566614577565b90506145728282614a27565b919050565b6000604051905090565b600067ffffffffffffffff82111561459c5761459b614b09565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061465082614967565b915061465b83614967565b92508261ffff0382111561467257614671614aab565b5b828201905092915050565b600061468882614995565b915061469383614995565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156146c8576146c7614aab565b5b828201905092915050565b60006146de82614995565b91506146e983614995565b9250826146f9576146f8614ada565b5b828204905092915050565b6000808291508390505b600185111561474e5780860481111561472a57614729614aab565b5b60018516156147395780820291505b808102905061474785614b49565b945061470e565b94509492505050565b600061476282614995565b915061476d8361499f565b925061479a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846147a2565b905092915050565b6000826147b2576001905061486e565b816147c0576000905061486e565b81600181146147d657600281146147e05761480f565b600191505061486e565b60ff8411156147f2576147f1614aab565b5b8360020a91508482111561480957614808614aab565b5b5061486e565b5060208310610133831016604e8410600b84101617156148445782820a90508381111561483f5761483e614aab565b5b61486e565b6148518484846001614704565b9250905081840481111561486857614867614aab565b5b81810290505b9392505050565b600061488082614967565b915061488b83614967565b92508161ffff04831182151516156148a6576148a5614aab565b5b828202905092915050565b60006148bc82614995565b91506148c783614995565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614900576148ff614aab565b5b828202905092915050565b600061491682614995565b915061492183614995565b92508282101561493457614933614aab565b5b828203905092915050565b600061494a82614975565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006149b7826149be565b9050919050565b60006149c982614975565b9050919050565b60006149db826149e2565b9050919050565b60006149ed82614975565b9050919050565b60005b83811015614a125780820151818401526020810190506149f7565b83811115614a21576000848401525b50505050565b614a3082614b38565b810181811067ffffffffffffffff82111715614a4f57614a4e614b09565b5b80604052505050565b6000614a6382614995565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614a9657614a95614aab565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f446174612074696d657374616d7020697320696e76616c696400000000000000600082015250565b7f53656c6c696e67206f757420616c6c2061737365747320776974686f7574207260008201527f65706179696e67207468652077686f6c652064656274206973206e6f7420616c60208201527f6c6f776564000000000000000000000000000000000000000000000000000000604082015250565b7f416464696e67206d6f7265207468616e20312e32352041564158206973206e6f60008201527f7420616c6c6f7765640000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2072657060008201527f617920746865206c6f616e000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f54686973206f7065726174696f6e20776f756c64206e6f7420726573756c742060008201527f696e206272696e67696e6720746865206c6f616e206261636b20746f2061207360208201527f6f6c76656e742073746174650000000000000000000000000000000000000000604082015250565b7f417661782070726963652072657475726e65642066726f6d206f7261636c652060008201527f6973207a65726f00000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f43616e6e6f742073656c6c6f7574206120736f6c76656e74206163636f756e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2077697460008201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b7f41737365742070726963652072657475726e65642066726f6d206f7261636c6560008201527f206973207a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686973206f7065726174696f6e20776f756c6420726573756c7420696e206160008201527f206c6f616e2077697468204c5456206c6f776572207468616e204d696e696d6160208201527f6c2053656c6c6f7574204c545620776869636820776f756c6420707574206c6f60408201527f616e2773206f776e657220696e2061207269736b206f6620616e20756e6e656360608201527f6573736172696c792068696768206c6f73730000000000000000000000000000608082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b7f526564656d7074696f6e206661696c6564000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e64732061726520617661696c61626c65207460008201527f6f20696e7665737420696e20616e206173736574000000000000000000000000602082015250565b7f496e766573746d656e74206661696c6564000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6152f68161493f565b811461530157600080fd5b50565b61530d81614951565b811461531857600080fd5b50565b6153248161495d565b811461532f57600080fd5b50565b61533b81614995565b811461534657600080fd5b50565b6153528161499f565b811461535d57600080fd5b5056fea2646970667358221220b1a10cba9750065aabfb3a5a88799b959e48670200d14f5075ee1479aa7ecb2c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "of funds to borrow"
        }
      },
      "closeLoan()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getAllAssetsPrices()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getBalance(address,bytes32)": {
        "details": "_asset the code of an asset_user the address of queried user*"
      },
      "getLTV()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getTotalValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "invest(bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_asset": "code of the asset",
          "_exactERC20AmountOut": "exact amount of asset to buy",
          "_maxAvaxAmountIn": "maximum amount of AVAX to sell"
        }
      },
      "isSolvent()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "liquidateLoan(uint256)": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_asset": "code of the asset",
          "_exactERC20AmountIn": "exact amount of token to sell",
          "_minAvaxAmountOut": "minimum amount of the AVAX token to buy"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "of funds to repay"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "to be withdrawn"
        }
      },
      "withdrawAsset(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256)": {
        "notice": "Borrows funds from the pool"
      },
      "closeLoan()": {
        "notice": "This function can only be accessed by the owner and allows selling all of the assets."
      },
      "fund()": {
        "notice": "Funds a loan with the value attached to the transaction Allows to add up to 1.25 AVAX of collateral in total*"
      },
      "getAllAssetsBalances()": {
        "notice": "Returns the balances of all assets served by the price provider It could be used as a helper method for UI*"
      },
      "getAllAssetsPrices()": {
        "notice": "Returns the prices of all assets served by the price provider It could be used as a helper method for UI"
      },
      "getBalance(address,bytes32)": {
        "notice": "Returns the current balance of the asset held by a given user"
      },
      "getDebt()": {
        "notice": "Returns the current debt associated with the loan*"
      },
      "getLTV()": {
        "notice": "LoanToValue ratio is calculated as the ratio between debt and collateral. The collateral is equal to total loan value takeaway debt."
      },
      "getMaxBlockTimestampDelay()": {
        "notice": "Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy*"
      },
      "getTotalValue()": {
        "notice": "Returns the current value of a loan in AVAX including cash and investments"
      },
      "invest(bytes32,uint256,uint256)": {
        "notice": "Invests an amount to buy an asset"
      },
      "isSignerAuthorized(address)": {
        "notice": "Override PriceAware method, addresses below belong to authorized signers of data feeds*"
      },
      "isSolvent()": {
        "notice": "Checks if the loan is solvent. It means that the ratio between debt and collateral is below safe level, which is parametrized by the getMaxLtv()"
      },
      "redeem(bytes32,uint256,uint256)": {
        "notice": "Redeem an investment by selling an asset"
      },
      "repay(uint256)": {
        "notice": "Repays funds to the pool"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws an amount from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}