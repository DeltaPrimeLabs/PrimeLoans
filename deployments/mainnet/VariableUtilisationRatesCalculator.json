{
  "address": "0xB4307ab9Ade97E33B3300FC54Ae15433Db39E8bc",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "getPoolUtilisation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "name": "setDepositRateFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b3cd9cdd4021b2570cfeafc47ab1a0bfb8c774eb0e827723826551f25e09a86",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xB4307ab9Ade97E33B3300FC54Ae15433Db39E8bc",
    "transactionIndex": 0,
    "gasUsed": "856264",
    "logsBloom": "0x
    "blockHash": "0xa8022ef8035f33f9b308422155d41a284e87ba299d6aacd8bdc542228a159874",
    "transactionHash": "0x0b3cd9cdd4021b2570cfeafc47ab1a0bfb8c774eb0e827723826551f25e09a86",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 14216562,
        "transactionHash": "0x0b3cd9cdd4021b2570cfeafc47ab1a0bfb8c774eb0e827723826551f25e09a86",
        "address": "0xB4307ab9Ade97E33B3300FC54Ae15433Db39E8bc",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa8022ef8035f33f9b308422155d41a284e87ba299d6aacd8bdc542228a159874"
      }
    ],
    "blockNumber": 14216562,
    "cumulativeGasUsed": "856264",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "6202c0d21b5a35dfad538d44758211da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BREAKPOINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"getPoolUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"setDepositRateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*\",\"kind\":\"dev\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"calculateDepositRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"getPoolUtilisation(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDepositRateFactor(uint256)\":{\"details\":\"_newRate total value of loans*\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VariableUtilisationRatesCalculator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"notice\":\"Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\"},\"calculateDepositRate(uint256,uint256)\":{\"notice\":\"Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\"},\"getPoolUtilisation(uint256,uint256)\":{\"notice\":\"Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits\"},\"setDepositRateFactor(uint256)\":{\"notice\":\"Sets deposit rate factor This factor is needed to account for arithmetic inaccuracy and keep pool balanced. Should be close to 1000\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VariableUtilisationRatesCalculator.sol\":\"VariableUtilisationRatesCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VariableUtilisationRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: a6bce6b3ffb1f37090a43c55acaf3f7c1749dbf3;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\n\\n/**\\n * @title VariableUtilisationRatesCalculator\\n * @dev Contract which calculates the interest rates based on pool utilisation.\\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\\n **/\\ncontract VariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\\n  uint256 public constant SLOPE_1 = 0.12e18;\\n  uint256 public constant OFFSET = 0.03e18;\\n  // BREAKPOINT must be lower than 1e18\\n  uint256 public constant BREAKPOINT = 0.8e18;\\n  uint256 public constant MAX_RATE = 0.75e18;\\n\\n  // calculated off-chain for gas efficiency with following formula:\\n  // (MAX_RATE - OFFSET - SLOPE_1 * BREAKPOINT) / (1 - BREAKPOINT)\\n  uint256 public constant SLOPE_2 = 3.12e18;\\n\\n  //accuracy of 1000\\n  uint256 public depositRateFactor = 995;\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Returns the pool utilisation, which is a ratio between loans and deposits\\n   * utilisation = value_of_loans / value_of_deposits\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\\n    if (_totalDeposits == 0) return 0;\\n\\n    return (_totalLoans * 1e18) / _totalDeposits;\\n  }\\n\\n  /**\\n   * Returns the current deposit rate\\n   * The value is based on the current borrowing rate and satisfies the invariant:\\n   * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\\n    if (_totalDeposits == 0) return 0;\\n\\n    if (_totalLoans >= _totalDeposits) {\\n      return MAX_RATE * depositRateFactor / 1000;\\n    } else {\\n      uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * depositRateFactor * _totalLoans / (_totalDeposits * 1000);\\n        return rate;\\n    }\\n  }\\n\\n  /**\\n   * Returns the current borrowing rate\\n   * The value is based on the pool utilisation according to the piecewise linear formula:\\n   * 1) for pool utilisation lower than or equal to breakpoint:\\n   * borrowing_rate = SLOPE_1 * utilisation + OFFSET\\n   * 2) for pool utilisation greater than breakpoint:\\n   * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\\n    if (totalDeposits == 0) return OFFSET;\\n\\n    uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\\n\\n    if (poolUtilisation >= 1e18) {\\n      return MAX_RATE;\\n    } else if (poolUtilisation <= BREAKPOINT) {\\n      return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET;\\n    } else {\\n      // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\\n      // unsigned integer safety check)\\n      uint256 value = (poolUtilisation * SLOPE_2) / 1e18 + MAX_RATE;\\n\\n      require(value >= SLOPE_2, \\\"Out of range value when calculating the borrowing rate. Consider checking if SLOPE_2 is calculated correctly\\\");\\n\\n      return value - SLOPE_2;\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n  /**\\n   * Sets deposit rate factor\\n   * This factor is needed to account for arithmetic inaccuracy and keep pool balanced. Should be close to 1000\\n   * @dev _newRate total value of loans\\n   **/\\n  function setDepositRateFactor(uint256 factor) external onlyOwner {\\n    depositRateFactor = factor;\\n  }\\n}\",\"keccak256\":\"0x944922a5aaa8c4f43fcb7d0d21e131b81e006a5d6ebe4b3c27c9b44528b71af6\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x59a5851c6baab0436ce25c29fc185d87690400b0f1039788ecb63591226c4171\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526103e360015534801561001657600080fd5b5061003361002861003860201b60201c565b61004060201b60201c565b610104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610daf806101136000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639ceca9651161008c578063ce665dd811610066578063ce665dd8146101f0578063df841eec1461020e578063e280703b1461023e578063f2fde38b1461025c576100cf565b80639ceca96514610184578063b64b0877146101b4578063c24dbebd146101d2576100cf565b806324fec939146100d4578063321105fb146100f05780633bf42d4b1461010e578063715018a61461012c5780637cd08331146101365780638da5cb5b14610166575b600080fd5b6100ee60048036038101906100e991906108a4565b610278565b005b6100f86102fe565b6040516101059190610a34565b60405180910390f35b61011661030a565b6040516101239190610a34565b60405180910390f35b610134610316565b005b610150600480360381019061014b91906108f6565b61039e565b60405161015d9190610a34565b60405180910390f35b61016e6104ac565b60405161017b91906109b9565b60405180910390f35b61019e600480360381019061019991906108f6565b6104d5565b6040516101ab9190610a34565b60405180910390f35b6101bc610510565b6040516101c99190610a34565b60405180910390f35b6101da61051c565b6040516101e79190610a34565b60405180910390f35b6101f8610528565b6040516102059190610a34565b60405180910390f35b610228600480360381019061022391906108f6565b610533565b6040516102359190610a34565b60405180910390f35b610246610672565b6040516102539190610a34565b60405180910390f35b6102766004803603810190610271919061087b565b610678565b005b610280610770565b73ffffffffffffffffffffffffffffffffffffffff1661029e6104ac565b73ffffffffffffffffffffffffffffffffffffffff16146102f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102eb90610a14565b60405180910390fd5b8060018190555050565b6701aa535d3d0c000081565b672b4c77783338000081565b61031e610770565b73ffffffffffffffffffffffffffffffffffffffff1661033c6104ac565b73ffffffffffffffffffffffffffffffffffffffff1614610392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038990610a14565b60405180910390fd5b61039c6000610778565b565b6000808214156103b157600090506104a6565b8183106103e2576103e8600154670a688906bd8b00006103d19190610b10565b6103db9190610adf565b90506104a6565b60006103e8836103f29190610b10565b846001543073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b8152600401610431929190610a4f565b60206040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048191906108cd565b61048b9190610b10565b6104959190610b10565b61049f9190610adf565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808214156104e8576000905061050a565b81670de0b6b3a7640000846104fd9190610b10565b6105079190610adf565b90505b92915050565b670b1a2bc2ec50000081565b670a688906bd8b000081565b666a94d74f43000081565b60008082141561054c57666a94d74f430000905061066c565b600061055884846104d5565b9050670de0b6b3a7640000811061057a57670a688906bd8b000091505061066c565b670b1a2bc2ec50000081116105ca57666a94d74f430000670de0b6b3a76400006701aa535d3d0c0000836105ae9190610b10565b6105b89190610adf565b6105c29190610a89565b91505061066c565b6000670a688906bd8b0000670de0b6b3a7640000672b4c777833380000846105f29190610b10565b6105fc9190610adf565b6106069190610a89565b9050672b4c777833380000811015610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a906109d4565b60405180910390fd5b672b4c777833380000816106679190610b6a565b925050505b92915050565b60015481565b610680610770565b73ffffffffffffffffffffffffffffffffffffffff1661069e6104ac565b73ffffffffffffffffffffffffffffffffffffffff16146106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106eb90610a14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b906109f4565b60405180910390fd5b61076d81610778565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061084b81610d4b565b92915050565b60008135905061086081610d62565b92915050565b60008151905061087581610d62565b92915050565b60006020828403121561088d57600080fd5b600061089b8482850161083c565b91505092915050565b6000602082840312156108b657600080fd5b60006108c484828501610851565b91505092915050565b6000602082840312156108df57600080fd5b60006108ed84828501610866565b91505092915050565b6000806040838503121561090957600080fd5b600061091785828601610851565b925050602061092885828601610851565b9150509250929050565b61093b81610b9e565b82525050565b600061094e606c83610a78565b915061095982610c38565b608082019050919050565b6000610971602683610a78565b915061097c82610cd3565b604082019050919050565b6000610994602083610a78565b915061099f82610d22565b602082019050919050565b6109b381610bd0565b82525050565b60006020820190506109ce6000830184610932565b92915050565b600060208201905081810360008301526109ed81610941565b9050919050565b60006020820190508181036000830152610a0d81610964565b9050919050565b60006020820190508181036000830152610a2d81610987565b9050919050565b6000602082019050610a4960008301846109aa565b92915050565b6000604082019050610a6460008301856109aa565b610a7160208301846109aa565b9392505050565b600082825260208201905092915050565b6000610a9482610bd0565b9150610a9f83610bd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ad457610ad3610bda565b5b828201905092915050565b6000610aea82610bd0565b9150610af583610bd0565b925082610b0557610b04610c09565b5b828204905092915050565b6000610b1b82610bd0565b9150610b2683610bd0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5f57610b5e610bda565b5b828202905092915050565b6000610b7582610bd0565b9150610b8083610bd0565b925082821015610b9357610b92610bda565b5b828203905092915050565b6000610ba982610bb0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f7574206f662072616e67652076616c7565207768656e2063616c63756c617460008201527f696e672074686520626f72726f77696e6720726174652e20436f6e736964657260208201527f20636865636b696e6720696620534c4f50455f322069732063616c63756c617460408201527f656420636f72726563746c790000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d5481610b9e565b8114610d5f57600080fd5b50565b610d6b81610bd0565b8114610d7657600080fd5b5056fea26469706673582212204095b7a33b3c1b33c7a3dc8424cb11afda5ede2d5421b80c81914f4ef54b606d64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c80639ceca9651161008c578063ce665dd811610066578063ce665dd8146101f0578063df841eec1461020e578063e280703b1461023e578063f2fde38b1461025c576100cf565b80639ceca96514610184578063b64b0877146101b4578063c24dbebd146101d2576100cf565b806324fec939146100d4578063321105fb146100f05780633bf42d4b1461010e578063715018a61461012c5780637cd08331146101365780638da5cb5b14610166575b600080fd5b6100ee60048036038101906100e991906108a4565b610278565b005b6100f86102fe565b6040516101059190610a34565b60405180910390f35b61011661030a565b6040516101239190610a34565b60405180910390f35b610134610316565b005b610150600480360381019061014b91906108f6565b61039e565b60405161015d9190610a34565b60405180910390f35b61016e6104ac565b60405161017b91906109b9565b60405180910390f35b61019e600480360381019061019991906108f6565b6104d5565b6040516101ab9190610a34565b60405180910390f35b6101bc610510565b6040516101c99190610a34565b60405180910390f35b6101da61051c565b6040516101e79190610a34565b60405180910390f35b6101f8610528565b6040516102059190610a34565b60405180910390f35b610228600480360381019061022391906108f6565b610533565b6040516102359190610a34565b60405180910390f35b610246610672565b6040516102539190610a34565b60405180910390f35b6102766004803603810190610271919061087b565b610678565b005b610280610770565b73ffffffffffffffffffffffffffffffffffffffff1661029e6104ac565b73ffffffffffffffffffffffffffffffffffffffff16146102f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102eb90610a14565b60405180910390fd5b8060018190555050565b6701aa535d3d0c000081565b672b4c77783338000081565b61031e610770565b73ffffffffffffffffffffffffffffffffffffffff1661033c6104ac565b73ffffffffffffffffffffffffffffffffffffffff1614610392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038990610a14565b60405180910390fd5b61039c6000610778565b565b6000808214156103b157600090506104a6565b8183106103e2576103e8600154670a688906bd8b00006103d19190610b10565b6103db9190610adf565b90506104a6565b60006103e8836103f29190610b10565b846001543073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b8152600401610431929190610a4f565b60206040518083038186803b15801561044957600080fd5b505afa15801561045d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048191906108cd565b61048b9190610b10565b6104959190610b10565b61049f9190610adf565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808214156104e8576000905061050a565b81670de0b6b3a7640000846104fd9190610b10565b6105079190610adf565b90505b92915050565b670b1a2bc2ec50000081565b670a688906bd8b000081565b666a94d74f43000081565b60008082141561054c57666a94d74f430000905061066c565b600061055884846104d5565b9050670de0b6b3a7640000811061057a57670a688906bd8b000091505061066c565b670b1a2bc2ec50000081116105ca57666a94d74f430000670de0b6b3a76400006701aa535d3d0c0000836105ae9190610b10565b6105b89190610adf565b6105c29190610a89565b91505061066c565b6000670a688906bd8b0000670de0b6b3a7640000672b4c777833380000846105f29190610b10565b6105fc9190610adf565b6106069190610a89565b9050672b4c777833380000811015610653576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064a906109d4565b60405180910390fd5b672b4c777833380000816106679190610b6a565b925050505b92915050565b60015481565b610680610770565b73ffffffffffffffffffffffffffffffffffffffff1661069e6104ac565b73ffffffffffffffffffffffffffffffffffffffff16146106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106eb90610a14565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b906109f4565b60405180910390fd5b61076d81610778565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061084b81610d4b565b92915050565b60008135905061086081610d62565b92915050565b60008151905061087581610d62565b92915050565b60006020828403121561088d57600080fd5b600061089b8482850161083c565b91505092915050565b6000602082840312156108b657600080fd5b60006108c484828501610851565b91505092915050565b6000602082840312156108df57600080fd5b60006108ed84828501610866565b91505092915050565b6000806040838503121561090957600080fd5b600061091785828601610851565b925050602061092885828601610851565b9150509250929050565b61093b81610b9e565b82525050565b600061094e606c83610a78565b915061095982610c38565b608082019050919050565b6000610971602683610a78565b915061097c82610cd3565b604082019050919050565b6000610994602083610a78565b915061099f82610d22565b602082019050919050565b6109b381610bd0565b82525050565b60006020820190506109ce6000830184610932565b92915050565b600060208201905081810360008301526109ed81610941565b9050919050565b60006020820190508181036000830152610a0d81610964565b9050919050565b60006020820190508181036000830152610a2d81610987565b9050919050565b6000602082019050610a4960008301846109aa565b92915050565b6000604082019050610a6460008301856109aa565b610a7160208301846109aa565b9392505050565b600082825260208201905092915050565b6000610a9482610bd0565b9150610a9f83610bd0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ad457610ad3610bda565b5b828201905092915050565b6000610aea82610bd0565b9150610af583610bd0565b925082610b0557610b04610c09565b5b828204905092915050565b6000610b1b82610bd0565b9150610b2683610bd0565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610b5f57610b5e610bda565b5b828202905092915050565b6000610b7582610bd0565b9150610b8083610bd0565b925082821015610b9357610b92610bda565b5b828203905092915050565b6000610ba982610bb0565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f7574206f662072616e67652076616c7565207768656e2063616c63756c617460008201527f696e672074686520626f72726f77696e6720726174652e20436f6e736964657260208201527f20636865636b696e6720696620534c4f50455f322069732063616c63756c617460408201527f656420636f72726563746c790000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d5481610b9e565b8114610d5f57600080fd5b50565b610d6b81610bd0565b8114610d7657600080fd5b5056fea26469706673582212204095b7a33b3c1b33c7a3dc8424cb11afda5ede2d5421b80c81914f4ef54b606d64736f6c63430008040033",
  "devdoc": {
    "details": "Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*",
    "kind": "dev",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "calculateDepositRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDepositRateFactor(uint256)": {
        "details": "_newRate total value of loans*"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VariableUtilisationRatesCalculator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "notice": "Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2"
      },
      "calculateDepositRate(uint256,uint256)": {
        "notice": "Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "notice": "Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits"
      },
      "setDepositRateFactor(uint256)": {
        "notice": "Sets deposit rate factor This factor is needed to account for arithmetic inaccuracy and keep pool balanced. Should be close to 1000"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 153,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "depositRateFactor",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}