{
  "address": "0x4a5FcD28D19780cf2E3045e2Fe2E8BA8FF58e51b",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "funder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Invested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bonus",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ltv",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debtRepaid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "LoanClosed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Redeemed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closeLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssetsPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchange",
      "outputs": [
        {
          "internalType": "contract IAssetsExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFullLoanStatus",
      "outputs": [
        {
          "internalType": "uint256[4]",
          "name": "",
          "type": "uint256[4]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidationBonus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxBlockTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxDataTimestampDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinSelloutLtv",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPercentagePrecision",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "contract Pool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider1",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceProvider2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAvaxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "invest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receivedSigner",
          "type": "address"
        }
      ],
      "name": "isSignerAuthorized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isSolvent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_receivedTimestamp",
          "type": "uint256"
        }
      ],
      "name": "isTimestampValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidateLoan",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAvaxAmountOut",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xeb9e785bc91820abeb55e9ed1a133f4b1caea8084796dde8ec6a12caf7b82dc3",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x4a5FcD28D19780cf2E3045e2Fe2E8BA8FF58e51b",
    "transactionIndex": 0,
    "gasUsed": "4697658",
    "logsBloom": "0x
    "blockHash": "0x7962c029b164e7059f281fe090d9972b71954a77f3df2b886351b15675373315",
    "transactionHash": "0xeb9e785bc91820abeb55e9ed1a133f4b1caea8084796dde8ec6a12caf7b82dc3",
    "logs": [],
    "blockNumber": 12097343,
    "cumulativeGasUsed": "4697658",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "68f6ca304c80387f32b3bff51a2f707a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtRepaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LoanClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closeLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssetsPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchange\",\"outputs\":[{\"internalType\":\"contract IAssetsExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullLoanStatus\",\"outputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"\",\"type\":\"uint256[4]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidationBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBlockTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxDataTimestampDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinSelloutLtv\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPercentagePrecision\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"contract Pool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceProvider2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAvaxAmountIn\",\"type\":\"uint256\"}],\"name\":\"invest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receivedSigner\",\"type\":\"address\"}],\"name\":\"isSignerAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSolvent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_receivedTimestamp\",\"type\":\"uint256\"}],\"name\":\"isTimestampValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"liquidateLoan\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAvaxAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"borrow(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"of funds to borrow\"}},\"closeLoan()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getAllAssetsPrices()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getBalance(address,bytes32)\":{\"details\":\"_asset the code of an asset_user the address of queried user*\"},\"getLTV()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"getTotalValue()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"invest(bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_asset\":\"code of the asset\",\"_exactERC20AmountOut\":\"exact amount of asset to buy\",\"_maxAvaxAmountIn\":\"maximum amount of AVAX to sell\"}},\"isSolvent()\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"liquidateLoan(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeem(bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_asset\":\"code of the asset\",\"_exactERC20AmountIn\":\"exact amount of token to sell\",\"_minAvaxAmountOut\":\"minimum amount of the AVAX token to buy\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"of funds to repay\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\",\"params\":{\"_amount\":\"to be withdrawn\"}},\"withdrawAsset(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(uint256)\":{\"notice\":\"Borrows funds from the pool\"},\"closeLoan()\":{\"notice\":\"This function can only be accessed by the owner and allows selling all of the assets.\"},\"fund()\":{\"notice\":\"Funds a loan with the value attached to the transaction Allows to add up to 1.25 AVAX of collateral in total*\"},\"getAllAssetsBalances()\":{\"notice\":\"Returns the balances of all assets served by the price provider It could be used as a helper method for UI*\"},\"getAllAssetsPrices()\":{\"notice\":\"Returns the prices of all assets served by the price provider It could be used as a helper method for UI\"},\"getBalance(address,bytes32)\":{\"notice\":\"Returns the current balance of the asset held by a given user\"},\"getDebt()\":{\"notice\":\"Returns the current debt associated with the loan*\"},\"getLTV()\":{\"notice\":\"LoanToValue ratio is calculated as the ratio between debt and collateral. The collateral is equal to total loan value takeaway debt.\"},\"getMaxBlockTimestampDelay()\":{\"notice\":\"Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy*\"},\"getTotalValue()\":{\"notice\":\"Returns the current value of a loan in AVAX including cash and investments\"},\"invest(bytes32,uint256,uint256)\":{\"notice\":\"Invests an amount to buy an asset\"},\"isSignerAuthorized(address)\":{\"notice\":\"Override PriceAware method, addresses below belong to authorized signers of data feeds*\"},\"isSolvent()\":{\"notice\":\"Checks if the loan is solvent. It means that the ratio between debt and collateral is below safe level, which is parametrized by the getMaxLtv()\"},\"redeem(bytes32,uint256,uint256)\":{\"notice\":\"Redeem an investment by selling an asset\"},\"repay(uint256)\":{\"notice\":\"Repays funds to the pool\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws an amount from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgraded/SmartLoanLimitedCollateral.sol\":\"SmartLoanLimitedCollateral\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * CompoundingIndex\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\n * @dev updatedRate the value of updated rate\\n **/\\ncontract CompoundingIndex is Ownable {\\n  using WadRayMath for uint256;\\n\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\n  uint256 private constant BASE_RATE = 1e18;\\n\\n  uint256 public start = block.timestamp;\\n\\n  uint256 public index = BASE_RATE;\\n  uint256 public indexUpdateTime = start;\\n\\n  mapping(uint256 => uint256) prevIndex;\\n  mapping(address => uint256) userUpdateTime;\\n\\n  uint256 public rate;\\n\\n  constructor(address owner_) {\\n    if (address(owner_) != address(0)) {\\n      transferOwnership(owner_);\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate\\n   * Before the new rate is set, the index is updated accumulating interest\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  function setRate(uint256 _rate) public onlyOwner {\\n    updateIndex();\\n    rate = _rate;\\n    emit RateUpdated(rate);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * Updates user index\\n   * It persists the update time and the update index time->index mapping\\n   * @dev user address of the index owner\\n   **/\\n  function updateUser(address user) public onlyOwner {\\n    userUpdateTime[user] = block.timestamp;\\n    prevIndex[block.timestamp] = getIndex();\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Gets current value of the compounding index\\n   * It recalculates the value on-demand without updating the storage\\n   **/\\n  function getIndex() public view returns (uint256) {\\n    uint256 period = block.timestamp - indexUpdateTime;\\n    if (period > 0) {\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\n    } else {\\n      return index;\\n    }\\n  }\\n\\n  /**\\n   * Gets the user value recalculated to the current index\\n   * It recalculates the value on-demand without updating the storage\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\n   * of 1 Wei)\\n   **/\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\n    uint256 userTime = userUpdateTime[user];\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\n\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function updateIndex() internal {\\n    prevIndex[indexUpdateTime] = index;\\n\\n    index = getIndex();\\n    indexUpdateTime = block.timestamp;\\n  }\\n\\n  /**\\n   * Returns compounded factor in Ray\\n   **/\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  event RateUpdated(uint256 updatedRate);\\n}\\n\",\"keccak256\":\"0x4523ca643e5992023f6d8c33511b6444762ac77cadf9604b72e629ac69bfaabe\",\"license\":\"UNLICENSED\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./CompoundingIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit and borrow funds from a single pot\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\n * The interest rates calculation is delegated to the external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n  using TransferHelper for address payable;\\n\\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n  mapping(address => mapping(address => uint256)) private _allowed;\\n  mapping(address => uint256) private _deposited;\\n\\n  mapping(address => uint256) public borrowed;\\n\\n  IRatesCalculator private _ratesCalculator;\\n  IBorrowersRegistry private _borrowersRegistry;\\n\\n  CompoundingIndex private _depositIndex;\\n  CompoundingIndex private _borrowIndex;\\n\\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    _ratesCalculator = ratesCalculator_;\\n    _depositIndex = depositIndex_;\\n    _borrowIndex = borrowIndex_;\\n\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    _updateRates();\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate calculator.\\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _ratesCalculator the address of rates calculator\\n   **/\\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n    // setting address(0) ratesCalculator_ freezes the pool\\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n    _ratesCalculator = ratesCalculator_;\\n    if (address(ratesCalculator_) != address(0)) {\\n      _updateRates();\\n    }\\n  }\\n\\n  /**\\n   * Sets the new borrowers registry contract.\\n   * The borrowers registry decides if an account can borrow funds.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _borrowersRegistry the address of borrowers registry\\n   **/\\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n    require(address(borrowersRegistry_) != address(0), \\\"The borrowers registry cannot set to a null address\\\");\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    // (this is verified in \\\"require\\\" above)\\n    unchecked {\\n      _deposited[msg.sender] -= amount;\\n    }\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(msg.sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 currentAllowance = _allowed[msg.sender][spender];\\n    require(currentAllowance >= subtractedValue, \\\"Current allowance is smaller than the subtractedValue\\\");\\n\\n    uint256 newAllowance = currentAllowance - subtractedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    _allowed[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed to transfer required amount\\\");\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    _deposited[sender] -= amount;\\n    _allowed[sender][msg.sender] -= amount;\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Deposits the message value\\n   * It updates user deposited balance, total deposited and rates\\n   **/\\n  function deposit() public payable virtual nonReentrant {\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _mint(msg.sender, msg.value);\\n    _updateRates();\\n\\n    emit Deposit(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /**\\n   * Withdraws selected amount from the user deposits\\n   * @dev _amount the amount to be withdrawn\\n   **/\\n  function withdraw(uint256 _amount) external nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough available funds to withdraw\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _burn(msg.sender, _amount);\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Borrows the specified amount\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev _amount the amount to be borrowed\\n   **/\\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough funds in the pool to fund the loan\\\");\\n\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    borrowed[msg.sender] += _amount;\\n    borrowed[address(this)] += _amount;\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Borrowing(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Repays the message value\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev It is only meant to be used by the SmartLoan.\\n   **/\\n  function repay() external payable nonReentrant {\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    require(borrowed[msg.sender] >= msg.value, \\\"You are trying to repay more that was borrowed by a user\\\");\\n\\n    borrowed[msg.sender] -= msg.value;\\n    borrowed[address(this)] -= msg.value;\\n\\n    _updateRates();\\n\\n    emit Repayment(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /* =========\\n\\n\\n  /**\\n   * Returns the current borrowed amount for the given user\\n   * The value includes the interest rates owned at the current moment\\n   * @dev _user the address of queried borrower\\n  **/\\n  function getBorrowed(address _user) public view returns (uint256) {\\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return balanceOf(address(this));\\n  }\\n\\n  function totalBorrowed() public view returns (uint256) {\\n    return getBorrowed(address(this));\\n  }\\n\\n  /**\\n   * Returns the current deposited amount for the given user\\n   * The value includes the interest rates earned at the current moment\\n   * @dev _user the address of queried depositor\\n   **/\\n  function balanceOf(address user) public view override returns (uint256) {\\n    return _depositIndex.getIndexedValue(_deposited[user], user);\\n  }\\n\\n  /**\\n   * Returns the current interest rate for deposits\\n   **/\\n  function getDepositRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Returns the current interest rate for borrowings\\n   **/\\n  function getBorrowingRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n   **/\\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\\n\\n    require(amount <= address(this).balance, \\\"Trying to recover more surplus funds than pool balance\\\");\\n    require(amount <= surplus, \\\"Trying to recover more funds than current surplus\\\");\\n\\n    payable(account).safeTransferETH(amount);\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n    _deposited[account] += amount;\\n    _deposited[address(this)] += amount;\\n\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n    require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n    // verified in \\\"require\\\" above\\n    unchecked {\\n      _deposited[account] -= amount;\\n      _deposited[address(this)] -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _updateRates() internal {\\n    require(address(_ratesCalculator) != address(0), \\\"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\\\");\\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\\n  }\\n\\n  function _accumulateDepositInterest(address user) internal {\\n    uint256 depositedWithInterest = balanceOf(user);\\n    uint256 interest = depositedWithInterest - _deposited[user];\\n\\n    _mint(user, interest);\\n\\n    emit InterestCollected(user, interest, block.timestamp);\\n\\n    _depositIndex.updateUser(user);\\n    _depositIndex.updateUser(address(this));\\n  }\\n\\n  function _accumulateBorrowingInterest(address user) internal {\\n    uint256 borrowedWithInterest = getBorrowed(user);\\n    uint256 interest = borrowedWithInterest - borrowed[user];\\n    borrowed[user] = borrowedWithInterest;\\n    borrowed[address(this)] += interest;\\n\\n    _borrowIndex.updateUser(user);\\n    _borrowIndex.updateUser(address(this));\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier canBorrow() {\\n    require(address(_borrowersRegistry) != address(0), \\\"Borrowers registry is not configured\\\");\\n    require(_borrowersRegistry.canBorrow(msg.sender), \\\"Only the accounts authorised by borrowers registry may borrow\\\");\\n    require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n    _;\\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after the user deposits funds\\n   * @param user the address performing the deposit\\n   * @param value the amount deposited\\n   * @param timestamp of the deposit\\n   **/\\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user withdraws funds\\n   * @param user the address performing the withdrawal\\n   * @param value the amount withdrawn\\n   * @param timestamp of the withdrawal\\n   **/\\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user borrows funds\\n   * @param user the address that borrows\\n   * @param value the amount borrowed\\n   * @param timestamp time of the borrowing\\n   **/\\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user repays debt\\n   * @param user the address that repays\\n   * @param value the amount repaid\\n   * @param timestamp of the repayment\\n   **/\\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after accumulating deposit interest\\n   * @param user the address that the deposit interest is accumulated\\n   * @param value the amount accumulated interest\\n   * @param timestamp of the interest accumulation\\n   **/\\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n  * @dev emitted after changing borrowers registry\\n  * @param registry an address of the newly set borrowers registry\\n  * @param timestamp of the borrowers registry change\\n  **/\\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n}\",\"keccak256\":\"0xf64d224ddf152c2bb0ab8d4e7acb471db5897f6e389957a2b73d82b433e17a1e\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoan.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./SmartLoanProperties.sol\\\";\\n\\n/**\\n * @title SmartLoan\\n * A contract that is authorised to borrow funds using delegated credit.\\n * It maintains solvency calculating the current value of assets and borrowings.\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\n * It permits only a limited and safe token transfer.\\n *\\n */\\ncontract SmartLoan is SmartLoanProperties, PriceAware, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n  using TransferHelper for address payable;\\n  using TransferHelper for address;\\n\\n  function initialize() external initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n  }\\n\\n  /**\\n   * Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy\\n   **/\\n  function getMaxBlockTimestampDelay() public virtual override view returns (uint256) {\\n    return MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  /**\\n   * Override PriceAware method, addresses below belong to authorized signers of data feeds\\n   **/\\n  function isSignerAuthorized(address _receivedSigner) public override virtual view returns (bool) {\\n    return (_receivedSigner == getPriceProvider1()) || (_receivedSigner == getPriceProvider2());\\n  }\\n\\n  /**\\n   * Funds a loan with the value attached to the transaction\\n   **/\\n  function fund() public virtual payable {\\n    emit Funded(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /**\\n   * This function allows selling assets without checking if the loan will remain solvent after this operation.\\n   * It is used as part of the sellout() function which sells part/all of assets in order to bring the loan back to solvency.\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\n   **/\\n  function sellAsset(bytes32 asset, uint256 _amount, uint256 _minAvaxOut) internal {\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\n    address(token).safeTransfer(address(getExchange()), _amount);\\n    getExchange().sellAsset(asset, _amount, _minAvaxOut);\\n  }\\n\\n  /**\\n   * @dev This function uses the redstone-evm-connector\\n  **/\\n  function withdrawAsset(bytes32 asset, uint256 amount) external onlyOwner nonReentrant remainsSolvent {\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\n    address(token).safeTransfer(msg.sender, amount);\\n  }\\n\\n  /**\\n   * This function attempts to sell just enough asset to receive targetAvaxAmount.\\n   * If there is not enough asset's balance to cover the whole targetAvaxAmount then the whole asset's balance\\n   * is being sold.\\n   * It is possible that multiple different assets will have to be sold and for that reason we do not use the remainsSolvent modifier.\\n   **/\\n  function sellAssetForTargetAvax(bytes32 asset, uint256 targetAvaxAmount) private {\\n    IERC20Metadata token = getERC20TokenInstance(asset);\\n    uint256 balance = token.balanceOf(address(this));\\n    if (balance > 0) {\\n      uint256 minSaleAmount = getExchange().getMinimumERC20TokenAmountForExactAVAX(targetAvaxAmount, address(token));\\n      if (balance < minSaleAmount) {\\n        sellAsset(asset, balance, 0);\\n      } else {\\n        sellAsset(asset, minSaleAmount, targetAvaxAmount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * This function attempts to repay the _repayAmount back to the pool.\\n   * If there is not enough AVAX balance to repay the _repayAmount then the available AVAX balance will be repaid.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function attemptRepay(uint256 _repayAmount) internal {\\n    repay(Math.min(address(this).balance, _repayAmount));\\n  }\\n\\n  function payBonus(uint256 _bonus) internal {\\n    payable(msg.sender).safeTransferETH(Math.min(_bonus, address(this).balance));\\n  }\\n\\n  /**\\n   * This function can only be accessed by the owner and allows selling all of the assets.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function closeLoan() public virtual payable onlyOwner nonReentrant remainsSolvent {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      uint256 balance = getERC20TokenInstance(assets[i]).balanceOf(address(this));\\n      if (balance > 0) {\\n        sellAsset(assets[i], balance, 0);\\n      }\\n    }\\n\\n    uint256 debt = getDebt();\\n    require(address(this).balance >= debt, \\\"Selling out all assets without repaying the whole debt is not allowed\\\");\\n    repay(debt);\\n    emit LoanClosed(debt, address(this).balance, block.timestamp);\\n\\n    uint256 balance = address(this).balance;\\n    if (balance > 0) {\\n      payable(msg.sender).safeTransferETH(balance);\\n      emit Withdrawn(msg.sender, balance, block.timestamp);\\n    }\\n  }\\n\\n  /**\\n  * @dev This function uses the redstone-evm-connector\\n  **/\\n  function liquidateLoan(uint256 repayAmount) external payable nonReentrant successfulLiquidation {\\n    uint256 debt = getDebt();\\n    if (repayAmount > debt) {\\n      repayAmount = debt;\\n    }\\n    uint256 bonus = (repayAmount * getLiquidationBonus()) / getPercentagePrecision();\\n    uint256 totalRepayAmount = repayAmount + bonus;\\n\\n    sellout(totalRepayAmount);\\n    attemptRepay(repayAmount);\\n    payBonus(bonus);\\n    emit Liquidated(msg.sender, repayAmount, bonus, getLTV(), block.timestamp);\\n  }\\n\\n  /**\\n   * This function role is to sell part/all of the available assets in order to receive the targetAvaxAmount.\\n   *\\n   **/\\n  function sellout(uint256 targetAvaxAmount) private {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      if (address(this).balance >= targetAvaxAmount) break;\\n      sellAssetForTargetAvax(assets[i], targetAvaxAmount - address(this).balance);\\n    }\\n  }\\n\\n  /**\\n   * Withdraws an amount from the loan\\n   * This method could be used to cash out profits from investments\\n   * The loan needs to remain solvent after the withdrawal\\n   * @param _amount to be withdrawn\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function withdraw(uint256 _amount) public virtual onlyOwner nonReentrant remainsSolvent {\\n    require(address(this).balance >= _amount, \\\"There is not enough funds to withdraw\\\");\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    emit Withdrawn(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Invests an amount to buy an asset\\n   * @param _asset code of the asset\\n   * @param _exactERC20AmountOut exact amount of asset to buy\\n   * @param _maxAvaxAmountIn maximum amount of AVAX to sell\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function invest(bytes32 _asset, uint256 _exactERC20AmountOut, uint256 _maxAvaxAmountIn) external onlyOwner nonReentrant remainsSolvent {\\n    require(address(this).balance >= _maxAvaxAmountIn, \\\"Not enough funds are available to invest in an asset\\\");\\n\\n    bool success = getExchange().buyAsset{value: _maxAvaxAmountIn}(_asset, _exactERC20AmountOut);\\n    require(success, \\\"Investment failed\\\");\\n\\n    emit Invested(msg.sender, _asset, _exactERC20AmountOut, block.timestamp);\\n  }\\n\\n  /**\\n   * Redeem an investment by selling an asset\\n   * @param _asset code of the asset\\n   * @param _exactERC20AmountIn exact amount of token to sell\\n   * @param _minAvaxAmountOut minimum amount of the AVAX token to buy\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function redeem(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external nonReentrant onlyOwner remainsSolvent {\\n    IERC20Metadata token = getERC20TokenInstance(_asset);\\n    address(token).safeTransfer(address(getExchange()), _exactERC20AmountIn);\\n    bool success = getExchange().sellAsset(_asset, _exactERC20AmountIn, _minAvaxAmountOut);\\n    require(success, \\\"Redemption failed\\\");\\n\\n    emit Redeemed(msg.sender, _asset, _exactERC20AmountIn, block.timestamp);\\n  }\\n\\n  /**\\n   * Borrows funds from the pool\\n   * @param _amount of funds to borrow\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function borrow(uint256 _amount) external onlyOwner remainsSolvent {\\n    getPool().borrow(_amount);\\n\\n    emit Borrowed(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Repays funds to the pool\\n   * @param _amount of funds to repay\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function repay(uint256 _amount) public payable {\\n    if (isSolvent() && _liquidationInProgress == false) {\\n      require(msg.sender == owner());\\n    }\\n\\n    _amount = Math.min(_amount, getDebt());\\n    require(address(this).balance >= _amount, \\\"There is not enough funds to repay the loan\\\");\\n\\n    getPool().repay{value: _amount}();\\n\\n    emit Repaid(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  receive() external payable {}\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Returns the current value of a loan in AVAX including cash and investments\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function getTotalValue() public view virtual returns (uint256) {\\n    uint256 total = address(this).balance;\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    uint256[] memory prices = getPricesFromMsg(assets);\\n    uint256 avaxPrice = prices[0];\\n    require(avaxPrice != 0, \\\"Avax price returned from oracle is zero\\\");\\n\\n    for (uint256 i = 1; i < prices.length; i++) {\\n      require(prices[i] != 0, \\\"Asset price returned from oracle is zero\\\");\\n\\n      bytes32 _asset = assets[i];\\n      IERC20Metadata token = getERC20TokenInstance(_asset);\\n      uint256 assetBalance = getBalance(address(this), _asset);\\n\\n      total = total + (prices[i] * 10**18 * assetBalance) / (avaxPrice * 10**token.decimals());\\n    }\\n\\n    return total;\\n  }\\n\\n  /**\\n   * Returns the current balance of the asset held by a given user\\n   * @dev _asset the code of an asset\\n   * @dev _user the address of queried user\\n   **/\\n  function getBalance(address _user, bytes32 _asset) public view returns (uint256) {\\n    IERC20 token = IERC20(getExchange().getAssetAddress(_asset));\\n    return token.balanceOf(_user);\\n  }\\n\\n  function getERC20TokenInstance(bytes32 _asset) internal view returns (IERC20Metadata) {\\n    address assetAddress = getExchange().getAssetAddress(_asset);\\n    IERC20Metadata token = IERC20Metadata(assetAddress);\\n    return token;\\n  }\\n\\n  /**\\n   * Returns the current debt associated with the loan\\n   **/\\n  function getDebt() public view virtual returns (uint256) {\\n    return getPool().getBorrowed(address(this));\\n  }\\n\\n  /**\\n   * LoanToValue ratio is calculated as the ratio between debt and collateral.\\n   * The collateral is equal to total loan value takeaway debt.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function getLTV() public view returns (uint256) {\\n    uint256 debt = getDebt();\\n    uint256 totalValue = getTotalValue();\\n    if (debt == 0) {\\n      return 0;\\n    } else if (debt < totalValue) {\\n      return (debt * getPercentagePrecision()) / (totalValue - debt);\\n    } else {\\n      return getMaxLtv();\\n    }\\n  }\\n\\n  function getFullLoanStatus() public view returns (uint256[4] memory) {\\n    return [getTotalValue(), getDebt(), getLTV(), isSolvent() ? uint256(1) : uint256(0)];\\n  }\\n\\n  /**\\n   * Checks if the loan is solvent.\\n   * It means that the ratio between debt and collateral is below safe level,\\n   * which is parametrized by the getMaxLtv()\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function isSolvent() public view returns (bool) {\\n    return getLTV() < getMaxLtv();\\n  }\\n\\n  /**\\n   * Returns the balances of all assets served by the price provider\\n   * It could be used as a helper method for UI\\n   **/\\n  function getAllAssetsBalances() public view returns (uint256[] memory) {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n    uint256[] memory balances = new uint256[](assets.length);\\n\\n    for (uint256 i = 0; i < assets.length; i++) {\\n      balances[i] = getBalance(address(this), assets[i]);\\n    }\\n\\n    return balances;\\n  }\\n\\n  /**\\n   * Returns the prices of all assets served by the price provider\\n   * It could be used as a helper method for UI\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n  function getAllAssetsPrices() public view returns (uint256[] memory) {\\n    bytes32[] memory assets = getExchange().getAllAssets();\\n\\n    return getPricesFromMsg(assets);\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  /**\\n  * @dev This modifier uses the redstone-evm-connector\\n  **/\\n  modifier remainsSolvent() {\\n    _;\\n    require(isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\n  }\\n\\n  /**\\n   * This modifier checks if the LTV is between MIN_SELLOUT_LTV and _MAX_LTV after performing the liquidateLoan() operation.\\n   * If the liquidateLoan() was not called by the owner then an additional check of making sure that LTV > MIN_SELLOUT_LTV is applied.\\n   * It protects the user from an unnecessarily costly liquidation.\\n   * The loan must be solvent after the liquidateLoan() operation.\\n   * @dev This modifier uses the redstone-evm-connector\\n   **/\\n  modifier successfulLiquidation() {\\n    require(!isSolvent(), \\\"Cannot sellout a solvent account\\\");\\n    _liquidationInProgress = true;\\n\\n    _;\\n\\n    uint256 LTV = getLTV();\\n    if (msg.sender != owner()) {\\n      require(LTV >= getMinSelloutLtv(), \\\"This operation would result in a loan with LTV lower than Minimal Sellout LTV which would put loan's owner in a risk of an unnecessarily high loss\\\");\\n    }\\n    require(LTV < getMaxLtv(), \\\"This operation would not result in bringing the loan back to a solvent state\\\");\\n    _liquidationInProgress = false;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after a loan is funded\\n   * @param funder the address which funded the loan\\n   * @param amount the amount of funds\\n   * @param timestamp time of funding\\n   **/\\n  event Funded(address indexed funder, uint256 amount, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the funds are withdrawn from the loan\\n   * @param owner the address which withdraws funds from the loan\\n   * @param amount the amount of funds withdrawn\\n   * @param timestamp of the withdrawal\\n   **/\\n  event Withdrawn(address indexed owner, uint256 amount, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the funds are invested into an asset\\n   * @param investor the address of investor making the purchase\\n   * @param asset bought by the investor\\n   * @param amount the investment\\n   * @param timestamp time of the investment\\n   **/\\n  event Invested(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the investment is sold\\n   * @param investor the address of investor selling the asset\\n   * @param asset sold by the investor\\n   * @param amount the investment\\n   * @param timestamp of the redemption\\n   **/\\n  event Redeemed(address indexed investor, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted when funds are borrowed from the pool\\n   * @param borrower the address of borrower\\n   * @param amount of the borrowed funds\\n   * @param timestamp time of the borrowing\\n   **/\\n  event Borrowed(address indexed borrower, uint256 amount, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted when funds are repaid to the pool\\n   * @param borrower the address initiating repayment\\n   * @param amount of repaid funds\\n   * @param timestamp of the repayment\\n   **/\\n  event Repaid(address indexed borrower, uint256 amount, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after a successful liquidation operation\\n   * @param liquidator the address that initiated the liquidation operation\\n   * @param repayAmount requested amount (AVAX) of liquidation\\n   * @param bonus an amount of bonus (AVAX) received by the liquidator\\n   * @param ltv a new LTV after the liquidation operation\\n   * @param timestamp a time of the liquidation\\n   **/\\n  event Liquidated(address indexed liquidator, uint256 repayAmount, uint256 bonus, uint256 ltv, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after closing a loan by the owner\\n   * @param debtRepaid the amount of a borrowed AVAX that was repaid back to the pool\\n   * @param withdrawalAmount the amount of AVAX that was withdrawn by the owner after closing the loan\\n   * @param timestamp a time of the loan's closure\\n   **/\\n  event LoanClosed(uint256 debtRepaid, uint256 withdrawalAmount, uint256 timestamp);\\n}\",\"keccak256\":\"0xa5bdd57000e48197204aa4173d9ee83591b3632623b9c51c5b9b6fa56fe2c815\",\"license\":\"UNLICENSED\"},\"contracts/SmartLoanProperties.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\n/**\\n * @title SmartLoanProperties\\n * A contract that holds SmartLoan related properties.\\n * Every property has a virtual getter to allow overriding when upgrading a SmartLoan contract.\\n *\\n */\\ncontract SmartLoanProperties {\\n\\n  uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n  // 10%\\n  uint256 private constant _LIQUIDATION_BONUS = 100;\\n\\n  // 500%\\n  uint256 private constant _MAX_LTV = 5000;\\n  // 400%\\n  uint256 private constant _MIN_SELLOUT_LTV = 4000;\\n\\n  address private constant _EXCHANGE_ADDRESS = 0x0278438423f433e277F65D14c0E002b8828702ba;\\n\\n  address private constant _POOL_ADDRESS = 0x5ff1DE6091871adAAe64E2Ec4feD754628482868;\\n\\n  // redstone-evm-connector price providers\\n  address private constant _PRICE_PROVIDER_1 = 0x981bdA8276ae93F567922497153de7A5683708d3;\\n\\n  address private constant _PRICE_PROVIDER_2 = 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48;\\n\\n  // redstone-evm-connector max block.timestamp acceptable delay\\n  uint256 internal constant MAX_BLOCK_TIMESTAMP_DELAY = 30; // 30 seconds\\n\\n  bool internal _liquidationInProgress = false;\\n\\n\\n  /* ========== GETTERS ========== */\\n\\n\\n  function getPercentagePrecision() public virtual view returns (uint256) {\\n    return _PERCENTAGE_PRECISION;\\n  }\\n\\n  function getLiquidationBonus() public virtual view returns (uint256) {\\n    return _LIQUIDATION_BONUS;\\n  }\\n\\n  function getMaxLtv() public virtual view returns (uint256) {\\n    return _MAX_LTV;\\n  }\\n\\n  function getMinSelloutLtv() public virtual view returns (uint256) {\\n    return _MIN_SELLOUT_LTV;\\n  }\\n\\n  function getExchange() public virtual view returns (IAssetsExchange) {\\n    return IAssetsExchange(_EXCHANGE_ADDRESS);\\n  }\\n\\n  function getPool() public virtual view returns (Pool) {\\n    return Pool(0x431290dF15777d46174b83C9E01F87d7b70D3073);\\n  }\\n\\n  function getPriceProvider1() public virtual view returns (address) {\\n    return _PRICE_PROVIDER_1;\\n  }\\n\\n  function getPriceProvider2() public virtual view returns (address) {\\n    return _PRICE_PROVIDER_2;\\n  }\\n}\",\"keccak256\":\"0x6fc159af343be33801830594271ab2a477ea9fdd91ccc368e93b138f54aaa178\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IAssetExchange\\n * @dev Basic interface for investing into assets\\n * It could be linked either to DEX or to a synthetic assets platform\\n */\\ninterface IAssetsExchange {\\n  /**\\n   * For adding supported assets\\n   **/\\n  struct Asset {\\n    bytes32 asset;\\n    address assetAddress;\\n  }\\n\\n  /**\\n   * Buys selected asset with AVAX\\n   * @dev _asset asset code\\n   * @dev _exactERC20AmountOut exact amount of asset to be bought\\n   **/\\n  function buyAsset(bytes32 _asset, uint256 _exactERC20AmountOut) external payable returns (bool);\\n\\n  /**\\n   * Sells selected asset for AVAX\\n   * @dev _asset asset code\\n   * @dev _exactERC20AmountIn amount to be bought\\n   * @dev _minAvaxAmountOut minimum amount of the AVAX token to be bought\\n   **/\\n  function sellAsset(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external returns (bool);\\n\\n  /**\\n   * Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.\\n   **/\\n  function getEstimatedAVAXFromERC20Token(uint256 _amountIn, address _token) external returns (uint256);\\n\\n  /**\\n   * Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.\\n   **/\\n  function getMinimumERC20TokenAmountForExactAVAX(uint256 _exactAmountOut, address _token) external returns (uint256);\\n\\n  /**\\n   * Adds or updates supported assets\\n   * First asset must be a blockchain native currency\\n   * @dev _assets assets to be added or updated\\n   **/\\n  function updateAssets(Asset[] memory _assets) external;\\n\\n  /**\\n   * Removes supported assets\\n   * @dev _assets assets to be removed\\n   **/\\n  function removeAssets(bytes32[] calldata _assets) external;\\n\\n  /**\\n   * Returns all the supported assets keys\\n   **/\\n  function getAllAssets() external view returns (bytes32[] memory);\\n\\n  /**\\n   * Returns address of an asset\\n   **/\\n  function getAssetAddress(bytes32 _asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0xcb372b2a1da8ec957a45e772a5fca33f6295b5bb7c80d673f7737d5e1eaaac12\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n  function canBorrow(address _account) external view returns (bool);\\n\\n  function getLoanForOwner(address _owner) external view returns (address);\\n\\n  function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x0d940d2ac817a00ee92607a10e287126a2b9614ccdbba1d38b5e7892ffffbe38\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x59a5851c6baab0436ce25c29fc185d87690400b0f1039788ecb63591226c4171\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\npragma solidity ^0.8.4;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\n    return (halfWAD + (a * b)) / WAD;\\n  }\\n\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(WAD)).div(b);\\n    return (halfB + (a * WAD)) / b;\\n  }\\n\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\n    return (halfRAY + (a * b)) / RAY;\\n  }\\n\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(RAY)).div(b);\\n    return (halfB + (a * RAY)) / b;\\n  }\\n\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\n  }\\n\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    //return a.mul(WAD_RAY_RATIO);\\n    return a * WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\n   */\\n  //solium-disable-next-line\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rayMul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rayMul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xef7c4f4bff6fb6054160dad2dce84a7d46c92058f0842bd08ebede11be88b752\",\"license\":\"AGPL3\"},\"contracts/upgraded/SmartLoanLimitedCollateral.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: 0fbd3d2132ce3d3a12c966ee5e6ffba53aae9d33;\\npragma solidity ^0.8.4;\\nimport \\\"../SmartLoan.sol\\\";\\n\\ncontract SmartLoanLimitedCollateral is SmartLoan {\\n    using TransferHelper for address payable;\\n\\n    bytes32 internal constant COLLATERAL_SUM_SLOT = bytes32(uint256(keccak256('COLLATERAL_SUM')) - 1);\\n\\n   /**\\n    * Funds a loan with the value attached to the transaction\\n    * Allows to add up to 1.25 AVAX of collateral in total\\n   **/\\n    function fund() public override payable {\\n        bytes32 slot = COLLATERAL_SUM_SLOT;\\n        uint256 collateralSum;\\n\\n        assembly {\\n            collateralSum := sload(slot)\\n        }\\n        collateralSum += msg.value;\\n\\n        require(collateralSum <= 1.25 ether, \\\"Adding more than 1.25 AVAX is not allowed\\\");\\n\\n        assembly {\\n            sstore(slot, collateralSum)\\n        }\\n\\n        super.fund();\\n    }\\n\\n\\n   /**\\n    * Withdraws an amount from the loan\\n    * This method could be used to cash out profits from investments\\n    * The loan needs to remain solvent after the withdrawal\\n    * @param _amount to be withdrawn\\n    * @dev This function uses the redstone-evm-connector\\n   **/\\n    function withdraw(uint256 _amount) public override {\\n        super.withdraw(_amount);\\n        bytes32 slot = COLLATERAL_SUM_SLOT;\\n        uint256 collateralSum;\\n\\n        assembly {\\n            collateralSum := sload(slot)\\n        }\\n        if(_amount > collateralSum) {\\n            collateralSum = 0;\\n        } else {\\n            collateralSum -= _amount;\\n        }\\n\\n        assembly {\\n            sstore(slot, collateralSum)\\n        }\\n    }\\n\\n\\n    /**\\n   * This function can only be accessed by the owner and allows selling all of the assets.\\n   * @dev This function uses the redstone-evm-connector\\n   **/\\n    function closeLoan() public override payable {\\n        super.closeLoan();\\n\\n        bytes32 slot = COLLATERAL_SUM_SLOT;\\n        assembly {\\n            sstore(slot, 0)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4b22b09f2c54a8cd80ad96c958d95d6a25e5668c6d9208fc4383ce0eb8fad956\",\"license\":\"UNLICENSED\"},\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n//    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, dataSize) { i := add(i, 1) } {\\n        currentSymbol := calldataload(add(start, mul(i, 64)))\\n\\n        for { j := 0 } lt(j, mload(symbols)) { j := add(j, 1) } {\\n          if eq(mload(add(add(symbols, 32), mul(j, 32))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(j, 32)),\\n              calldataload(add(add(start, mul(i, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0xae4c4f889c0b1ec6ed0224e71daa8dc3a53ec7cbbf38b9f6f6387f37b042a3c6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260008060006101000a81548160ff02191690831515021790555034801561002a57600080fd5b5061547f8061003a6000396000f3fe6080604052600436106101f25760003560e01c8063715018a61161010d578063c5ebeaec116100a0578063d2b29d701161006f578063d2b29d7014610658578063d44e282b14610681578063f2fde38b146106ac578063f31a210a146106d5578063f807cd2214610700576101f9565b8063c5ebeaec146105ab578063c79d5ec5146105d4578063caa648b414610611578063ccdd9f5d1461063c576101f9565b80638da5cb5b116100dc5780638da5cb5b14610520578063a935310f1461054b578063b5dbd7f014610576578063b60d4288146105a1576101f9565b8063715018a61461048c57806375058205146104a35780638129fc1c146104e05780638a027cb3146104f7576101f9565b8063371fd8e61161018557806352154a261161015457806352154a26146103e057806359aa9e721461040b5780635ce23950146104365780636b6c92d914610461576101f9565b8063371fd8e6146103435780634ed2b8ac1461035f5780634fcaf08f1461038a5780635118af5a146103b5576101f9565b806314a6bf0f116101c157806314a6bf0f146102ba578063232fa733146102e55780632802fdc8146102ef5780632e1a7d4d1461031a576101f9565b8063026b1d5f146101fe57806305d58c211461022957806311c89b1014610252578063132e1d391461028f576101f9565b366101f957005b600080fd5b34801561020a57600080fd5b5061021361072b565b60405161022091906141db565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b91906139e3565b610747565b005b34801561025e57600080fd5b50610279600480360381019061027491906138eb565b61089d565b60405161028691906140e5565b60405180910390f35b34801561029b57600080fd5b506102a4610919565b6040516102b19190614536565b60405180910390f35b3480156102c657600080fd5b506102cf610923565b6040516102dc9190614536565b60405180910390f35b6102ed6109ba565b005b3480156102fb57600080fd5b50610304610a00565b6040516103119190614064565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c9190613a6e565b610a1c565b005b61035d60048036038101906103589190613a6e565b610a8a565b005b34801561036b57600080fd5b50610374610c05565b6040516103819190614536565b60405180910390f35b34801561039657600080fd5b5061039f610c7c565b6040516103ac9190614064565b60405180910390f35b3480156103c157600080fd5b506103ca610c98565b6040516103d79190614536565b60405180910390f35b3480156103ec57600080fd5b506103f5610ca1565b6040516104029190614536565b60405180910390f35b34801561041757600080fd5b50610420610cab565b60405161042d9190614536565b60405180910390f35b34801561044257600080fd5b5061044b610cb4565b60405161045891906140e5565b60405180910390f35b34801561046d57600080fd5b50610476610ccc565b60405161048391906140c3565b60405180910390f35b34801561049857600080fd5b506104a1610e87565b005b3480156104af57600080fd5b506104ca60048036038101906104c59190613a6e565b610f0f565b6040516104d791906140e5565b60405180910390f35b3480156104ec57600080fd5b506104f5610f8b565b005b34801561050357600080fd5b5061051e60048036038101906105199190613a1f565b611082565b005b34801561052c57600080fd5b5061053561130e565b6040516105429190614064565b60405180910390f35b34801561055757600080fd5b50610560611338565b60405161056d91906140c3565b60405180910390f35b34801561058257600080fd5b5061058b6113d7565b6040516105989190614536565b60405180910390f35b6105a96113e1565b005b3480156105b757600080fd5b506105d260048036038101906105cd9190613a6e565b611486565b005b3480156105e057600080fd5b506105fb60048036038101906105f6919061393d565b61160e565b6040516106089190614536565b60405180910390f35b34801561061d57600080fd5b50610626611735565b6040516106339190614536565b60405180910390f35b61065660048036038101906106519190613a6e565b611a80565b005b34801561066457600080fd5b5061067f600480360381019061067a9190613a1f565b611cfa565b005b34801561068d57600080fd5b50610696611f84565b6040516106a391906140a8565b60405180910390f35b3480156106b857600080fd5b506106d360048036038101906106ce91906138eb565b611fdc565b005b3480156106e157600080fd5b506106ea6120d4565b6040516106f79190614536565b60405180910390f35b34801561070c57600080fd5b506107156120dd565b60405161072291906141c0565b60405180910390f35b600073431290df15777d46174b83c9e01f87d7b70d3073905090565b61074f6120f9565b73ffffffffffffffffffffffffffffffffffffffff1661076d61130e565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90614416565b60405180910390fd5b60026065541415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090614516565b60405180910390fd5b6002606581905550600061081c83612101565b905061084933838373ffffffffffffffffffffffffffffffffffffffff166121a59092919063ffffffff16565b50610852610cb4565b610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890614436565b60405180910390fd5b60016065819055505050565b60006108a7610a00565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061091257506108e3610c7c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006103e8905090565b600061092d61072b565b73ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016109659190614064565b60206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190613a97565b905090565b6109c26122db565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c6109f491906149ce565b60001b90506000815550565b600073981bda8276ae93f567922497153de7a5683708d3905090565b610a25816126ee565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c610a5791906149ce565b60001b905060008154905080831115610a735760009050610a82565b8281610a7f91906149ce565b90505b808255505050565b610a92610cb4565b8015610aaf57506000151560008054906101000a900460ff161515145b15610af457610abc61130e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af357600080fd5b5b610b0581610b00610923565b6128c6565b905080471015610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4190614276565b60405180910390fd5b610b5261072b565b73ffffffffffffffffffffffffffffffffffffffff1663402d8883826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b50505050503373ffffffffffffffffffffffffffffffffffffffff167f1b8cd61ed43bec7c6bdad3a18ffee613f99c853d16c50678d248d879e1b434388242604051610bfa92919061457a565b60405180910390a250565b600080610c10610923565b90506000610c1c611735565b90506000821415610c3257600092505050610c79565b80821015610c6c578181610c4691906149ce565b610c4e610919565b83610c599190614974565b610c639190614796565b92505050610c79565b610c746113d7565b925050505b90565b6000733befdd935b50f172e696a5187dbacfef0d208e48905090565b6000601e905090565b6000610fa0905090565b60006064905090565b6000610cbe6113d7565b610cc6610c05565b10905090565b60606000610cd86120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d5a9190613979565b90506000815167ffffffffffffffff811115610d9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610dcd5781602001602082028036833780820191505090505b50905060005b8251811015610e7e57610e2630848381518110610e19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161160e565b828281518110610e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610e7690614b1b565b915050610dd3565b50809250505090565b610e8f6120f9565b73ffffffffffffffffffffffffffffffffffffffff16610ead61130e565b73ffffffffffffffffffffffffffffffffffffffff1614610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90614416565b60405180910390fd5b610f0d60006128df565b565b600081610f1a610c98565b42610f259190614740565b11610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c90614496565b60405180910390fd5b81421080610f845750610f766120d4565b8242610f8291906149ce565b105b9050919050565b600060029054906101000a900460ff16610fb557600060019054906101000a900460ff1615610fbe565b610fbd6129a5565b5b610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff4906143b6565b60405180910390fd5b60008060029054906101000a900460ff16159050801561104e576001600060026101000a81548160ff0219169083151502179055506001600060016101000a81548160ff0219169083151502179055505b6110566129b6565b61105e612a0f565b801561107f5760008060026101000a81548160ff0219169083151502179055505b50565b61108a6120f9565b73ffffffffffffffffffffffffffffffffffffffff166110a861130e565b73ffffffffffffffffffffffffffffffffffffffff16146110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590614416565b60405180910390fd5b60026065541415611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113b90614516565b60405180910390fd5b60026065819055508047101561118f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611186906144d6565b60405180910390fd5b60006111996120dd565b73ffffffffffffffffffffffffffffffffffffffff16635d8874e98386866040518463ffffffff1660e01b81526004016111d492919061411b565b6020604051808303818588803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061122691906139ba565b905080611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f906144f6565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f8c4f7b2f9ad7fde21c3ebf69d91938c2731761edd5820e45c17ea61d9c2ab90a85426040516112b192919061457a565b60405180910390a3506112c2610cb4565b611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f890614436565b60405180910390fd5b6001606581905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006113446120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113c69190613979565b90506113d181612a68565b91505090565b6000611388905090565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c61141391906149ce565b60001b9050600081549050348161142a9190614740565b9050671158e460913d0000811115611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e90614256565b60405180910390fd5b808255611482612b88565b5050565b61148e6120f9565b73ffffffffffffffffffffffffffffffffffffffff166114ac61130e565b73ffffffffffffffffffffffffffffffffffffffff1614611502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f990614416565b60405180910390fd5b61150a61072b565b73ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b81526004016115429190614536565b600060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167feae9cfbc77fdd40ca899f36b608256063b2bc9d8178b0220f7ad513e178d673082426040516115bc92919061457a565b60405180910390a26115cc610cb4565b61160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160290614436565b60405180910390fd5b50565b6000806116196120dd565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b81526004016116519190614100565b60206040518083038186803b15801561166957600080fd5b505afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a19190613914565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016116dc9190614064565b60206040518083038186803b1580156116f457600080fd5b505afa158015611708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172c9190613a97565b91505092915050565b60008047905060006117456120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117c79190613979565b905060006117d482612a68565b9050600081600081518110611812577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811415611860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611857906142f6565b60405180910390fd5b6000600190505b8251811015611a755760008382815181106118ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114156118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118eb90614396565b60405180910390fd5b600084828151811061192f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600061194482612101565b90506000611952308461160e565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d29190613ac0565b600a6119de919061481a565b856119e99190614974565b81670de0b6b3a7640000888781518110611a2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611a3e9190614974565b611a489190614974565b611a529190614796565b88611a5d9190614740565b97505050508080611a6d90614b1b565b915050611867565b508394505050505090565b60026065541415611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd90614516565b60405180910390fd5b6002606581905550611ad6610cb4565b15611b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0d90614336565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055506000611b3a610923565b905080821115611b48578091505b6000611b52610919565b611b5a610cab565b84611b659190614974565b611b6f9190614796565b905060008184611b7f9190614740565b9050611b8a81612bda565b611b9384612ced565b611b9c82612d02565b3373ffffffffffffffffffffffffffffffffffffffff167f7abe212d4944ae75cf0a0477af92aa0db98c15aaf21d06c37c97c641427b8eb38584611bde610c05565b42604051611bef94939291906145da565b60405180910390a25050506000611c04610c05565b9050611c0e61130e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c8b57611c48610ca1565b811015611c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c81906143f6565b60405180910390fd5b5b611c936113d7565b8110611cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ccb906142d6565b60405180910390fd5b60008060006101000a81548160ff02191690831515021790555050600160658190555050565b60026065541415611d40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3790614516565b60405180910390fd5b6002606581905550611d506120f9565b73ffffffffffffffffffffffffffffffffffffffff16611d6e61130e565b73ffffffffffffffffffffffffffffffffffffffff1614611dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbb90614416565b60405180910390fd5b6000611dcf84612101565b9050611e03611ddc6120dd565b848373ffffffffffffffffffffffffffffffffffffffff166121a59092919063ffffffff16565b6000611e0d6120dd565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8686866040518463ffffffff1660e01b8152600401611e4993929190614144565b602060405180830381600087803b158015611e6357600080fd5b505af1158015611e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9b91906139ba565b905080611edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed490614456565b60405180910390fd5b843373ffffffffffffffffffffffffffffffffffffffff167fc95bd7ebbed9b9c3e9477753bcb60d02b328f1e5bce8b1a25986d6c73991c1828642604051611f2692919061457a565b60405180910390a35050611f38610cb4565b611f77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6e90614436565b60405180910390fd5b6001606581905550505050565b611f8c61378b565b6040518060800160405280611f9f611735565b8152602001611fac610923565b8152602001611fb9610c05565b8152602001611fc6610cb4565b611fd1576000611fd4565b60015b815250905090565b611fe46120f9565b73ffffffffffffffffffffffffffffffffffffffff1661200261130e565b73ffffffffffffffffffffffffffffffffffffffff1614612058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204f90614416565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90614296565b60405180910390fd5b6120d1816128df565b50565b600060b4905090565b6000730278438423f433e277f65d14c0e002b8828702ba905090565b600033905090565b60008061210c6120dd565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b81526004016121449190614100565b60206040518083038186803b15801561215c57600080fd5b505afa158015612170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121949190613914565b905060008190508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016121d792919061407f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516122259190614027565b6000604051808303816000865af19150503d8060008114612262576040519150601f19603f3d011682016040523d82523d6000602084013e612267565b606091505b5091509150818015612295575060008151148061229457508080602001905181019061229391906139ba565b5b5b6122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb906144b6565b60405180910390fd5b5050505050565b6122e36120f9565b73ffffffffffffffffffffffffffffffffffffffff1661230161130e565b73ffffffffffffffffffffffffffffffffffffffff1614612357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234e90614416565b60405180910390fd5b6002606554141561239d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239490614516565b60405180910390fd5b600260658190555060006123af6120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156123f457600080fd5b505afa158015612408573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124319190613979565b905060005b815181101561257e57600061248a83838151811061247d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612101565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124c29190614064565b60206040518083038186803b1580156124da57600080fd5b505afa1580156124ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125129190613a97565b9050600081111561256a57612569838381518110612559577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826000612d37565b5b50808061257690614b1b565b915050612436565b506000612589610923565b9050804710156125ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c590614236565b60405180910390fd5b6125d781610a8a565b7f4acb957de3799dd3d95bb7da6bcfbca6f5a33812d69ad37816ed87e79b6327d681474260405161260a939291906145a3565b60405180910390a16000479050600081111561269a57612649813373ffffffffffffffffffffffffffffffffffffffff16612e1390919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6824260405161269192919061457a565b60405180910390a25b5050506126a5610cb4565b6126e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126db90614436565b60405180910390fd5b6001606581905550565b6126f66120f9565b73ffffffffffffffffffffffffffffffffffffffff1661271461130e565b73ffffffffffffffffffffffffffffffffffffffff161461276a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276190614416565b60405180910390fd5b600260655414156127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a790614516565b60405180910390fd5b6002606581905550804710156127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290614376565b60405180910390fd5b612824813373ffffffffffffffffffffffffffffffffffffffff16612e1390919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6824260405161286c92919061457a565b60405180910390a261287c610cb4565b6128bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b290614436565b60405180910390fd5b600160658190555050565b60008183106128d557816128d7565b825b905092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006129b030612f39565b15905090565b600060029054906101000a900460ff16612a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fc90614476565b60405180910390fd5b612a0d612f5c565b565b600060029054906101000a900460ff16612a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5590614476565b60405180910390fd5b612a66612fbd565b565b60606000606136033590506000602060408360ff16612a879190614938565b612a919190614708565b90506060604051905081815281604283013603602083013760208101604052600081805190602001209050600081604051602001612acf919061403e565b604051602081830303815290604052805190602001209050606060405190506041815260418036036020830137602081016040526000612b18828461301690919063ffffffff16565b9050612b238161089d565b612b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b59906142b6565b60405180910390fd5b600060623603359050612b798a8960ff168961303d565b98505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af3442604051612bd092919061457a565b60405180910390a2565b6000612be46120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015612c2957600080fd5b505afa158015612c3d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c669190613979565b905060005b8151811015612ce857824710612c8057612ce8565b612cd5828281518110612cbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101514785612cd091906149ce565b6130e3565b8080612ce090614b1b565b915050612c6b565b505050565b612cff612cfa47836128c6565b610a8a565b50565b612d34612d0f82476128c6565b3373ffffffffffffffffffffffffffffffffffffffff16612e1390919063ffffffff16565b50565b6000612d4284612101565b9050612d76612d4f6120dd565b848373ffffffffffffffffffffffffffffffffffffffff166121a59092919063ffffffff16565b612d7e6120dd565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8585856040518463ffffffff1660e01b8152600401612dba93929190614144565b602060405180830381600087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0c91906139ba565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612e6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ea05781602001600182028036833780820191505090505b50604051612eae9190614027565b60006040518083038185875af1925050503d8060008114612eeb576040519150601f19603f3d011682016040523d82523d6000602084013e612ef0565b606091505b5050905080612f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2b90614316565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060029054906101000a900460ff16612fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa290614476565b60405180910390fd5b612fbb612fb66120f9565b6128df565b565b600060029054906101000a900460ff1661300c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300390614476565b60405180910390fd5b6001606581905550565b6000806000613025858561324b565b91509150613032816132ce565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b888510156130d357604085028101359150600093505b89518410156130c857816020850260208c01015114156130b05760206040860282010135602085026020880101526001830192505b89518314156130bd578894505b60018401935061307b565b600185019450613065565b5084955050505050509392505050565b60006130ee83612101565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161312b9190614064565b60206040518083038186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190613a97565b905060008111156132455760006131906120dd565b73ffffffffffffffffffffffffffffffffffffffff16639ac34dd385856040518363ffffffff1660e01b81526004016131ca929190614551565b602060405180830381600087803b1580156131e457600080fd5b505af11580156131f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321c9190613a97565b9050808210156132375761323285836000612d37565b613243565b613242858286612d37565b5b505b50505050565b60008060418351141561328d5760008060006020860151925060408601519150606086015160001a90506132818782858561361f565b945094505050506132c7565b6040835114156132be5760008060208501519150604085015190506132b386838361372c565b9350935050506132c7565b60006002915091505b9250929050565b60006004811115613308577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613341577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561334c5761361c565b60016004811115613386577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133f7906141f6565b60405180910390fd5b6002600481111561343a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613473577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156134b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ab90614216565b60405180910390fd5b600360048111156134ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613527577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355f90614356565b60405180910390fd5b6004808111156135a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156135da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561361b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613612906143d6565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561365a576000600391509150613723565b601b8560ff16141580156136725750601c8560ff1614155b15613684576000600491509150613723565b6000600187878787604051600081526020016040526040516136a9949392919061417b565b6020604051602081039080840390855afa1580156136cb573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561371a57600060019250925050613723565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61376f9190614740565b905061377d8782888561361f565b935093505050935093915050565b6040518060800160405280600490602082028036833780820191505090505090565b60006137c06137bb84614644565b61461f565b905080838252602082019050828560208602820111156137df57600080fd5b60005b8581101561380f57816137f58882613897565b8452602084019350602083019250506001810190506137e2565b5050509392505050565b600081359050613828816153d6565b92915050565b60008151905061383d816153d6565b92915050565b600082601f83011261385457600080fd5b81516138648482602086016137ad565b91505092915050565b60008151905061387c816153ed565b92915050565b60008135905061389181615404565b92915050565b6000815190506138a681615404565b92915050565b6000813590506138bb8161541b565b92915050565b6000815190506138d08161541b565b92915050565b6000815190506138e581615432565b92915050565b6000602082840312156138fd57600080fd5b600061390b84828501613819565b91505092915050565b60006020828403121561392657600080fd5b60006139348482850161382e565b91505092915050565b6000806040838503121561395057600080fd5b600061395e85828601613819565b925050602061396f85828601613882565b9150509250929050565b60006020828403121561398b57600080fd5b600082015167ffffffffffffffff8111156139a557600080fd5b6139b184828501613843565b91505092915050565b6000602082840312156139cc57600080fd5b60006139da8482850161386d565b91505092915050565b600080604083850312156139f657600080fd5b6000613a0485828601613882565b9250506020613a15858286016138ac565b9150509250929050565b600080600060608486031215613a3457600080fd5b6000613a4286828701613882565b9350506020613a53868287016138ac565b9250506040613a64868287016138ac565b9150509250925092565b600060208284031215613a8057600080fd5b6000613a8e848285016138ac565b91505092915050565b600060208284031215613aa957600080fd5b6000613ab7848285016138c1565b91505092915050565b600060208284031215613ad257600080fd5b6000613ae0848285016138d6565b91505092915050565b6000613af58383613ffa565b60208301905092915050565b613b0a81614a02565b82525050565b613b198161468a565b613b2381846146c5565b9250613b2e82614670565b8060005b83811015613b5f578151613b468782613ae9565b9650613b51836146ab565b925050600181019050613b32565b505050505050565b6000613b7282614695565b613b7c81856146d0565b9350613b878361467a565b8060005b83811015613bb8578151613b9f8882613ae9565b9750613baa836146b8565b925050600181019050613b8b565b5085935050505092915050565b613bce81614a14565b82525050565b613bdd81614a20565b82525050565b613bf4613bef82614a20565b614b64565b82525050565b6000613c05826146a0565b613c0f81856146e1565b9350613c1f818560208601614ab7565b80840191505092915050565b613c3481614a6f565b82525050565b613c4381614a93565b82525050565b6000613c566018836146ec565b9150613c6182614c19565b602082019050919050565b6000613c79601f836146ec565b9150613c8482614c42565b602082019050919050565b6000613c9c601c836146fd565b9150613ca782614c6b565b601c82019050919050565b6000613cbf6045836146ec565b9150613cca82614c94565b606082019050919050565b6000613ce26029836146ec565b9150613ced82614d09565b604082019050919050565b6000613d05602b836146ec565b9150613d1082614d58565b604082019050919050565b6000613d286026836146ec565b9150613d3382614da7565b604082019050919050565b6000613d4b6015836146ec565b9150613d5682614df6565b602082019050919050565b6000613d6e604c836146ec565b9150613d7982614e1f565b606082019050919050565b6000613d916027836146ec565b9150613d9c82614e94565b604082019050919050565b6000613db46034836146ec565b9150613dbf82614ee3565b604082019050919050565b6000613dd76020836146ec565b9150613de282614f32565b602082019050919050565b6000613dfa6022836146ec565b9150613e0582614f5b565b604082019050919050565b6000613e1d6025836146ec565b9150613e2882614faa565b604082019050919050565b6000613e406028836146ec565b9150613e4b82614ff9565b604082019050919050565b6000613e63602e836146ec565b9150613e6e82615048565b604082019050919050565b6000613e866022836146ec565b9150613e9182615097565b604082019050919050565b6000613ea96092836146ec565b9150613eb4826150e6565b60a082019050919050565b6000613ecc6020836146ec565b9150613ed7826151a7565b602082019050919050565b6000613eef6033836146ec565b9150613efa826151d0565b604082019050919050565b6000613f126011836146ec565b9150613f1d8261521f565b602082019050919050565b6000613f35602b836146ec565b9150613f4082615248565b604082019050919050565b6000613f58602a836146ec565b9150613f6382615297565b604082019050919050565b6000613f7b602d836146ec565b9150613f86826152e6565b604082019050919050565b6000613f9e6034836146ec565b9150613fa982615335565b604082019050919050565b6000613fc16011836146ec565b9150613fcc82615384565b602082019050919050565b6000613fe4601f836146ec565b9150613fef826153ad565b602082019050919050565b61400381614a58565b82525050565b61401281614a58565b82525050565b61402181614a62565b82525050565b60006140338284613bfa565b915081905092915050565b600061404982613c8f565b91506140558284613be3565b60208201915081905092915050565b60006020820190506140796000830184613b01565b92915050565b60006040820190506140946000830185613b01565b6140a16020830184614009565b9392505050565b60006080820190506140bd6000830184613b10565b92915050565b600060208201905081810360008301526140dd8184613b67565b905092915050565b60006020820190506140fa6000830184613bc5565b92915050565b60006020820190506141156000830184613bd4565b92915050565b60006040820190506141306000830185613bd4565b61413d6020830184614009565b9392505050565b60006060820190506141596000830186613bd4565b6141666020830185614009565b6141736040830184614009565b949350505050565b60006080820190506141906000830187613bd4565b61419d6020830186614018565b6141aa6040830185613bd4565b6141b76060830184613bd4565b95945050505050565b60006020820190506141d56000830184613c2b565b92915050565b60006020820190506141f06000830184613c3a565b92915050565b6000602082019050818103600083015261420f81613c49565b9050919050565b6000602082019050818103600083015261422f81613c6c565b9050919050565b6000602082019050818103600083015261424f81613cb2565b9050919050565b6000602082019050818103600083015261426f81613cd5565b9050919050565b6000602082019050818103600083015261428f81613cf8565b9050919050565b600060208201905081810360008301526142af81613d1b565b9050919050565b600060208201905081810360008301526142cf81613d3e565b9050919050565b600060208201905081810360008301526142ef81613d61565b9050919050565b6000602082019050818103600083015261430f81613d84565b9050919050565b6000602082019050818103600083015261432f81613da7565b9050919050565b6000602082019050818103600083015261434f81613dca565b9050919050565b6000602082019050818103600083015261436f81613ded565b9050919050565b6000602082019050818103600083015261438f81613e10565b9050919050565b600060208201905081810360008301526143af81613e33565b9050919050565b600060208201905081810360008301526143cf81613e56565b9050919050565b600060208201905081810360008301526143ef81613e79565b9050919050565b6000602082019050818103600083015261440f81613e9c565b9050919050565b6000602082019050818103600083015261442f81613ebf565b9050919050565b6000602082019050818103600083015261444f81613ee2565b9050919050565b6000602082019050818103600083015261446f81613f05565b9050919050565b6000602082019050818103600083015261448f81613f28565b9050919050565b600060208201905081810360008301526144af81613f4b565b9050919050565b600060208201905081810360008301526144cf81613f6e565b9050919050565b600060208201905081810360008301526144ef81613f91565b9050919050565b6000602082019050818103600083015261450f81613fb4565b9050919050565b6000602082019050818103600083015261452f81613fd7565b9050919050565b600060208201905061454b6000830184614009565b92915050565b60006040820190506145666000830185614009565b6145736020830184613b01565b9392505050565b600060408201905061458f6000830185614009565b61459c6020830184614009565b9392505050565b60006060820190506145b86000830186614009565b6145c56020830185614009565b6145d26040830184614009565b949350505050565b60006080820190506145ef6000830187614009565b6145fc6020830186614009565b6146096040830185614009565b6146166060830184614009565b95945050505050565b600061462961463a565b90506146358282614aea565b919050565b6000604051905090565b600067ffffffffffffffff82111561465f5761465e614bcc565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061471382614a2a565b915061471e83614a2a565b92508261ffff0382111561473557614734614b6e565b5b828201905092915050565b600061474b82614a58565b915061475683614a58565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561478b5761478a614b6e565b5b828201905092915050565b60006147a182614a58565b91506147ac83614a58565b9250826147bc576147bb614b9d565b5b828204905092915050565b6000808291508390505b6001851115614811578086048111156147ed576147ec614b6e565b5b60018516156147fc5780820291505b808102905061480a85614c0c565b94506147d1565b94509492505050565b600061482582614a58565b915061483083614a62565b925061485d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614865565b905092915050565b6000826148755760019050614931565b816148835760009050614931565b816001811461489957600281146148a3576148d2565b6001915050614931565b60ff8411156148b5576148b4614b6e565b5b8360020a9150848211156148cc576148cb614b6e565b5b50614931565b5060208310610133831016604e8410600b84101617156149075782820a90508381111561490257614901614b6e565b5b614931565b61491484848460016147c7565b9250905081840481111561492b5761492a614b6e565b5b81810290505b9392505050565b600061494382614a2a565b915061494e83614a2a565b92508161ffff048311821515161561496957614968614b6e565b5b828202905092915050565b600061497f82614a58565b915061498a83614a58565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149c3576149c2614b6e565b5b828202905092915050565b60006149d982614a58565b91506149e483614a58565b9250828210156149f7576149f6614b6e565b5b828203905092915050565b6000614a0d82614a38565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614a7a82614a81565b9050919050565b6000614a8c82614a38565b9050919050565b6000614a9e82614aa5565b9050919050565b6000614ab082614a38565b9050919050565b60005b83811015614ad5578082015181840152602081019050614aba565b83811115614ae4576000848401525b50505050565b614af382614bfb565b810181811067ffffffffffffffff82111715614b1257614b11614bcc565b5b80604052505050565b6000614b2682614a58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b5957614b58614b6e565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f53656c6c696e67206f757420616c6c2061737365747320776974686f7574207260008201527f65706179696e67207468652077686f6c652064656274206973206e6f7420616c60208201527f6c6f776564000000000000000000000000000000000000000000000000000000604082015250565b7f416464696e67206d6f7265207468616e20312e32352041564158206973206e6f60008201527f7420616c6c6f7765640000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2072657060008201527f617920746865206c6f616e000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f54686973206f7065726174696f6e20776f756c64206e6f7420726573756c742060008201527f696e206272696e67696e6720746865206c6f616e206261636b20746f2061207360208201527f6f6c76656e742073746174650000000000000000000000000000000000000000604082015250565b7f417661782070726963652072657475726e65642066726f6d206f7261636c652060008201527f6973207a65726f00000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f43616e6e6f742073656c6c6f7574206120736f6c76656e74206163636f756e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2077697460008201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b7f41737365742070726963652072657475726e65642066726f6d206f7261636c6560008201527f206973207a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686973206f7065726174696f6e20776f756c6420726573756c7420696e206160008201527f206c6f616e2077697468204c5456206c6f776572207468616e204d696e696d6160208201527f6c2053656c6c6f7574204c545620776869636820776f756c6420707574206c6f60408201527f616e2773206f776e657220696e2061207269736b206f6620616e20756e6e656360608201527f6573736172696c792068696768206c6f73730000000000000000000000000000608082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b7f526564656d7074696f6e206661696c6564000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e64732061726520617661696c61626c65207460008201527f6f20696e7665737420696e20616e206173736574000000000000000000000000602082015250565b7f496e766573746d656e74206661696c6564000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6153df81614a02565b81146153ea57600080fd5b50565b6153f681614a14565b811461540157600080fd5b50565b61540d81614a20565b811461541857600080fd5b50565b61542481614a58565b811461542f57600080fd5b50565b61543b81614a62565b811461544657600080fd5b5056fea2646970667358221220680dd81cfa39393d735579b62545af010c4e310e63c7532e68091f248346bc7c64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101f25760003560e01c8063715018a61161010d578063c5ebeaec116100a0578063d2b29d701161006f578063d2b29d7014610658578063d44e282b14610681578063f2fde38b146106ac578063f31a210a146106d5578063f807cd2214610700576101f9565b8063c5ebeaec146105ab578063c79d5ec5146105d4578063caa648b414610611578063ccdd9f5d1461063c576101f9565b80638da5cb5b116100dc5780638da5cb5b14610520578063a935310f1461054b578063b5dbd7f014610576578063b60d4288146105a1576101f9565b8063715018a61461048c57806375058205146104a35780638129fc1c146104e05780638a027cb3146104f7576101f9565b8063371fd8e61161018557806352154a261161015457806352154a26146103e057806359aa9e721461040b5780635ce23950146104365780636b6c92d914610461576101f9565b8063371fd8e6146103435780634ed2b8ac1461035f5780634fcaf08f1461038a5780635118af5a146103b5576101f9565b806314a6bf0f116101c157806314a6bf0f146102ba578063232fa733146102e55780632802fdc8146102ef5780632e1a7d4d1461031a576101f9565b8063026b1d5f146101fe57806305d58c211461022957806311c89b1014610252578063132e1d391461028f576101f9565b366101f957005b600080fd5b34801561020a57600080fd5b5061021361072b565b60405161022091906141db565b60405180910390f35b34801561023557600080fd5b50610250600480360381019061024b91906139e3565b610747565b005b34801561025e57600080fd5b50610279600480360381019061027491906138eb565b61089d565b60405161028691906140e5565b60405180910390f35b34801561029b57600080fd5b506102a4610919565b6040516102b19190614536565b60405180910390f35b3480156102c657600080fd5b506102cf610923565b6040516102dc9190614536565b60405180910390f35b6102ed6109ba565b005b3480156102fb57600080fd5b50610304610a00565b6040516103119190614064565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c9190613a6e565b610a1c565b005b61035d60048036038101906103589190613a6e565b610a8a565b005b34801561036b57600080fd5b50610374610c05565b6040516103819190614536565b60405180910390f35b34801561039657600080fd5b5061039f610c7c565b6040516103ac9190614064565b60405180910390f35b3480156103c157600080fd5b506103ca610c98565b6040516103d79190614536565b60405180910390f35b3480156103ec57600080fd5b506103f5610ca1565b6040516104029190614536565b60405180910390f35b34801561041757600080fd5b50610420610cab565b60405161042d9190614536565b60405180910390f35b34801561044257600080fd5b5061044b610cb4565b60405161045891906140e5565b60405180910390f35b34801561046d57600080fd5b50610476610ccc565b60405161048391906140c3565b60405180910390f35b34801561049857600080fd5b506104a1610e87565b005b3480156104af57600080fd5b506104ca60048036038101906104c59190613a6e565b610f0f565b6040516104d791906140e5565b60405180910390f35b3480156104ec57600080fd5b506104f5610f8b565b005b34801561050357600080fd5b5061051e60048036038101906105199190613a1f565b611082565b005b34801561052c57600080fd5b5061053561130e565b6040516105429190614064565b60405180910390f35b34801561055757600080fd5b50610560611338565b60405161056d91906140c3565b60405180910390f35b34801561058257600080fd5b5061058b6113d7565b6040516105989190614536565b60405180910390f35b6105a96113e1565b005b3480156105b757600080fd5b506105d260048036038101906105cd9190613a6e565b611486565b005b3480156105e057600080fd5b506105fb60048036038101906105f6919061393d565b61160e565b6040516106089190614536565b60405180910390f35b34801561061d57600080fd5b50610626611735565b6040516106339190614536565b60405180910390f35b61065660048036038101906106519190613a6e565b611a80565b005b34801561066457600080fd5b5061067f600480360381019061067a9190613a1f565b611cfa565b005b34801561068d57600080fd5b50610696611f84565b6040516106a391906140a8565b60405180910390f35b3480156106b857600080fd5b506106d360048036038101906106ce91906138eb565b611fdc565b005b3480156106e157600080fd5b506106ea6120d4565b6040516106f79190614536565b60405180910390f35b34801561070c57600080fd5b506107156120dd565b60405161072291906141c0565b60405180910390f35b600073431290df15777d46174b83c9e01f87d7b70d3073905090565b61074f6120f9565b73ffffffffffffffffffffffffffffffffffffffff1661076d61130e565b73ffffffffffffffffffffffffffffffffffffffff16146107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90614416565b60405180910390fd5b60026065541415610809576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080090614516565b60405180910390fd5b6002606581905550600061081c83612101565b905061084933838373ffffffffffffffffffffffffffffffffffffffff166121a59092919063ffffffff16565b50610852610cb4565b610891576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088890614436565b60405180910390fd5b60016065819055505050565b60006108a7610a00565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16148061091257506108e3610c7c565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b9050919050565b60006103e8905090565b600061092d61072b565b73ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016109659190614064565b60206040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190613a97565b905090565b6109c26122db565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c6109f491906149ce565b60001b90506000815550565b600073981bda8276ae93f567922497153de7a5683708d3905090565b610a25816126ee565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c610a5791906149ce565b60001b905060008154905080831115610a735760009050610a82565b8281610a7f91906149ce565b90505b808255505050565b610a92610cb4565b8015610aaf57506000151560008054906101000a900460ff161515145b15610af457610abc61130e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610af357600080fd5b5b610b0581610b00610923565b6128c6565b905080471015610b4a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4190614276565b60405180910390fd5b610b5261072b565b73ffffffffffffffffffffffffffffffffffffffff1663402d8883826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b50505050503373ffffffffffffffffffffffffffffffffffffffff167f1b8cd61ed43bec7c6bdad3a18ffee613f99c853d16c50678d248d879e1b434388242604051610bfa92919061457a565b60405180910390a250565b600080610c10610923565b90506000610c1c611735565b90506000821415610c3257600092505050610c79565b80821015610c6c578181610c4691906149ce565b610c4e610919565b83610c599190614974565b610c639190614796565b92505050610c79565b610c746113d7565b925050505b90565b6000733befdd935b50f172e696a5187dbacfef0d208e48905090565b6000601e905090565b6000610fa0905090565b60006064905090565b6000610cbe6113d7565b610cc6610c05565b10905090565b60606000610cd86120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015610d1d57600080fd5b505afa158015610d31573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610d5a9190613979565b90506000815167ffffffffffffffff811115610d9f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610dcd5781602001602082028036833780820191505090505b50905060005b8251811015610e7e57610e2630848381518110610e19577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015161160e565b828281518110610e5f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250508080610e7690614b1b565b915050610dd3565b50809250505090565b610e8f6120f9565b73ffffffffffffffffffffffffffffffffffffffff16610ead61130e565b73ffffffffffffffffffffffffffffffffffffffff1614610f03576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610efa90614416565b60405180910390fd5b610f0d60006128df565b565b600081610f1a610c98565b42610f259190614740565b11610f65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5c90614496565b60405180910390fd5b81421080610f845750610f766120d4565b8242610f8291906149ce565b105b9050919050565b600060029054906101000a900460ff16610fb557600060019054906101000a900460ff1615610fbe565b610fbd6129a5565b5b610ffd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ff4906143b6565b60405180910390fd5b60008060029054906101000a900460ff16159050801561104e576001600060026101000a81548160ff0219169083151502179055506001600060016101000a81548160ff0219169083151502179055505b6110566129b6565b61105e612a0f565b801561107f5760008060026101000a81548160ff0219169083151502179055505b50565b61108a6120f9565b73ffffffffffffffffffffffffffffffffffffffff166110a861130e565b73ffffffffffffffffffffffffffffffffffffffff16146110fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f590614416565b60405180910390fd5b60026065541415611144576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113b90614516565b60405180910390fd5b60026065819055508047101561118f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611186906144d6565b60405180910390fd5b60006111996120dd565b73ffffffffffffffffffffffffffffffffffffffff16635d8874e98386866040518463ffffffff1660e01b81526004016111d492919061411b565b6020604051808303818588803b1580156111ed57600080fd5b505af1158015611201573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061122691906139ba565b905080611268576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125f906144f6565b60405180910390fd5b833373ffffffffffffffffffffffffffffffffffffffff167f8c4f7b2f9ad7fde21c3ebf69d91938c2731761edd5820e45c17ea61d9c2ab90a85426040516112b192919061457a565b60405180910390a3506112c2610cb4565b611301576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f890614436565b60405180910390fd5b6001606581905550505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060006113446120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561138957600080fd5b505afa15801561139d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113c69190613979565b90506113d181612a68565b91505090565b6000611388905090565b600060017f4e62f1e61cb3124bafeea7becf303f483383d07c7a6ebfa279ac013c045a63ac60001c61141391906149ce565b60001b9050600081549050348161142a9190614740565b9050671158e460913d0000811115611477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146e90614256565b60405180910390fd5b808255611482612b88565b5050565b61148e6120f9565b73ffffffffffffffffffffffffffffffffffffffff166114ac61130e565b73ffffffffffffffffffffffffffffffffffffffff1614611502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f990614416565b60405180910390fd5b61150a61072b565b73ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec826040518263ffffffff1660e01b81526004016115429190614536565b600060405180830381600087803b15801561155c57600080fd5b505af1158015611570573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167feae9cfbc77fdd40ca899f36b608256063b2bc9d8178b0220f7ad513e178d673082426040516115bc92919061457a565b60405180910390a26115cc610cb4565b61160b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160290614436565b60405180910390fd5b50565b6000806116196120dd565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b81526004016116519190614100565b60206040518083038186803b15801561166957600080fd5b505afa15801561167d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a19190613914565b90508073ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016116dc9190614064565b60206040518083038186803b1580156116f457600080fd5b505afa158015611708573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172c9190613a97565b91505092915050565b60008047905060006117456120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906117c79190613979565b905060006117d482612a68565b9050600081600081518110611812577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000811415611860576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611857906142f6565b60405180910390fd5b6000600190505b8251811015611a755760008382815181106118ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015114156118f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118eb90614396565b60405180910390fd5b600084828151811061192f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600061194482612101565b90506000611952308461160e565b90508173ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561199a57600080fd5b505afa1580156119ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119d29190613ac0565b600a6119de919061481a565b856119e99190614974565b81670de0b6b3a7640000888781518110611a2c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611a3e9190614974565b611a489190614974565b611a529190614796565b88611a5d9190614740565b97505050508080611a6d90614b1b565b915050611867565b508394505050505090565b60026065541415611ac6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abd90614516565b60405180910390fd5b6002606581905550611ad6610cb4565b15611b16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b0d90614336565b60405180910390fd5b60016000806101000a81548160ff0219169083151502179055506000611b3a610923565b905080821115611b48578091505b6000611b52610919565b611b5a610cab565b84611b659190614974565b611b6f9190614796565b905060008184611b7f9190614740565b9050611b8a81612bda565b611b9384612ced565b611b9c82612d02565b3373ffffffffffffffffffffffffffffffffffffffff167f7abe212d4944ae75cf0a0477af92aa0db98c15aaf21d06c37c97c641427b8eb38584611bde610c05565b42604051611bef94939291906145da565b60405180910390a25050506000611c04610c05565b9050611c0e61130e565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611c8b57611c48610ca1565b811015611c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c81906143f6565b60405180910390fd5b5b611c936113d7565b8110611cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ccb906142d6565b60405180910390fd5b60008060006101000a81548160ff02191690831515021790555050600160658190555050565b60026065541415611d40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3790614516565b60405180910390fd5b6002606581905550611d506120f9565b73ffffffffffffffffffffffffffffffffffffffff16611d6e61130e565b73ffffffffffffffffffffffffffffffffffffffff1614611dc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dbb90614416565b60405180910390fd5b6000611dcf84612101565b9050611e03611ddc6120dd565b848373ffffffffffffffffffffffffffffffffffffffff166121a59092919063ffffffff16565b6000611e0d6120dd565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8686866040518463ffffffff1660e01b8152600401611e4993929190614144565b602060405180830381600087803b158015611e6357600080fd5b505af1158015611e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e9b91906139ba565b905080611edd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ed490614456565b60405180910390fd5b843373ffffffffffffffffffffffffffffffffffffffff167fc95bd7ebbed9b9c3e9477753bcb60d02b328f1e5bce8b1a25986d6c73991c1828642604051611f2692919061457a565b60405180910390a35050611f38610cb4565b611f77576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6e90614436565b60405180910390fd5b6001606581905550505050565b611f8c61378b565b6040518060800160405280611f9f611735565b8152602001611fac610923565b8152602001611fb9610c05565b8152602001611fc6610cb4565b611fd1576000611fd4565b60015b815250905090565b611fe46120f9565b73ffffffffffffffffffffffffffffffffffffffff1661200261130e565b73ffffffffffffffffffffffffffffffffffffffff1614612058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204f90614416565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90614296565b60405180910390fd5b6120d1816128df565b50565b600060b4905090565b6000730278438423f433e277f65d14c0e002b8828702ba905090565b600033905090565b60008061210c6120dd565b73ffffffffffffffffffffffffffffffffffffffff166376d02895846040518263ffffffff1660e01b81526004016121449190614100565b60206040518083038186803b15801561215c57600080fd5b505afa158015612170573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121949190613914565b905060008190508092505050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016121d792919061407f565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516122259190614027565b6000604051808303816000865af19150503d8060008114612262576040519150601f19603f3d011682016040523d82523d6000602084013e612267565b606091505b5091509150818015612295575060008151148061229457508080602001905181019061229391906139ba565b5b5b6122d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122cb906144b6565b60405180910390fd5b5050505050565b6122e36120f9565b73ffffffffffffffffffffffffffffffffffffffff1661230161130e565b73ffffffffffffffffffffffffffffffffffffffff1614612357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161234e90614416565b60405180910390fd5b6002606554141561239d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161239490614516565b60405180910390fd5b600260658190555060006123af6120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b1580156123f457600080fd5b505afa158015612408573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906124319190613979565b905060005b815181101561257e57600061248a83838151811061247d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612101565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016124c29190614064565b60206040518083038186803b1580156124da57600080fd5b505afa1580156124ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125129190613a97565b9050600081111561256a57612569838381518110612559577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826000612d37565b5b50808061257690614b1b565b915050612436565b506000612589610923565b9050804710156125ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c590614236565b60405180910390fd5b6125d781610a8a565b7f4acb957de3799dd3d95bb7da6bcfbca6f5a33812d69ad37816ed87e79b6327d681474260405161260a939291906145a3565b60405180910390a16000479050600081111561269a57612649813373ffffffffffffffffffffffffffffffffffffffff16612e1390919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6824260405161269192919061457a565b60405180910390a25b5050506126a5610cb4565b6126e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126db90614436565b60405180910390fd5b6001606581905550565b6126f66120f9565b73ffffffffffffffffffffffffffffffffffffffff1661271461130e565b73ffffffffffffffffffffffffffffffffffffffff161461276a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161276190614416565b60405180910390fd5b600260655414156127b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127a790614516565b60405180910390fd5b6002606581905550804710156127fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f290614376565b60405180910390fd5b612824813373ffffffffffffffffffffffffffffffffffffffff16612e1390919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f92ccf450a286a957af52509bc1c9939d1a6a481783e142e41e2499f0bb66ebc6824260405161286c92919061457a565b60405180910390a261287c610cb4565b6128bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128b290614436565b60405180910390fd5b600160658190555050565b60008183106128d557816128d7565b825b905092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006129b030612f39565b15905090565b600060029054906101000a900460ff16612a05576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129fc90614476565b60405180910390fd5b612a0d612f5c565b565b600060029054906101000a900460ff16612a5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5590614476565b60405180910390fd5b612a66612fbd565b565b60606000606136033590506000602060408360ff16612a879190614938565b612a919190614708565b90506060604051905081815281604283013603602083013760208101604052600081805190602001209050600081604051602001612acf919061403e565b604051602081830303815290604052805190602001209050606060405190506041815260418036036020830137602081016040526000612b18828461301690919063ffffffff16565b9050612b238161089d565b612b62576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b59906142b6565b60405180910390fd5b600060623603359050612b798a8960ff168961303d565b98505050505050505050919050565b3373ffffffffffffffffffffffffffffffffffffffff167fcd909ec339185c4598a4096e174308fbdf136d117f230960f873a2f2e81f63af3442604051612bd092919061457a565b60405180910390a2565b6000612be46120dd565b73ffffffffffffffffffffffffffffffffffffffff16632acada4d6040518163ffffffff1660e01b815260040160006040518083038186803b158015612c2957600080fd5b505afa158015612c3d573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190612c669190613979565b905060005b8151811015612ce857824710612c8057612ce8565b612cd5828281518110612cbc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101514785612cd091906149ce565b6130e3565b8080612ce090614b1b565b915050612c6b565b505050565b612cff612cfa47836128c6565b610a8a565b50565b612d34612d0f82476128c6565b3373ffffffffffffffffffffffffffffffffffffffff16612e1390919063ffffffff16565b50565b6000612d4284612101565b9050612d76612d4f6120dd565b848373ffffffffffffffffffffffffffffffffffffffff166121a59092919063ffffffff16565b612d7e6120dd565b73ffffffffffffffffffffffffffffffffffffffff166348eedd6b8585856040518463ffffffff1660e01b8152600401612dba93929190614144565b602060405180830381600087803b158015612dd457600080fd5b505af1158015612de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0c91906139ba565b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612e6e577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612ea05781602001600182028036833780820191505090505b50604051612eae9190614027565b60006040518083038185875af1925050503d8060008114612eeb576040519150601f19603f3d011682016040523d82523d6000602084013e612ef0565b606091505b5050905080612f34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f2b90614316565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060029054906101000a900460ff16612fab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fa290614476565b60405180910390fd5b612fbb612fb66120f9565b6128df565b565b600060029054906101000a900460ff1661300c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161300390614476565b60405180910390fd5b6001606581905550565b6000806000613025858561324b565b91509150613032816132ce565b819250505092915050565b6060806000806000806042870136035995508951865260208a51026020870101604052600094505b888510156130d357604085028101359150600093505b89518410156130c857816020850260208c01015114156130b05760206040860282010135602085026020880101526001830192505b89518314156130bd578894505b60018401935061307b565b600185019450613065565b5084955050505050509392505050565b60006130ee83612101565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161312b9190614064565b60206040518083038186803b15801561314357600080fd5b505afa158015613157573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061317b9190613a97565b905060008111156132455760006131906120dd565b73ffffffffffffffffffffffffffffffffffffffff16639ac34dd385856040518363ffffffff1660e01b81526004016131ca929190614551565b602060405180830381600087803b1580156131e457600080fd5b505af11580156131f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061321c9190613a97565b9050808210156132375761323285836000612d37565b613243565b613242858286612d37565b5b505b50505050565b60008060418351141561328d5760008060006020860151925060408601519150606086015160001a90506132818782858561361f565b945094505050506132c7565b6040835114156132be5760008060208501519150604085015190506132b386838361372c565b9350935050506132c7565b60006002915091505b9250929050565b60006004811115613308577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613341577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561334c5761361c565b60016004811115613386577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156133bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133f7906141f6565b60405180910390fd5b6002600481111561343a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613473577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156134b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134ab90614216565b60405180910390fd5b600360048111156134ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115613527577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415613568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161355f90614356565b60405180910390fd5b6004808111156135a1577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156135da577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561361b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613612906143d6565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c111561365a576000600391509150613723565b601b8560ff16141580156136725750601c8560ff1614155b15613684576000600491509150613723565b6000600187878787604051600081526020016040526040516136a9949392919061417b565b6020604051602081039080840390855afa1580156136cb573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561371a57600060019250925050613723565b80600092509250505b94509492505050565b60008060007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60001b841690506000601b60ff8660001c901c61376f9190614740565b905061377d8782888561361f565b935093505050935093915050565b6040518060800160405280600490602082028036833780820191505090505090565b60006137c06137bb84614644565b61461f565b905080838252602082019050828560208602820111156137df57600080fd5b60005b8581101561380f57816137f58882613897565b8452602084019350602083019250506001810190506137e2565b5050509392505050565b600081359050613828816153d6565b92915050565b60008151905061383d816153d6565b92915050565b600082601f83011261385457600080fd5b81516138648482602086016137ad565b91505092915050565b60008151905061387c816153ed565b92915050565b60008135905061389181615404565b92915050565b6000815190506138a681615404565b92915050565b6000813590506138bb8161541b565b92915050565b6000815190506138d08161541b565b92915050565b6000815190506138e581615432565b92915050565b6000602082840312156138fd57600080fd5b600061390b84828501613819565b91505092915050565b60006020828403121561392657600080fd5b60006139348482850161382e565b91505092915050565b6000806040838503121561395057600080fd5b600061395e85828601613819565b925050602061396f85828601613882565b9150509250929050565b60006020828403121561398b57600080fd5b600082015167ffffffffffffffff8111156139a557600080fd5b6139b184828501613843565b91505092915050565b6000602082840312156139cc57600080fd5b60006139da8482850161386d565b91505092915050565b600080604083850312156139f657600080fd5b6000613a0485828601613882565b9250506020613a15858286016138ac565b9150509250929050565b600080600060608486031215613a3457600080fd5b6000613a4286828701613882565b9350506020613a53868287016138ac565b9250506040613a64868287016138ac565b9150509250925092565b600060208284031215613a8057600080fd5b6000613a8e848285016138ac565b91505092915050565b600060208284031215613aa957600080fd5b6000613ab7848285016138c1565b91505092915050565b600060208284031215613ad257600080fd5b6000613ae0848285016138d6565b91505092915050565b6000613af58383613ffa565b60208301905092915050565b613b0a81614a02565b82525050565b613b198161468a565b613b2381846146c5565b9250613b2e82614670565b8060005b83811015613b5f578151613b468782613ae9565b9650613b51836146ab565b925050600181019050613b32565b505050505050565b6000613b7282614695565b613b7c81856146d0565b9350613b878361467a565b8060005b83811015613bb8578151613b9f8882613ae9565b9750613baa836146b8565b925050600181019050613b8b565b5085935050505092915050565b613bce81614a14565b82525050565b613bdd81614a20565b82525050565b613bf4613bef82614a20565b614b64565b82525050565b6000613c05826146a0565b613c0f81856146e1565b9350613c1f818560208601614ab7565b80840191505092915050565b613c3481614a6f565b82525050565b613c4381614a93565b82525050565b6000613c566018836146ec565b9150613c6182614c19565b602082019050919050565b6000613c79601f836146ec565b9150613c8482614c42565b602082019050919050565b6000613c9c601c836146fd565b9150613ca782614c6b565b601c82019050919050565b6000613cbf6045836146ec565b9150613cca82614c94565b606082019050919050565b6000613ce26029836146ec565b9150613ced82614d09565b604082019050919050565b6000613d05602b836146ec565b9150613d1082614d58565b604082019050919050565b6000613d286026836146ec565b9150613d3382614da7565b604082019050919050565b6000613d4b6015836146ec565b9150613d5682614df6565b602082019050919050565b6000613d6e604c836146ec565b9150613d7982614e1f565b606082019050919050565b6000613d916027836146ec565b9150613d9c82614e94565b604082019050919050565b6000613db46034836146ec565b9150613dbf82614ee3565b604082019050919050565b6000613dd76020836146ec565b9150613de282614f32565b602082019050919050565b6000613dfa6022836146ec565b9150613e0582614f5b565b604082019050919050565b6000613e1d6025836146ec565b9150613e2882614faa565b604082019050919050565b6000613e406028836146ec565b9150613e4b82614ff9565b604082019050919050565b6000613e63602e836146ec565b9150613e6e82615048565b604082019050919050565b6000613e866022836146ec565b9150613e9182615097565b604082019050919050565b6000613ea96092836146ec565b9150613eb4826150e6565b60a082019050919050565b6000613ecc6020836146ec565b9150613ed7826151a7565b602082019050919050565b6000613eef6033836146ec565b9150613efa826151d0565b604082019050919050565b6000613f126011836146ec565b9150613f1d8261521f565b602082019050919050565b6000613f35602b836146ec565b9150613f4082615248565b604082019050919050565b6000613f58602a836146ec565b9150613f6382615297565b604082019050919050565b6000613f7b602d836146ec565b9150613f86826152e6565b604082019050919050565b6000613f9e6034836146ec565b9150613fa982615335565b604082019050919050565b6000613fc16011836146ec565b9150613fcc82615384565b602082019050919050565b6000613fe4601f836146ec565b9150613fef826153ad565b602082019050919050565b61400381614a58565b82525050565b61401281614a58565b82525050565b61402181614a62565b82525050565b60006140338284613bfa565b915081905092915050565b600061404982613c8f565b91506140558284613be3565b60208201915081905092915050565b60006020820190506140796000830184613b01565b92915050565b60006040820190506140946000830185613b01565b6140a16020830184614009565b9392505050565b60006080820190506140bd6000830184613b10565b92915050565b600060208201905081810360008301526140dd8184613b67565b905092915050565b60006020820190506140fa6000830184613bc5565b92915050565b60006020820190506141156000830184613bd4565b92915050565b60006040820190506141306000830185613bd4565b61413d6020830184614009565b9392505050565b60006060820190506141596000830186613bd4565b6141666020830185614009565b6141736040830184614009565b949350505050565b60006080820190506141906000830187613bd4565b61419d6020830186614018565b6141aa6040830185613bd4565b6141b76060830184613bd4565b95945050505050565b60006020820190506141d56000830184613c2b565b92915050565b60006020820190506141f06000830184613c3a565b92915050565b6000602082019050818103600083015261420f81613c49565b9050919050565b6000602082019050818103600083015261422f81613c6c565b9050919050565b6000602082019050818103600083015261424f81613cb2565b9050919050565b6000602082019050818103600083015261426f81613cd5565b9050919050565b6000602082019050818103600083015261428f81613cf8565b9050919050565b600060208201905081810360008301526142af81613d1b565b9050919050565b600060208201905081810360008301526142cf81613d3e565b9050919050565b600060208201905081810360008301526142ef81613d61565b9050919050565b6000602082019050818103600083015261430f81613d84565b9050919050565b6000602082019050818103600083015261432f81613da7565b9050919050565b6000602082019050818103600083015261434f81613dca565b9050919050565b6000602082019050818103600083015261436f81613ded565b9050919050565b6000602082019050818103600083015261438f81613e10565b9050919050565b600060208201905081810360008301526143af81613e33565b9050919050565b600060208201905081810360008301526143cf81613e56565b9050919050565b600060208201905081810360008301526143ef81613e79565b9050919050565b6000602082019050818103600083015261440f81613e9c565b9050919050565b6000602082019050818103600083015261442f81613ebf565b9050919050565b6000602082019050818103600083015261444f81613ee2565b9050919050565b6000602082019050818103600083015261446f81613f05565b9050919050565b6000602082019050818103600083015261448f81613f28565b9050919050565b600060208201905081810360008301526144af81613f4b565b9050919050565b600060208201905081810360008301526144cf81613f6e565b9050919050565b600060208201905081810360008301526144ef81613f91565b9050919050565b6000602082019050818103600083015261450f81613fb4565b9050919050565b6000602082019050818103600083015261452f81613fd7565b9050919050565b600060208201905061454b6000830184614009565b92915050565b60006040820190506145666000830185614009565b6145736020830184613b01565b9392505050565b600060408201905061458f6000830185614009565b61459c6020830184614009565b9392505050565b60006060820190506145b86000830186614009565b6145c56020830185614009565b6145d26040830184614009565b949350505050565b60006080820190506145ef6000830187614009565b6145fc6020830186614009565b6146096040830185614009565b6146166060830184614009565b95945050505050565b600061462961463a565b90506146358282614aea565b919050565b6000604051905090565b600067ffffffffffffffff82111561465f5761465e614bcc565b5b602082029050602081019050919050565b6000819050919050565b6000819050602082019050919050565b600060049050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061471382614a2a565b915061471e83614a2a565b92508261ffff0382111561473557614734614b6e565b5b828201905092915050565b600061474b82614a58565b915061475683614a58565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561478b5761478a614b6e565b5b828201905092915050565b60006147a182614a58565b91506147ac83614a58565b9250826147bc576147bb614b9d565b5b828204905092915050565b6000808291508390505b6001851115614811578086048111156147ed576147ec614b6e565b5b60018516156147fc5780820291505b808102905061480a85614c0c565b94506147d1565b94509492505050565b600061482582614a58565b915061483083614a62565b925061485d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484614865565b905092915050565b6000826148755760019050614931565b816148835760009050614931565b816001811461489957600281146148a3576148d2565b6001915050614931565b60ff8411156148b5576148b4614b6e565b5b8360020a9150848211156148cc576148cb614b6e565b5b50614931565b5060208310610133831016604e8410600b84101617156149075782820a90508381111561490257614901614b6e565b5b614931565b61491484848460016147c7565b9250905081840481111561492b5761492a614b6e565b5b81810290505b9392505050565b600061494382614a2a565b915061494e83614a2a565b92508161ffff048311821515161561496957614968614b6e565b5b828202905092915050565b600061497f82614a58565b915061498a83614a58565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156149c3576149c2614b6e565b5b828202905092915050565b60006149d982614a58565b91506149e483614a58565b9250828210156149f7576149f6614b6e565b5b828203905092915050565b6000614a0d82614a38565b9050919050565b60008115159050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000614a7a82614a81565b9050919050565b6000614a8c82614a38565b9050919050565b6000614a9e82614aa5565b9050919050565b6000614ab082614a38565b9050919050565b60005b83811015614ad5578082015181840152602081019050614aba565b83811115614ae4576000848401525b50505050565b614af382614bfb565b810181811067ffffffffffffffff82111715614b1257614b11614bcc565b5b80604052505050565b6000614b2682614a58565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415614b5957614b58614b6e565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160011c9050919050565b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f53656c6c696e67206f757420616c6c2061737365747320776974686f7574207260008201527f65706179696e67207468652077686f6c652064656274206973206e6f7420616c60208201527f6c6f776564000000000000000000000000000000000000000000000000000000604082015250565b7f416464696e67206d6f7265207468616e20312e32352041564158206973206e6f60008201527f7420616c6c6f7765640000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2072657060008201527f617920746865206c6f616e000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5369676e6572206e6f7420617574686f72697a65640000000000000000000000600082015250565b7f54686973206f7065726174696f6e20776f756c64206e6f7420726573756c742060008201527f696e206272696e67696e6720746865206c6f616e206261636b20746f2061207360208201527f6f6c76656e742073746174650000000000000000000000000000000000000000604082015250565b7f417661782070726963652072657475726e65642066726f6d206f7261636c652060008201527f6973207a65726f00000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f43616e6e6f742073656c6c6f7574206120736f6c76656e74206163636f756e74600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2077697460008201527f6864726177000000000000000000000000000000000000000000000000000000602082015250565b7f41737365742070726963652072657475726e65642066726f6d206f7261636c6560008201527f206973207a65726f000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f54686973206f7065726174696f6e20776f756c6420726573756c7420696e206160008201527f206c6f616e2077697468204c5456206c6f776572207468616e204d696e696d6160208201527f6c2053656c6c6f7574204c545620776869636820776f756c6420707574206c6f60408201527f616e2773206f776e657220696e2061207269736b206f6620616e20756e6e656360608201527f6573736172696c792068696768206c6f73730000000000000000000000000000608082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b7f526564656d7074696f6e206661696c6564000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f446174612077697468206675747572652074696d657374616d7073206973206e60008201527f6f7420616c6c6f77656400000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e64732061726520617661696c61626c65207460008201527f6f20696e7665737420696e20616e206173736574000000000000000000000000602082015250565b7f496e766573746d656e74206661696c6564000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6153df81614a02565b81146153ea57600080fd5b50565b6153f681614a14565b811461540157600080fd5b50565b61540d81614a20565b811461541857600080fd5b50565b61542481614a58565b811461542f57600080fd5b50565b61543b81614a62565b811461544657600080fd5b5056fea2646970667358221220680dd81cfa39393d735579b62545af010c4e310e63c7532e68091f248346bc7c64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "borrow(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "of funds to borrow"
        }
      },
      "closeLoan()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getAllAssetsPrices()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getBalance(address,bytes32)": {
        "details": "_asset the code of an asset_user the address of queried user*"
      },
      "getLTV()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "getTotalValue()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "invest(bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_asset": "code of the asset",
          "_exactERC20AmountOut": "exact amount of asset to buy",
          "_maxAvaxAmountIn": "maximum amount of AVAX to sell"
        }
      },
      "isSolvent()": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "liquidateLoan(uint256)": {
        "details": "This function uses the redstone-evm-connector*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeem(bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_asset": "code of the asset",
          "_exactERC20AmountIn": "exact amount of token to sell",
          "_minAvaxAmountOut": "minimum amount of the AVAX token to buy"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "of funds to repay"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "This function uses the redstone-evm-connector*",
        "params": {
          "_amount": "to be withdrawn"
        }
      },
      "withdrawAsset(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(uint256)": {
        "notice": "Borrows funds from the pool"
      },
      "closeLoan()": {
        "notice": "This function can only be accessed by the owner and allows selling all of the assets."
      },
      "fund()": {
        "notice": "Funds a loan with the value attached to the transaction Allows to add up to 1.25 AVAX of collateral in total*"
      },
      "getAllAssetsBalances()": {
        "notice": "Returns the balances of all assets served by the price provider It could be used as a helper method for UI*"
      },
      "getAllAssetsPrices()": {
        "notice": "Returns the prices of all assets served by the price provider It could be used as a helper method for UI"
      },
      "getBalance(address,bytes32)": {
        "notice": "Returns the current balance of the asset held by a given user"
      },
      "getDebt()": {
        "notice": "Returns the current debt associated with the loan*"
      },
      "getLTV()": {
        "notice": "LoanToValue ratio is calculated as the ratio between debt and collateral. The collateral is equal to total loan value takeaway debt."
      },
      "getMaxBlockTimestampDelay()": {
        "notice": "Override PriceAware method to consider Avalanche guaranteed block timestamp time accuracy*"
      },
      "getTotalValue()": {
        "notice": "Returns the current value of a loan in AVAX including cash and investments"
      },
      "invest(bytes32,uint256,uint256)": {
        "notice": "Invests an amount to buy an asset"
      },
      "isSignerAuthorized(address)": {
        "notice": "Override PriceAware method, addresses below belong to authorized signers of data feeds*"
      },
      "isSolvent()": {
        "notice": "Checks if the loan is solvent. It means that the ratio between debt and collateral is below safe level, which is parametrized by the getMaxLtv()"
      },
      "redeem(bytes32,uint256,uint256)": {
        "notice": "Redeem an investment by selling an asset"
      },
      "repay(uint256)": {
        "notice": "Repays funds to the pool"
      },
      "withdraw(uint256)": {
        "notice": "Withdraws an amount from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9394,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_liquidationInProgress",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 130,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_initialized",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_initializing",
        "offset": 2,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/upgraded/SmartLoanLimitedCollateral.sol:SmartLoanLimitedCollateral",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}