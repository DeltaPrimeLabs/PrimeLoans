{
  "address": "0x8BB6586DCAc7a92d098345FfBeFAB913a69fD3eE",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DivisionByZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyPools",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidBaseAsset",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MissingBaseAssetPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoValidPrice",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TWAPDeviationTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TokenNotConfigured",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "pool",
          "type": "address"
        }
      ],
      "name": "PoolRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenConfigured",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "TokenRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "isCL",
              "type": "bool"
            },
            {
              "internalType": "int24",
              "name": "tickSpacing",
              "type": "int24"
            },
            {
              "internalType": "uint32",
              "name": "shortTwap",
              "type": "uint32"
            },
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "duration",
                  "type": "uint32"
                },
                {
                  "internalType": "uint256",
                  "name": "maxDeviation",
                  "type": "uint256"
                }
              ],
              "internalType": "struct BaseOracle.TWAPCheck[]",
              "name": "twapChecks",
              "type": "tuple[]"
            },
            {
              "internalType": "address",
              "name": "baseAsset",
              "type": "address"
            }
          ],
          "internalType": "struct BaseOracle.PoolConfig[]",
          "name": "pools",
          "type": "tuple[]"
        }
      ],
      "name": "configureToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "asset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "useTwapChecks",
              "type": "bool"
            },
            {
              "internalType": "address[]",
              "name": "baseAssets",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "baseAssetPrices",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct BaseOracle.GetDollarValueParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "getDollarValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getFullTokenConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isConfigured",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "poolAddress",
                  "type": "address"
                },
                {
                  "internalType": "bool",
                  "name": "isCL",
                  "type": "bool"
                },
                {
                  "internalType": "int24",
                  "name": "tickSpacing",
                  "type": "int24"
                },
                {
                  "internalType": "uint32",
                  "name": "shortTwap",
                  "type": "uint32"
                },
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "duration",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint256",
                      "name": "maxDeviation",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct BaseOracle.TWAPCheck[]",
                  "name": "twapChecks",
                  "type": "tuple[]"
                },
                {
                  "internalType": "address",
                  "name": "baseAsset",
                  "type": "address"
                }
              ],
              "internalType": "struct BaseOracle.PoolConfig[]",
              "name": "pools",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct BaseOracle.TokenConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_initialOwner",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "removeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenConfigs",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isConfigured",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bef115fa5b26d0d0280f629c050dbe812a30d5672032edd11c056723e4505f9",
  "receipt": {
    "to": null,
    "from": "0x0B6a7D372192248DfDeC034362a8Aa24292ce586",
    "contractAddress": "0x8BB6586DCAc7a92d098345FfBeFAB913a69fD3eE",
    "transactionIndex": 95,
    "gasUsed": "2158560",
    "logsBloom": "0x
    "blockHash": "0xeec89235e57a222a54102dd6a752f95ca88af43d8afd329512f0d360b78f6285",
    "transactionHash": "0x8bef115fa5b26d0d0280f629c050dbe812a30d5672032edd11c056723e4505f9",
    "logs": [
      {
        "transactionIndex": 95,
        "blockNumber": 26239510,
        "transactionHash": "0x8bef115fa5b26d0d0280f629c050dbe812a30d5672032edd11c056723e4505f9",
        "address": "0x8BB6586DCAc7a92d098345FfBeFAB913a69fD3eE",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 359,
        "blockHash": "0xeec89235e57a222a54102dd6a752f95ca88af43d8afd329512f0d360b78f6285"
      }
    ],
    "blockNumber": 26239510,
    "cumulativeGasUsed": "28055054",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0d709f687359352c0dc5b5b263105a58",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DivisionByZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBaseAsset\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingBaseAssetPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValidPrice\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TWAPDeviationTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenNotConfigured\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"name\":\"PoolRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCL\",\"type\":\"bool\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint32\",\"name\":\"shortTwap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviation\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseOracle.TWAPCheck[]\",\"name\":\"twapChecks\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"}],\"internalType\":\"struct BaseOracle.PoolConfig[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"name\":\"configureToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useTwapChecks\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"baseAssets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"baseAssetPrices\",\"type\":\"uint256[]\"}],\"internalType\":\"struct BaseOracle.GetDollarValueParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"getDollarValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getFullTokenConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isConfigured\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isCL\",\"type\":\"bool\"},{\"internalType\":\"int24\",\"name\":\"tickSpacing\",\"type\":\"int24\"},{\"internalType\":\"uint32\",\"name\":\"shortTwap\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"duration\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxDeviation\",\"type\":\"uint256\"}],\"internalType\":\"struct BaseOracle.TWAPCheck[]\",\"name\":\"twapChecks\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"baseAsset\",\"type\":\"address\"}],\"internalType\":\"struct BaseOracle.PoolConfig[]\",\"name\":\"pools\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BaseOracle.TokenConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"removeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenConfigs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isConfigured\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Calculates the USD value of an asset using multiple pools.      The contract supports both centralized liquidity (CL) pools and AMM pools.      In this refactored version, each pool config stores a single short TWAP duration (used      to derive the price) and an array of TWAP deviation checks. Each deviation check      consists of a TWAP duration and a maximum allowed deviation. When enabled, the oracle      will iterate over these checks to verify that the short TWAP price does not deviate      too much from prices calculated over other durations.\",\"kind\":\"dev\",\"methods\":{\"configureToken(address,(address,bool,int24,uint32,(uint32,uint256)[],address)[])\":{\"details\":\"Only callable by the owner. Reverts if no pools are provided or if a base asset is invalid.\",\"params\":{\"pools\":\"Array of pool configurations for the token.\",\"token\":\"The address of the token to configure.\"}},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"getFullTokenConfig(address)\":{\"params\":{\"token\":\"The address of the token to query\"},\"returns\":{\"_0\":\"The complete TokenConfig struct containing the token's configuration\"}},\"initialize(address)\":{\"params\":{\"_initialOwner\":\"The address of the initial owner.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeToken(address)\":{\"details\":\"Only callable by the owner.\",\"params\":{\"token\":\"The address of the token to remove.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"BaseOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"configureToken(address,(address,bool,int24,uint32,(uint32,uint256)[],address)[])\":{\"notice\":\"Configures a token with its associated pools.\"},\"getDollarValue((address,uint256,bool,address[],uint256[]))\":{\"notice\":\"Calculates the USD value of an asset based on its configured pools.         Each pool returns the full USD value for the provided amount.\"},\"getFullTokenConfig(address)\":{\"notice\":\"Retrieves the full configuration for a token.\"},\"initialize(address)\":{\"notice\":\"Initializes the contract and sets the initial owner.\"},\"removeToken(address)\":{\"notice\":\"Removes a token and its associated pools from the configuration.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/BaseOracle.sol\":\"BaseOracle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2bc0007987c229ae7624eb29be6a9b84f6a6a5872f76248b15208b131ea41c4e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xcef50f95b43b038aa40aed25b62fc45906c681a5c1d504a4fdcf3bc6330a8d4b\",\"license\":\"MIT\"},\"contracts/lib/uniswap-v3/FixedPoint96.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.4.0;\\n\\n/// @title FixedPoint96\\n/// @notice A library for handling binary fixed point numbers, see https://en.wikipedia.org/wiki/Q_(number_format)\\n/// @dev Used in SqrtPriceMath.sol\\nlibrary FixedPoint96 {\\n    uint8 internal constant RESOLUTION = 96;\\n    uint256 internal constant Q96 = 0x1000000000000000000000000;\\n}\\n\",\"keccak256\":\"0x0ba8a9b95a956a4050749c0158e928398c447c91469682ca8a7cc7e77a7fe032\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/uniswap-v3/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n\\n        //TODO: our change\\n        //https://ethereum.stackexchange.com/questions/96642/unary-operator-minus-cannot-be-applied-to-type-uint256\\n//        uint256 twos = -denominator & denominator;\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e3d614b18e1382e748cc12435bb38e682bb38505202e99304c8c9b582366706\",\"license\":\"MIT\"},\"contracts/lib/uniswap-v3/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.17;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        //TODO: conversion int24 -> int256: check\\n        require(absTick <= uint256(int256(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x23f7f4c92730b5cbfb6b794f405f27ae7b7971e82d760655fea02e4f3b9be3a4\",\"license\":\"GPL-2.0-or-later\"},\"contracts/oracle/BaseOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\\\"; // For additional math utilities if needed.\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\"; // For safe downcasting.\\nimport \\\"../lib/uniswap-v3/TickMath.sol\\\";\\nimport \\\"../lib/uniswap-v3/FullMath.sol\\\"; // Uniswap V3\\u2019s full-precision multiplication/division.\\nimport \\\"../lib/uniswap-v3/FixedPoint96.sol\\\"; // Provides Q96 constant.\\n\\ninterface IUniswapV3Pool {\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function observe(uint32[] calldata secondsAgos)\\n    external\\n    view\\n    returns (int56[] memory tickCumulatives, uint160[] memory);\\n}\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n}\\n\\ninterface IAMM {\\n    function getAmountOut(uint256 amountIn, address tokenIn)\\n    external\\n    view\\n    returns (uint256);\\n}\\n\\n/**\\n * @title BaseOracle\\n * @dev Calculates the USD value of an asset using multiple pools.\\n *      The contract supports both centralized liquidity (CL) pools and AMM pools.\\n *\\n *      In this refactored version, each pool config stores a single short TWAP duration (used\\n *      to derive the price) and an array of TWAP deviation checks. Each deviation check\\n *      consists of a TWAP duration and a maximum allowed deviation. When enabled, the oracle\\n *      will iterate over these checks to verify that the short TWAP price does not deviate\\n *      too much from prices calculated over other durations.\\n */\\ncontract BaseOracle is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    // Custom errors for better error handling.\\n    error EmptyPools();\\n    error InvalidBaseAsset();\\n    error TokenNotConfigured();\\n    error LengthMismatch();\\n    error MissingBaseAssetPrice();\\n    error NoValidPrice();\\n    error TWAPDeviationTooHigh();\\n    error InvalidInput();\\n    error DivisionByZero();\\n\\n    /**\\n     * @notice Represents a deviation check for a given TWAP duration.\\n     * @param duration The TWAP duration (in seconds).\\n     * @param maxDeviation Maximum allowed deviation (in 1e18 scale).\\n     */\\n    struct TWAPCheck {\\n        uint32 duration;\\n        uint256 maxDeviation;\\n    }\\n\\n    /**\\n     * @notice Configuration for a pool used in price calculation.\\n     * @param poolAddress The address of the pool (Uniswap V3 or AMM).\\n     * @param isCL Whether the pool is a centralized liquidity (CL) pool (true) or an AMM pool (false).\\n     * @param tickSpacing Tick spacing for CL pools (ignored for AMM pools).\\n     * @param shortTwap The primary (short) TWAP duration (in seconds) used for the price calculation.\\n     * @param twapChecks Array of additional TWAP checks (each with its own duration and max deviation).\\n     * @param baseAsset The base asset of the pool (e.g., USDC, WETH).\\n     */\\n    struct PoolConfig {\\n        address poolAddress;\\n        bool isCL;\\n        int24 tickSpacing;\\n        uint32 shortTwap;\\n        TWAPCheck[] twapChecks;\\n        address baseAsset;\\n    }\\n\\n    /**\\n     * @notice Configuration for a token, including its associated pools.\\n     * @param isConfigured Whether the token is configured.\\n     * @param pools Array of pools used to calculate the token's price.\\n     */\\n    struct TokenConfig {\\n        bool isConfigured;\\n        PoolConfig[] pools;\\n    }\\n\\n    // Mapping of token addresses to their configurations.\\n    mapping(address => TokenConfig) public tokenConfigs;\\n\\n    // Constant for precision (1e18).\\n    uint256 private constant PRECISION = 1e18;\\n\\n    // Events for tracking configuration changes.\\n    event PoolAdded(address indexed token, address indexed pool);\\n    event PoolRemoved(address indexed token, address indexed pool);\\n    event TokenConfigured(address indexed token);\\n    event TokenRemoved(address indexed token);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Initializes the contract and sets the initial owner.\\n     * @param _initialOwner The address of the initial owner.\\n     */\\n    function initialize(address _initialOwner) public initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();  // Initialize reentrancy protection.\\n        transferOwnership(_initialOwner);\\n    }\\n\\n    /**\\n     * @notice Normalizes an amount to 1e18 scale based on the token's decimals.\\n     * @param amount The amount to normalize.\\n     * @param decimals The number of decimals for the token.\\n     * @return The normalized amount in 1e18 scale.\\n     */\\n    function normalizeAmount(uint256 amount, uint8 decimals)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        if (decimals > 18) {\\n            return amount / (10 ** (decimals - 18));\\n        }\\n        return amount * (10 ** (18 - decimals));\\n    }\\n\\n    /**\\n     * @notice Configures a token with its associated pools.\\n     * @dev Only callable by the owner. Reverts if no pools are provided or if a base asset is invalid.\\n     * @param token The address of the token to configure.\\n     * @param pools Array of pool configurations for the token.\\n     */\\n    function configureToken(address token, PoolConfig[] calldata pools)\\n    external\\n    onlyOwner\\n    nonReentrant\\n    {\\n        if (pools.length == 0) revert EmptyPools();\\n        delete tokenConfigs[token].pools;\\n        tokenConfigs[token].isConfigured = true;\\n\\n        for (uint i = 0; i < pools.length; i++) {\\n            if (pools[i].baseAsset == address(0)) revert InvalidBaseAsset();\\n            tokenConfigs[token].pools.push(pools[i]);\\n        }\\n\\n        emit TokenConfigured(token);\\n    }\\n\\n    /**\\n     * @notice Removes a token and its associated pools from the configuration.\\n     * @dev Only callable by the owner.\\n     * @param token The address of the token to remove.\\n     */\\n    function removeToken(address token) external onlyOwner nonReentrant {\\n        delete tokenConfigs[token];\\n        emit TokenRemoved(token);\\n    }\\n\\n    /**\\n     * @notice Parameters for calculating the USD value of an asset.\\n     * @param asset The address of the asset.\\n     * @param amount The amount of the asset.\\n     * @param useTwapChecks Whether to perform TWAP deviation checks (using the pool's TWAPCheck array).\\n     * @param baseAssets Array of base assets for which prices are provided.\\n     * @param baseAssetPrices Array of USD prices for the base assets (in 1e18 scale).\\n     */\\n    struct GetDollarValueParams {\\n        address asset;\\n        uint256 amount;\\n        bool useTwapChecks;\\n        address[] baseAssets;\\n        uint256[] baseAssetPrices;\\n    }\\n\\n    /**\\n     * @notice Calculates the USD value of an asset based on its configured pools.\\n     *         Each pool returns the full USD value for the provided amount.\\n     */\\n    function getDollarValue(GetDollarValueParams calldata params)\\n    external\\n    view\\n    returns (uint256)\\n    {\\n        if (!tokenConfigs[params.asset].isConfigured) revert TokenNotConfigured();\\n        if (params.baseAssets.length != params.baseAssetPrices.length) revert LengthMismatch();\\n        if (params.amount == 0) revert InvalidInput();\\n\\n        for (uint i = 0; i < params.baseAssetPrices.length; i++) {\\n            if (params.baseAssetPrices[i] == 0) revert InvalidInput();\\n        }\\n\\n        uint256 minPrice = type(uint256).max;\\n        PoolConfig[] memory pools = tokenConfigs[params.asset].pools;\\n\\n        for (uint i = 0; i < pools.length; i++) {\\n            uint256 baseAssetPrice = 0;\\n            for (uint j = 0; j < params.baseAssets.length; j++) {\\n                if (params.baseAssets[j] == pools[i].baseAsset) {\\n                    baseAssetPrice = params.baseAssetPrices[j];\\n                    break;\\n                }\\n            }\\n            if (baseAssetPrice == 0) revert MissingBaseAssetPrice();\\n\\n            uint256 poolPrice = calculatePoolPrice(\\n                params.asset,\\n                params.amount,\\n                params.useTwapChecks,\\n                baseAssetPrice,\\n                pools[i]\\n            );\\n\\n            if (poolPrice < minPrice) {\\n                minPrice = poolPrice;\\n            }\\n        }\\n\\n        if (minPrice == type(uint256).max) revert NoValidPrice();\\n        return minPrice;\\n    }\\n\\n    /**\\n     * @notice Calculates the USD price of an asset using a specific pool.\\n     * @param asset The address of the asset.\\n     * @param amount The amount of the asset.\\n     * @param useTwapChecks Whether to perform TWAP deviation checks.\\n     * @param baseAssetPrice The USD price of the pool\\u2019s base asset (in 1e18 scale).\\n     * @param pool The pool configuration.\\n     * @return The USD price of the asset (in 1e18 scale).\\n     */\\n    function calculatePoolPrice(\\n        address asset,\\n        uint256 amount,\\n        bool useTwapChecks,\\n        uint256 baseAssetPrice,\\n        PoolConfig memory pool\\n    ) internal view returns (uint256) {\\n        if (pool.isCL) {\\n            return calculateCLPrice(asset, amount, useTwapChecks, baseAssetPrice, pool);\\n        }\\n        return calculateAMMPrice(asset, amount, baseAssetPrice, pool);\\n    }\\n\\n    /**\\n     * @notice Calculates the USD price of an asset using a centralized liquidity (CL) pool.\\n     *         After computing the unit price from TWAP data (using the short TWAP), the function\\n     *         optionally runs additional TWAP deviation checks as defined in the pool\\u2019s TWAPCheck array.\\n     * @param asset The address of the asset.\\n     * @param amount The amount of the asset.\\n     * @param useTwapChecks Whether to run TWAP deviation checks.\\n     * @param baseAssetPrice The USD price of the base asset (in 1e18 scale).\\n     * @param pool The pool configuration.\\n     * @return The USD price of the asset (in 1e18 scale).\\n     */\\n    function calculateCLPrice(\\n        address asset,\\n        uint256 amount,\\n        bool useTwapChecks,\\n        uint256 baseAssetPrice,\\n        PoolConfig memory pool\\n    ) internal view returns (uint256) {\\n        IUniswapV3Pool uniPool = IUniswapV3Pool(pool.poolAddress);\\n        address token0Addr = uniPool.token0();\\n        address token1Addr = uniPool.token1();\\n        bool isToken0 = (token0Addr == asset);\\n\\n        // Calculate the short TWAP price.\\n        uint256 shortTwapPrice = getTwapPrice(pool.poolAddress, pool.shortTwap, isToken0);\\n        uint256 priceFromPool = FullMath.mulDiv(shortTwapPrice, baseAssetPrice, PRECISION);\\n\\n        // Run additional TWAP deviation checks if enabled.\\n        if (useTwapChecks) {\\n            for (uint i = 0; i < pool.twapChecks.length; i++) {\\n                uint32 duration = pool.twapChecks[i].duration;\\n                uint256 maxDeviation = pool.twapChecks[i].maxDeviation;\\n                uint256 twapPrice = getTwapPrice(pool.poolAddress, duration, isToken0);\\n                twapPrice = FullMath.mulDiv(twapPrice, baseAssetPrice, PRECISION);\\n                uint256 deviation = calculateDeviation(priceFromPool, twapPrice);\\n\\n                if (deviation > maxDeviation) {\\n                    revert TWAPDeviationTooHigh();\\n                }\\n            }\\n        }\\n\\n        // Adjust for decimal differences between token0 and token1.\\n        priceFromPool = adjustForDecimals(priceFromPool, token0Addr, token1Addr, isToken0);\\n\\n        return FullMath.mulDiv(priceFromPool, amount, PRECISION);\\n    }\\n\\n    /**\\n     * @notice Adjusts the price to account for differences in token decimals.\\n     * @param price The price to adjust.\\n     * @param token0 The address of token0.\\n     * @param token1 The address of token1.\\n     * @param ratioIsToken1PerToken0 Indicates whether the ratio is token1 per token0.\\n     * @return The adjusted price.\\n     */\\n    function adjustForDecimals(\\n        uint256 price,\\n        address token0,\\n        address token1,\\n        bool ratioIsToken1PerToken0\\n    ) internal view returns (uint256) {\\n        uint8 token0Decimals = IERC20(token0).decimals();\\n        uint8 token1Decimals = IERC20(token1).decimals();\\n\\n        if (ratioIsToken1PerToken0) {\\n            if (token0Decimals > token1Decimals) {\\n                uint256 diff = token0Decimals - token1Decimals;\\n                price *= 10 ** diff;\\n            } else if (token1Decimals > token0Decimals) {\\n                uint256 diff = token1Decimals - token0Decimals;\\n                if (price != 0) {\\n                    price /= 10 ** diff;\\n                }\\n            }\\n        } else {\\n            if (token1Decimals > token0Decimals) {\\n                uint256 diff = token1Decimals - token0Decimals;\\n                price *= 10 ** diff;\\n            } else if (token0Decimals > token1Decimals) {\\n                uint256 diff = token0Decimals - token1Decimals;\\n                if (price != 0) {\\n                    price /= 10 ** diff;\\n                }\\n            }\\n        }\\n        return price;\\n    }\\n\\n    /**\\n * @notice Calculates the USD price of an asset using an AMM pool.\\n * @dev Calls the AMM's getAmountOut function to determine the equivalent amount in the base asset,\\n *      then converts to USD using the provided base asset price.\\n * @param asset The address of the asset being priced\\n * @param amount The amount of the asset\\n * @param baseAssetPrice The USD price of the base asset (in 1e18 scale)\\n * @param pool The pool configuration\\n * @return The USD value of the asset amount (in 1e18 scale)\\n */\\n    function calculateAMMPrice(\\n        address asset,\\n        uint256 amount,\\n        uint256 baseAssetPrice,\\n        PoolConfig memory pool\\n    ) internal view returns (uint256) {\\n        IAMM ammPool = IAMM(pool.poolAddress);\\n        uint8 decimalsIn = IERC20(asset).decimals();\\n        uint8 decimalsOut = IERC20(pool.baseAsset).decimals();\\n\\n        uint256 amountOut;\\n        try ammPool.getAmountOut(amount, asset) returns (uint256 result) {\\n            amountOut = result;\\n        } catch {\\n            revert(\\\"External call failed\\\");\\n        }\\n\\n        uint256 normalizedAmountOut = normalizeAmount(amountOut, decimalsOut);\\n        return FullMath.mulDiv(normalizedAmountOut, baseAssetPrice, PRECISION);\\n    }\\n\\n    /**\\n     * @notice Calculates the TWAP price for a Uniswap V3 pool.\\n     * @dev Uses the pool\\u2019s observe method to compute the average tick over a specified period,\\n     *      converts the tick to a sqrt price (Q64.96), and then converts that value to a 1e18\\u2011scaled price.\\n     * @param poolAddress The address of the Uniswap V3 pool.\\n     * @param secondsAgo The TWAP duration (in seconds).\\n     * @param isToken0 Whether the asset is token0 in the pool.\\n     * @return The TWAP price (in 1e18 scale).\\n     */\\n    function getTwapPrice(\\n        address poolAddress,\\n        uint32 secondsAgo,\\n        bool isToken0\\n    ) internal view returns (uint256) {\\n        uint32[] memory secondsAgos = new uint32[](2);\\n        secondsAgos[0] = secondsAgo;\\n        secondsAgos[1] = 0;\\n\\n        try IUniswapV3Pool(poolAddress).observe(secondsAgos) returns (\\n            int56[] memory tickCumulatives,\\n            uint160[] memory /* unused */\\n        ) {\\n            int24 avgTick = calculateAverageTick(tickCumulatives, secondsAgo);\\n            if (!isToken0) {\\n                avgTick = -avgTick;\\n            }\\n\\n            uint160 sqrtPriceX96 = TickMath.getSqrtRatioAtTick(avgTick);\\n\\n            uint256 price = FullMath.mulDiv(\\n                uint256(sqrtPriceX96),\\n                uint256(sqrtPriceX96) * PRECISION,\\n                FixedPoint96.Q96 * FixedPoint96.Q96\\n            );\\n\\n            return price;\\n        } catch {\\n            return type(uint256).max;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the average tick over a specified period.\\n     * @param tickCumulatives The cumulative tick values from the observe call.\\n     * @param secondsAgo The duration (in seconds).\\n     * @return The average tick over the period.\\n     */\\n    function calculateAverageTick(int56[] memory tickCumulatives, uint32 secondsAgo)\\n    internal\\n    pure\\n    returns (int24)\\n    {\\n        int56 tickDiff = tickCumulatives[1] - tickCumulatives[0];\\n        return SafeCastUpgradeable.toInt24(tickDiff / int56(uint56(secondsAgo)));\\n    }\\n\\n    /**\\n     * @notice Calculates the percentage deviation between two prices.\\n     * @param price1 The first price (in 1e18 scale).\\n     * @param price2 The second price (in 1e18 scale).\\n     * @return The deviation percentage (in 1e18 scale).\\n     */\\n    function calculateDeviation(uint256 price1, uint256 price2)\\n    internal\\n    pure\\n    returns (uint256)\\n    {\\n        if (price1 == 0 || price2 == 0) {\\n            return type(uint256).max;\\n        }\\n        return (price1 > price2)\\n            ? FullMath.mulDiv((price1 - price2), PRECISION, price2)\\n            : FullMath.mulDiv((price2 - price1), PRECISION, price1);\\n    }\\n\\n    /**\\n    * @notice Retrieves the full configuration for a token.\\n    * @param token The address of the token to query\\n    * @return The complete TokenConfig struct containing the token's configuration\\n    */\\n    function getFullTokenConfig(address token)\\n    external\\n    view\\n    returns (TokenConfig memory)\\n    {\\n        return tokenConfigs[token];\\n    }\\n}\\n\",\"keccak256\":\"0xf04aadbe501aa536449705ea0cba82d7de35d78f6ff5bcc5b190863e09dcecaa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61259980620000f36000396000f3fe608060405234801561001057600080fd5b50600436106100835760003560e01c80631b69dc5f1461008857806338b1db46146100c05780635fa7b584146100d5578063715018a6146100e85780638da5cb5b146100f0578063a706ceb814610110578063c4d66de814610131578063dbc4131014610144578063f2fde38b14610164575b600080fd5b6100ab610096366004611b78565b60976020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100d36100ce366004611b95565b610177565b005b6100d36100e3366004611b78565b610314565b6100d3610395565b6100f86103a9565b6040516001600160a01b0390911681526020016100b7565b61012361011e366004611c1c565b6103b8565b6040519081526020016100b7565b6100d361013f366004611b78565b6107b0565b610157610152366004611b78565b6108d8565b6040516100b79190611c56565b6100d3610172366004611b78565b610a42565b61017f610ab8565b610187610b17565b60008190036101a9576040516333f3e07b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526097602052604081206101d091600190910190611ac3565b6001600160a01b0383166000908152609760205260408120805460ff191660011790555b818110156102d057600083838381811061021057610210611d62565b90506020028101906102229190611d78565b6102339060c081019060a001611b78565b6001600160a01b03160361025a576040516366856dc760e11b815260040160405180910390fd5b6001600160a01b038416600090815260976020526040902060010183838381811061028757610287611d62565b90506020028101906102999190611d78565b8154600181018355600092835260209092209091600302016102bb8282611f64565b505080806102c89061203f565b9150506101f4565b506040516001600160a01b038416907f3de6bfe55516f9cadcb09b7992370370609e179252c38173146ac026ecb40df090600090a261030f6001606555565b505050565b61031c610ab8565b610324610b17565b6001600160a01b0381166000908152609760205260408120805460ff19168155906103526001830182611ac3565b50506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a26103926001606555565b50565b61039d610ab8565b6103a76000610b77565b565b6033546001600160a01b031690565b60006097816103ca6020850185611b78565b6001600160a01b0316815260208101919091526040016000205460ff1661040457604051631d8730d160e31b815260040160405180910390fd5b6104116080830183612058565b90506104206060840184612058565b905014610443576040516001621398b960e31b0319815260040160405180910390fd5b81602001356000036104685760405163b4fa3fb360e01b815260040160405180910390fd5b60005b6104786080840184612058565b90508110156104d75761048e6080840184612058565b8281811061049e5761049e611d62565b905060200201356000036104c55760405163b4fa3fb360e01b815260040160405180910390fd5b806104cf8161203f565b91505061046b565b5060001960006097816104ed6020870187611b78565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561062757600084815260208082206040805160c0810182526003870290920180546001600160a01b0381168452600160a01b810460ff16151584860152600160a81b810460020b84840152600160c01b900463ffffffff16606084015260018101805483518187028101870190945280845293959194608087019491929084015b828210156105fa5760008481526020908190206040805180820190915260028502909101805463ffffffff1682526001908101548284015290835290920191016105b5565b50505090825250600291909101546001600160a01b03166020918201529082526001929092019101610530565b50505050905060005b8151811015610786576000805b61064a6060880188612058565b90508110156106fa5783838151811061066557610665611d62565b602002602001015160a001516001600160a01b031687806060019061068a9190612058565b8381811061069a5761069a611d62565b90506020020160208101906106af9190611b78565b6001600160a01b0316036106e8576106ca6080880188612058565b828181106106da576106da611d62565b9050602002013591506106fa565b806106f28161203f565b91505061063d565b508060000361071c57604051631291458360e01b815260040160405180910390fd5b600061076361072e6020890189611b78565b602089013561074360608b0160408c016120a1565b8588888151811061075657610756611d62565b6020026020010151610bc9565b905084811015610771578094505b5050808061077e9061203f565b915050610630565b5060001982036107a95760405163d41b1bb160e01b815260040160405180910390fd5b5092915050565b600054610100900460ff16158080156107d05750600054600160ff909116105b806107ea5750303b1580156107ea575060005460ff166001145b6108525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610875576000805461ff0019166101001790555b61087d610c01565b610885610c30565b61088e82610a42565b80156108d4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6040805180820190915260008152606060208201526001600160a01b038216600090815260976020908152604080832081518083018352815460ff16151581526001820180548451818702810187019095528085529195929486810194939192919084015b82821015610a3457600084815260208082206040805160c0810182526003870290920180546001600160a01b0381168452600160a01b810460ff16151584860152600160a81b810460020b84840152600160c01b900463ffffffff16606084015260018101805483518187028101870190945280845293959194608087019491929084015b82821015610a075760008481526020908190206040805180820190915260028502909101805463ffffffff1682526001908101548284015290835290920191016109c2565b50505090825250600291909101546001600160a01b0316602091820152908252600192909201910161093d565b505050915250909392505050565b610a4a610ab8565b6001600160a01b038116610aaf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610849565b61039281610b77565b33610ac16103a9565b6001600160a01b0316146103a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610849565b600260655403610b695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610849565b6002606555565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000816020015115610be957610be28686868686610c5f565b9050610bf8565b610bf586868585610e7f565b90505b95945050505050565b600054610100900460ff16610c285760405162461bcd60e51b8152600401610849906120be565b6103a761103a565b600054610100900460ff16610c575760405162461bcd60e51b8152600401610849906120be565b6103a761106a565b600080826000015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190612109565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d339190612109565b90506000896001600160a01b0316836001600160a01b03161490506000610d638760000151886060015184611091565b90506000610d7a828a670de0b6b3a76400006111fc565b90508915610e4e5760005b886080015151811015610e4c57600089608001518281518110610daa57610daa611d62565b602002602001015160000151905060008a608001518381518110610dd057610dd0611d62565b60200260200101516020015190506000610def8c600001518489611091565b9050610e04818e670de0b6b3a76400006111fc565b90506000610e128683611375565b905082811115610e3557604051634661db5960e01b815260040160405180910390fd5b505050508080610e449061203f565b915050610d85565b505b610e5a818686866113dd565b9050610e6f818c670de0b6b3a76400006111fc565b9c9b505050505050505050505050565b600080826000015190506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612126565b905060008460a001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190612126565b6040516378a051ad60e11b8152600481018990526001600160a01b038a8116602483015291925060009185169063f140a35a90604401602060405180830381865afa925050508015610fc6575060408051601f3d908101601f19168201909252610fc391810190612149565b60015b6110095760405162461bcd60e51b8152602060048201526014602482015273115e1d195c9b985b0818d85b1b0819985a5b195960621b6044820152606401610849565b905060006110178284611591565b905061102c8189670de0b6b3a76400006111fc565b9a9950505050505050505050565b600054610100900460ff166110615760405162461bcd60e51b8152600401610849906120be565b6103a733610b77565b600054610100900460ff16610b705760405162461bcd60e51b8152600401610849906120be565b6040805160028082526060820183526000928392919060208301908036833701905050905083816000815181106110ca576110ca611d62565b602002602001019063ffffffff16908163ffffffff16815250506000816001815181106110f9576110f9611d62565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526001600160a01b0386169063883bdbfd9061113a908490600401612162565b600060405180830381865afa92505050801561117857506040513d6000823e601f3d908101601f191682016040526111759190810190612273565b60015b611187576000199150506111f5565b600061119383886115e6565b9050856111a6576111a38161233e565b90505b60006111b18261164e565b905060006111e76001600160a01b0383166111d4670de0b6b3a764000082611e65565b6111e2600160601b80611e65565b6111fc565b96506111f595505050505050565b9392505050565b6000808060001985870985870292508281108382030391505080600003611235576000841161122a57600080fd5b5082900490506111f5565b80841161124157600080fd5b600084868809808403938111909203919050600061126186196001612360565b86169586900495938490049360008190030460010190506112828184611e65565b909317926000611293876003611e65565b60021890506112a28188611e65565b6112ad906002612373565b6112b79082611e65565b90506112c38188611e65565b6112ce906002612373565b6112d89082611e65565b90506112e48188611e65565b6112ef906002612373565b6112f99082611e65565b90506113058188611e65565b611310906002612373565b61131a9082611e65565b90506113268188611e65565b611331906002612373565b61133b9082611e65565b90506113478188611e65565b611352906002612373565b61135c9082611e65565b90506113688186611e65565b9998505050505050505050565b6000821580611382575081155b1561139057506000196113d7565b8183116113b8576113b36113a48484612373565b670de0b6b3a7640000856111fc565b6113d4565b6113d46113c58385612373565b670de0b6b3a7640000846111fc565b90505b92915050565b600080846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190612126565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190612126565b9050831561152d578060ff168260ff1611156114ec5760006114ca8284612386565b60ff1690506114da81600a612483565b6114e49089611e65565b975050611586565b8160ff168160ff1611156115285760006115068383612386565b60ff16905087156115265761151c81600a612483565b6114e490896124a5565b505b611586565b8160ff168160ff1611156115475760006114ca8383612386565b8060ff168260ff1611156115865760006115618284612386565b60ff16905087156115845761157781600a612483565b61158190896124a5565b97505b505b509495945050505050565b600060128260ff1611156115c6576115aa601283612386565b6115b590600a6124b9565b6115bf90846124a5565b90506113d7565b6115d1826012612386565b6115dc90600a6124b9565b6113d49084611e65565b600080836000815181106115fc576115fc611d62565b60200260200101518460018151811061161757611617611d62565b602002602001015161162991906124c8565b905061164661163e63ffffffff8516836124f5565b60060b611a5b565b949350505050565b60008060008360020b12611665578260020b611672565b8260020b61167290612533565b9050611681620d89e71961233e565b60020b8111156116b75760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610849565b6000816001166000036116ce57600160801b6116e0565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031690506002821615611715576080611710826ffff97272373d413259a46990580e213a611e65565b901c90505b600482161561173f57608061173a826ffff2e50f5f656932ef12357cf3c7fdcc611e65565b901c90505b6008821615611769576080611764826fffe5caca7e10e4e61c3624eaa0941cd0611e65565b901c90505b601082161561179357608061178e826fffcb9843d60f6159c9db58835c926644611e65565b901c90505b60208216156117bd5760806117b8826fff973b41fa98c081472e6896dfb254c0611e65565b901c90505b60408216156117e75760806117e2826fff2ea16466c96a3843ec78b326b52861611e65565b901c90505b608082161561181157608061180c826ffe5dee046a99a2a811c461f1969c3053611e65565b901c90505b61010082161561183c576080611837826ffcbe86c7900a88aedcffc83b479aa3a4611e65565b901c90505b610200821615611867576080611862826ff987a7253ac413176f2b074cf7815e54611e65565b901c90505b61040082161561189257608061188d826ff3392b0822b70005940c7a398e4b70f3611e65565b901c90505b6108008216156118bd5760806118b8826fe7159475a2c29b7443b29c7fa6e889d9611e65565b901c90505b6110008216156118e85760806118e3826fd097f3bdfd2022b8845ad8f792aa5825611e65565b901c90505b61200082161561191357608061190e826fa9f746462d870fdf8a65dc1f90e061e5611e65565b901c90505b61400082161561193e576080611939826f70d869a156d2a1b890bb3df62baf32f7611e65565b901c90505b618000821615611969576080611964826f31be135f97d08fd981231505542fcfa6611e65565b901c90505b62010000821615611995576080611990826f09aa508b5b7a84e1c677de54f3e99bc9611e65565b901c90505b620200008216156119c05760806119bb826e5d6af8dedb81196699c329225ee604611e65565b901c90505b620400008216156119ea5760806119e5826d2216e584f5fa1ea926041bedfe98611e65565b901c90505b62080000821615611a12576080611a0d826b048a170391f7dc42444e8fa2611e65565b901c90505b60008460020b1315611a2d57611a2a816000196124a5565b90505b611a3b600160201b8261254f565b15611a47576001611a4a565b60005b6116469060ff16602083901c612360565b80600281900b8114611abe5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201526534206269747360d01b6064820152608401610849565b919050565b508054600082556003029060005260206000209081019061039291905b80821115611b205780546001600160e01b03191681556000611b056001830182611b24565b506002810180546001600160a01b0319169055600301611ae0565b5090565b508054600082556002029060005260206000209081019061039291905b80821115611b2057805463ffffffff1916815560006001820155600201611b41565b6001600160a01b038116811461039257600080fd5b600060208284031215611b8a57600080fd5b81356111f581611b63565b600080600060408486031215611baa57600080fd5b8335611bb581611b63565b925060208401356001600160401b0380821115611bd157600080fd5b818601915086601f830112611be557600080fd5b813581811115611bf457600080fd5b8760208260051b8501011115611c0957600080fd5b6020830194508093505050509250925092565b600060208284031215611c2e57600080fd5b81356001600160401b03811115611c4457600080fd5b820160a081850312156111f557600080fd5b600060208083526060830184511515828501528185015160408081870152828251808552608094508488019150848160051b890101868501945060005b82811015611d5457898203607f19018452855180516001600160a01b03168352888101511515898401528581015160020b8684015260608082015163ffffffff908116918501919091528882015160c08a8601819052815190860181905260e0860192918c01916000915b80831015611d295783518051831686528e01518e860152938a0193928d019260019290920191611cfe565b5050505060a0918201516001600160a01b031693909101929092529487019492870192600101611c93565b509998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000823560be19833603018112611d8e57600080fd5b9190910192915050565b600081356113d781611b63565b80546001600160a01b0319166001600160a01b0392909216919091179055565b801515811461039257600080fd5b6000813563ffffffff811681146113d757600080fd5b6000808335601e19843603018112611e0057600080fd5b8301803591506001600160401b03821115611e1a57600080fd5b6020019150600681901b3603821315611e3257600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176113d7576113d7611e4f565b63ffffffff611e8a83611dd3565b1663ffffffff19825416178155602082013560018201555050565b600160401b831115611eb957611eb9611e39565b805483825580841015611f275760016001600160ff1b038281168314611ee157611ee1611e4f565b8086168614611ef257611ef2611e4f565b5060008381526020812086831b81019084841b015b80821015611f22578282558284830155600282019150611f07565b505050505b5060008181526020812083915b85811015611f5c57611f468383611e7c565b6040929092019160029190910190600101611f34565b505050505050565b8135611f6f81611b63565b611f798183611da5565b506020820135611f8881611dc5565b815460ff60a01b19811691151560a01b60ff60a01b1691821783556040840135600281900b8114611fb857600080fd5b8060a81b62ffffff60a81b168363ffffffff60a01b1984161717845550505061200a611fe660608401611dd3565b82805463ffffffff60c01b191660c09290921b63ffffffff60c01b16919091179055565b6120176080830183611de9565b612025818360018601611ea5565b50506108d461203660a08401611d98565b60028301611da5565b60006001820161205157612051611e4f565b5060010190565b6000808335601e1984360301811261206f57600080fd5b8301803591506001600160401b0382111561208957600080fd5b6020019150600581901b3603821315611e3257600080fd5b6000602082840312156120b357600080fd5b81356111f581611dc5565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561211b57600080fd5b81516111f581611b63565b60006020828403121561213857600080fd5b815160ff811681146111f557600080fd5b60006020828403121561215b57600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156121a057835163ffffffff168352928401929184019160010161217e565b50909695505050505050565b604051601f8201601f191681016001600160401b03811182821017156121d4576121d4611e39565b604052919050565b60006001600160401b038211156121f5576121f5611e39565b5060051b60200190565b600082601f83011261221057600080fd5b81516020612225612220836121dc565b6121ac565b82815260059290921b8401810191818101908684111561224457600080fd5b8286015b8481101561226857805161225b81611b63565b8352918301918301612248565b509695505050505050565b6000806040838503121561228657600080fd5b82516001600160401b038082111561229d57600080fd5b818501915085601f8301126122b157600080fd5b815160206122c1612220836121dc565b82815260059290921b840181019181810190898411156122e057600080fd5b948201945b8386101561230e5785518060060b81146122ff5760008081fd5b825294820194908201906122e5565b9188015191965090935050508082111561232757600080fd5b50612334858286016121ff565b9150509250929050565b60008160020b627fffff19810361235757612357611e4f565b60000392915050565b808201808211156113d7576113d7611e4f565b818103818111156113d7576113d7611e4f565b60ff82811682821603908111156113d7576113d7611e4f565b600181815b808511156123da5781600019048211156123c0576123c0611e4f565b808516156123cd57918102915b93841c93908002906123a4565b509250929050565b6000826123f1575060016113d7565b816123fe575060006113d7565b8160018114612414576002811461241e5761243a565b60019150506113d7565b60ff84111561242f5761242f611e4f565b50506001821b6113d7565b5060208310610133831016604e8410600b841016171561245d575081810a6113d7565b612467838361239f565b806000190482111561247b5761247b611e4f565b029392505050565b60006113d483836123e2565b634e487b7160e01b600052601260045260246000fd5b6000826124b4576124b461248f565b500490565b60006113d460ff8416836123e2565b600682810b9082900b03667fffffffffffff198112667fffffffffffff821317156113d7576113d7611e4f565b60008160060b8360060b8061250c5761250c61248f565b667fffffffffffff1982146000198214161561252a5761252a611e4f565b90059392505050565b6000600160ff1b820161254857612548611e4f565b5060000390565b60008261255e5761255e61248f565b50069056fea2646970667358221220fe3221c5283452754473d0e43ac79ae1af32a45a07227b19898f00cd00a5e1e764736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100835760003560e01c80631b69dc5f1461008857806338b1db46146100c05780635fa7b584146100d5578063715018a6146100e85780638da5cb5b146100f0578063a706ceb814610110578063c4d66de814610131578063dbc4131014610144578063f2fde38b14610164575b600080fd5b6100ab610096366004611b78565b60976020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100d36100ce366004611b95565b610177565b005b6100d36100e3366004611b78565b610314565b6100d3610395565b6100f86103a9565b6040516001600160a01b0390911681526020016100b7565b61012361011e366004611c1c565b6103b8565b6040519081526020016100b7565b6100d361013f366004611b78565b6107b0565b610157610152366004611b78565b6108d8565b6040516100b79190611c56565b6100d3610172366004611b78565b610a42565b61017f610ab8565b610187610b17565b60008190036101a9576040516333f3e07b60e11b815260040160405180910390fd5b6001600160a01b03831660009081526097602052604081206101d091600190910190611ac3565b6001600160a01b0383166000908152609760205260408120805460ff191660011790555b818110156102d057600083838381811061021057610210611d62565b90506020028101906102229190611d78565b6102339060c081019060a001611b78565b6001600160a01b03160361025a576040516366856dc760e11b815260040160405180910390fd5b6001600160a01b038416600090815260976020526040902060010183838381811061028757610287611d62565b90506020028101906102999190611d78565b8154600181018355600092835260209092209091600302016102bb8282611f64565b505080806102c89061203f565b9150506101f4565b506040516001600160a01b038416907f3de6bfe55516f9cadcb09b7992370370609e179252c38173146ac026ecb40df090600090a261030f6001606555565b505050565b61031c610ab8565b610324610b17565b6001600160a01b0381166000908152609760205260408120805460ff19168155906103526001830182611ac3565b50506040516001600160a01b038216907f4c910b69fe65a61f7531b9c5042b2329ca7179c77290aa7e2eb3afa3c8511fd390600090a26103926001606555565b50565b61039d610ab8565b6103a76000610b77565b565b6033546001600160a01b031690565b60006097816103ca6020850185611b78565b6001600160a01b0316815260208101919091526040016000205460ff1661040457604051631d8730d160e31b815260040160405180910390fd5b6104116080830183612058565b90506104206060840184612058565b905014610443576040516001621398b960e31b0319815260040160405180910390fd5b81602001356000036104685760405163b4fa3fb360e01b815260040160405180910390fd5b60005b6104786080840184612058565b90508110156104d75761048e6080840184612058565b8281811061049e5761049e611d62565b905060200201356000036104c55760405163b4fa3fb360e01b815260040160405180910390fd5b806104cf8161203f565b91505061046b565b5060001960006097816104ed6020870187611b78565b6001600160a01b03166001600160a01b03168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b8282101561062757600084815260208082206040805160c0810182526003870290920180546001600160a01b0381168452600160a01b810460ff16151584860152600160a81b810460020b84840152600160c01b900463ffffffff16606084015260018101805483518187028101870190945280845293959194608087019491929084015b828210156105fa5760008481526020908190206040805180820190915260028502909101805463ffffffff1682526001908101548284015290835290920191016105b5565b50505090825250600291909101546001600160a01b03166020918201529082526001929092019101610530565b50505050905060005b8151811015610786576000805b61064a6060880188612058565b90508110156106fa5783838151811061066557610665611d62565b602002602001015160a001516001600160a01b031687806060019061068a9190612058565b8381811061069a5761069a611d62565b90506020020160208101906106af9190611b78565b6001600160a01b0316036106e8576106ca6080880188612058565b828181106106da576106da611d62565b9050602002013591506106fa565b806106f28161203f565b91505061063d565b508060000361071c57604051631291458360e01b815260040160405180910390fd5b600061076361072e6020890189611b78565b602089013561074360608b0160408c016120a1565b8588888151811061075657610756611d62565b6020026020010151610bc9565b905084811015610771578094505b5050808061077e9061203f565b915050610630565b5060001982036107a95760405163d41b1bb160e01b815260040160405180910390fd5b5092915050565b600054610100900460ff16158080156107d05750600054600160ff909116105b806107ea5750303b1580156107ea575060005460ff166001145b6108525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610875576000805461ff0019166101001790555b61087d610c01565b610885610c30565b61088e82610a42565b80156108d4576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6040805180820190915260008152606060208201526001600160a01b038216600090815260976020908152604080832081518083018352815460ff16151581526001820180548451818702810187019095528085529195929486810194939192919084015b82821015610a3457600084815260208082206040805160c0810182526003870290920180546001600160a01b0381168452600160a01b810460ff16151584860152600160a81b810460020b84840152600160c01b900463ffffffff16606084015260018101805483518187028101870190945280845293959194608087019491929084015b82821015610a075760008481526020908190206040805180820190915260028502909101805463ffffffff1682526001908101548284015290835290920191016109c2565b50505090825250600291909101546001600160a01b0316602091820152908252600192909201910161093d565b505050915250909392505050565b610a4a610ab8565b6001600160a01b038116610aaf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610849565b61039281610b77565b33610ac16103a9565b6001600160a01b0316146103a75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610849565b600260655403610b695760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610849565b6002606555565b6001606555565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000816020015115610be957610be28686868686610c5f565b9050610bf8565b610bf586868585610e7f565b90505b95945050505050565b600054610100900460ff16610c285760405162461bcd60e51b8152600401610849906120be565b6103a761103a565b600054610100900460ff16610c575760405162461bcd60e51b8152600401610849906120be565b6103a761106a565b600080826000015190506000816001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ca9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ccd9190612109565b90506000826001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d339190612109565b90506000896001600160a01b0316836001600160a01b03161490506000610d638760000151886060015184611091565b90506000610d7a828a670de0b6b3a76400006111fc565b90508915610e4e5760005b886080015151811015610e4c57600089608001518281518110610daa57610daa611d62565b602002602001015160000151905060008a608001518381518110610dd057610dd0611d62565b60200260200101516020015190506000610def8c600001518489611091565b9050610e04818e670de0b6b3a76400006111fc565b90506000610e128683611375565b905082811115610e3557604051634661db5960e01b815260040160405180910390fd5b505050508080610e449061203f565b915050610d85565b505b610e5a818686866113dd565b9050610e6f818c670de0b6b3a76400006111fc565b9c9b505050505050505050505050565b600080826000015190506000866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eed9190612126565b905060008460a001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f579190612126565b6040516378a051ad60e11b8152600481018990526001600160a01b038a8116602483015291925060009185169063f140a35a90604401602060405180830381865afa925050508015610fc6575060408051601f3d908101601f19168201909252610fc391810190612149565b60015b6110095760405162461bcd60e51b8152602060048201526014602482015273115e1d195c9b985b0818d85b1b0819985a5b195960621b6044820152606401610849565b905060006110178284611591565b905061102c8189670de0b6b3a76400006111fc565b9a9950505050505050505050565b600054610100900460ff166110615760405162461bcd60e51b8152600401610849906120be565b6103a733610b77565b600054610100900460ff16610b705760405162461bcd60e51b8152600401610849906120be565b6040805160028082526060820183526000928392919060208301908036833701905050905083816000815181106110ca576110ca611d62565b602002602001019063ffffffff16908163ffffffff16815250506000816001815181106110f9576110f9611d62565b63ffffffff9092166020928302919091019091015260405163883bdbfd60e01b81526001600160a01b0386169063883bdbfd9061113a908490600401612162565b600060405180830381865afa92505050801561117857506040513d6000823e601f3d908101601f191682016040526111759190810190612273565b60015b611187576000199150506111f5565b600061119383886115e6565b9050856111a6576111a38161233e565b90505b60006111b18261164e565b905060006111e76001600160a01b0383166111d4670de0b6b3a764000082611e65565b6111e2600160601b80611e65565b6111fc565b96506111f595505050505050565b9392505050565b6000808060001985870985870292508281108382030391505080600003611235576000841161122a57600080fd5b5082900490506111f5565b80841161124157600080fd5b600084868809808403938111909203919050600061126186196001612360565b86169586900495938490049360008190030460010190506112828184611e65565b909317926000611293876003611e65565b60021890506112a28188611e65565b6112ad906002612373565b6112b79082611e65565b90506112c38188611e65565b6112ce906002612373565b6112d89082611e65565b90506112e48188611e65565b6112ef906002612373565b6112f99082611e65565b90506113058188611e65565b611310906002612373565b61131a9082611e65565b90506113268188611e65565b611331906002612373565b61133b9082611e65565b90506113478188611e65565b611352906002612373565b61135c9082611e65565b90506113688186611e65565b9998505050505050505050565b6000821580611382575081155b1561139057506000196113d7565b8183116113b8576113b36113a48484612373565b670de0b6b3a7640000856111fc565b6113d4565b6113d46113c58385612373565b670de0b6b3a7640000846111fc565b90505b92915050565b600080846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561141e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114429190612126565b90506000846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611484573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114a89190612126565b9050831561152d578060ff168260ff1611156114ec5760006114ca8284612386565b60ff1690506114da81600a612483565b6114e49089611e65565b975050611586565b8160ff168160ff1611156115285760006115068383612386565b60ff16905087156115265761151c81600a612483565b6114e490896124a5565b505b611586565b8160ff168160ff1611156115475760006114ca8383612386565b8060ff168260ff1611156115865760006115618284612386565b60ff16905087156115845761157781600a612483565b61158190896124a5565b97505b505b509495945050505050565b600060128260ff1611156115c6576115aa601283612386565b6115b590600a6124b9565b6115bf90846124a5565b90506113d7565b6115d1826012612386565b6115dc90600a6124b9565b6113d49084611e65565b600080836000815181106115fc576115fc611d62565b60200260200101518460018151811061161757611617611d62565b602002602001015161162991906124c8565b905061164661163e63ffffffff8516836124f5565b60060b611a5b565b949350505050565b60008060008360020b12611665578260020b611672565b8260020b61167290612533565b9050611681620d89e71961233e565b60020b8111156116b75760405162461bcd60e51b81526020600482015260016024820152601560fa1b6044820152606401610849565b6000816001166000036116ce57600160801b6116e0565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031690506002821615611715576080611710826ffff97272373d413259a46990580e213a611e65565b901c90505b600482161561173f57608061173a826ffff2e50f5f656932ef12357cf3c7fdcc611e65565b901c90505b6008821615611769576080611764826fffe5caca7e10e4e61c3624eaa0941cd0611e65565b901c90505b601082161561179357608061178e826fffcb9843d60f6159c9db58835c926644611e65565b901c90505b60208216156117bd5760806117b8826fff973b41fa98c081472e6896dfb254c0611e65565b901c90505b60408216156117e75760806117e2826fff2ea16466c96a3843ec78b326b52861611e65565b901c90505b608082161561181157608061180c826ffe5dee046a99a2a811c461f1969c3053611e65565b901c90505b61010082161561183c576080611837826ffcbe86c7900a88aedcffc83b479aa3a4611e65565b901c90505b610200821615611867576080611862826ff987a7253ac413176f2b074cf7815e54611e65565b901c90505b61040082161561189257608061188d826ff3392b0822b70005940c7a398e4b70f3611e65565b901c90505b6108008216156118bd5760806118b8826fe7159475a2c29b7443b29c7fa6e889d9611e65565b901c90505b6110008216156118e85760806118e3826fd097f3bdfd2022b8845ad8f792aa5825611e65565b901c90505b61200082161561191357608061190e826fa9f746462d870fdf8a65dc1f90e061e5611e65565b901c90505b61400082161561193e576080611939826f70d869a156d2a1b890bb3df62baf32f7611e65565b901c90505b618000821615611969576080611964826f31be135f97d08fd981231505542fcfa6611e65565b901c90505b62010000821615611995576080611990826f09aa508b5b7a84e1c677de54f3e99bc9611e65565b901c90505b620200008216156119c05760806119bb826e5d6af8dedb81196699c329225ee604611e65565b901c90505b620400008216156119ea5760806119e5826d2216e584f5fa1ea926041bedfe98611e65565b901c90505b62080000821615611a12576080611a0d826b048a170391f7dc42444e8fa2611e65565b901c90505b60008460020b1315611a2d57611a2a816000196124a5565b90505b611a3b600160201b8261254f565b15611a47576001611a4a565b60005b6116469060ff16602083901c612360565b80600281900b8114611abe5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203260448201526534206269747360d01b6064820152608401610849565b919050565b508054600082556003029060005260206000209081019061039291905b80821115611b205780546001600160e01b03191681556000611b056001830182611b24565b506002810180546001600160a01b0319169055600301611ae0565b5090565b508054600082556002029060005260206000209081019061039291905b80821115611b2057805463ffffffff1916815560006001820155600201611b41565b6001600160a01b038116811461039257600080fd5b600060208284031215611b8a57600080fd5b81356111f581611b63565b600080600060408486031215611baa57600080fd5b8335611bb581611b63565b925060208401356001600160401b0380821115611bd157600080fd5b818601915086601f830112611be557600080fd5b813581811115611bf457600080fd5b8760208260051b8501011115611c0957600080fd5b6020830194508093505050509250925092565b600060208284031215611c2e57600080fd5b81356001600160401b03811115611c4457600080fd5b820160a081850312156111f557600080fd5b600060208083526060830184511515828501528185015160408081870152828251808552608094508488019150848160051b890101868501945060005b82811015611d5457898203607f19018452855180516001600160a01b03168352888101511515898401528581015160020b8684015260608082015163ffffffff908116918501919091528882015160c08a8601819052815190860181905260e0860192918c01916000915b80831015611d295783518051831686528e01518e860152938a0193928d019260019290920191611cfe565b5050505060a0918201516001600160a01b031693909101929092529487019492870192600101611c93565b509998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000823560be19833603018112611d8e57600080fd5b9190910192915050565b600081356113d781611b63565b80546001600160a01b0319166001600160a01b0392909216919091179055565b801515811461039257600080fd5b6000813563ffffffff811681146113d757600080fd5b6000808335601e19843603018112611e0057600080fd5b8301803591506001600160401b03821115611e1a57600080fd5b6020019150600681901b3603821315611e3257600080fd5b9250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820281158282048414176113d7576113d7611e4f565b63ffffffff611e8a83611dd3565b1663ffffffff19825416178155602082013560018201555050565b600160401b831115611eb957611eb9611e39565b805483825580841015611f275760016001600160ff1b038281168314611ee157611ee1611e4f565b8086168614611ef257611ef2611e4f565b5060008381526020812086831b81019084841b015b80821015611f22578282558284830155600282019150611f07565b505050505b5060008181526020812083915b85811015611f5c57611f468383611e7c565b6040929092019160029190910190600101611f34565b505050505050565b8135611f6f81611b63565b611f798183611da5565b506020820135611f8881611dc5565b815460ff60a01b19811691151560a01b60ff60a01b1691821783556040840135600281900b8114611fb857600080fd5b8060a81b62ffffff60a81b168363ffffffff60a01b1984161717845550505061200a611fe660608401611dd3565b82805463ffffffff60c01b191660c09290921b63ffffffff60c01b16919091179055565b6120176080830183611de9565b612025818360018601611ea5565b50506108d461203660a08401611d98565b60028301611da5565b60006001820161205157612051611e4f565b5060010190565b6000808335601e1984360301811261206f57600080fd5b8301803591506001600160401b0382111561208957600080fd5b6020019150600581901b3603821315611e3257600080fd5b6000602082840312156120b357600080fd5b81356111f581611dc5565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561211b57600080fd5b81516111f581611b63565b60006020828403121561213857600080fd5b815160ff811681146111f557600080fd5b60006020828403121561215b57600080fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156121a057835163ffffffff168352928401929184019160010161217e565b50909695505050505050565b604051601f8201601f191681016001600160401b03811182821017156121d4576121d4611e39565b604052919050565b60006001600160401b038211156121f5576121f5611e39565b5060051b60200190565b600082601f83011261221057600080fd5b81516020612225612220836121dc565b6121ac565b82815260059290921b8401810191818101908684111561224457600080fd5b8286015b8481101561226857805161225b81611b63565b8352918301918301612248565b509695505050505050565b6000806040838503121561228657600080fd5b82516001600160401b038082111561229d57600080fd5b818501915085601f8301126122b157600080fd5b815160206122c1612220836121dc565b82815260059290921b840181019181810190898411156122e057600080fd5b948201945b8386101561230e5785518060060b81146122ff5760008081fd5b825294820194908201906122e5565b9188015191965090935050508082111561232757600080fd5b50612334858286016121ff565b9150509250929050565b60008160020b627fffff19810361235757612357611e4f565b60000392915050565b808201808211156113d7576113d7611e4f565b818103818111156113d7576113d7611e4f565b60ff82811682821603908111156113d7576113d7611e4f565b600181815b808511156123da5781600019048211156123c0576123c0611e4f565b808516156123cd57918102915b93841c93908002906123a4565b509250929050565b6000826123f1575060016113d7565b816123fe575060006113d7565b8160018114612414576002811461241e5761243a565b60019150506113d7565b60ff84111561242f5761242f611e4f565b50506001821b6113d7565b5060208310610133831016604e8410600b841016171561245d575081810a6113d7565b612467838361239f565b806000190482111561247b5761247b611e4f565b029392505050565b60006113d483836123e2565b634e487b7160e01b600052601260045260246000fd5b6000826124b4576124b461248f565b500490565b60006113d460ff8416836123e2565b600682810b9082900b03667fffffffffffff198112667fffffffffffff821317156113d7576113d7611e4f565b60008160060b8360060b8061250c5761250c61248f565b667fffffffffffff1982146000198214161561252a5761252a611e4f565b90059392505050565b6000600160ff1b820161254857612548611e4f565b5060000390565b60008261255e5761255e61248f565b50069056fea2646970667358221220fe3221c5283452754473d0e43ac79ae1af32a45a07227b19898f00cd00a5e1e764736f6c63430008110033",
  "devdoc": {
    "details": "Calculates the USD value of an asset using multiple pools.      The contract supports both centralized liquidity (CL) pools and AMM pools.      In this refactored version, each pool config stores a single short TWAP duration (used      to derive the price) and an array of TWAP deviation checks. Each deviation check      consists of a TWAP duration and a maximum allowed deviation. When enabled, the oracle      will iterate over these checks to verify that the short TWAP price does not deviate      too much from prices calculated over other durations.",
    "kind": "dev",
    "methods": {
      "configureToken(address,(address,bool,int24,uint32,(uint32,uint256)[],address)[])": {
        "details": "Only callable by the owner. Reverts if no pools are provided or if a base asset is invalid.",
        "params": {
          "pools": "Array of pool configurations for the token.",
          "token": "The address of the token to configure."
        }
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      },
      "getFullTokenConfig(address)": {
        "params": {
          "token": "The address of the token to query"
        },
        "returns": {
          "_0": "The complete TokenConfig struct containing the token's configuration"
        }
      },
      "initialize(address)": {
        "params": {
          "_initialOwner": "The address of the initial owner."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeToken(address)": {
        "details": "Only callable by the owner.",
        "params": {
          "token": "The address of the token to remove."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "BaseOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "configureToken(address,(address,bool,int24,uint32,(uint32,uint256)[],address)[])": {
        "notice": "Configures a token with its associated pools."
      },
      "getDollarValue((address,uint256,bool,address[],uint256[]))": {
        "notice": "Calculates the USD value of an asset based on its configured pools.         Each pool returns the full USD value for the provided amount."
      },
      "getFullTokenConfig(address)": {
        "notice": "Retrieves the full configuration for a token."
      },
      "initialize(address)": {
        "notice": "Initializes the contract and sets the initial owner."
      },
      "removeToken(address)": {
        "notice": "Removes a token and its associated pools from the configuration."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 755,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 314,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 3993,
        "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
        "label": "tokenConfigs",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_struct(TokenConfig)3988_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(PoolConfig)3981_storage)dyn_storage": {
        "base": "t_struct(PoolConfig)3981_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseOracle.PoolConfig[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(TWAPCheck)3966_storage)dyn_storage": {
        "base": "t_struct(TWAPCheck)3966_storage",
        "encoding": "dynamic_array",
        "label": "struct BaseOracle.TWAPCheck[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_struct(TokenConfig)3988_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseOracle.TokenConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenConfig)3988_storage"
      },
      "t_struct(PoolConfig)3981_storage": {
        "encoding": "inplace",
        "label": "struct BaseOracle.PoolConfig",
        "members": [
          {
            "astId": 3968,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "poolAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3970,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "isCL",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3972,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "tickSpacing",
            "offset": 21,
            "slot": "0",
            "type": "t_int24"
          },
          {
            "astId": 3974,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "shortTwap",
            "offset": 24,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3978,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "twapChecks",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(TWAPCheck)3966_storage)dyn_storage"
          },
          {
            "astId": 3980,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "baseAsset",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TWAPCheck)3966_storage": {
        "encoding": "inplace",
        "label": "struct BaseOracle.TWAPCheck",
        "members": [
          {
            "astId": 3963,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "duration",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 3965,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "maxDeviation",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TokenConfig)3988_storage": {
        "encoding": "inplace",
        "label": "struct BaseOracle.TokenConfig",
        "members": [
          {
            "astId": 3983,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "isConfigured",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3987,
            "contract": "contracts/oracle/BaseOracle.sol:BaseOracle",
            "label": "pools",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_struct(PoolConfig)3981_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}