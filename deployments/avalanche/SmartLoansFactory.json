{
  "address": "0x2db7c0cd218f5f313e74639F559B829D0Cabc2dE",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "collateralAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        }
      ],
      "name": "SmartLoanCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "canBorrow",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "changeOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_fundedAsset",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "createAndFundLoan",
      "outputs": [
        {
          "internalType": "contract SmartLoanDiamondBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createLoan",
      "outputs": [
        {
          "internalType": "contract SmartLoanDiamondBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLoans",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getLoanForOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "getLoans",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_loans",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLoansLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_loan",
          "type": "address"
        }
      ],
      "name": "getOwnerOfLoan",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_smartLoanDiamond",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "loansToOwners",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ownersToLoans",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "smartLoanDiamond",
      "outputs": [
        {
          "internalType": "contract SmartLoanDiamondBeacon",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e928ec2c6a0b0e2f1040ff21987a7539bcd2d5827a1ecf64732c841da2a5e6a",
  "receipt": {
    "to": null,
    "from": "0x000000F406CA147030BE7069149e4a7423E3A264",
    "contractAddress": "0x2db7c0cd218f5f313e74639F559B829D0Cabc2dE",
    "transactionIndex": 0,
    "gasUsed": "3178949",
    "logsBloom": "0x
    "blockHash": "0x191d1dfcb75a9bc84d76236b1ecd3ec43cc29ce6e03103ecf4b702d7018db8ac",
    "transactionHash": "0x6e928ec2c6a0b0e2f1040ff21987a7539bcd2d5827a1ecf64732c841da2a5e6a",
    "logs": [],
    "blockNumber": 30394380,
    "cumulativeGasUsed": "3178949",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "62324a91b53d21614245c268c9be54fa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"collateralAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"SmartLoanCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"canBorrow\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"changeOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fundedAsset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"createAndFundLoan\",\"outputs\":[{\"internalType\":\"contract SmartLoanDiamondBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createLoan\",\"outputs\":[{\"internalType\":\"contract SmartLoanDiamondBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLoans\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getLoanForOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"getLoans\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_loans\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLoansLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_loan\",\"type\":\"address\"}],\"name\":\"getOwnerOfLoan\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_smartLoanDiamond\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"loansToOwners\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownersToLoans\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smartLoanDiamond\",\"outputs\":[{\"internalType\":\"contract SmartLoanDiamondBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract responsible for creating new instances of SmartLoans (SmartLoanDiamondBeacon). It's possible to either simply create a new loan or create and fund it with an ERC20 asset as well as borrow in a single transaction. At the time of creating a loan, SmartLoansFactory contract is the owner for the sake of being able to perform the fund() and borrow() operations. At the end of the createAndFundLoan the ownership is transferred to the msg.sender. It's also responsible for keeping track of the loans, ensuring one loan per wallet rule, ownership transfers proposals/execution and authorizes registered loans to borrow from lending pools.\",\"events\":{\"SmartLoanCreated(address,address,bytes32,uint256)\":{\"details\":\"emitted after creating a loan by the owner\",\"params\":{\"accountAddress\":\"address of a new SmartLoanDiamondBeacon\",\"collateralAmount\":\"amount of asset used as initial collateral*\",\"collateralAsset\":\"asset used as initial collateral\",\"creator\":\"account creating a SmartLoanDiamondBeacon\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"SmartLoansFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SmartLoansFactory.sol\":\"SmartLoansFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0x0edeb16b9821ae2b16e9d69c383b38d3ad2fbb3e0c06cf809a0786d96e602551\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBeacon.sol\\\";\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\\n *\\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\\n * conflict with the storage layout of the implementation behind the proxy.\\n *\\n * _Available since v3.4._\\n */\\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IBeacon(_getBeacon()).implementation();\\n    }\\n\\n    /**\\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract.\\n     * - The implementation returned by `beacon` must be a contract.\\n     */\\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n}\\n\",\"keccak256\":\"0x54878f0d2f40b5e13f84977bcd3c71d4c38581414e7efb4909cb16dd3ace392f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfe1b7a9aa2a530a9e705b220e26cd584e2fbdc9602a3a1066032b12816b46aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x816269b87f6d7fdbac50710b9bd7ecbea0afc660ed4ea8a4441d5f3d163f9e61\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"./lib/local/DeploymentConstants.sol\\\";\\n\\n/**\\n * DiamondHelper\\n * Helper methods\\n **/\\ncontract DiamondHelper {\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\n    }\\n}\",\"keccak256\":\"0x0e8b714ef0a7ffa83e727de6aa2b598e46fcc66d4b0f7c2d3e35b01b39fcceb6\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\nimport \\\"./VestingDistributor.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    VestingDistributor public vestingDistributor;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setVestingDistributor(address _distributor) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(_distributor) && _distributor != address(0)) revert NotAContract(_distributor);\\n        vestingDistributor = VestingDistributor(_distributor);\\n\\n        emit VestingDistributorChanged(_distributor, block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\n\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual  {\\n        depositOnBehalf(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * Deposits the amount on behalf of `_of` user.\\n     * It updates `_of` user deposited balance, total deposited and rates\\n     **/\\n    function depositOnBehalf(uint256 _amount, address _of) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n        require(_of != address(0), \\\"Address zero\\\");\\n        require(_of != address(this), \\\"Cannot deposit on behalf of pool\\\");\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(_of);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(_of, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, _of);\\n        }\\n\\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function name() public virtual pure returns(string memory _name){\\n        _name = \\\"\\\";\\n    }\\n\\n    function symbol() public virtual pure returns(string memory _symbol){\\n        _symbol = \\\"\\\";\\n    }\\n\\n    function decimals() public virtual pure returns(uint8 decimals){\\n        decimals = 0;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\n        return 0.9e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns full pool status\\n     */\\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\\n        return [\\n            totalSupply(),\\n            getDepositRate(),\\n            getBorrowingRate(),\\n            totalBorrowed(),\\n            getMaxPoolUtilisationForBorrowing()\\n        ];\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n        if(amount > _deposited[account] - (vestingDistributor.locked(account) - vestingDistributor.availableToWithdraw(account))) revert BurnAmountExceedsAvailableForUser();\\n\\n        uint256 availableUnvested = _deposited[account] - vestingDistributor.locked(account);\\n        if (amount > availableUnvested) {\\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\\n        }\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user deposits funds on behalf of other user\\n     * @param user the address performing the deposit\\n     * @param _of the address on behalf of which the deposit is being performed\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing vesting distributor\\n    * @param distributor an address of the newly set distributor\\n    * @param timestamp of the distributor change\\n    **/\\n    event VestingDistributorChanged(address indexed distributor, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // ERC20: burn amount exceeds current amount available (including vesting)\\n    error BurnAmountExceedsAvailableForUser();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x4113d96ccca87901081115ccf840f040bbe3fedec6bb96da71673e1dafc49419\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\n// contract that uses keccak slots instead of the standard storage layout.\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n */\\nabstract contract ReentrancyGuardKeccak {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rgs._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rgs._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xff292b8761ea7ade758ddc700e6e8b8727210285859db6a48d7bba1778ab7e1a\",\"license\":\"MIT\"},\"contracts/SmartLoanDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\nimport {IDiamondCut} from \\\"./interfaces/IDiamondCut.sol\\\";\\n\\n/**\\n * @title SmartLoanDiamondBeacon\\n * A contract that is authorised to borrow funds using delegated credit.\\n * It maintains solvency calculating the current value of assets and borrowings.\\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\\n * It permits only a limited and safe token transfer.\\n *\\n */\\n\\ncontract SmartLoanDiamondBeacon {\\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\\n        DiamondStorageLib.setContractOwner(_contractOwner);\\n        DiamondStorageLib.setContractPauseAdmin(_contractOwner);\\n\\n        // Add the diamondCut external function from the diamondCutFacet\\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\\n        bytes4[] memory functionSelectors = new bytes4[](3);\\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\\n        functionSelectors[1] = IDiamondCut.pause.selector;\\n        functionSelectors[2] = IDiamondCut.unpause.selector;\\n        cut[0] = IDiamondCut.FacetCut({\\n        facetAddress : _diamondCutFacet,\\n        action : IDiamondCut.FacetCutAction.Add,\\n        functionSelectors : functionSelectors\\n        });\\n        DiamondStorageLib.diamondCut(cut, address(0), \\\"\\\");\\n\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        // diamondCut(); unpause()\\n        ds.canBeExecutedWhenPaused[0x1f931c1c] = true;\\n        ds.canBeExecutedWhenPaused[0x3f4ba83a] = true;\\n    }\\n\\n    function implementation() public view returns (address) {\\n        return address(this);\\n    }\\n\\n    function canBeExecutedWhenPaused(bytes4 methodSig) external view returns (bool) {\\n        return DiamondStorageLib.getPausedMethodExemption(methodSig);\\n    }\\n\\n    function setPausedMethodExemptions(bytes4[] memory methodSigs, bool[] memory values) public {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n\\n        for(uint i; i<methodSigs.length; i++){\\n            require(!(methodSigs[i] == 0x3f4ba83a && values[i] == false), \\\"The unpause() method must be available during the paused state.\\\");\\n            ds.canBeExecutedWhenPaused[methodSigs[i]] = values[i];\\n        }\\n    }\\n\\n    function getStatus() public view returns(bool) {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        return ds._active;\\n    }\\n\\n    function implementation(bytes4 funcSignature) public view notPausedOrUpgrading(funcSignature) returns (address) {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        // get facet from function selector\\n        address facet = ds.selectorToFacetAndPosition[funcSignature].facetAddress;\\n        require(facet != address(0), \\\"Diamond: Function does not exist\\\");\\n        // Execute external function from facet using delegatecall and return any value.\\n        return facet;\\n    }\\n\\n\\n    // Find facet for function that is called and execute the\\n    // function if a facet is found and return any value.\\n    fallback() external payable {\\n        address facet = implementation(msg.sig);\\n        // Execute external function from facet using delegatecall and return any value.\\n        assembly {\\n        // copy function selector and any arguments\\n            calldatacopy(0, 0, calldatasize())\\n        // execute function call using the facet\\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\\n        // get any return value\\n            returndatacopy(0, 0, returndatasize())\\n        // return any return value or error back to the caller\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return (0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\n        DiamondStorageLib.setProposedOwner(_newOwner);\\n\\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\\n    }\\n\\n    function proposeBeaconPauseAdminOwnershipTransfer(address _newPauseAdmin) external {\\n        DiamondStorageLib.enforceIsPauseAdmin();\\n        require(_newPauseAdmin != msg.sender, \\\"Can't propose oneself as a contract pauseAdmin\\\");\\n        DiamondStorageLib.setProposedPauseAdmin(_newPauseAdmin);\\n\\n        emit PauseAdminOwnershipProposalCreated(msg.sender, _newPauseAdmin);\\n    }\\n\\n    function acceptBeaconOwnership() external {\\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\n        DiamondStorageLib.setContractOwner(msg.sender);\\n        DiamondStorageLib.setProposedOwner(address(0));\\n\\n        emit OwnershipProposalAccepted(msg.sender);\\n    }\\n\\n    function acceptBeaconPauseAdminOwnership() external {\\n        require(DiamondStorageLib.proposedPauseAdmin() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\n        DiamondStorageLib.setContractPauseAdmin(msg.sender);\\n        DiamondStorageLib.setProposedPauseAdmin(address(0));\\n\\n        emit PauseAdminOwnershipProposalAccepted(msg.sender);\\n    }\\n\\n    modifier notPausedOrUpgrading(bytes4 funcSignature) {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        if(!ds._active){\\n            if(!ds.canBeExecutedWhenPaused[funcSignature]){\\n                revert(\\\"ProtocolUpgrade: paused.\\\");\\n            }\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after creating a pauseAdmin transfer proposal by the pauseAdmin\\n     * @param pauseAdmin address of the current pauseAdmin\\n     * @param proposed address of the proposed pauseAdmin\\n     **/\\n    event PauseAdminOwnershipProposalCreated(address indexed pauseAdmin, address indexed proposed);\\n\\n    /**\\n     * @dev emitted after accepting a pauseAdmin transfer proposal by the new pauseAdmin\\n     * @param newPauseAdmin address of the new pauseAdmin\\n     **/\\n    event PauseAdminOwnershipProposalAccepted(address indexed newPauseAdmin);\\n\\n    /**\\n     * @dev emitted after creating a ownership transfer proposal by the owner\\n     * @param owner address of the current owner\\n     * @param proposed address of the proposed owner\\n     **/\\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\\n\\n    /**\\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\\n     * @param newOwner address of the new owner\\n     **/\\n    event OwnershipProposalAccepted(address indexed newOwner);\\n}\",\"keccak256\":\"0x0bcb4fc8253ee8bd0f1b5e8daada782b49691e5bca795e9ef29db845d7ae7d79\",\"license\":\"BUSL-1.1\"},\"contracts/SmartLoansFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: e40b4521159db652a16d69cdc40818f53b516916;\\npragma solidity 0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./SmartLoanDiamondBeacon.sol\\\";\\nimport \\\"./proxies/SmartLoanDiamondProxy.sol\\\";\\nimport \\\"./facets/AssetsOperationsFacet.sol\\\";\\nimport \\\"./facets/OwnershipFacet.sol\\\";\\nimport \\\"./facets/SmartLoanViewFacet.sol\\\";\\n\\n/**\\n * @title SmartLoansFactory\\n * @dev Contract responsible for creating new instances of SmartLoans (SmartLoanDiamondBeacon).\\n * It's possible to either simply create a new loan or create and fund it with an ERC20 asset as well as borrow in a single transaction.\\n * At the time of creating a loan, SmartLoansFactory contract is the owner for the sake of being able to perform the fund() and borrow() operations.\\n * At the end of the createAndFundLoan the ownership is transferred to the msg.sender.\\n * It's also responsible for keeping track of the loans, ensuring one loan per wallet rule, ownership transfers proposals/execution and\\n * authorizes registered loans to borrow from lending pools.\\n */\\ncontract SmartLoansFactory is OwnableUpgradeable, IBorrowersRegistry, ProxyConnector {\\n    using TransferHelper for address;\\n    using TransferHelper for address payable;\\n\\n    modifier hasNoLoan() {\\n        require(!_hasLoan(msg.sender), \\\"Only one loan per owner is allowed\\\");\\n        _;\\n    }\\n\\n\\n    SmartLoanDiamondBeacon public smartLoanDiamond;\\n\\n    mapping(address => address) public ownersToLoans;\\n    mapping(address => address) public loansToOwners;\\n\\n    address[] loans;\\n\\n    function _hasLoan(address user) internal view returns (bool) {\\n        return ownersToLoans[user] != address(0);\\n    }\\n\\n    function changeOwnership(address _newOwner) public {\\n        address loan = msg.sender;\\n        address oldOwner = loansToOwners[loan];\\n\\n        require(oldOwner != address(0), \\\"Only a SmartLoan can change it's owner\\\");\\n        require(!_hasLoan(_newOwner), \\\"New owner already has a loan\\\");\\n\\n        ownersToLoans[oldOwner] = address(0);\\n        ownersToLoans[_newOwner] = loan;\\n        loansToOwners[loan] = _newOwner;\\n    }\\n\\n    function initialize(address payable _smartLoanDiamond) external initializer {\\n        smartLoanDiamond = SmartLoanDiamondBeacon(_smartLoanDiamond);\\n        __Ownable_init();\\n    }\\n\\n    function createLoan() public virtual hasNoLoan returns (SmartLoanDiamondBeacon) {\\n        SmartLoanDiamondProxy beaconProxy = new SmartLoanDiamondProxy(\\n            payable(address(smartLoanDiamond)),\\n        // Setting SLFactory as the initial owner and then using .transferOwnership to change the owner to msg.sender\\n        // It is possible to set msg.sender as the initial owner if our loan-creation flow would change\\n            abi.encodeWithSelector(SmartLoanViewFacet.initialize.selector, msg.sender)\\n        );\\n        SmartLoanDiamondBeacon smartLoan = SmartLoanDiamondBeacon(payable(address(beaconProxy)));\\n\\n        //Update registry and emit event\\n        updateRegistry(address(smartLoan), msg.sender);\\n\\n        emit SmartLoanCreated(address(smartLoan), msg.sender, \\\"\\\", 0);\\n        return smartLoan;\\n    }\\n\\n    function createAndFundLoan(bytes32 _fundedAsset, address _assetAddress, uint256 _amount) public virtual hasNoLoan returns (SmartLoanDiamondBeacon) {\\n        SmartLoanDiamondProxy beaconProxy = new SmartLoanDiamondProxy(payable(address(smartLoanDiamond)),\\n            abi.encodeWithSelector(SmartLoanViewFacet.initialize.selector, msg.sender)\\n        );\\n        SmartLoanDiamondBeacon smartLoan = SmartLoanDiamondBeacon(payable(address(beaconProxy)));\\n\\n        //Fund account with own funds and credit\\n        IERC20Metadata token = IERC20Metadata(_assetAddress);\\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\\n        address(token).safeApprove(address(smartLoan), _amount);\\n\\n        //Update registry and emit event\\n        updateRegistry(address(smartLoan), msg.sender);\\n\\n        (bool success, bytes memory result) = address(smartLoan).call(abi.encodeWithSelector(AssetsOperationsFacet.fund.selector, _fundedAsset, _amount));\\n        ProxyConnector._prepareReturnValue(success, result);\\n\\n        emit SmartLoanCreated(address(smartLoan), msg.sender, _fundedAsset, _amount);\\n\\n        return smartLoan;\\n    }\\n\\n    function updateRegistry(address loan, address owner) internal {\\n        ownersToLoans[owner] = loan;\\n        loansToOwners[loan] = owner;\\n        loans.push(loan);\\n    }\\n\\n    function canBorrow(address _account) external view override returns (bool) {\\n        return loansToOwners[_account] != address(0);\\n    }\\n\\n    function getLoanForOwner(address _user) external view override returns (address) {\\n        return ownersToLoans[_user];\\n    }\\n\\n    function getOwnerOfLoan(address _loan) external view override returns (address) {\\n        return loansToOwners[_loan];\\n    }\\n\\n    function getAllLoans() public view returns (address[] memory) {\\n        return loans;\\n    }\\n\\n    function getLoans(uint256 _from, uint256 _count) public view returns (address[] memory _loans) {\\n        uint256 length = loans.length;\\n        if (_from >= length) {\\n            _loans = new address[](0);\\n            return _loans;\\n        }\\n\\n        if (_count > length - _from) {\\n            _count = length - _from;\\n        }\\n        _loans = new address[](_count);\\n        for (uint256 i; i != _count; ++i) {\\n            _loans[i] = loans[_from + i];\\n        }\\n    }\\n\\n    function getLoansLength() external view returns (uint256) {\\n        return loans.length;\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /**\\n     * @dev emitted after creating a loan by the owner\\n     * @param accountAddress address of a new SmartLoanDiamondBeacon\\n     * @param creator account creating a SmartLoanDiamondBeacon\\n     * @param collateralAsset asset used as initial collateral\\n     * @param collateralAmount amount of asset used as initial collateral\\n     **/\\n    event SmartLoanCreated(address indexed accountAddress, address indexed creator, bytes32 collateralAsset, uint256 collateralAmount);\\n}\",\"keccak256\":\"0x9a621e4b2aec717193d7fed6f0b58e605283bbade30c72245e1d5f5db340d18e\",\"license\":\"BUSL-1.1\"},\"contracts/VestingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VestingDistributor\\n * @dev Contract distributing pool's spread among vesting participants.\\n */\\ncontract VestingDistributor {\\n\\n    Pool pool;\\n    IERC20Metadata poolToken;\\n    address keeper;\\n    address pendingKeeper;\\n\\n    uint256 totalLockedMultiplied;\\n    address[] public participants;\\n    mapping(address => uint256) public locked;\\n    mapping(address => uint256) public withdrawn;\\n    mapping(address => uint256) public unvestingTime;\\n    mapping(address => uint256) public unlockTimestamp;\\n    mapping(address => uint256) public multiplier;\\n    mapping(uint256 => uint256) rewardAmount;\\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\\n    mapping(uint256 => uint256) numRewardDistributed;\\n\\n    uint256 lastUpdated;\\n    uint256 updateInterval = 6 hours;\\n\\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\\n\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"Unauthorized: onlyPool\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"Unauthorized: onlyKeeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingKeeper() {\\n        require(msg.sender == pendingKeeper, \\\"Unauthorized: onlyPendingKeeper\\\");\\n        _;\\n    }\\n\\n    constructor(address poolAddress, address keeperAddress) {\\n        pool = Pool(poolAddress);\\n        poolToken = IERC20Metadata(pool.tokenAddress());\\n        keeper = keeperAddress;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    function transferKeeper(address keeperAddress) external onlyKeeper {\\n        pendingKeeper = keeperAddress;\\n    }\\n\\n    function acceptKeeper() external onlyPendingKeeper {\\n        keeper = pendingKeeper;\\n        pendingKeeper = address(0);\\n    }\\n\\n    /**\\n     * Add vesting participant (msg.sender)\\n     **/\\n    function startVesting(uint256 amount, uint256 time) public {\\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\\n\\n        participants.push(msg.sender);\\n        locked[msg.sender] = amount;\\n        unvestingTime[msg.sender] = time;\\n        multiplier[msg.sender] = getMultiplier(time);\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Increase vesting of msg.sender\\n     **/\\n    function increaseVesting(uint256 amount) public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\\n\\n        locked[msg.sender] += amount;\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Unlock funds - start of unvesting\\n     **/\\n    function unlock() public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n\\n        unlockTimestamp[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * Check how much user can withdraw\\n     **/\\n    function availableToWithdraw(address account) public view returns (uint256) {\\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\\n        if (unlockTimestamp[account] == 0) revert UserLocked();\\n\\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\\n\\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\\n    }\\n\\n    /**\\n     * Gets pool's spread and distributes among vesting participants.\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    //TODO: run periodically by bots\\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\\n\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n\\n        if (rewardAmount[lastUpdated] == 0) {\\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\\n        }\\n        uint256 rewards = rewardAmount[lastUpdated];\\n\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            address participant = participants[i];\\n            if (rewardDistributed[lastUpdated][participant]) {\\n                continue;\\n            }\\n\\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\\n\\n            pool.transfer(participant, participantReward);\\n\\n            rewardDistributed[lastUpdated][participant] = true;\\n            ++numRewardDistributed[lastUpdated];\\n            if (numRewardDistributed[lastUpdated] == participants.length) {\\n                lastUpdated = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    //TODO: run periodically by bots\\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n        for (uint256 i = fromIndex; i <= toIndex;) {\\n            address participant = participants[i];\\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\\n\\n                unvestingTime[participant] = 0;\\n                locked[participant] = 0;\\n                unlockTimestamp[participant] = 0;\\n                withdrawn[participant] = 0;\\n                multiplier[participant] = 0;\\n\\n                participants[i] = participants[participants.length - 1];\\n                participants.pop();\\n                --toIndex;\\n            } else {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\\n        withdrawn[account] += amount;\\n        if (withdrawn[account] > locked[account]) {\\n            revert WithdrawMoreThanLocked();\\n        }\\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\\n    }\\n\\n    function getMultiplier(uint256 time) public pure returns (uint256){\\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\\n\\n        return 1;\\n    }\\n\\n\\n    // Trying to distribute before the update interval has been reached\\n    error DistributeTooEarly();\\n\\n    // Already participates in vesting\\n    error AlreadyLocked();\\n\\n    // Vesting time is out of range\\n    error InvalidVestingTime();\\n\\n    // Insufficient user balance of pool's tokens\\n    error InsufficientPoolBalance();\\n\\n    // User not locked\\n    error UserNotLocked();\\n\\n    // User funds are locked\\n    error UserLocked();\\n\\n    // Too late\\n    error TooLate();\\n\\n    // Withdraw amount is more than locked\\n    error WithdrawMoreThanLocked();\\n}\",\"keccak256\":\"0xfb092253ce5fa6bbce3b33e653b0bdee658c45e03e7f02bbeb0066d515679a0f\",\"license\":\"BUSL-1.1\"},\"contracts/facets/AssetsExposureController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/local/DeploymentConstants.sol\\\";\\n\\ncontract AssetsExposureController {\\n\\n    function resetPrimeAccountAssetsExposure() external {\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        for(uint i=0; i<ownedAssets.length; i++){\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\n        }\\n        for(uint i=0; i<positions.length; i++){\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\n            }\\n        }\\n    }\\n\\n    function setPrimeAccountAssetsExposure() external {\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        for(uint i=0; i<ownedAssets.length; i++){\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\n        }\\n        for(uint i=0; i<positions.length; i++){\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb2e77a8a21310af2ae6c0b255d0db2fc420c32ec54af399c86d0144b9cc4bb6\",\"license\":\"BUSL-1.1\"},\"contracts/facets/AssetsOperationsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 4da64a8a04844045e51b88c6202064e16ea118aa;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/facets/avalanche/IYieldYakRouter.sol\\\";\\n\\n//this path is updated during deployment\\nimport \\\"../lib/local/DeploymentConstants.sol\\\";\\n\\ncontract AssetsOperationsFacet is ReentrancyGuardKeccak, SolvencyMethods {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    address private constant YY_ROUTER = 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\\n\\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n    * Funds the loan with a specified amount of a defined token\\n    * @dev Requires approval for ERC20 token on frontend side\\n    * @param _fundedAsset asset to be funded\\n    * @param _amount to be funded\\n    **/\\n    function fund(bytes32 _fundedAsset, uint256 _amount) public virtual {\\n        IERC20Metadata token = getERC20TokenInstance(_fundedAsset, false);\\n        _amount = Math.min(_amount, token.balanceOf(msg.sender));\\n\\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (token.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_fundedAsset, address(token));\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.increaseProtocolExposure(_fundedAsset, _amount * 1e18 / 10 ** token.decimals());\\n\\n        emit Funded(msg.sender, _fundedAsset, _amount, block.timestamp);\\n    }\\n\\n    /**\\n    * Funds the loan with a specified amount of a GLP\\n    * @dev Requires approval for stakedGLP token on frontend side\\n    * @param _amount to be funded\\n    **/\\n    function fundGLP(uint256 _amount) public virtual {\\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\\n        _amount = Math.min(_amount, stakedGlpToken.balanceOf(msg.sender));\\n        address(stakedGlpToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (stakedGlpToken.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(\\\"GLP\\\", address(stakedGlpToken));\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.increaseProtocolExposure(\\\"GLP\\\", _amount);\\n\\n        emit Funded(msg.sender, \\\"GLP\\\", _amount, block.timestamp);\\n    }\\n\\n    /**\\n    * Withdraws an amount of a defined asset from the loan\\n    * This method could be used to cash out profits from investments\\n    * The loan needs to remain solvent after the withdrawal\\n    * @dev This function uses the redstone-evm-connector\\n    * @param _withdrawnAsset asset to be withdrawn\\n    * @param _amount to be withdrawn\\n    **/\\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\\n        IERC20Metadata token = getERC20TokenInstance(_withdrawnAsset, true);\\n        _amount = Math.min(_amount, token.balanceOf(address(this)));\\n\\n        address(token).safeTransfer(msg.sender, _amount);\\n        if (token.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_withdrawnAsset);\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.decreaseProtocolExposure(_withdrawnAsset, _amount * 1e18 / 10 ** token.decimals());\\n\\n        emit Withdrawn(msg.sender, _withdrawnAsset, _amount, block.timestamp);\\n    }\\n\\n    /**\\n        * Withdraws specified amount of a GLP\\n        * @param _amount to be withdrawn\\n    **/\\n    function withdrawGLP(uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\\n        IERC20Metadata token = getERC20TokenInstance(\\\"GLP\\\", true);\\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\\n        _amount = Math.min(token.balanceOf(address(this)), _amount);\\n\\n        address(stakedGlpToken).safeTransfer(msg.sender, _amount);\\n        if (token.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(\\\"GLP\\\");\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.decreaseProtocolExposure(\\\"GLP\\\", _amount * 1e18 / 10 ** token.decimals());\\n\\n        emit Withdrawn(msg.sender, \\\"GLP\\\", _amount, block.timestamp);\\n    }\\n\\n    /**\\n    * Borrows funds from the pool\\n    * @dev This function uses the redstone-evm-connector\\n    * @param _asset to be borrowed\\n    * @param _amount of funds to borrow\\n    **/\\n    function borrow(bytes32 _asset, uint256 _amount) external onlyOwner remainsSolvent {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        ds._lastBorrowTimestamp = block.timestamp;\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        Pool pool = Pool(tokenManager.getPoolAddress(_asset));\\n        pool.borrow(_amount);\\n\\n        IERC20Metadata token = getERC20TokenInstance(_asset, false);\\n        if (token.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_asset, address(token));\\n        }\\n\\n        emit Borrowed(msg.sender, _asset, _amount, block.timestamp);\\n    }\\n\\n\\n    /**\\n     * Repays funds to the pool\\n     * @dev This function uses the redstone-evm-connector\\n     * @param _asset to be repaid\\n     * @param _amount of funds to repay\\n     **/\\n    function repay(bytes32 _asset, uint256 _amount) public payable {\\n        IERC20Metadata token = getERC20TokenInstance(_asset, true);\\n\\n        if (_isSolvent()) {\\n            DiamondStorageLib.enforceIsContractOwner();\\n        }\\n\\n        Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(_asset));\\n\\n        _amount = Math.min(_amount, pool.getBorrowed(address(this)));\\n        require(token.balanceOf(address(this)) >= _amount, \\\"There is not enough funds to repay\\\");\\n\\n        address(token).safeApprove(address(pool), 0);\\n        address(token).safeApprove(address(pool), _amount);\\n\\n        pool.repay(_amount);\\n\\n        if (token.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_asset);\\n        }\\n\\n        emit Repaid(msg.sender, _asset, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Swap existing debt to another debt\\n    * @dev This function uses the redstone-evm-connector\\n    * @dev _repayAmount and __borrowAmount can be used to control the slippage.\\n     * @param _fromAsset existing debt asset\\n     * @param _toAsset new debt asset\\n     * @param _repayAmount debt repay amount\\n     * @param _borrowAmount debt borrow amount\\n     * @param _path yield yak swap path\\n     * @param _adapters yield yak swap adapters\\n     */\\n    function swapDebt(bytes32 _fromAsset, bytes32 _toAsset, uint256 _repayAmount, uint256 _borrowAmount, address[] calldata _path, address[] calldata _adapters) external onlyOwner remainsSolvent nonReentrant {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        Pool fromAssetPool = Pool(tokenManager.getPoolAddress(_fromAsset));\\n        _repayAmount = Math.min(_repayAmount, fromAssetPool.getBorrowed(address(this)));\\n\\n        IERC20Metadata toToken = getERC20TokenInstance(_toAsset, false);\\n        IERC20Metadata fromToken = getERC20TokenInstance(_fromAsset, false);\\n\\n        Pool toAssetPool = Pool(tokenManager.getPoolAddress(_toAsset));\\n        toAssetPool.borrow(_borrowAmount);\\n\\n        {\\n            // swap toAsset to fromAsset\\n            address(toToken).safeApprove(YY_ROUTER, 0);\\n            address(toToken).safeApprove(YY_ROUTER, _borrowAmount);\\n\\n            IYieldYakRouter router = IYieldYakRouter(YY_ROUTER);\\n\\n            IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\\n                amountIn: _borrowAmount,\\n                amountOut: _repayAmount,\\n                path: _path,\\n                adapters: _adapters\\n            });\\n\\n            router.swapNoSplit(trade, address(this), 0);\\n        }\\n        \\n        address(fromToken).safeApprove(address(fromAssetPool), 0);\\n        address(fromToken).safeApprove(address(fromAssetPool), _repayAmount);\\n        fromAssetPool.repay(_repayAmount);\\n\\n        if (fromToken.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_fromAsset, address(fromToken));\\n        } else {\\n            DiamondStorageLib.removeOwnedAsset(_fromAsset);\\n        }\\n\\n        emit DebtSwap(msg.sender, address(fromToken), address(toToken), _repayAmount, _borrowAmount, block.timestamp);\\n    }\\n\\n    /* ======= VIEW FUNCTIONS ======*/\\n\\n    /**\\n    * Returns a current balance of the asset held by the smart loan\\n    * @param _asset the code of an asset\\n    **/\\n    function getBalance(bytes32 _asset) internal view returns (uint256) {\\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyOwner() {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after a debt swap\\n     * @param user the address which performed the debt swap\\n     * @param fromToken token that was repaid\\n     * @param toToken token that was borrowed\\n     * @param repayAmount the amount of fromToken that was repaid\\n     * @param borrowAmount the amount of toToken that was borrowed\\n     * @param timestamp time of debt swap\\n     **/\\n    event DebtSwap(address indexed user, address indexed fromToken, address indexed toToken, uint256 repayAmount, uint256 borrowAmount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after a loan is funded\\n     * @param user the address which funded the loan\\n     * @param asset funded by a user\\n     * @param amount the amount of funds\\n     * @param timestamp time of funding\\n     **/\\n    event Funded(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the funds are withdrawn from the loan\\n     * @param user the address which withdraws funds from the loan\\n     * @param asset withdrawn by a user\\n     * @param amount of funds withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawn(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted when funds are borrowed from the pool\\n     * @param user the address of borrower\\n     * @param asset borrowed by an= user\\n     * @param amount of the borrowed funds\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowed(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted when funds are repaid to the pool\\n     * @param user the address initiating repayment\\n     * @param asset asset repaid by a user\\n     * @param amount of repaid funds\\n     * @param timestamp of the repayment\\n     **/\\n    event Repaid(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n}\",\"keccak256\":\"0xea96526ad3379c350a55cacd1818da92fb1dc0a698c7aa7b9a16ff586be41a62\",\"license\":\"BUSL-1.1\"},\"contracts/facets/OwnershipFacet.sol\":{\"content\":\"\\n// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport { DiamondStorageLib } from \\\"../lib/DiamondStorageLib.sol\\\";\\nimport \\\"../SmartLoansFactory.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/local/DeploymentConstants.sol\\\";\\n\\ncontract OwnershipFacet {\\n    function proposeOwnershipTransfer(address _newOwner) external {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\n        require(SmartLoansFactory(DeploymentConstants.getSmartLoansFactoryAddress()).getLoanForOwner(_newOwner) == address(0),\\n            \\\"Can't propose an address that already has a loan\\\");\\n        DiamondStorageLib.setProposedOwner(_newOwner);\\n\\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\\n    }\\n\\n    function acceptOwnership() external {\\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \\\"Only a proposed user can accept ownership\\\");\\n        DiamondStorageLib.setContractOwner(msg.sender);\\n        DiamondStorageLib.setProposedOwner(address(0));\\n        SmartLoansFactory(DeploymentConstants.getSmartLoansFactoryAddress()).changeOwnership(msg.sender);\\n\\n        emit OwnershipProposalAccepted(msg.sender);\\n    }\\n\\n    function owner() external view returns (address owner_) {\\n        owner_ = DiamondStorageLib.contractOwner();\\n    }\\n\\n    function proposedOwner() external view returns (address proposedOwner_) {\\n        proposedOwner_ = DiamondStorageLib.proposedOwner();\\n    }\\n\\n    function pauseAdmin() external view returns (address pauseAdmin) {\\n        pauseAdmin = DiamondStorageLib.pauseAdmin();\\n    }\\n\\n    function proposedPauseAdmin() external view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = DiamondStorageLib.proposedPauseAdmin();\\n    }\\n\\n    /**\\n     * @dev emitted after creating a ownership transfer proposal by the owner\\n     * @param owner address of the current owner\\n     * @param proposed address of the proposed owner\\n     **/\\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\\n\\n    /**\\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\\n     * @param newOwner address of the new owner\\n     **/\\n    event OwnershipProposalAccepted(address indexed newOwner);\\n}\",\"keccak256\":\"0x9264c5880019e5f8d5e807d4b432b8f2e3809b12d3416bda43e7e3ef97587768\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SmartLoanViewFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/local/DeploymentConstants.sol\\\";\\n\\ncontract SmartLoanViewFacet is ReentrancyGuardKeccak, SolvencyMethods {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    struct AssetNameBalance {\\n        bytes32 name;\\n        uint256 balance;\\n    }\\n\\n    struct AssetNameDebt {\\n        bytes32 name;\\n        uint256 debt;\\n    }\\n\\n    struct AssetNamePrice {\\n        bytes32 name;\\n        uint256 price;\\n    }\\n\\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\\n\\n    function initialize(address owner) external {\\n        require(owner != address(0), \\\"Initialize: Cannot set the owner to a zero address\\\");\\n\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        require(!sls._initialized, \\\"DiamondInit: contract is already initialized\\\");\\n        DiamondStorageLib.setContractOwner(owner);\\n        sls._initialized = true;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function getPercentagePrecision() public view virtual returns (uint256) {\\n        return DeploymentConstants.getPercentagePrecision();\\n    }\\n\\n\\n    /**\\n    * Returns a current balance of the asset held by the smart loan\\n    * @param _asset the code of an asset\\n    **/\\n    function getBalance(bytes32 _asset) public view returns (uint256) {\\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\\n        return token.balanceOf(address(this));\\n    }\\n\\n    function getAllOwnedAssets() external view returns (bytes32[] memory result) {\\n        return DeploymentConstants.getAllOwnedAssets();\\n    }\\n\\n    function getSupportedTokensAddresses() external view returns (address[] memory) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        return tokenManager.getSupportedTokensAddresses();\\n    }\\n\\n    function getAllAssetsBalances() public view returns (AssetNameBalance[] memory) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        bytes32[] memory assets = tokenManager.getAllTokenAssets();\\n        AssetNameBalance[] memory result = new AssetNameBalance[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            result[i] = AssetNameBalance({\\n            name : assets[i],\\n            balance : IERC20(tokenManager.getAssetAddress(assets[i], true)).balanceOf(address(this))\\n            });\\n        }\\n\\n        return result;\\n    }\\n\\n    function getDebts() public view returns (AssetNameDebt[] memory) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        bytes32[] memory assets = tokenManager.getAllPoolAssets();\\n        AssetNameDebt[] memory result = new AssetNameDebt[](assets.length);\\n\\n        for (uint256 i = 0; i < assets.length; i++) {\\n            Pool pool = Pool(tokenManager.getPoolAddress(assets[i]));\\n\\n            result[i] = AssetNameDebt({\\n            name : assets[i],\\n            debt : pool.getBorrowed(address(this))\\n            });\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * Returns the prices of all assets supported by the TokenManager\\n     * It could be used as a helper method for UI\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getAllAssetsPrices() public returns (AssetNamePrice[] memory) {\\n        bytes32[] memory assets = DeploymentConstants.getTokenManager().getAllTokenAssets();\\n        uint256[] memory prices = SolvencyMethods.getPrices(assets);\\n        AssetNamePrice[] memory result = new AssetNamePrice[](assets.length);\\n        for (uint i = 0; i < assets.length; i++) {\\n            result[i] = AssetNamePrice({\\n                name : assets[i],\\n                price : prices[i]\\n            });\\n        }\\n        return result;\\n    }\\n\\n    function getContractOwner() external view returns (address _owner) {\\n        _owner = DiamondStorageLib.contractOwner();\\n    }\\n\\n    function getProposedOwner() external view returns (address _proposed) {\\n        _proposed = DiamondStorageLib.proposedOwner();\\n    }\\n\\n    function getStakedPositions() external view returns (IStakingPositions.StakedPosition[] memory  _positions) {\\n        _positions = DiamondStorageLib.stakedPositions();\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyOwner() {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        _;\\n    }\\n}\",\"keccak256\":\"0xa60bcf23fa2002dee6eb2ab5529e73b2c952885cb16210db5b75fb0d06bf343a\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/local/DeploymentConstants.sol\\\";\\n\\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\\n    struct AssetPrice {\\n        bytes32 asset;\\n        uint256 price;\\n    }\\n\\n    // Struct used in the liquidation process to obtain necessary prices only once\\n    struct CachedPrices {\\n        AssetPrice[] ownedAssetsPrices;\\n        AssetPrice[] debtAssetsPrices;\\n        AssetPrice[] stakedPositionsPrices;\\n        AssetPrice[] assetsToRepayPrices;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function isSolvent() public view returns (bool) {\\n        return getHealthRatio() >= 1e18;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\n    **/\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of staked positions.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\n        for(uint256 i=0; i<positions.length; i++) {\\n            symbols[i] = positions[i].symbol;\\n        }\\n\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\n\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: symbols[i],\\n                price: stakedPositionsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\n    **/\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        result = tokenManager.getAllPoolAssets();\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory debtAssets = getDebtAssets();\\n\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\n        result = new AssetPrice[](debtAssetsPrices.length);\\n\\n        for(uint i; i<debtAssetsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: debtAssets[i],\\n                price: debtAssetsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\n\\n        result = new AssetPrice[](assetsEnriched.length);\\n\\n        for(uint i; i<assetsEnriched.length; i++){\\n            result[i] = AssetPrice({\\n                asset: assetsEnriched[i],\\n                price: prices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of staked positions.\\n    **/\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        result = new bytes32[](positions.length);\\n        for(uint i; i<positions.length; i++) {\\n            result[i] = positions[i].symbol;\\n        }\\n    }\\n\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\n\\n        for(uint i; i<numberOfItems; i++){\\n            target[i + offset] = source[i];\\n        }\\n    }\\n\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\n\\n        for(uint i; i<numberOfItems; i++){\\n            target[i] = AssetPrice({\\n                asset: sourceAssets[i+offset],\\n                price: sourcePrices[i+offset]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\n        bytes32[] memory debtAssets = getDebtAssets();\\n        bytes32[] memory stakedAssets = getStakedAssets();\\n\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\n        uint256 offset;\\n\\n        // Populate allAssetsSymbols with owned assets symbols\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate allAssetsSymbols with debt assets symbols\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\n        offset += debtAssets.length;\\n\\n        // Populate allAssetsSymbols with staked assets symbols\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\n        offset += stakedAssets.length;\\n\\n        // Populate allAssetsSymbols with assets to repay symbols\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\n\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\n\\n        offset = 0;\\n\\n        // Populate ownedAssetsPrices struct\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate debtAssetsPrices struct\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\n        offset += debtAssetsPrices.length;\\n\\n        // Populate stakedPositionsPrices struct\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\n        offset += stakedAssets.length;\\n\\n        // Populate assetsToRepayPrices struct\\n        // Stack too deep :F\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\n        for(uint i=0; i<assetsToRepay.length; i++){\\n            assetsToRepayPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n\\n        result = CachedPrices({\\n        ownedAssetsPrices: ownedAssetsPrices,\\n        debtAssetsPrices: debtAssetsPrices,\\n        stakedPositionsPrices: stakedPositionsPrices,\\n        assetsToRepayPrices: assetsToRepayPrices\\n        });\\n    }\\n\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\n    function canRepayDebtFully() external view returns(bool) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\n\\n        for(uint i; i< poolAssets.length; i++) {\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\n            IERC20 token = IERC20(pool.tokenAddress());\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\n        return getOracleNumericValuesFromTxMsg(symbols);\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\n        return getOracleNumericValueFromTxMsg(symbol);\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\n    **/\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\n\\n        if (ownedAssetsPrices.length > 0) {\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n            }\\n        }\\n        return weightedValueOfTokens;\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\n    **/\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 weightedValueOfStaked;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\\n            }\\n\\n\\n        }\\n        return weightedValueOfStaked;\\n    }\\n\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        uint256 debt;\\n\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\n\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\n            / 10 ** token.decimals();\\n        }\\n\\n        return debt;\\n    }\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebt() public view virtual returns (uint256) {\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\n        if (ownedAssetsPrices.length > 0) {\\n            ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                uint256 assetBalance = token.balanceOf(address(this));\\n\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\n            }\\n            return total;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n      * Returns list of owned assets that always included NativeToken at index 0\\n    **/\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\n\\n        uint256 lastUsedIndex;\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\n\\n        for(uint i=0; i< ownedAssets.length; i++){\\n            if(ownedAssets[i] != nativeTokenSymbol){\\n                lastUsedIndex += 1;\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\n            }\\n        }\\n        return assetsWithNative;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 usdValue;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\n            }\\n        }\\n\\n        return usdValue;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getTotalValue() public view virtual returns (uint256) {\\n        return getTotalAssetsValue() + getStakedValue();\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\n    }\\n\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getHealthRatio() public view virtual returns (uint256) {\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n     **/\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x89fad87a777114484d13998b370f5975b758f2d6fff19797c75319640da6d077\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IDiamondBeacon {\\n\\n    function implementation() external view returns (address);\\n\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\n     */\\n    function implementation(bytes4) external view returns (address);\\n\\n    function getStatus() external view returns (bool);\\n\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\n\\n    function acceptBeaconOwnership() external;\\n}\\n\",\"keccak256\":\"0xed5c84e80ef7559d35ce307d5e673496bf190b030cc0d67ac3f02776a9b659de\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\n        address asset;\\n        bytes32 symbol;\\n        bytes32 identifier;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0x10a1d6e52d762a40d3a632aaf2807daf64e5fdc66047c5eec6f451ad4c760532\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n}\",\"keccak256\":\"0x7c8fbf587aacf7f651978dd4e8fecd6bc98243fdb739af94ef1200eae3613b36\"},\"contracts/interfaces/facets/avalanche/IYieldYakRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IYieldYakRouter {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n    }\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external;\\n}\",\"keccak256\":\"0x8b3eb66efff1b454a0860d6d08d0f6ad5208f6ff2471abfd4e2a5c582c0c2fa8\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == position.identifier) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes32 identifier) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == identifier) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0xa4dc99332411f1fe4ca13d4e2949e4f4e8342b34b72a7eb87854cf2833d5d53a\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\nimport \\\"../facets/AssetsExposureController.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\n\\n// TODO Rename to contract instead of lib\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\n    // This function executes SolvencyFacetProd.getDebt()\\n    function _getDebt() internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolvent()\\n    function _isSolvent() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalValue()\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\n        assetsValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\n        prices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\n            ),\\n            (uint256[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\n        result = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\n            ),\\n            (SolvencyFacetProd.CachedPrices)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\n        ownedAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\n        debtAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\n        stakedPositionsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\n        price = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes AssetsExposureController.decreaseAssetsExposure()\\n    function _resetPrimeAccountAssetsExposure() public {\\n        proxyDelegateCalldata(\\n            DiamondHelper._getFacetAddress(AssetsExposureController.resetPrimeAccountAssetsExposure.selector),\\n            abi.encodeWithSelector(AssetsExposureController.resetPrimeAccountAssetsExposure.selector)\\n        );\\n    }\\n\\n    // This function executes AssetsExposureController.increaseAssetsExposure()\\n    function _setPrimeAccountAssetsExposure() public {\\n        proxyDelegateCalldata(\\n            DiamondHelper._getFacetAddress(AssetsExposureController.setPrimeAccountAssetsExposure.selector),\\n            abi.encodeWithSelector(AssetsExposureController.setPrimeAccountAssetsExposure.selector)\\n        );\\n    }\\n\\n    /**\\n     * Returns IERC20Metadata instance of a token\\n     * @param _asset the code of an asset\\n     **/\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\n    }\\n\\n    modifier recalculateAssetsExposure() {\\n        _resetPrimeAccountAssetsExposure();\\n        _;\\n        _setPrimeAccountAssetsExposure();\\n    }\\n\\n    /**\\n    * Checks whether account is solvent (health higher than 1)\\n    * @dev This modifier uses the redstone-evm-connector\\n    **/\\n    modifier remainsSolvent() {\\n        _;\\n\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\n    }\\n\\n    modifier canRepayDebtFully() {\\n        _;\\n        require(_canRepayDebtFully(), \\\"Insufficient assets to fully repay the debt\\\");\\n    }\\n\\n    modifier noBorrowInTheSameBlock() {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        require(ds._lastBorrowTimestamp != block.timestamp, \\\"Borrowing must happen in a standalone transaction\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd8749f1445660198608f8c3d2928efd4dd4c2e1a9cbcaea94402a05a585590\",\"license\":\"BUSL-1.1\"},\"contracts/lib/local/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x02df3a3F960393F5B349E40A599FEda91a7cc1A7;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x8F4ec854Dd12F1fe79500a1f53D0cbB30f9b6134;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xdFdE6B33f13de2CA1A75A6F7169f50541B14f75b;\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (ITokenManager) {\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0x9f76772f52058846b6f71f9ae7aa805686f39043bbcbfec4542dc6b4b4986951\",\"license\":\"BUSL-1.1\"},\"contracts/proxies/SmartLoanDiamondProxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"./openzeppelinVirtual/BeaconProxyVirtual.sol\\\";\\n\\n/**\\n * @dev This is a copy of OpenZeppelin BeaconProxy (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol) contract.\\n * The only difference is usage of overriding the ERC1967Upgrade._upgradeBeaconToAndCall and BeaconProxy._implementation() methods.\\n */\\n\\ncontract SmartLoanDiamondProxy is BeaconProxyVirtual {\\n    constructor(address beacon, bytes memory data) payable BeaconProxyVirtual(beacon, data) {}\\n\\n    /* ========== RECEIVE AVAX FUNCTION ========== */\\n    receive() external payable override {}\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IDiamondBeacon(_getBeacon()).implementation(msg.sig);\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal override {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            // 0xc4d66de8 = initialize(address owner)\\n            Address.functionDelegateCall(IDiamondBeacon(newBeacon).implementation(0xc4d66de8), data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x10550325607d2dba8e3c9dcad740d28566c435dea44d6bd3c15e1d0c4aaa32d3\",\"license\":\"BUSL-1.1\"},\"contracts/proxies/openzeppelinVirtual/BeaconProxyVirtual.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Proxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\\\";\\nimport \\\"./ERC1967UpgradeVirtual.sol\\\";\\nimport \\\"../../interfaces/IDiamondBeacon.sol\\\";\\n\\n/**\\n * @dev This is a copy of OpenZeppelin BeaconProxy (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol) contract.\\n * The only difference is usage of ERC1967UpgradeVirtual contract that allows overriding the ERC1967Upgrade._upgradeBeaconToAndCall method and removing the obsolete BeaconProxy._setBeacon() method.\\n */\\ncontract BeaconProxyVirtual is Proxy, ERC1967UpgradeVirtual {\\n    /**\\n     * @dev Initializes the proxy with `beacon`.\\n     *\\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\\n     * constructor.\\n     *\\n     * Requirements:\\n     *\\n     * - `beacon` must be a contract with the interface {IDiamondBeacon}.\\n     */\\n    constructor(address beacon, bytes memory data) payable {\\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\\\"eip1967.proxy.beacon\\\")) - 1));\\n        _upgradeBeaconToAndCall(beacon, data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current beacon address.\\n     */\\n    function _beacon() internal view virtual returns (address) {\\n        return _getBeacon();\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address of the associated beacon.\\n     */\\n    function _implementation() internal view virtual override returns (address) {\\n        return IDiamondBeacon(_getBeacon()).implementation();\\n    }\\n}\",\"keccak256\":\"0xc96a4f8800f05c7cf883d5c0870c07da254df5d5e0b0c2c998fed8b7a6bdb116\",\"license\":\"MIT\"},\"contracts/proxies/openzeppelinVirtual/ERC1967UpgradeVirtual.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\nimport \\\"../../interfaces/IDiamondBeacon.sol\\\";\\n\\n/**\\n * @dev This is a copy of OpenZeppelin ERC1967Upgrade (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/ERC1967/ERC1967Upgrade.sol) contract.\\n * The only difference is the possibility of overriding the ERC1967Upgrade._upgradeBeaconToAndCall method.\\n */\\nabstract contract ERC1967UpgradeVirtual {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) internal {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IDiamondBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal virtual {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            // 0xe1c7392a = init()\\n            Address.functionDelegateCall(IDiamondBeacon(newBeacon).implementation(0xe1c7392a), data);\\n        }\\n    }\\n}\",\"keccak256\":\"0x1c61f474d7d525a3c760df8f69cb6a2ea01bc62b7715286c5a6518f6dcd948d9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract responsible for creating new instances of SmartLoans (SmartLoanDiamondBeacon). It's possible to either simply create a new loan or create and fund it with an ERC20 asset as well as borrow in a single transaction. At the time of creating a loan, SmartLoansFactory contract is the owner for the sake of being able to perform the fund() and borrow() operations. At the end of the createAndFundLoan the ownership is transferred to the msg.sender. It's also responsible for keeping track of the loans, ensuring one loan per wallet rule, ownership transfers proposals/execution and authorizes registered loans to borrow from lending pools.",
    "events": {
      "SmartLoanCreated(address,address,bytes32,uint256)": {
        "details": "emitted after creating a loan by the owner",
        "params": {
          "accountAddress": "address of a new SmartLoanDiamondBeacon",
          "collateralAmount": "amount of asset used as initial collateral*",
          "collateralAsset": "asset used as initial collateral",
          "creator": "account creating a SmartLoanDiamondBeacon"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "SmartLoansFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8687,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "smartLoanDiamond",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(SmartLoanDiamondBeacon)8647"
      },
      {
        "astId": 8691,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "ownersToLoans",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8695,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "loansToOwners",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8698,
        "contract": "contracts/SmartLoansFactory.sol:SmartLoansFactory",
        "label": "loans",
        "offset": 0,
        "slot": "104",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(SmartLoanDiamondBeacon)8647": {
        "encoding": "inplace",
        "label": "contract SmartLoanDiamondBeacon",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}