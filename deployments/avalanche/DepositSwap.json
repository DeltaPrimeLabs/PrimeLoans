{
  "address": "0x74B5C3499AbDe6D85B6287617195813455051713",
  "abi": [
    {
      "inputs": [],
      "name": "BTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BTC_POOL_TUP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_POOL_TUP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC_POOL_TUP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDT_POOL_TUP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX_POOL_TUP",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountFromToken",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minAmountToToken",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "adapters",
          "type": "address[]"
        }
      ],
      "name": "depositSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x22a277f15d73e518730d16c8fcb9446fc9cb0b2b64a7613578c69a0a76daf313",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x74B5C3499AbDe6D85B6287617195813455051713",
    "transactionIndex": 0,
    "gasUsed": "2080298",
    "logsBloom": "0x
    "blockHash": "0x31a979171ad9d65a50282ba726ccee1328b29768f9f43493096b670eada7d67f",
    "transactionHash": "0x22a277f15d73e518730d16c8fcb9446fc9cb0b2b64a7613578c69a0a76daf313",
    "logs": [],
    "blockNumber": 30111528,
    "cumulativeGasUsed": "2080298",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "84e2e19a133e3daa2abdb71c07fcabe3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BTC_POOL_TUP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_POOL_TUP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC_POOL_TUP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT_POOL_TUP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX_POOL_TUP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountFromToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountToToken\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"adapters\",\"type\":\"address[]\"}],\"name\":\"depositSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DepositSwap.sol\":\"DepositSwap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DepositSwap.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/facets/avalanche/IYieldYakRouter.sol\\\";\\nimport \\\"./Pool.sol\\\";\\n\\ncontract DepositSwap {\\n    address public constant WAVAX_POOL_TUP = 0xD26E504fc642B96751fD55D3E68AF295806542f5;\\n    address public constant USDC_POOL_TUP = 0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b;\\n    address public constant USDT_POOL_TUP = 0xd222e10D7Fe6B7f9608F14A8B5Cf703c74eFBcA1;\\n    address public constant ETH_POOL_TUP = 0xD7fEB276ba254cD9b34804A986CE9a8C3E359148;\\n    address public constant BTC_POOL_TUP = 0x475589b0Ed87591A893Df42EC6076d2499bB63d0;\\n\\n    address public constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n    address public constant WETH = 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB;\\n    address public constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\\n    address public constant USDT = 0x9702230A8Ea53601f5cD2dc00fDBc13d4dF4A8c7;\\n    address public constant BTC = 0x152b9d0FdC40C096757F570A51E494bd4b943E50;\\n\\n    address private constant YY_ROUTER = 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\\n\\n    function _isTokenSupported(address token) private pure returns (bool) {\\n        if(\\n            token == WAVAX ||\\n            token == WETH ||\\n            token == USDC ||\\n            token == USDT ||\\n            token == BTC\\n        ){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function _tokenToPoolTUPMapping(address token) private pure returns (Pool){\\n        if(token == WAVAX){\\n            return Pool(WAVAX_POOL_TUP);\\n        } else if (token == WETH){\\n            return Pool(ETH_POOL_TUP);\\n        } else if (token == USDC){\\n            return Pool(USDC_POOL_TUP);\\n        } else if (token == USDT){\\n            return Pool(USDT_POOL_TUP);\\n        } else if (token == BTC){\\n            return Pool(BTC_POOL_TUP);\\n        }\\n        revert(\\\"Pool not supported\\\");\\n    }\\n\\n    function _withdrawFromPool(Pool pool, IERC20 token, uint256 amount, address user) private {\\n        uint256 userInitialFromTokenDepositBalance = pool.balanceOf(user);\\n\\n        require(userInitialFromTokenDepositBalance >= amount, \\\"Insufficient fromToken deposit balance\\\");\\n        require(pool.balanceOf(address(this)) == 0, \\\"Contract initial deposit balance should be 0\\\");\\n        require(token.balanceOf(address(this)) == 0, \\\"Contract initial fromToken balance must be 0\\\");\\n\\n        pool.transferFrom(user, address(this), amount);\\n        require(pool.balanceOf(address(this)) == amount, \\\"amountFromToken and post-transfer contract balance mismatch\\\");\\n        require(pool.balanceOf(user) == userInitialFromTokenDepositBalance - amount, \\\"user post-transfer balance is incorrect\\\");\\n\\n        pool.withdraw(amount);\\n\\n        require(pool.balanceOf(address(this)) == 0, \\\"Post-withdrawal contract deposit balance must be 0\\\");\\n        require(token.balanceOf(address(this)) == amount, \\\"Post-withdrawal contract fromToken balance is incorrect\\\");\\n    }\\n\\n    function _depositToPool(Pool pool, IERC20 token, uint256 amount, address user) private {\\n        uint256 contractInitialToTokenBalance = token.balanceOf(address(this));\\n        uint256 userInitialToTokenDepositBalance = pool.balanceOf(user);\\n\\n        require(contractInitialToTokenBalance >= amount, \\\"Insufficient contract toToken balance\\\");\\n\\n        token.approve(address(pool), amount);\\n        pool.deposit(amount);\\n\\n        require(token.balanceOf(address(this)) == 0, \\\"Post-deposit contract toToken balance must be 0\\\");\\n        require(pool.balanceOf(address(this)) == amount, \\\"Post-deposit contract deposit balance is incorrect\\\");\\n\\n        pool.transfer(user, amount);\\n\\n        require(token.balanceOf(address(this)) == 0, \\\"Post-transfer contract deposit balance must be 0\\\");\\n        require(pool.balanceOf(user) == userInitialToTokenDepositBalance + amount, \\\"Post-transfer user deposit balance is incorrect\\\");\\n    }\\n\\n    function _yakSwap(address[] calldata path, address[] calldata adapters, uint256 amountIn, uint256 amountOut) private {\\n        IERC20(path[0]).approve(YY_ROUTER, amountIn);\\n\\n        IYieldYakRouter router = IYieldYakRouter(YY_ROUTER);\\n\\n\\n        IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\\n            amountIn: amountIn,\\n            amountOut: amountOut,\\n            path: path,\\n            adapters: adapters\\n        });\\n\\n        router.swapNoSplit(trade, address(this), 0);\\n    }\\n\\n\\n    // Needs approval on the fromToken Pool\\n    function depositSwap(uint256 amountFromToken, uint256 minAmountToToken, address[] calldata path, address[] calldata adapters) public {\\n        address fromToken = path[0];\\n        address toToken = path[path.length - 1];\\n\\n        require(_isTokenSupported(fromToken), \\\"fromToken not supported\\\");\\n        require(_isTokenSupported(toToken), \\\"toToken not supported\\\");\\n\\n        Pool fromPool = _tokenToPoolTUPMapping(fromToken);\\n        Pool toPool = _tokenToPoolTUPMapping(toToken);\\n\\n        address user = msg.sender;\\n        amountFromToken = Math.min(fromPool.balanceOf(user), amountFromToken);\\n\\n        _withdrawFromPool(fromPool, IERC20(fromToken), amountFromToken, user);\\n\\n        _yakSwap(path, adapters, amountFromToken, minAmountToToken);\\n\\n        _depositToPool(toPool, IERC20(toToken), IERC20(toToken).balanceOf(address(this)), user);\\n    }\\n}\\n\",\"keccak256\":\"0x7b98ca6136e531d0d76a7ebd016e3f8fab1b1b90db0db3211a2dddca1bcfb1b0\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\nimport \\\"./VestingDistributor.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    VestingDistributor public vestingDistributor;\\n\\n    uint8 internal _decimals;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n        && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n        && AddressUpgradeable.isContract(address(depositIndex_))\\n        && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        _decimals = IERC20Metadata(tokenAddress_).decimals();\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setVestingDistributor(address _distributor) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(_distributor) && _distributor != address(0)) revert NotAContract(_distributor);\\n        vestingDistributor = VestingDistributor(_distributor);\\n\\n        emit VestingDistributorChanged(_distributor, block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        address account = msg.sender;\\n        _accumulateDepositInterest(account);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // (this is verified in \\\"require\\\" above)\\n    unchecked {\\n        _deposited[account] -= amount;\\n    }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, account);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(account, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(sender);\\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(sender, amount, lockedAmount);\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual  {\\n        depositOnBehalf(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * Deposits the amount on behalf of `_of` user.\\n     * It updates `_of` user deposited balance, total deposited and rates\\n     **/\\n    function depositOnBehalf(uint256 _amount, address _of) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n        require(_of != address(0), \\\"Address zero\\\");\\n        require(_of != address(this), \\\"Cannot deposit on behalf of pool\\\");\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(_of);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(_of, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, _of);\\n        }\\n\\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n    unchecked {\\n        _deposited[address(this)] -= _amount;\\n    }\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function name() public virtual pure returns(string memory _name){\\n        _name = \\\"\\\";\\n    }\\n\\n    function symbol() public virtual pure returns(string memory _symbol){\\n        _symbol = \\\"\\\";\\n    }\\n\\n    function decimals() public virtual view returns(uint8){\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\n        return 0.9e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns full pool status\\n     */\\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\\n        return [\\n        totalSupply(),\\n        getDepositRate(),\\n        getBorrowingRate(),\\n        totalBorrowed(),\\n        getMaxPoolUtilisationForBorrowing()\\n        ];\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if(amount > transferrableAmount) revert BurnAmountExceedsAvailableForUser();\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // verified in \\\"require\\\" above\\n    unchecked {\\n        _deposited[account] -= amount;\\n    }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _getAmounts(address account) internal view returns (uint256 lockedAmount, uint256 transferrableAmount) {\\n        if (address(vestingDistributor) != address(0)) {\\n            lockedAmount = vestingDistributor.locked(account);\\n            transferrableAmount = _deposited[account] - (lockedAmount - vestingDistributor.availableToWithdraw(account));\\n        } else {\\n            transferrableAmount = _deposited[account];\\n        }\\n    }\\n\\n    function _updateWithdrawn(address account, uint256 amount, uint256 lockedAmount) internal {\\n        uint256 availableUnvested = _deposited[account] - lockedAmount;\\n        if (amount > availableUnvested && address(vestingDistributor) != address(0)) {\\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\\n        }\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user deposits funds on behalf of other user\\n     * @param user the address performing the deposit\\n     * @param _of the address on behalf of which the deposit is being performed\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing vesting distributor\\n    * @param distributor an address of the newly set distributor\\n    * @param timestamp of the distributor change\\n    **/\\n    event VestingDistributorChanged(address indexed distributor, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // ERC20: burn amount exceeds current amount available (including vesting)\\n    error BurnAmountExceedsAvailableForUser();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0xefcc49bad1cecd2440f1d96d30ce98d25833063b7e8f05ed9cc29f1da6c26096\",\"license\":\"BUSL-1.1\"},\"contracts/VestingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VestingDistributor\\n * @dev Contract distributing pool's spread among vesting participants.\\n */\\ncontract VestingDistributor {\\n\\n    Pool pool;\\n    IERC20Metadata poolToken;\\n    address keeper;\\n    address pendingKeeper;\\n\\n    uint256 totalLockedMultiplied;\\n    address[] public participants;\\n    mapping(address => uint256) public locked;\\n    mapping(address => uint256) public withdrawn;\\n    mapping(address => uint256) public unvestingTime;\\n    mapping(address => uint256) public unlockTimestamp;\\n    mapping(address => uint256) public multiplier;\\n    mapping(uint256 => uint256) rewardAmount;\\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\\n    mapping(uint256 => uint256) numRewardDistributed;\\n\\n    uint256 lastUpdated;\\n    uint256 updateInterval = 6 hours;\\n\\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\\n\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"Unauthorized: onlyPool\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"Unauthorized: onlyKeeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingKeeper() {\\n        require(msg.sender == pendingKeeper, \\\"Unauthorized: onlyPendingKeeper\\\");\\n        _;\\n    }\\n\\n    constructor(address poolAddress, address keeperAddress) {\\n        pool = Pool(poolAddress);\\n        poolToken = IERC20Metadata(pool.tokenAddress());\\n        keeper = keeperAddress;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    function transferKeeper(address keeperAddress) external onlyKeeper {\\n        pendingKeeper = keeperAddress;\\n    }\\n\\n    function acceptKeeper() external onlyPendingKeeper {\\n        keeper = pendingKeeper;\\n        pendingKeeper = address(0);\\n    }\\n\\n    /**\\n     * Add vesting participant (msg.sender)\\n     **/\\n    function startVesting(uint256 amount, uint256 time) public {\\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\\n\\n        participants.push(msg.sender);\\n        locked[msg.sender] = amount;\\n        unvestingTime[msg.sender] = time;\\n        multiplier[msg.sender] = getMultiplier(time);\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Increase vesting of msg.sender\\n     **/\\n    function increaseVesting(uint256 amount) public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\\n\\n        locked[msg.sender] += amount;\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Unlock funds - start of unvesting\\n     **/\\n    function unlock() public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n\\n        unlockTimestamp[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * Check how much user can withdraw\\n     **/\\n    function availableToWithdraw(address account) public view returns (uint256) {\\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\\n        if (unlockTimestamp[account] == 0) revert UserLocked();\\n\\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\\n\\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\\n    }\\n\\n    /**\\n     * Gets pool's spread and distributes among vesting participants.\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    //TODO: run periodically by bots\\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\\n\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n\\n        if (rewardAmount[lastUpdated] == 0) {\\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\\n        }\\n        uint256 rewards = rewardAmount[lastUpdated];\\n\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            address participant = participants[i];\\n            if (rewardDistributed[lastUpdated][participant]) {\\n                continue;\\n            }\\n\\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\\n\\n            pool.transfer(participant, participantReward);\\n\\n            rewardDistributed[lastUpdated][participant] = true;\\n            ++numRewardDistributed[lastUpdated];\\n            if (numRewardDistributed[lastUpdated] == participants.length) {\\n                lastUpdated = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    //TODO: run periodically by bots\\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n        for (uint256 i = fromIndex; i <= toIndex;) {\\n            address participant = participants[i];\\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\\n\\n                unvestingTime[participant] = 0;\\n                locked[participant] = 0;\\n                unlockTimestamp[participant] = 0;\\n                withdrawn[participant] = 0;\\n                multiplier[participant] = 0;\\n\\n                participants[i] = participants[participants.length - 1];\\n                participants.pop();\\n                --toIndex;\\n            } else {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\\n        withdrawn[account] += amount;\\n        if (withdrawn[account] > locked[account]) {\\n            revert WithdrawMoreThanLocked();\\n        }\\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\\n    }\\n\\n    function getMultiplier(uint256 time) public pure returns (uint256){\\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\\n\\n        return 1;\\n    }\\n\\n\\n    // Trying to distribute before the update interval has been reached\\n    error DistributeTooEarly();\\n\\n    // Already participates in vesting\\n    error AlreadyLocked();\\n\\n    // Vesting time is out of range\\n    error InvalidVestingTime();\\n\\n    // Insufficient user balance of pool's tokens\\n    error InsufficientPoolBalance();\\n\\n    // User not locked\\n    error UserNotLocked();\\n\\n    // User funds are locked\\n    error UserLocked();\\n\\n    // Too late\\n    error TooLate();\\n\\n    // Withdraw amount is more than locked\\n    error WithdrawMoreThanLocked();\\n}\",\"keccak256\":\"0xfb092253ce5fa6bbce3b33e653b0bdee658c45e03e7f02bbeb0066d515679a0f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/facets/avalanche/IYieldYakRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IYieldYakRouter {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n    }\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external;\\n}\",\"keccak256\":\"0x8b3eb66efff1b454a0860d6d08d0f6ad5208f6ff2471abfd4e2a5c582c0c2fa8\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124d4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806389a302711161007157806389a3027114610142578063a2f3191414610160578063ad5c46481461017e578063b6ae245d1461019c578063b80a3fee146101ba578063c54e44eb146101d8576100a9565b80630e98f812146100ae5780632792949d146100cc578063355cedad146100ea5780634a84271a1461010857806373b295c214610124575b600080fd5b6100b66101f6565b6040516100c39190611700565b60405180910390f35b6100d461020e565b6040516100e19190611700565b60405180910390f35b6100f2610226565b6040516100ff9190611700565b60405180910390f35b610122600480360381019061011d91906117c0565b61023e565b005b61012c610486565b6040516101399190611700565b60405180910390f35b61014a61049e565b6040516101579190611700565b60405180910390f35b6101686104b6565b6040516101759190611700565b60405180910390f35b6101866104ce565b6040516101939190611700565b60405180910390f35b6101a46104e6565b6040516101b19190611700565b60405180910390f35b6101c26104fe565b6040516101cf9190611700565b60405180910390f35b6101e0610516565b6040516101ed9190611700565b60405180910390f35b73d26e504fc642b96751fd55d3e68af295806542f581565b73152b9d0fdc40c096757f570a51e494bd4b943e5081565b73475589b0ed87591a893df42ec6076d2499bb63d081565b60008484600081811061025457610253611867565b5b905060200201602081019061026991906118c2565b90506000858560018888905061027f919061191e565b81811061028f5761028e611867565b5b90506020020160208101906102a491906118c2565b90506102af8261052e565b6102ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102e5906119af565b60405180910390fd5b6102f78161052e565b610336576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161032d90611a1b565b60405180910390fd5b6000610341836106b3565b9050600061034e836106b3565b905060003390506103d88373ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016103919190611700565b602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190611a50565b8c6108e4565b9a506103e683868d846108fd565b6103f4898989898f8f610f21565b61047982858673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104329190611700565b602060405180830381865afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190611a50565b84611116565b5050505050505050505050565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c781565b73b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e81565b732323dac85c6ab9bd6a8b5fb75b0581e31232d12b81565b7349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab81565b73d7feb276ba254cd9b34804a986ce9a8c3e35914881565b73d222e10d7fe6b7f9608f14a8b5cf703c74efbca181565b739702230a8ea53601f5cd2dc00fdbc13d4df4a8c781565b600073b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614806105bd57507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b80610607575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b806106515750739702230a8ea53601f5cd2dc00fdbc13d4df4a8c773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b8061069b575073152b9d0fdc40c096757f570a51e494bd4b943e5073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156106a957600190506106ae565b600090505b919050565b600073b31f66aa3c1e785363f0875a1b74e27b85fd66c773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107185773d26e504fc642b96751fd55d3e68af295806542f590506108df565b7349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361077b5773d7feb276ba254cd9b34804a986ce9a8c3e35914890506108df565b73b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107de57732323dac85c6ab9bd6a8b5fb75b0581e31232d12b90506108df565b739702230a8ea53601f5cd2dc00fdbc13d4df4a8c773ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108415773d222e10d7fe6b7f9608f14a8b5cf703c74efbca190506108df565b73152b9d0fdc40c096757f570a51e494bd4b943e5073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108a45773475589b0ed87591a893df42ec6076d2499bb63d090506108df565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108d690611ac9565b60405180910390fd5b919050565b60008183106108f357816108f5565b825b905092915050565b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231836040518263ffffffff1660e01b81526004016109389190611700565b602060405180830381865afa158015610955573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109799190611a50565b9050828110156109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590611b5b565b60405180910390fd5b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016109f99190611700565b602060405180830381865afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190611a50565b14610a7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7190611bed565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab59190611700565b602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190611a50565b14610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d90611c7f565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd8330866040518463ffffffff1660e01b8152600401610b7393929190611cae565b6020604051808303816000875af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190611d1d565b50828573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bf19190611700565b602060405180830381865afa158015610c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c329190611a50565b14610c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c6990611dbc565b60405180910390fd5b8281610c7e919061191e565b8573ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b8152600401610cb79190611700565b602060405180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190611a50565b14610d38576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2f90611e4e565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d846040518263ffffffff1660e01b8152600401610d719190611e6e565b600060405180830381600087803b158015610d8b57600080fd5b505af1158015610d9f573d6000803e3d6000fd5b5050505060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610dde9190611700565b602060405180830381865afa158015610dfb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1f9190611a50565b14610e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5690611efb565b60405180910390fd5b828473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e999190611700565b602060405180830381865afa158015610eb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eda9190611a50565b14610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1190611f8d565b60405180910390fd5b5050505050565b85856000818110610f3557610f34611867565b5b9050602002016020810190610f4a91906118c2565b73ffffffffffffffffffffffffffffffffffffffff1663095ea7b373c4729e56b831d74bbc18797e0e17a295fa77488c846040518363ffffffff1660e01b8152600401610f98929190611fad565b6020604051808303816000875af1158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190611d1d565b50600073c4729e56b831d74bbc18797e0e17a295fa77488c905060006040518060800160405280858152602001848152602001898980806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f820116905080830192505050505050508152602001878780806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081525090508173ffffffffffffffffffffffffffffffffffffffff16636bf2df86823060006040518463ffffffff1660e01b81526004016110da93929190612152565b600060405180830381600087803b1580156110f457600080fd5b505af1158015611108573d6000803e3d6000fd5b505050505050505050505050565b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111519190611700565b602060405180830381865afa15801561116e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111929190611a50565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231846040518263ffffffff1660e01b81526004016111cf9190611700565b602060405180830381865afa1580156111ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112109190611a50565b905083821015611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c90612202565b60405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff1663095ea7b387866040518363ffffffff1660e01b8152600401611290929190611fad565b6020604051808303816000875af11580156112af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d39190611d1d565b508573ffffffffffffffffffffffffffffffffffffffff1663b6b55f25856040518263ffffffff1660e01b815260040161130d9190611e6e565b600060405180830381600087803b15801561132757600080fd5b505af115801561133b573d6000803e3d6000fd5b5050505060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161137a9190611700565b602060405180830381865afa158015611397573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bb9190611a50565b146113fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f290612294565b60405180910390fd5b838673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114359190611700565b602060405180830381865afa158015611452573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114769190611a50565b146114b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ad90612326565b60405180910390fd5b8573ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84866040518363ffffffff1660e01b81526004016114f1929190611fad565b6020604051808303816000875af1158015611510573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115349190611d1d565b5060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115709190611700565b602060405180830381865afa15801561158d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115b19190611a50565b146115f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e8906123b8565b60405180910390fd5b83816115fd91906123d8565b8673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016116369190611700565b602060405180830381865afa158015611653573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116779190611a50565b146116b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ae9061247e565b60405180910390fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116ea826116bf565b9050919050565b6116fa816116df565b82525050565b600060208201905061171560008301846116f1565b92915050565b600080fd5b600080fd5b6000819050919050565b61173881611725565b811461174357600080fd5b50565b6000813590506117558161172f565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126117805761177f61175b565b5b8235905067ffffffffffffffff81111561179d5761179c611760565b5b6020830191508360208202830111156117b9576117b8611765565b5b9250929050565b600080600080600080608087890312156117dd576117dc61171b565b5b60006117eb89828a01611746565b96505060206117fc89828a01611746565b955050604087013567ffffffffffffffff81111561181d5761181c611720565b5b61182989828a0161176a565b9450945050606087013567ffffffffffffffff81111561184c5761184b611720565b5b61185889828a0161176a565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61189f816116df565b81146118aa57600080fd5b50565b6000813590506118bc81611896565b92915050565b6000602082840312156118d8576118d761171b565b5b60006118e6848285016118ad565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061192982611725565b915061193483611725565b925082820390508181111561194c5761194b6118ef565b5b92915050565b600082825260208201905092915050565b7f66726f6d546f6b656e206e6f7420737570706f72746564000000000000000000600082015250565b6000611999601783611952565b91506119a482611963565b602082019050919050565b600060208201905081810360008301526119c88161198c565b9050919050565b7f746f546f6b656e206e6f7420737570706f727465640000000000000000000000600082015250565b6000611a05601583611952565b9150611a10826119cf565b602082019050919050565b60006020820190508181036000830152611a34816119f8565b9050919050565b600081519050611a4a8161172f565b92915050565b600060208284031215611a6657611a6561171b565b5b6000611a7484828501611a3b565b91505092915050565b7f506f6f6c206e6f7420737570706f727465640000000000000000000000000000600082015250565b6000611ab3601283611952565b9150611abe82611a7d565b602082019050919050565b60006020820190508181036000830152611ae281611aa6565b9050919050565b7f496e73756666696369656e742066726f6d546f6b656e206465706f736974206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611b45602683611952565b9150611b5082611ae9565b604082019050919050565b60006020820190508181036000830152611b7481611b38565b9050919050565b7f436f6e747261637420696e697469616c206465706f7369742062616c616e636560008201527f2073686f756c6420626520300000000000000000000000000000000000000000602082015250565b6000611bd7602c83611952565b9150611be282611b7b565b604082019050919050565b60006020820190508181036000830152611c0681611bca565b9050919050565b7f436f6e747261637420696e697469616c2066726f6d546f6b656e2062616c616e60008201527f6365206d75737420626520300000000000000000000000000000000000000000602082015250565b6000611c69602c83611952565b9150611c7482611c0d565b604082019050919050565b60006020820190508181036000830152611c9881611c5c565b9050919050565b611ca881611725565b82525050565b6000606082019050611cc360008301866116f1565b611cd060208301856116f1565b611cdd6040830184611c9f565b949350505050565b60008115159050919050565b611cfa81611ce5565b8114611d0557600080fd5b50565b600081519050611d1781611cf1565b92915050565b600060208284031215611d3357611d3261171b565b5b6000611d4184828501611d08565b91505092915050565b7f616d6f756e7446726f6d546f6b656e20616e6420706f73742d7472616e73666560008201527f7220636f6e74726163742062616c616e6365206d69736d617463680000000000602082015250565b6000611da6603b83611952565b9150611db182611d4a565b604082019050919050565b60006020820190508181036000830152611dd581611d99565b9050919050565b7f7573657220706f73742d7472616e736665722062616c616e636520697320696e60008201527f636f727265637400000000000000000000000000000000000000000000000000602082015250565b6000611e38602783611952565b9150611e4382611ddc565b604082019050919050565b60006020820190508181036000830152611e6781611e2b565b9050919050565b6000602082019050611e836000830184611c9f565b92915050565b7f506f73742d7769746864726177616c20636f6e7472616374206465706f73697460008201527f2062616c616e6365206d75737420626520300000000000000000000000000000602082015250565b6000611ee5603283611952565b9150611ef082611e89565b604082019050919050565b60006020820190508181036000830152611f1481611ed8565b9050919050565b7f506f73742d7769746864726177616c20636f6e74726163742066726f6d546f6b60008201527f656e2062616c616e636520697320696e636f7272656374000000000000000000602082015250565b6000611f77603783611952565b9150611f8282611f1b565b604082019050919050565b60006020820190508181036000830152611fa681611f6a565b9050919050565b6000604082019050611fc260008301856116f1565b611fcf6020830184611c9f565b9392505050565b611fdf81611725565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61201a816116df565b82525050565b600061202c8383612011565b60208301905092915050565b6000602082019050919050565b600061205082611fe5565b61205a8185611ff0565b935061206583612001565b8060005b8381101561209657815161207d8882612020565b975061208883612038565b925050600181019050612069565b5085935050505092915050565b60006080830160008301516120bb6000860182611fd6565b5060208301516120ce6020860182611fd6565b50604083015184820360408601526120e68282612045565b915050606083015184820360608601526121008282612045565b9150508091505092915050565b6000819050919050565b6000819050919050565b600061213c6121376121328461210d565b612117565b611725565b9050919050565b61214c81612121565b82525050565b6000606082019050818103600083015261216c81866120a3565b905061217b60208301856116f1565b6121886040830184612143565b949350505050565b7f496e73756666696369656e7420636f6e747261637420746f546f6b656e20626160008201527f6c616e6365000000000000000000000000000000000000000000000000000000602082015250565b60006121ec602583611952565b91506121f782612190565b604082019050919050565b6000602082019050818103600083015261221b816121df565b9050919050565b7f506f73742d6465706f73697420636f6e747261637420746f546f6b656e20626160008201527f6c616e6365206d75737420626520300000000000000000000000000000000000602082015250565b600061227e602f83611952565b915061228982612222565b604082019050919050565b600060208201905081810360008301526122ad81612271565b9050919050565b7f506f73742d6465706f73697420636f6e7472616374206465706f73697420626160008201527f6c616e636520697320696e636f72726563740000000000000000000000000000602082015250565b6000612310603283611952565b915061231b826122b4565b604082019050919050565b6000602082019050818103600083015261233f81612303565b9050919050565b7f506f73742d7472616e7366657220636f6e7472616374206465706f736974206260008201527f616c616e6365206d757374206265203000000000000000000000000000000000602082015250565b60006123a2603083611952565b91506123ad82612346565b604082019050919050565b600060208201905081810360008301526123d181612395565b9050919050565b60006123e382611725565b91506123ee83611725565b9250828201905080821115612406576124056118ef565b5b92915050565b7f506f73742d7472616e736665722075736572206465706f7369742062616c616e60008201527f636520697320696e636f72726563740000000000000000000000000000000000602082015250565b6000612468602f83611952565b91506124738261240c565b604082019050919050565b600060208201905081810360008301526124978161245b565b905091905056fea2646970667358221220d15195a3e5c9b8e87250a6be0ea8abbd58f873433d40e55ae107199602d0f7a264736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}