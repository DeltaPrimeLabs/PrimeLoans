{
  "address": "0xe1Ac18A195E03D79b45C0827649ceFFe2cE26acE",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpread",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SpreadChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_4",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "getPoolUtilisation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_spread",
          "type": "uint256"
        }
      ],
      "name": "setSpread",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spread",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x035da66668db715c3506f8021ceb8f693e60558788bfa42f368641104b7a6333",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xe1Ac18A195E03D79b45C0827649ceFFe2cE26acE",
    "transactionIndex": 0,
    "gasUsed": "928245",
    "logsBloom": "0x
    "blockHash": "0x5b1e5f7f2a9e0515abcb03878031d0ac05cf0bd5fad6ad16168e1520103131af",
    "transactionHash": "0x035da66668db715c3506f8021ceb8f693e60558788bfa42f368641104b7a6333",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 26381528,
        "transactionHash": "0x035da66668db715c3506f8021ceb8f693e60558788bfa42f368641104b7a6333",
        "address": "0xe1Ac18A195E03D79b45C0827649ceFFe2cE26acE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5b1e5f7f2a9e0515abcb03878031d0ac05cf0bd5fad6ad16168e1520103131af"
      }
    ],
    "blockNumber": 26381528,
    "cumulativeGasUsed": "928245",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "a4a347ad9522e524848f80ec6c0b3d03",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpread\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SpreadChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BREAKPOINT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BREAKPOINT_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BREAKPOINT_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_4\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"getPoolUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spread\",\"type\":\"uint256\"}],\"name\":\"setSpread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*\",\"events\":{\"SpreadChanged(address,uint256,uint256)\":{\"details\":\"emitted after changing the spread\",\"params\":{\"newSpread\":\"new spread\",\"performer\":\"an address of wallet setting a new spread\",\"timestamp\":\"time of a spread change*\"}}},\"kind\":\"dev\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"calculateDepositRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"getPoolUtilisation(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSpread(uint256)\":{\"params\":{\"_spread\":\"spread defined by user*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"UsdcVariableUtilisationRatesCalculator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"notice\":\"Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\"},\"calculateDepositRate(uint256,uint256)\":{\"notice\":\"Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\"},\"getPoolUtilisation(uint256,uint256)\":{\"notice\":\"Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits\"},\"setSpread(uint256)\":{\"notice\":\"Sets the spread between deposit and borrow rate, number between 0 and 1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/UsdcVariableUtilisationRatesCalculator.sol\":\"UsdcVariableUtilisationRatesCalculator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/deployment/avalanche/UsdcVariableUtilisationRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 4d6d9c0d5e21f750ac185d7cd4bd1948ac672029;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../interfaces/IRatesCalculator.sol\\\";\\n\\n/**\\n * @title UsdcVariableUtilisationRatesCalculator\\n * @dev Contract which calculates the interest rates based on pool utilisation.\\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\\n **/\\ncontract UsdcVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\\n    uint256 public constant SLOPE_1 = 0.416666666666667e18;\\n    uint256 public constant OFFSET_1 = 0;\\n\\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\\n\\n    uint256 public constant SLOPE_2 = 1.25e18;\\n    //negative, hence minus in calculations\\n    uint256 public constant OFFSET_2 = 0.5e18;\\n\\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\\n\\n    uint256 public constant SLOPE_3 = 1.5e18;\\n    //negative, hence minus in calculations\\n    uint256 public constant OFFSET_3 = 0.7e18;\\n\\n    // BREAKPOINT must be lower than 1e18\\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\\n\\n    uint256 public constant SLOPE_4 = 8.5e18;\\n    //negative, hence minus in calculations\\n    uint256 public constant OFFSET_4 = 7e18;\\n\\n    uint256 public constant MAX_RATE = 1.5e18;\\n\\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\\n    //profit generation\\n    uint256 public spread = 1e12;\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * Returns the pool utilisation, which is a ratio between loans and deposits\\n     * utilisation = value_of_loans / value_of_deposits\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\\n        if (_totalDeposits == 0) return 0;\\n\\n        return (_totalLoans * 1e18) / _totalDeposits;\\n    }\\n\\n    /**\\n     * Returns the current deposit rate\\n     * The value is based on the current borrowing rate and satisfies the invariant:\\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\\n        if (_totalDeposits == 0) return 0;\\n\\n        if (_totalLoans >= _totalDeposits) {\\n            return MAX_RATE * (1e18 - spread) / 1e18;\\n        } else {\\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\\n            return rate;\\n        }\\n    }\\n\\n    /**\\n     * Returns the current borrowing rate\\n     * The value is based on the pool utilisation according to the piecewise linear formula:\\n     * 1) for pool utilisation lower than or equal to breakpoint:\\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\\n     * 2) for pool utilisation greater than breakpoint:\\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\\n        if (totalDeposits == 0) return OFFSET_1;\\n\\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\\n\\n        if (poolUtilisation >= 1e18) {\\n            return MAX_RATE;\\n        } else if (poolUtilisation <= BREAKPOINT_1) {\\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\\n        } else if (poolUtilisation <= BREAKPOINT_2) {\\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\\n        } else if (poolUtilisation <= BREAKPOINT_3) {\\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\\n        } else {\\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\\n            // unsigned integer safety check)\\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\\n        }\\n    }\\n\\n    /* ========== SETTERS ========== */\\n    /**\\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\\n     * @param _spread spread defined by user\\n     **/\\n    function setSpread(uint256 _spread) external onlyOwner {\\n        require(_spread < 1e18, \\\"Spread must be smaller than 1e18\\\");\\n        spread = _spread;\\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after changing the spread\\n     * @param performer an address of wallet setting a new spread\\n     * @param newSpread new spread\\n     * @param timestamp time of a spread change\\n     **/\\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\\n}\",\"keccak256\":\"0xcddbd832ad0bf8932f4fcd8851ca13f5da72cd1cd3c24010d4b60f6e11f7fb9b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80637cd08331116100ad578063b66a261c11610071578063b66a261c14610303578063bfe7cfd21461031f578063c24dbebd1461033d578063df841eec1461035b578063f2fde38b1461038b5761012c565b80637cd08331146102495780638da5cb5b146102795780639a6fc9dc146102975780639ceca965146102b5578063b5f78b05146102e55761012c565b806356f21639116100f457806356f21639146101c75780635c25c76c146101e55780636e28a05d1461020357806370935a5014610221578063715018a61461023f5761012c565b806301a5e5a01461013157806318c544b11461014f578063321105fb1461016d5780633bf42d4b1461018b57806349d94fee146101a9575b600080fd5b6101396103a7565b6040516101469190610a37565b60405180910390f35b6101576103b3565b6040516101649190610a37565b60405180910390f35b6101756103b8565b6040516101829190610a37565b60405180910390f35b6101936103c4565b6040516101a09190610a37565b60405180910390f35b6101b16103d0565b6040516101be9190610a37565b60405180910390f35b6101cf6103dc565b6040516101dc9190610a37565b60405180910390f35b6101ed6103e8565b6040516101fa9190610a37565b60405180910390f35b61020b6103ee565b6040516102189190610a37565b60405180910390f35b6102296103fa565b6040516102369190610a37565b60405180910390f35b610247610406565b005b610263600480360381019061025e9190610a83565b610408565b6040516102709190610a37565b60405180910390f35b610281610538565b60405161028e9190610b04565b60405180910390f35b61029f610561565b6040516102ac9190610a37565b60405180910390f35b6102cf60048036038101906102ca9190610a83565b61056d565b6040516102dc9190610a37565b60405180910390f35b6102ed6105a7565b6040516102fa9190610a37565b60405180910390f35b61031d60048036038101906103189190610b1f565b6105b3565b005b6103276106d3565b6040516103349190610a37565b60405180910390f35b6103456106df565b6040516103529190610a37565b60405180910390f35b61037560048036038101906103709190610a83565b6106eb565b6040516103829190610a37565b60405180910390f35b6103a560048036038101906103a09190610b78565b61085b565b005b670853a0d2313c000081565b600081565b6705c84c203069abf881565b671158e460913d000081565b676124fee993bc000081565b6709b6e64a8ec6000081565b60015481565b6706f05b59d3b2000081565b670b1a2bc2ec50000081565b565b600080820361041a5760009050610532565b81831061046457670de0b6b3a7640000600154670de0b6b3a76400006104409190610bd4565b6714d1120d7b1600006104539190610c08565b61045d9190610c79565b9050610532565b6000670de0b6b3a76400008361047a9190610c08565b84600154670de0b6b3a76400006104919190610bd4565b3073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b81526004016104cc929190610caa565b602060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050d9190610ce8565b6105179190610c08565b6105219190610c08565b61052b9190610c79565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6775f610f70ed2000081565b600080820361057f57600090506105a1565b81670de0b6b3a7640000846105949190610c08565b61059e9190610c79565b90505b92915050565b670c7d713b49da000081565b6105bb610952565b73ffffffffffffffffffffffffffffffffffffffff166105d9610538565b73ffffffffffffffffffffffffffffffffffffffff161461062f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062690610d72565b60405180910390fd5b670de0b6b3a76400008110610679576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067090610dde565b60405180910390fd5b806001819055503373ffffffffffffffffffffffffffffffffffffffff167f9e606dc778840dd5372c982cb6a54acae1e2f85905de7f64d37c63a0c5830e2282426040516106c8929190610caa565b60405180910390a250565b6714d1120d7b16000081565b6714d1120d7b16000081565b60008082036106fd5760009050610855565b6000610709848461056d565b9050670de0b6b3a7640000811061072b576714d1120d7b160000915050610855565b670853a0d2313c00008111610775576000670de0b6b3a76400006705c84c203069abf8836107599190610c08565b6107639190610c79565b61076d9190610dfe565b915050610855565b670b1a2bc2ec50000081116107c6576706f05b59d3b20000670de0b6b3a7640000671158e460913d0000836107aa9190610c08565b6107b49190610c79565b6107be9190610bd4565b915050610855565b670c7d713b49da00008111610817576709b6e64a8ec60000670de0b6b3a76400006714d1120d7b160000836107fb9190610c08565b6108059190610c79565b61080f9190610bd4565b915050610855565b676124fee993bc0000670de0b6b3a76400006775f610f70ed200008361083d9190610c08565b6108479190610c79565b6108519190610bd4565b9150505b92915050565b610863610952565b73ffffffffffffffffffffffffffffffffffffffff16610881610538565b73ffffffffffffffffffffffffffffffffffffffff16146108d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ce90610d72565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093d90610ea4565b60405180910390fd5b61094f8161095a565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b610a3181610a1e565b82525050565b6000602082019050610a4c6000830184610a28565b92915050565b600080fd5b610a6081610a1e565b8114610a6b57600080fd5b50565b600081359050610a7d81610a57565b92915050565b60008060408385031215610a9a57610a99610a52565b5b6000610aa885828601610a6e565b9250506020610ab985828601610a6e565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aee82610ac3565b9050919050565b610afe81610ae3565b82525050565b6000602082019050610b196000830184610af5565b92915050565b600060208284031215610b3557610b34610a52565b5b6000610b4384828501610a6e565b91505092915050565b610b5581610ae3565b8114610b6057600080fd5b50565b600081359050610b7281610b4c565b92915050565b600060208284031215610b8e57610b8d610a52565b5b6000610b9c84828501610b63565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610bdf82610a1e565b9150610bea83610a1e565b9250828203905081811115610c0257610c01610ba5565b5b92915050565b6000610c1382610a1e565b9150610c1e83610a1e565b9250828202610c2c81610a1e565b91508282048414831517610c4357610c42610ba5565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c8482610a1e565b9150610c8f83610a1e565b925082610c9f57610c9e610c4a565b5b828204905092915050565b6000604082019050610cbf6000830185610a28565b610ccc6020830184610a28565b9392505050565b600081519050610ce281610a57565b92915050565b600060208284031215610cfe57610cfd610a52565b5b6000610d0c84828501610cd3565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d5c602083610d15565b9150610d6782610d26565b602082019050919050565b60006020820190508181036000830152610d8b81610d4f565b9050919050565b7f537072656164206d75737420626520736d616c6c6572207468616e2031653138600082015250565b6000610dc8602083610d15565b9150610dd382610d92565b602082019050919050565b60006020820190508181036000830152610df781610dbb565b9050919050565b6000610e0982610a1e565b9150610e1483610a1e565b9250828201905080821115610e2c57610e2b610ba5565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610e8e602683610d15565b9150610e9982610e32565b604082019050919050565b60006020820190508181036000830152610ebd81610e81565b905091905056fea26469706673582212202d22baa6edb286555b021b72d59842b08e83693ef41efdf12c870fb897622c8464736f6c63430008110033",
  "devdoc": {
    "details": "Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*",
    "events": {
      "SpreadChanged(address,uint256,uint256)": {
        "details": "emitted after changing the spread",
        "params": {
          "newSpread": "new spread",
          "performer": "an address of wallet setting a new spread",
          "timestamp": "time of a spread change*"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "calculateDepositRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSpread(uint256)": {
        "params": {
          "_spread": "spread defined by user*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "UsdcVariableUtilisationRatesCalculator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "notice": "Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2"
      },
      "calculateDepositRate(uint256,uint256)": {
        "notice": "Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "notice": "Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits"
      },
      "setSpread(uint256)": {
        "notice": "Sets the spread between deposit and borrow rate, number between 0 and 1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/deployment/avalanche/UsdcVariableUtilisationRatesCalculator.sol:UsdcVariableUtilisationRatesCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 174,
        "contract": "contracts/deployment/avalanche/UsdcVariableUtilisationRatesCalculator.sol:UsdcVariableUtilisationRatesCalculator",
        "label": "spread",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}