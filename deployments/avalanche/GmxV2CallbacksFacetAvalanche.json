{
  "address": "0x677ED839e596b58FBd511DeA0398cB60259bc12d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "name": "DepositCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gmAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "name": "DepositExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "accountAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "longTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "executionFee",
          "type": "uint256"
        }
      ],
      "name": "WithdrawalExecuted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONTROLLER",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Deposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Deposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Deposit.Flags",
              "name": "flags",
              "type": "tuple"
            }
          ],
          "internalType": "struct Deposit.Props",
          "name": "deposit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "value",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address[]",
                      "name": "value",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.AddressItems",
              "name": "addressItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EventUtils.UintKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "value",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.UintArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.UintItems",
              "name": "uintItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256",
                      "name": "value",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct EventUtils.IntKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256[]",
                      "name": "value",
                      "type": "int256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.IntArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.IntItems",
              "name": "intItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "value",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool[]",
                      "name": "value",
                      "type": "bool[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BoolItems",
              "name": "boolItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32KeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "value",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32ArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.Bytes32Items",
              "name": "bytes32Items",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "value",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes[]",
                      "name": "value",
                      "type": "bytes[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BytesItems",
              "name": "bytesItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "value",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct EventUtils.StringKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string[]",
                      "name": "value",
                      "type": "string[]"
                    }
                  ],
                  "internalType": "struct EventUtils.StringArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.StringItems",
              "name": "stringItems",
              "type": "tuple"
            }
          ],
          "internalType": "struct EventUtils.EventLogData",
          "name": "eventData",
          "type": "tuple"
        }
      ],
      "name": "afterDepositCancellation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialLongToken",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "initialShortToken",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Deposit.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "initialLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "initialShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minMarketTokens",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Deposit.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Deposit.Flags",
              "name": "flags",
              "type": "tuple"
            }
          ],
          "internalType": "struct Deposit.Props",
          "name": "deposit",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "value",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address[]",
                      "name": "value",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.AddressItems",
              "name": "addressItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EventUtils.UintKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "value",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.UintArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.UintItems",
              "name": "uintItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256",
                      "name": "value",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct EventUtils.IntKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256[]",
                      "name": "value",
                      "type": "int256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.IntArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.IntItems",
              "name": "intItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "value",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool[]",
                      "name": "value",
                      "type": "bool[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BoolItems",
              "name": "boolItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32KeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "value",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32ArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.Bytes32Items",
              "name": "bytes32Items",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "value",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes[]",
                      "name": "value",
                      "type": "bytes[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BytesItems",
              "name": "bytesItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "value",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct EventUtils.StringKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string[]",
                      "name": "value",
                      "type": "string[]"
                    }
                  ],
                  "internalType": "struct EventUtils.StringArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.StringItems",
              "name": "stringItems",
              "type": "tuple"
            }
          ],
          "internalType": "struct EventUtils.EventLogData",
          "name": "eventData",
          "type": "tuple"
        }
      ],
      "name": "afterDepositExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Withdrawal.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Withdrawal.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Withdrawal.Flags",
              "name": "flags",
              "type": "tuple"
            }
          ],
          "internalType": "struct Withdrawal.Props",
          "name": "withdrawal",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "value",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address[]",
                      "name": "value",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.AddressItems",
              "name": "addressItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EventUtils.UintKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "value",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.UintArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.UintItems",
              "name": "uintItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256",
                      "name": "value",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct EventUtils.IntKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256[]",
                      "name": "value",
                      "type": "int256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.IntArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.IntItems",
              "name": "intItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "value",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool[]",
                      "name": "value",
                      "type": "bool[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BoolItems",
              "name": "boolItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32KeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "value",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32ArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.Bytes32Items",
              "name": "bytes32Items",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "value",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes[]",
                      "name": "value",
                      "type": "bytes[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BytesItems",
              "name": "bytesItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "value",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct EventUtils.StringKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string[]",
                      "name": "value",
                      "type": "string[]"
                    }
                  ],
                  "internalType": "struct EventUtils.StringArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.StringItems",
              "name": "stringItems",
              "type": "tuple"
            }
          ],
          "internalType": "struct EventUtils.EventLogData",
          "name": "eventData",
          "type": "tuple"
        }
      ],
      "name": "afterWithdrawalCancellation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "key",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "account",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "receiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "callbackContract",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "uiFeeReceiver",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "market",
                  "type": "address"
                },
                {
                  "internalType": "address[]",
                  "name": "longTokenSwapPath",
                  "type": "address[]"
                },
                {
                  "internalType": "address[]",
                  "name": "shortTokenSwapPath",
                  "type": "address[]"
                }
              ],
              "internalType": "struct Withdrawal.Addresses",
              "name": "addresses",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "marketTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minLongTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minShortTokenAmount",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "updatedAtBlock",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "executionFee",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "callbackGasLimit",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Withdrawal.Numbers",
              "name": "numbers",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "bool",
                  "name": "shouldUnwrapNativeToken",
                  "type": "bool"
                }
              ],
              "internalType": "struct Withdrawal.Flags",
              "name": "flags",
              "type": "tuple"
            }
          ],
          "internalType": "struct Withdrawal.Props",
          "name": "withdrawal",
          "type": "tuple"
        },
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address",
                      "name": "value",
                      "type": "address"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "address[]",
                      "name": "value",
                      "type": "address[]"
                    }
                  ],
                  "internalType": "struct EventUtils.AddressArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.AddressItems",
              "name": "addressItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256",
                      "name": "value",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct EventUtils.UintKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "uint256[]",
                      "name": "value",
                      "type": "uint256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.UintArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.UintItems",
              "name": "uintItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256",
                      "name": "value",
                      "type": "int256"
                    }
                  ],
                  "internalType": "struct EventUtils.IntKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "int256[]",
                      "name": "value",
                      "type": "int256[]"
                    }
                  ],
                  "internalType": "struct EventUtils.IntArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.IntItems",
              "name": "intItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool",
                      "name": "value",
                      "type": "bool"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bool[]",
                      "name": "value",
                      "type": "bool[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BoolArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BoolItems",
              "name": "boolItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32",
                      "name": "value",
                      "type": "bytes32"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32KeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes32[]",
                      "name": "value",
                      "type": "bytes32[]"
                    }
                  ],
                  "internalType": "struct EventUtils.Bytes32ArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.Bytes32Items",
              "name": "bytes32Items",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes",
                      "name": "value",
                      "type": "bytes"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "bytes[]",
                      "name": "value",
                      "type": "bytes[]"
                    }
                  ],
                  "internalType": "struct EventUtils.BytesArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.BytesItems",
              "name": "bytesItems",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string",
                      "name": "value",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct EventUtils.StringKeyValue[]",
                  "name": "items",
                  "type": "tuple[]"
                },
                {
                  "components": [
                    {
                      "internalType": "string",
                      "name": "key",
                      "type": "string"
                    },
                    {
                      "internalType": "string[]",
                      "name": "value",
                      "type": "string[]"
                    }
                  ],
                  "internalType": "struct EventUtils.StringArrayKeyValue[]",
                  "name": "arrayItems",
                  "type": "tuple[]"
                }
              ],
              "internalType": "struct EventUtils.StringItems",
              "name": "stringItems",
              "type": "tuple"
            }
          ],
          "internalType": "struct EventUtils.EventLogData",
          "name": "eventData",
          "type": "tuple"
        }
      ],
      "name": "afterWithdrawalExecution",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3969296f9190d46e2250442bdf5e871018b9bf08b46b48af0151fc32ff959c1f",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x677ED839e596b58FBd511DeA0398cB60259bc12d",
    "transactionIndex": 0,
    "gasUsed": "2910724",
    "logsBloom": "0x
    "blockHash": "0x99456d998c58e8fe866b0dc530abac1eae3f60c7281ced11dc1a81fcdee2181e",
    "transactionHash": "0x3969296f9190d46e2250442bdf5e871018b9bf08b46b48af0151fc32ff959c1f",
    "logs": [],
    "blockNumber": 41585696,
    "cumulativeGasUsed": "2910724",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7eaafd6cd407151e85d714c602175e8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"DepositCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gmAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"DepositExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"accountAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"longTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"}],\"name\":\"WithdrawalExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTROLLER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Deposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Deposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"}],\"internalType\":\"struct Deposit.Props\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"internalType\":\"struct EventUtils.AddressKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"internalType\":\"struct EventUtils.AddressArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.AddressItems\",\"name\":\"addressItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct EventUtils.UintKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EventUtils.UintArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.UintItems\",\"name\":\"uintItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct EventUtils.IntKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"internalType\":\"struct EventUtils.IntArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.IntItems\",\"name\":\"intItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct EventUtils.BoolKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"internalType\":\"struct EventUtils.BoolArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BoolItems\",\"name\":\"boolItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct EventUtils.Bytes32KeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct EventUtils.Bytes32ArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.Bytes32Items\",\"name\":\"bytes32Items\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct EventUtils.BytesKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"internalType\":\"struct EventUtils.BytesArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BytesItems\",\"name\":\"bytesItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct EventUtils.StringKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"internalType\":\"struct EventUtils.StringArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.StringItems\",\"name\":\"stringItems\",\"type\":\"tuple\"}],\"internalType\":\"struct EventUtils.EventLogData\",\"name\":\"eventData\",\"type\":\"tuple\"}],\"name\":\"afterDepositCancellation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialLongToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialShortToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Deposit.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minMarketTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Deposit.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Deposit.Flags\",\"name\":\"flags\",\"type\":\"tuple\"}],\"internalType\":\"struct Deposit.Props\",\"name\":\"deposit\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"internalType\":\"struct EventUtils.AddressKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"internalType\":\"struct EventUtils.AddressArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.AddressItems\",\"name\":\"addressItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct EventUtils.UintKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EventUtils.UintArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.UintItems\",\"name\":\"uintItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct EventUtils.IntKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"internalType\":\"struct EventUtils.IntArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.IntItems\",\"name\":\"intItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct EventUtils.BoolKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"internalType\":\"struct EventUtils.BoolArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BoolItems\",\"name\":\"boolItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct EventUtils.Bytes32KeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct EventUtils.Bytes32ArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.Bytes32Items\",\"name\":\"bytes32Items\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct EventUtils.BytesKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"internalType\":\"struct EventUtils.BytesArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BytesItems\",\"name\":\"bytesItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct EventUtils.StringKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"internalType\":\"struct EventUtils.StringArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.StringItems\",\"name\":\"stringItems\",\"type\":\"tuple\"}],\"internalType\":\"struct EventUtils.EventLogData\",\"name\":\"eventData\",\"type\":\"tuple\"}],\"name\":\"afterDepositExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Withdrawal.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Withdrawal.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Withdrawal.Flags\",\"name\":\"flags\",\"type\":\"tuple\"}],\"internalType\":\"struct Withdrawal.Props\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"internalType\":\"struct EventUtils.AddressKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"internalType\":\"struct EventUtils.AddressArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.AddressItems\",\"name\":\"addressItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct EventUtils.UintKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EventUtils.UintArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.UintItems\",\"name\":\"uintItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct EventUtils.IntKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"internalType\":\"struct EventUtils.IntArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.IntItems\",\"name\":\"intItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct EventUtils.BoolKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"internalType\":\"struct EventUtils.BoolArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BoolItems\",\"name\":\"boolItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct EventUtils.Bytes32KeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct EventUtils.Bytes32ArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.Bytes32Items\",\"name\":\"bytes32Items\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct EventUtils.BytesKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"internalType\":\"struct EventUtils.BytesArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BytesItems\",\"name\":\"bytesItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct EventUtils.StringKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"internalType\":\"struct EventUtils.StringArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.StringItems\",\"name\":\"stringItems\",\"type\":\"tuple\"}],\"internalType\":\"struct EventUtils.EventLogData\",\"name\":\"eventData\",\"type\":\"tuple\"}],\"name\":\"afterWithdrawalCancellation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uiFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"longTokenSwapPath\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"shortTokenSwapPath\",\"type\":\"address[]\"}],\"internalType\":\"struct Withdrawal.Addresses\",\"name\":\"addresses\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"marketTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minLongTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minShortTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAtBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"callbackGasLimit\",\"type\":\"uint256\"}],\"internalType\":\"struct Withdrawal.Numbers\",\"name\":\"numbers\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"shouldUnwrapNativeToken\",\"type\":\"bool\"}],\"internalType\":\"struct Withdrawal.Flags\",\"name\":\"flags\",\"type\":\"tuple\"}],\"internalType\":\"struct Withdrawal.Props\",\"name\":\"withdrawal\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"internalType\":\"struct EventUtils.AddressKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"value\",\"type\":\"address[]\"}],\"internalType\":\"struct EventUtils.AddressArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.AddressItems\",\"name\":\"addressItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct EventUtils.UintKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"value\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EventUtils.UintArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.UintItems\",\"name\":\"uintItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"value\",\"type\":\"int256\"}],\"internalType\":\"struct EventUtils.IntKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"int256[]\",\"name\":\"value\",\"type\":\"int256[]\"}],\"internalType\":\"struct EventUtils.IntArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.IntItems\",\"name\":\"intItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct EventUtils.BoolKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bool[]\",\"name\":\"value\",\"type\":\"bool[]\"}],\"internalType\":\"struct EventUtils.BoolArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BoolItems\",\"name\":\"boolItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"value\",\"type\":\"bytes32\"}],\"internalType\":\"struct EventUtils.Bytes32KeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"value\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct EventUtils.Bytes32ArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.Bytes32Items\",\"name\":\"bytes32Items\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct EventUtils.BytesKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes[]\",\"name\":\"value\",\"type\":\"bytes[]\"}],\"internalType\":\"struct EventUtils.BytesArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.BytesItems\",\"name\":\"bytesItems\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct EventUtils.StringKeyValue[]\",\"name\":\"items\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"value\",\"type\":\"string[]\"}],\"internalType\":\"struct EventUtils.StringArrayKeyValue[]\",\"name\":\"arrayItems\",\"type\":\"tuple[]\"}],\"internalType\":\"struct EventUtils.StringItems\",\"name\":\"stringItems\",\"type\":\"tuple\"}],\"internalType\":\"struct EventUtils.EventLogData\",\"name\":\"eventData\",\"type\":\"tuple\"}],\"name\":\"afterWithdrawalExecution\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/avalanche/GmxV2CallbacksFacetAvalanche.sol\":\"GmxV2CallbacksFacetAvalanche\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\n// contract that uses keccak slots instead of the standard storage layout.\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n */\\nabstract contract ReentrancyGuardKeccak {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rgs._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rgs._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xff292b8761ea7ade758ddc700e6e8b8727210285859db6a48d7bba1778ab7e1a\",\"license\":\"MIT\"},\"contracts/facets/GmxV2CallbacksFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 799a1765b64edc5c158198ef84f785af79e234ae;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/IWrappedNativeToken.sol\\\";\\n\\nimport \\\"../interfaces/gmx-v2/Deposit.sol\\\";\\nimport \\\"../interfaces/gmx-v2/Withdrawal.sol\\\";\\nimport \\\"../interfaces/gmx-v2/IRoleStore.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/gmx-v2/IDepositCallbackReceiver.sol\\\";\\nimport \\\"../interfaces/gmx-v2/EventUtils.sol\\\";\\nimport \\\"../interfaces/gmx-v2/IWithdrawalCallbackReceiver.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\nabstract contract GmxV2CallbacksFacet is IDepositCallbackReceiver, IWithdrawalCallbackReceiver, ReentrancyGuardKeccak {\\n    using TransferHelper for address;\\n    using Deposit for Deposit.Props;\\n    using Withdrawal for Withdrawal.Props;\\n\\n    // CONSTANTS\\n    bytes32 constant public CONTROLLER = keccak256(abi.encode(\\\"CONTROLLER\\\"));\\n\\n    // GMX contracts\\n    function getGmxV2RoleStore() internal pure virtual returns (address);\\n\\n    // Mappings\\n    function marketToLongToken(address market) internal virtual pure returns (address);\\n\\n    function marketToShortToken(address market) internal virtual pure returns (address);\\n\\n    function isCallerAuthorized(address _caller) internal view returns (bool){\\n        IRoleStore roleStore = IRoleStore(getGmxV2RoleStore());\\n        if(roleStore.hasRole(_caller, CONTROLLER)){\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function wrapNativeToken() internal {\\n        if(address(this).balance > 0){\\n            IWrappedNativeToken nativeToken = IWrappedNativeToken(DeploymentConstants.getNativeToken());\\n            nativeToken.deposit{value : address(this).balance}();\\n            DiamondStorageLib.addOwnedAsset(DeploymentConstants.getNativeTokenSymbol(), DeploymentConstants.getNativeToken());\\n        }\\n    }\\n\\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external onlyGmxV2Keeper nonReentrant override {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        uint256 receivedMarketTokens = eventData.uintItems.items[0].value;\\n        address gmToken = deposit.addresses.market;\\n\\n        uint256 gmTokenBalance = IERC20Metadata(gmToken).balanceOf(address(this));\\n        // Add owned assets\\n        if( gmTokenBalance > 0){\\n            DiamondStorageLib.addOwnedAsset(tokenManager.tokenAddressToSymbol(gmToken), gmToken);\\n        }\\n\\n        // Native token transfer happens after execution of this method, but the amounts should be dust ones anyway and by wrapping here we get a chance to wrap any previously sent native token\\n        wrapNativeToken();\\n\\n        tokenManager.increaseProtocolExposure(\\n            tokenManager.tokenAddressToSymbol(gmToken),\\n            receivedMarketTokens * 1e18 / 10**IERC20Metadata(gmToken).decimals()\\n        );\\n\\n        tokenManager.setPendingExposureToZero(tokenManager.tokenAddressToSymbol(gmToken), deposit.account());\\n        \\n        // Unfreeze account\\n        DiamondStorageLib.unfreezeAccount(msg.sender);\\n\\n        emit DepositExecuted(\\n            msg.sender,\\n            deposit.addresses.market,\\n            receivedMarketTokens,\\n            deposit.numbers.executionFee\\n        );\\n    }\\n\\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external onlyGmxV2Keeper nonReentrant override {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        address longToken = marketToLongToken(deposit.addresses.market);\\n        address shortToken = marketToShortToken(deposit.addresses.market);\\n\\n\\n        // Add owned assets\\n        if(IERC20Metadata(longToken).balanceOf(address(this)) > 0){\\n            DiamondStorageLib.addOwnedAsset(tokenManager.tokenAddressToSymbol(longToken), longToken);\\n        }\\n        if(IERC20Metadata(shortToken).balanceOf(address(this)) > 0){\\n            DiamondStorageLib.addOwnedAsset(tokenManager.tokenAddressToSymbol(shortToken), shortToken);\\n        }\\n\\n        // Native token transfer happens after execution of this method, but the amounts should be dust ones anyway and by wrapping here we get a chance to wrap any previously sent native token\\n        wrapNativeToken();\\n\\n        if(deposit.numbers.initialLongTokenAmount > 0) {\\n            tokenManager.increaseProtocolExposure(\\n                tokenManager.tokenAddressToSymbol(longToken),\\n                deposit.numbers.initialLongTokenAmount * 1e18 / 10**IERC20Metadata(longToken).decimals()\\n            );\\n        }\\n        if(deposit.numbers.initialShortTokenAmount > 0) {\\n            tokenManager.increaseProtocolExposure(\\n                tokenManager.tokenAddressToSymbol(shortToken),\\n                deposit.numbers.initialShortTokenAmount * 1e18 / 10**IERC20Metadata(shortToken).decimals()\\n            );\\n        }\\n\\n        tokenManager.setPendingExposureToZero(tokenManager.tokenAddressToSymbol(deposit.addresses.market), deposit.account());\\n\\n        DiamondStorageLib.unfreezeAccount(msg.sender);\\n        emit DepositCancelled(\\n            msg.sender,\\n            deposit.addresses.market,\\n            deposit.numbers.executionFee\\n        );\\n    }\\n\\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external onlyGmxV2Keeper nonReentrant override {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        address longToken = marketToLongToken(withdrawal.addresses.market);\\n        address shortToken = marketToShortToken(withdrawal.addresses.market);\\n        uint256 longOutputAmount = eventData.uintItems.items[0].value;\\n        uint256 shortOutputAmount = eventData.uintItems.items[1].value;\\n\\n        // Add owned assets\\n        if(IERC20Metadata(longToken).balanceOf(address(this)) > 0){\\n            DiamondStorageLib.addOwnedAsset(tokenManager.tokenAddressToSymbol(longToken), longToken);\\n        }\\n        if(IERC20Metadata(shortToken).balanceOf(address(this)) > 0){\\n            DiamondStorageLib.addOwnedAsset(tokenManager.tokenAddressToSymbol(shortToken), shortToken);\\n        }\\n        \\n        if(longOutputAmount > 0) {\\n            tokenManager.increaseProtocolExposure(\\n                tokenManager.tokenAddressToSymbol(longToken),\\n                longOutputAmount * 1e18 / 10**IERC20Metadata(longToken).decimals()\\n            );\\n        }\\n        if(shortOutputAmount > 0) {\\n            tokenManager.increaseProtocolExposure(\\n                tokenManager.tokenAddressToSymbol(shortToken),\\n                shortOutputAmount * 1e18 / 10**IERC20Metadata(shortToken).decimals()\\n            );\\n        }\\n\\n        tokenManager.setPendingExposureToZero(tokenManager.tokenAddressToSymbol(longToken), withdrawal.account());\\n        tokenManager.setPendingExposureToZero(tokenManager.tokenAddressToSymbol(shortToken), withdrawal.account());\\n        \\n        // Native token transfer happens after execution of this method, but the amounts should be dust ones anyway and by wrapping here we get a chance to wrap any previously sent native token\\n        wrapNativeToken();\\n\\n        DiamondStorageLib.unfreezeAccount(msg.sender);\\n        emit WithdrawalExecuted(\\n            msg.sender,\\n            withdrawal.addresses.market,\\n            longOutputAmount,\\n            shortOutputAmount,\\n            withdrawal.numbers.executionFee\\n        );\\n    }\\n\\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external onlyGmxV2Keeper nonReentrant override {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        address longToken = marketToLongToken(withdrawal.addresses.market);\\n        address shortToken = marketToShortToken(withdrawal.addresses.market);\\n        \\n        // Add owned assets\\n        if(IERC20Metadata(withdrawal.addresses.market).balanceOf(address(this)) > 0){\\n            DiamondStorageLib.addOwnedAsset(tokenManager.tokenAddressToSymbol(withdrawal.addresses.market), withdrawal.addresses.market);\\n        }\\n\\n        // Native token transfer happens after execution of this method, but the amounts should be dust ones anyway and by wrapping here we get a chance to wrap any previously sent native token\\n        wrapNativeToken();\\n\\n        tokenManager.increaseProtocolExposure(\\n            tokenManager.tokenAddressToSymbol(withdrawal.addresses.market),\\n            withdrawal.numbers.marketTokenAmount * 1e18 / 10**IERC20Metadata(withdrawal.addresses.market).decimals()\\n        );\\n\\n        tokenManager.setPendingExposureToZero(tokenManager.tokenAddressToSymbol(longToken), withdrawal.account());\\n        tokenManager.setPendingExposureToZero(tokenManager.tokenAddressToSymbol(shortToken), withdrawal.account());\\n\\n        DiamondStorageLib.unfreezeAccount(msg.sender);\\n        emit WithdrawalCancelled(\\n            msg.sender,\\n            withdrawal.addresses.market,\\n            withdrawal.numbers.executionFee\\n        );\\n    }\\n\\n    // MODIFIERS\\n    modifier onlyGmxV2Keeper() {\\n        require(isCallerAuthorized(msg.sender), \\\"Must be a GMX V2 authorized Keeper\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after depositing collateral to gm market\\n     * @param accountAddress address of a SmartLoanDiamondBeacon\\n     * @param market address of a gm market\\n     * @param gmAmount amount of gm tokens received\\n     * @param executionFee amount of execution fee paid\\n    **/\\n    event DepositExecuted(address indexed accountAddress, address indexed market, uint256 gmAmount, uint256 executionFee);\\n\\n    /**\\n     * @dev emitted after gm market deposit order was cancelled\\n     * @param accountAddress address of a SmartLoanDiamondBeacon\\n     * @param market address of a gm market\\n     * @param executionFee amount of execution fee paid\\n    **/\\n    event DepositCancelled(address indexed accountAddress, address indexed market, uint256 executionFee);\\n\\n    /**\\n     * @dev emitted after withdrawing collateral from gm market\\n     * @param accountAddress address of a SmartLoanDiamondBeacon\\n     * @param market address of a gm market\\n     * @param longTokenAmount amount of long tokens received\\n     * @param shortTokenAmount amount of short tokens received\\n     * @param executionFee amount of execution fee paid\\n    **/\\n    event WithdrawalExecuted(address indexed accountAddress, address indexed market, uint256 longTokenAmount, uint256 shortTokenAmount, uint256 executionFee);\\n\\n    /**\\n     * @dev emitted after gm market withdrawal order was cancelled\\n     * @param accountAddress address of a SmartLoanDiamondBeacon\\n     * @param market address of a gm market\\n     * @param executionFee amount of execution fee paid\\n    **/\\n    event WithdrawalCancelled(address indexed accountAddress, address indexed market, uint256 executionFee);\\n}\\n\",\"keccak256\":\"0x149a7beb11c68613f212fc5040fcea0e2cec8f8bb3d6d12d92978065a2221daa\",\"license\":\"BUSL-1.1\"},\"contracts/facets/avalanche/GmxV2CallbacksFacetAvalanche.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2c04f8bbc145fcb8a91c9e51438a65729a4a81fc;\\npragma solidity 0.8.17;\\n\\n//This path is updated during deployment\\nimport \\\"../GmxV2CallbacksFacet.sol\\\";\\n\\ncontract GmxV2CallbacksFacetAvalanche is GmxV2CallbacksFacet {\\n    using TransferHelper for address;\\n\\n    // https://github.com/gmx-io/gmx-synthetics/blob/main/deployments/avalanche/\\n    // GMX contracts\\n\\n    function getGmxV2RoleStore() internal pure virtual override returns (address){\\n        return 0xA44F830B6a2B6fa76657a3B92C1fe74fcB7C6AfD;\\n    }\\n\\n    // Markets\\n    address constant GM_BTC_BTCb_USDC = 0xFb02132333A79C8B5Bd0b64E3AbccA5f7fAf2937;\\n    address constant GM_ETH_WETHe_USDC = 0xB7e69749E3d2EDd90ea59A4932EFEa2D41E245d7;\\n    address constant GM_AVAX_WAVAX_USDC = 0x913C1F46b48b3eD35E7dc3Cf754d4ae8499F31CF;\\n\\n    // Tokens\\n    address constant USDC = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\\n    address constant BTCb = 0x152b9d0FdC40C096757F570A51E494bd4b943E50;\\n    address constant WETHe = 0x49D5c2BdFfac6CE2BFdB6640F4F80f226bc10bAB;\\n    address constant WAVAX = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    // Mappings\\n    function marketToLongToken(address market) internal override pure returns (address){\\n        if(market == GM_BTC_BTCb_USDC){\\n            return BTCb;\\n        } else if (market == GM_ETH_WETHe_USDC){\\n            return WETHe;\\n        } else if (market == GM_AVAX_WAVAX_USDC){\\n            return WAVAX;\\n        } else {\\n            revert(\\\"Market not supported\\\");\\n        }\\n    }\\n\\n    function marketToShortToken(address market) internal override pure returns (address){\\n        if(market == GM_BTC_BTCb_USDC){\\n            return USDC;\\n        } else if (market == GM_ETH_WETHe_USDC){\\n            return USDC;\\n        } else if (market == GM_AVAX_WAVAX_USDC){\\n            return USDC;\\n        } else {\\n            revert(\\\"Market not supported\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x80997b1a293a496c11c932198304427f0d2d0f759b2cd2a797934eb21846b2d1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\n        address asset;\\n        bytes32 symbol;\\n        bytes32 identifier;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0x10a1d6e52d762a40d3a632aaf2807daf64e5fdc66047c5eec6f451ad4c760532\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n    function increasePendingExposure ( bytes32 , address, uint256 ) external;\\n    function setPendingExposureToZero ( bytes32, address ) external;\\n}\",\"keccak256\":\"0x90b06911b212a857f906bf8904eed90f89fa821541c81cec85d3f6ad52e99120\"},\"contracts/interfaces/IWrappedNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IWrappedNativeToken {\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n\\n}\",\"keccak256\":\"0xda3d2a135faa6e2ae9b10fa2727a498fdd64e26ebf1e367e2b031e7d35647196\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/facets/avalanche/ITraderJoeV2Facet.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../../joe-v2/ILBRouter.sol\\\";\\n\\ninterface ITraderJoeV2Facet {\\n\\n    struct TraderJoeV2Bin {\\n        ILBPair pair;\\n        uint24 id;\\n    }\\n\\n    struct RemoveLiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint16 binStep;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256[] ids;\\n        uint256[] amounts;\\n        uint256 deadline;\\n    }\\n\\n    function fundLiquidityTraderJoeV2(ILBPair pair, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    function withdrawLiquidityTraderJoeV2(ILBPair pair, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    function addLiquidityTraderJoeV2(ILBRouter.LiquidityParameters memory liquidityParameters) external;\\n\\n    function removeLiquidityTraderJoeV2(RemoveLiquidityParameters memory parameters) external;\\n\\n    function getOwnedTraderJoeV2Bins() external view returns (TraderJoeV2Bin[] memory result);\\n\\n}\\n\",\"keccak256\":\"0x33d922cfb95b24e840904cd09a606dd5b427d1be5217704ac7899e0c3b27b15a\"},\"contracts/interfaces/gmx-v2/Deposit.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n// @title Deposit\\n// @dev Struct for deposits\\nlibrary Deposit {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n    }\\n\\n    // @param account the account depositing liquidity\\n    // @param receiver the address to send the liquidity tokens to\\n    // @param callbackContract the callback contract\\n    // @param uiFeeReceiver the ui fee receiver\\n    // @param market the market to deposit to\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address initialLongToken;\\n        address initialShortToken;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n    // @param initialLongTokenAmount the amount of long tokens to deposit\\n    // @param initialShortTokenAmount the amount of short tokens to deposit\\n    // @param minMarketTokens the minimum acceptable number of liquidity tokens\\n    // @param updatedAtBlock the block that the deposit was last updated at\\n    // sending funds back to the user in case the deposit gets cancelled\\n    // @param executionFee the execution fee for keepers\\n    // @param callbackGasLimit the gas limit for the callbackContract\\n    struct Numbers {\\n        uint256 initialLongTokenAmount;\\n        uint256 initialShortTokenAmount;\\n        uint256 minMarketTokens;\\n        uint256 updatedAtBlock;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function initialLongToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialLongToken;\\n    }\\n\\n    function setInitialLongToken(Props memory props, address value) internal pure {\\n        props.addresses.initialLongToken = value;\\n    }\\n\\n    function initialShortToken(Props memory props) internal pure returns (address) {\\n        return props.addresses.initialShortToken;\\n    }\\n\\n    function setInitialShortToken(Props memory props, address value) internal pure {\\n        props.addresses.initialShortToken = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function initialLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialLongTokenAmount;\\n    }\\n\\n    function setInitialLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialLongTokenAmount = value;\\n    }\\n\\n    function initialShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.initialShortTokenAmount;\\n    }\\n\\n    function setInitialShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.initialShortTokenAmount = value;\\n    }\\n\\n    function minMarketTokens(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minMarketTokens;\\n    }\\n\\n    function setMinMarketTokens(Props memory props, uint256 value) internal pure {\\n        props.numbers.minMarketTokens = value;\\n    }\\n\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtBlock = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n}\\n\",\"keccak256\":\"0xd32e176f76a5e87b9918813a1ea7c4f6bd0bd1fc29aeeb834e0d847f59da5db7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/gmx-v2/EventUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EventUtils {\\n    struct EmitPositionDecreaseParams {\\n        bytes32 key;\\n        address account;\\n        address market;\\n        address collateralToken;\\n        bool isLong;\\n    }\\n\\n    struct EventLogData {\\n        AddressItems addressItems;\\n        UintItems uintItems;\\n        IntItems intItems;\\n        BoolItems boolItems;\\n        Bytes32Items bytes32Items;\\n        BytesItems bytesItems;\\n        StringItems stringItems;\\n    }\\n\\n    struct AddressItems {\\n        AddressKeyValue[] items;\\n        AddressArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct UintItems {\\n        UintKeyValue[] items;\\n        UintArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct IntItems {\\n        IntKeyValue[] items;\\n        IntArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BoolItems {\\n        BoolKeyValue[] items;\\n        BoolArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct Bytes32Items {\\n        Bytes32KeyValue[] items;\\n        Bytes32ArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct BytesItems {\\n        BytesKeyValue[] items;\\n        BytesArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct StringItems {\\n        StringKeyValue[] items;\\n        StringArrayKeyValue[] arrayItems;\\n    }\\n\\n    struct AddressKeyValue {\\n        string key;\\n        address value;\\n    }\\n\\n    struct AddressArrayKeyValue {\\n        string key;\\n        address[] value;\\n    }\\n\\n    struct UintKeyValue {\\n        string key;\\n        uint256 value;\\n    }\\n\\n    struct UintArrayKeyValue {\\n        string key;\\n        uint256[] value;\\n    }\\n\\n    struct IntKeyValue {\\n        string key;\\n        int256 value;\\n    }\\n\\n    struct IntArrayKeyValue {\\n        string key;\\n        int256[] value;\\n    }\\n\\n    struct BoolKeyValue {\\n        string key;\\n        bool value;\\n    }\\n\\n    struct BoolArrayKeyValue {\\n        string key;\\n        bool[] value;\\n    }\\n\\n    struct Bytes32KeyValue {\\n        string key;\\n        bytes32 value;\\n    }\\n\\n    struct Bytes32ArrayKeyValue {\\n        string key;\\n        bytes32[] value;\\n    }\\n\\n    struct BytesKeyValue {\\n        string key;\\n        bytes value;\\n    }\\n\\n    struct BytesArrayKeyValue {\\n        string key;\\n        bytes[] value;\\n    }\\n\\n    struct StringKeyValue {\\n        string key;\\n        string value;\\n    }\\n\\n    struct StringArrayKeyValue {\\n        string key;\\n        string[] value;\\n    }\\n\\n    function initItems(AddressItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.AddressKeyValue[](size);\\n    }\\n\\n    function initArrayItems(AddressItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.AddressArrayKeyValue[](size);\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(AddressItems memory items, uint256 index, string memory key, address[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(UintItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.UintKeyValue[](size);\\n    }\\n\\n    function initArrayItems(UintItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.UintArrayKeyValue[](size);\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(UintItems memory items, uint256 index, string memory key, uint256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(IntItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.IntKeyValue[](size);\\n    }\\n\\n    function initArrayItems(IntItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.IntArrayKeyValue[](size);\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(IntItems memory items, uint256 index, string memory key, int256[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BoolItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BoolKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BoolItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BoolArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BoolItems memory items, uint256 index, string memory key, bool[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.Bytes32KeyValue[](size);\\n    }\\n\\n    function initArrayItems(Bytes32Items memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.Bytes32ArrayKeyValue[](size);\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32 value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(Bytes32Items memory items, uint256 index, string memory key, bytes32[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(BytesItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.BytesKeyValue[](size);\\n    }\\n\\n    function initArrayItems(BytesItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.BytesArrayKeyValue[](size);\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(BytesItems memory items, uint256 index, string memory key, bytes[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n\\n    function initItems(StringItems memory items, uint256 size) internal pure {\\n        items.items = new EventUtils.StringKeyValue[](size);\\n    }\\n\\n    function initArrayItems(StringItems memory items, uint256 size) internal pure {\\n        items.arrayItems = new EventUtils.StringArrayKeyValue[](size);\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string memory value) internal pure {\\n        items.items[index].key = key;\\n        items.items[index].value = value;\\n    }\\n\\n    function setItem(StringItems memory items, uint256 index, string memory key, string[] memory value) internal pure {\\n        items.arrayItems[index].key = key;\\n        items.arrayItems[index].value = value;\\n    }\\n}\",\"keccak256\":\"0xa5b9902ed5e9bc502f8337dfd9d44cdd48aed2f2cd5d22c8517fcf000339ca72\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/gmx-v2/IDepositCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EventUtils.sol\\\";\\nimport \\\"./Deposit.sol\\\";\\n\\n// @title IDepositCallbackReceiver\\n// @dev interface for a deposit callback contract\\ninterface IDepositCallbackReceiver {\\n    // @dev called after a deposit execution\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was executed\\n    function afterDepositExecution(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after a deposit cancellation\\n    // @param key the key of the deposit\\n    // @param deposit the deposit that was cancelled\\n    function afterDepositCancellation(bytes32 key, Deposit.Props memory deposit, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0x690f02c9f14cd1df4dc6531e5878cea8f2ababf6560791a6c986f0595a699520\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/gmx-v2/IRoleStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IRoleStore\\n * @dev Stores roles and their members.\\n */\\ninterface IRoleStore {\\n    /**\\n     * @dev Returns true if the given account has the specified role.\\n     *\\n     * @param account The address of the account.\\n     * @param roleKey The key of the role.\\n     * @return True if the account has the role, false otherwise.\\n     */\\n    function hasRole(address account, bytes32 roleKey) external view returns (bool);\\n}\",\"keccak256\":\"0x535c080ea19156c071d2f7627559cac55657b30b9baa8bf4c4526700560a63c8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/gmx-v2/IWithdrawalCallbackReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./EventUtils.sol\\\";\\nimport \\\"./Withdrawal.sol\\\";\\n\\n// @title IWithdrawalCallbackReceiver\\n// @dev interface for a withdrawal callback contract\\ninterface IWithdrawalCallbackReceiver {\\n    // @dev called after a withdrawal execution\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was executed\\n    function afterWithdrawalExecution(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external;\\n\\n    // @dev called after a withdrawal cancellation\\n    // @param key the key of the withdrawal\\n    // @param withdrawal the withdrawal that was cancelled\\n    function afterWithdrawalCancellation(bytes32 key, Withdrawal.Props memory withdrawal, EventUtils.EventLogData memory eventData) external;\\n}\\n\",\"keccak256\":\"0x944d59d5fab3e3027f2651fb82ccddfec0da013f51e79a3b2b75b9a25d2969f5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/gmx-v2/Withdrawal.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Withdrawal\\n * @dev Struct for withdrawals\\n */\\nlibrary Withdrawal {\\n    // @dev there is a limit on the number of fields a struct can have when being passed\\n    // or returned as a memory variable which can cause \\\"Stack too deep\\\" errors\\n    // use sub-structs to avoid this issue\\n    // @param addresses address values\\n    // @param numbers number values\\n    // @param flags boolean values\\n    struct Props {\\n        Addresses addresses;\\n        Numbers numbers;\\n        Flags flags;\\n    }\\n\\n     // @param account The account to withdraw for.\\n     // @param receiver The address that will receive the withdrawn tokens.\\n     // @param callbackContract The contract that will be called back.\\n     // @param uiFeeReceiver The ui fee receiver.\\n     // @param market The market on which the withdrawal will be executed.\\n    struct Addresses {\\n        address account;\\n        address receiver;\\n        address callbackContract;\\n        address uiFeeReceiver;\\n        address market;\\n        address[] longTokenSwapPath;\\n        address[] shortTokenSwapPath;\\n    }\\n\\n     // @param marketTokenAmount The amount of market tokens that will be withdrawn.\\n     // @param minLongTokenAmount The minimum amount of long tokens that must be withdrawn.\\n     // @param minShortTokenAmount The minimum amount of short tokens that must be withdrawn.\\n     // @param updatedAtBlock The block at which the withdrawal was last updated.\\n     // @param executionFee The execution fee for the withdrawal.\\n     // @param callbackGasLimit The gas limit for calling the callback contract.\\n    struct Numbers {\\n        uint256 marketTokenAmount;\\n        uint256 minLongTokenAmount;\\n        uint256 minShortTokenAmount;\\n        uint256 updatedAtBlock;\\n        uint256 executionFee;\\n        uint256 callbackGasLimit;\\n    }\\n\\n    // @param shouldUnwrapNativeToken whether to unwrap the native token when\\n    struct Flags {\\n        bool shouldUnwrapNativeToken;\\n    }\\n\\n    function account(Props memory props) internal pure returns (address) {\\n        return props.addresses.account;\\n    }\\n\\n    function setAccount(Props memory props, address value) internal pure {\\n        props.addresses.account = value;\\n    }\\n\\n    function receiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.receiver;\\n    }\\n\\n    function setReceiver(Props memory props, address value) internal pure {\\n        props.addresses.receiver = value;\\n    }\\n\\n    function callbackContract(Props memory props) internal pure returns (address) {\\n        return props.addresses.callbackContract;\\n    }\\n\\n    function setCallbackContract(Props memory props, address value) internal pure {\\n        props.addresses.callbackContract = value;\\n    }\\n\\n    function uiFeeReceiver(Props memory props) internal pure returns (address) {\\n        return props.addresses.uiFeeReceiver;\\n    }\\n\\n    function setUiFeeReceiver(Props memory props, address value) internal pure {\\n        props.addresses.uiFeeReceiver = value;\\n    }\\n\\n    function market(Props memory props) internal pure returns (address) {\\n        return props.addresses.market;\\n    }\\n\\n    function setMarket(Props memory props, address value) internal pure {\\n        props.addresses.market = value;\\n    }\\n\\n    function longTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.longTokenSwapPath;\\n    }\\n\\n    function setLongTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.longTokenSwapPath = value;\\n    }\\n\\n    function shortTokenSwapPath(Props memory props) internal pure returns (address[] memory) {\\n        return props.addresses.shortTokenSwapPath;\\n    }\\n\\n    function setShortTokenSwapPath(Props memory props, address[] memory value) internal pure {\\n        props.addresses.shortTokenSwapPath = value;\\n    }\\n\\n    function marketTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.marketTokenAmount;\\n    }\\n\\n    function setMarketTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.marketTokenAmount = value;\\n    }\\n\\n    function minLongTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minLongTokenAmount;\\n    }\\n\\n    function setMinLongTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minLongTokenAmount = value;\\n    }\\n\\n    function minShortTokenAmount(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.minShortTokenAmount;\\n    }\\n\\n    function setMinShortTokenAmount(Props memory props, uint256 value) internal pure {\\n        props.numbers.minShortTokenAmount = value;\\n    }\\n\\n    function updatedAtBlock(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.updatedAtBlock;\\n    }\\n\\n    function setUpdatedAtBlock(Props memory props, uint256 value) internal pure {\\n        props.numbers.updatedAtBlock = value;\\n    }\\n\\n    function executionFee(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.executionFee;\\n    }\\n\\n    function setExecutionFee(Props memory props, uint256 value) internal pure {\\n        props.numbers.executionFee = value;\\n    }\\n\\n    function callbackGasLimit(Props memory props) internal pure returns (uint256) {\\n        return props.numbers.callbackGasLimit;\\n    }\\n\\n    function setCallbackGasLimit(Props memory props, uint256 value) internal pure {\\n        props.numbers.callbackGasLimit = value;\\n    }\\n\\n    function shouldUnwrapNativeToken(Props memory props) internal pure returns (bool) {\\n        return props.flags.shouldUnwrapNativeToken;\\n    }\\n\\n    function setShouldUnwrapNativeToken(Props memory props, bool value) internal pure {\\n        props.flags.shouldUnwrapNativeToken = value;\\n    }\\n}\\n\",\"keccak256\":\"0x6d702d9bda10a1336543f02d6ed839b23508258cf22926deed83cb6dfd437a82\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/joe-v2/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xd1f116ee8133101c2c07112dfe871fabdcb182f9b84468765b58a5136d661ba6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/joe-v2/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x611e9da56c7f56456a2fae4aa4d4d74c266e1e9b4228509fe5eb0a2a1f1e349a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0595b40912fd6ba4c3ea7d6739e467b4381c9d6cc85218c5bd3536c9fb4ecc2b\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\",\"keccak256\":\"0xa8b0bc670a63176a8573d2afbc365955c3b212f2bed0d4b28021fe6cb3131915\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\",\"keccak256\":\"0x50691b25afe50c5f24b7dc4d89e15872c1ff833962503ee3985616025d715f25\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x6dd45a103c84d545155f1d1010c0b0cfe4e9e4097ab7c50a8498756e46f2c80a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x7910e19e35a01a163a9f8c4040dc19e1663c4d562a22a1181d25610ebc5295a1\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0xea919172ab21c9642383edcad886c93b21953b5811b83acb7227aa9df91c92bf\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0xe9fa3e531acbc8c43d230061bce4155a7699951d48d6512f232148e1dbe59082\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xecbc396e150ad6643d5749ed99402dfeb19fc3a5cd0536467755b49dcf795e3f\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IWNATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x60ffbeb68bc35b80c5a8046854ac095c73cdffbe0f293091f69f0adaf31543e3\",\"license\":\"MIT\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\nimport \\\"../interfaces/facets/avalanche/ITraderJoeV2Facet.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n    bytes32 constant OWNED_TRADERJOE_V2_BINS_POSITION = keccak256(\\\"diamond.standard.traderjoe_v2_bins_1685370112\\\");\\n    //TODO: maybe we should keep here a tuple[tokenId, factory] to account for multiple Uniswap V3 deployments\\n    bytes32 constant OWNED_UNISWAP_V3_TOKEN_IDS_POSITION = keccak256(\\\"diamond.standard.uniswap_v3_token_ids_1685370112\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n\\n        // Timestamp since which the account is frozen\\n        // 0 means an account that is not frozen. Any other value means that the account is frozen\\n        uint256 frozenSince;\\n    }\\n\\n    struct TraderJoeV2Storage {\\n        // TJ v2 bins of the contract\\n        ITraderJoeV2Facet.TraderJoeV2Bin[] ownedTjV2Bins;\\n    }\\n\\n    struct UniswapV3Storage {\\n        // UniswapV3 token IDs of the contract\\n        uint256[] ownedUniswapV3TokenIds;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function traderJoeV2Storage() internal pure returns (TraderJoeV2Storage storage tjv2s) {\\n        bytes32 position = OWNED_TRADERJOE_V2_BINS_POSITION;\\n        assembly {\\n            tjv2s.slot := position\\n        }\\n    }\\n\\n    function uniswapV3Storage() internal pure returns (UniswapV3Storage storage uv3s) {\\n        bytes32 position = OWNED_UNISWAP_V3_TOKEN_IDS_POSITION;\\n        assembly {\\n            uv3s.slot := position\\n        }\\n    }\\n\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    event AccountFrozen(address indexed freezeToken, uint256 timestamp);\\n\\n    event AccountUnfrozen(address indexed keeper, uint256 timestamp);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function freezeAccount(address freezeToken) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        require(sls.frozenSince == 0, \\\"Account is already frozen\\\");\\n        sls.frozenSince = block.timestamp;\\n        emit AccountFrozen(freezeToken, block.timestamp);\\n    }\\n\\n    function isAccountFrozen() internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.frozenSince != 0;\\n    }\\n\\n    function unfreezeAccount(address keeperAddress) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        require(sls.frozenSince != 0, \\\"Account is not frozen\\\");\\n        sls.frozenSince = 0;\\n        emit AccountUnfrozen(keeperAddress, block.timestamp);\\n    }\\n\\n    function getTjV2OwnedBins() internal returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\\n        bins = tjv2s.ownedTjV2Bins;\\n    }\\n\\n    function getTjV2OwnedBinsView() internal view returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\\n        bins = tjv2s.ownedTjV2Bins;\\n    }\\n\\n    function getUV3OwnedTokenIds() internal returns(uint256[] storage tokenIds){\\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\\n    }\\n\\n    function getUV3OwnedTokenIdsView() internal view returns(uint256[] storage tokenIds){\\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == position.identifier) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes32 identifier) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == identifier) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n        emit OwnedAssetAdded(_symbol, block.timestamp);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n\\n        emit OwnedAssetAdded(_symbol, block.timestamp);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    event OwnedAssetAdded(bytes32 indexed asset, uint256 timestamp);\\n\\n    event OwnedAssetRemoved(bytes32 indexed asset, uint256 timestamp);\\n}\",\"keccak256\":\"0x049bcbb4c8f7015000e47e982bbd899d43c118920949ab180ee73b3516a0bb0f\",\"license\":\"MIT\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\n\\n    address private constant _ADDRESS_PROVIDER = address(0);\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (ITokenManager) {\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    function getAddressProvider() internal pure returns (address) {\\n        return _ADDRESS_PROVIDER;\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0x30520f1f2ca757cb792d660bf6b0d62cbeebc9f60e5f2bd2b0a16418e0640845\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160005561334f806100256000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80634ef189b81461005c578063a02ba64d14610071578063a224323b14610084578063c3fa402b14610097578063ee0fc121146100aa575b600080fd5b61006f61006a366004612db2565b6100c4565b005b61006f61007f366004612db2565b61073d565b61006f610092366004612f3c565b610b10565b61006f6100a5366004612f3c565b61127e565b6100b261175d565b60405190815260200160405180910390f35b6100cd33611785565b6100f25760405162461bcd60e51b81526004016100e99061308b565b60405180910390fd5b60006100fc61185d565b8054909150600119016101215760405162461bcd60e51b81526004016100e9906130cd565b60028155600061012f611881565b90506000610144856000015160800151611899565b9050600061015986600001516080015161199f565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016101899190613104565b602060405180830381865afa1580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190613118565b1115610247576040516307c11f8f60e51b8152610247906001600160a01b0385169063f823f1e090610200908690600401613104565b602060405180830381865afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102419190613118565b83611a61565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610276903090600401613104565b602060405180830381865afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190613118565b1115610334576040516307c11f8f60e51b8152610334906001600160a01b0385169063f823f1e0906102ed908590600401613104565b602060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190613118565b82611a61565b61033c611b50565b6020860151511561049b576040516307c11f8f60e51b81526001600160a01b0384169063c3cc6c7a90829063f823f1e09061037b908790600401613104565b602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190613118565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190613131565b61042990600a613255565b60208a01515161044190670de0b6b3a7640000613264565b61044b919061327b565b6040518363ffffffff1660e01b815260040161046892919061329d565b600060405180830381600087803b15801561048257600080fd5b505af1158015610496573d6000803e3d6000fd5b505050505b6020808701510151156105fe576040516307c11f8f60e51b81526001600160a01b0384169063c3cc6c7a90829063f823f1e0906104dc908690600401613104565b602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190613118565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190613131565b61058a90600a613255565b6020808b015101516105a490670de0b6b3a7640000613264565b6105ae919061327b565b6040518363ffffffff1660e01b81526004016105cb92919061329d565b600060405180830381600087803b1580156105e557600080fd5b505af11580156105f9573d6000803e3d6000fd5b505050505b8551608001516040516307c11f8f60e51b81526001600160a01b0385169163ed0994cd91839163f823f1e0916106379190600401613104565b602060405180830381865afa158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190613118565b8851516040518363ffffffff1660e01b81526004016106989291906132ab565b600060405180830381600087803b1580156106b257600080fd5b505af11580156106c6573d6000803e3d6000fd5b505050506106d333611bd8565b8560000151608001516001600160a01b0316336001600160a01b03167fa9d54d01b9c80d333d155788c57b7d54ee17d436024e3dac5ea05137476d278588602001516080015160405161072891815260200190565b60405180910390a35050600190915550505050565b61074633611785565b6107625760405162461bcd60e51b81526004016100e99061308b565b600061076c61185d565b8054909150600119016107915760405162461bcd60e51b81526004016100e9906130cd565b60028155600061079f611881565b905060008360200151600001516000815181106107be576107be6132c2565b6020026020010151602001519050600085600001516080015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108079190613104565b602060405180830381865afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108489190613118565b90508015610880576040516307c11f8f60e51b8152610880906001600160a01b0386169063f823f1e090610200908690600401613104565b610888611b50565b6040516307c11f8f60e51b81526001600160a01b0385169063c3cc6c7a90829063f823f1e0906108bc908790600401613104565b602060405180830381865afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190613118565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190613131565b61096a90600a613255565b61097c87670de0b6b3a7640000613264565b610986919061327b565b6040518363ffffffff1660e01b81526004016109a392919061329d565b600060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038716925063ed0994cd9150829063f823f1e090610a09908790600401613104565b602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190613118565b8951516040518363ffffffff1660e01b8152600401610a6a9291906132ab565b600060405180830381600087803b158015610a8457600080fd5b505af1158015610a98573d6000803e3d6000fd5b50505050610aa533611bd8565b8660000151608001516001600160a01b0316336001600160a01b03167fe1e067eab571218f837c5015c854ebbbc631dc6ec63b28e9deb6718d78a858b7858a6020015160800151604051610afa92919061329d565b60405180910390a3505060019092555050505050565b610b1933611785565b610b355760405162461bcd60e51b81526004016100e99061308b565b6000610b3f61185d565b805490915060011901610b645760405162461bcd60e51b81526004016100e9906130cd565b600281556000610b72611881565b90506000610b87856000015160800151611899565b90506000610b9c86600001516080015161199f565b90506000856020015160000151600081518110610bbb57610bbb6132c2565b60200260200101516020015190506000866020015160000151600181518110610be657610be66132c2565b60200260200101516020015190506000846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c229190613104565b602060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190613118565b1115610ce0576040516307c11f8f60e51b8152610ce0906001600160a01b0387169063f823f1e090610c99908890600401613104565b602060405180830381865afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190613118565b85611a61565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610d0f903090600401613104565b602060405180830381865afa158015610d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d509190613118565b1115610dcd576040516307c11f8f60e51b8152610dcd906001600160a01b0387169063f823f1e090610d86908790600401613104565b602060405180830381865afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190613118565b84611a61565b8115610f21576040516307c11f8f60e51b81526001600160a01b0386169063c3cc6c7a90829063f823f1e090610e07908990600401613104565b602060405180830381865afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e489190613118565b866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190613131565b610eb590600a613255565b610ec786670de0b6b3a7640000613264565b610ed1919061327b565b6040518363ffffffff1660e01b8152600401610eee92919061329d565b600060405180830381600087803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b505050505b8015611075576040516307c11f8f60e51b81526001600160a01b0386169063c3cc6c7a90829063f823f1e090610f5b908890600401613104565b602060405180830381865afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c9190613118565b856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffe9190613131565b61100990600a613255565b61101b85670de0b6b3a7640000613264565b611025919061327b565b6040518363ffffffff1660e01b815260040161104292919061329d565b600060405180830381600087803b15801561105c57600080fd5b505af1158015611070573d6000803e3d6000fd5b505050505b6040516307c11f8f60e51b81526001600160a01b0386169063ed0994cd90829063f823f1e0906110a9908990600401613104565b602060405180830381865afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190613118565b8a51516040518363ffffffff1660e01b815260040161110a9291906132ab565b600060405180830381600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038816925063ed0994cd9150829063f823f1e090611170908890600401613104565b602060405180830381865afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190613118565b8a51516040518363ffffffff1660e01b81526004016111d19291906132ab565b600060405180830381600087803b1580156111eb57600080fd5b505af11580156111ff573d6000803e3d6000fd5b5050505061120b611b50565b61121433611bd8565b87516080908101516020808b015190920151604080518681529384018590528301526001600160a01b03169033907f0f00ca74793891bdff0dfe249f88fde6f2c5bb8452bbf09514b669abb92bc0a29060600160405180910390a350506001909355505050505050565b61128733611785565b6112a35760405162461bcd60e51b81526004016100e99061308b565b60006112ad61185d565b8054909150600119016112d25760405162461bcd60e51b81526004016100e9906130cd565b6002815560006112e0611881565b905060006112f5856000015160800151611899565b9050600061130a86600001516080015161199f565b905060008660000151608001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016113429190613104565b602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190613118565b1115611409578551608001516040516307c11f8f60e51b8152611409916001600160a01b0386169163f823f1e0916113bd91600401613104565b602060405180830381865afa1580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190613118565b875160800151611a61565b611411611b50565b8551608001516040516307c11f8f60e51b81526001600160a01b0385169163c3cc6c7a91839163f823f1e09161144a9190600401613104565b602060405180830381865afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b9190613118565b8860000151608001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190613131565b61150090600a613255565b60208a01515161151890670de0b6b3a7640000613264565b611522919061327b565b6040518363ffffffff1660e01b815260040161153f92919061329d565b600060405180830381600087803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038616925063ed0994cd9150829063f823f1e0906115a5908790600401613104565b602060405180830381865afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190613118565b8851516040518363ffffffff1660e01b81526004016116069291906132ab565b600060405180830381600087803b15801561162057600080fd5b505af1158015611634573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038616925063ed0994cd9150829063f823f1e09061166c908690600401613104565b602060405180830381865afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190613118565b8851516040518363ffffffff1660e01b81526004016116cd9291906132ab565b600060405180830381600087803b1580156116e757600080fd5b505af11580156116fb573d6000803e3d6000fd5b5050505061170833611bd8565b8560000151608001516001600160a01b0316336001600160a01b03167f75f1e929bc3763cbb44e9f41114fbc63fb4dc8b10ecb29e801d0970fddb3077988602001516080015160405161072891815260200190565b60405160200161176c906132d8565b6040516020818303038152906040528051906020012081565b60008073a44f830b6a2b6fa76657a3b92c1fe74fcb7c6afd9050806001600160a01b031663ac4ab3fb846040516020016117be906132d8565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b81526004016118059291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184691906132fc565b156118545750600192915050565b50600092915050565b7f1c85eba10a4cf2d29c83fc15f97931886b9fd3caeb70d8c377aeedc58b919e3b90565b73f3978209b7cff2b90100c6f87cec77de928ed58e90565b600073fb02132333a79c8b5bd0b64e3abcca5f7faf2936196001600160a01b038316016118db575073152b9d0fdc40c096757f570a51e494bd4b943e50919050565b73b7e69749e3d2edd90ea59a4932efea2d41e245d6196001600160a01b0383160161191b57507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab919050565b73913c1f46b48b3ed35e7dc3cf754d4ae8499f31ce196001600160a01b0383160161195b575073b31f66aa3c1e785363f0875a1b74e27b85fd66c7919050565b60405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081b9bdd081cdd5c1c1bdc9d195960621b60448201526064016100e9565b919050565b600073fb02132333a79c8b5bd0b64e3abcca5f7faf2936196001600160a01b038316016119e1575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e919050565b73b7e69749e3d2edd90ea59a4932efea2d41e245d6196001600160a01b03831601611a21575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e919050565b73913c1f46b48b3ed35e7dc3cf754d4ae8499f31ce196001600160a01b0383160161195b575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e919050565b81600003611aaa5760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016100e9565b6001600160a01b038116611af65760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420416464726573735a65726f60681b60448201526064016100e9565b6000611b00611c79565b9050611b10816004018484611c9d565b50827f21eab7d98872eb1399cd56d99a43442b9b50720f3222e49563d2be182c6a6a3f42604051611b4391815260200190565b60405180910390a2505050565b4715611bd6576000611b60611cbb565b9050806001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b9d57600080fd5b505af1158015611bb1573d6000803e3d6000fd5b5050505050611bd4611bc763082ac82b60e31b90565b611bcf611cbb565b611a61565b505b565b6000611be2611c79565b90508060080154600003611c305760405162461bcd60e51b815260206004820152601560248201527420b1b1b7bab73a1034b9903737ba10333937bd32b760591b60448201526064016100e9565b600060088201556040514281526001600160a01b038316907fd1857c2ae6a9e5e353aa7eef9b8377c98206ccbd4578e56fbe5b6b27e503e56f9060200160405180910390a25050565b7f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90565b6000611cb384846001600160a01b038516611cd3565b949350505050565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c790565b60008281526002840160205260408120829055611cb384846000611cf78383611d00565b90505b92915050565b6000818152600183016020526040812054611d4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611cfa565b506000611cfa565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611d8757611d87611d4f565b60405290565b60405160e081016001600160401b0381118282101715611d8757611d87611d4f565b604051606081016001600160401b0381118282101715611d8757611d87611d4f565b60405161012081016001600160401b0381118282101715611d8757611d87611d4f565b604051601f8201601f191681016001600160401b0381118282101715611e1c57611e1c611d4f565b604052919050565b80356001600160a01b038116811461199a57600080fd5b60006001600160401b03821115611e5457611e54611d4f565b5060051b60200190565b600082601f830112611e6f57600080fd5b81356020611e84611e7f83611e3b565b611df4565b82815260059290921b84018101918181019086841115611ea357600080fd5b8286015b84811015611ec557611eb881611e24565b8352918301918301611ea7565b509695505050505050565b600060c08284031215611ee257600080fd5b60405160c081016001600160401b0381118282101715611f0457611f04611d4f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b8015158114611bd457600080fd5b600060208284031215611f6957600080fd5b604051602081016001600160401b0381118282101715611f8b57611f8b611d4f565b6040529050808235611f9c81611f49565b905292915050565b600082601f830112611fb557600080fd5b81356001600160401b03811115611fce57611fce611d4f565b611fe1601f8201601f1916602001611df4565b818152846020838601011115611ff657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261202457600080fd5b81356020612034611e7f83611e3b565b82815260059290921b8401810191818101908684111561205357600080fd5b8286015b84811015611ec55780356001600160401b03808211156120775760008081fd5b908801906040828b03601f19018113156120915760008081fd5b612099611d65565b87840135838111156120ab5760008081fd5b6120b98d8a83880101611fa4565b8252509083013590828211156120cf5760008081fd5b6120dd8c8984870101611e5e565b818901528652505050918301918301612057565b6000604080838503121561210457600080fd5b61210c611d65565b915082356001600160401b038082111561212557600080fd5b818501915085601f83011261213957600080fd5b81356020612149611e7f83611e3b565b82815260059290921b8401810191818101908984111561216857600080fd5b8286015b848110156121e2578035868111156121845760008081fd5b8701808c03601f190189131561219a5760008081fd5b6121a2611d65565b85820135888111156121b45760008081fd5b6121c28e8883860101611fa4565b8252506121d08a8301611e24565b8187015284525091830191830161216c565b50875250868101359450828511156121f957600080fd5b61220588868901612013565b81870152505050505092915050565b600082601f83011261222557600080fd5b81356020612235611e7f83611e3b565b828152600592831b850182019282820191908785111561225457600080fd5b8387015b858110156123495780356001600160401b03808211156122785760008081fd5b908901906040828c03601f19018113156122925760008081fd5b61229a611d65565b88840135838111156122ac5760008081fd5b6122ba8e8b83880101611fa4565b82525081840135838111156122cf5760008081fd5b8085019450508c603f8501126122e757600092508283fd5b8884013592506122f9611e7f84611e3b565b83815292861b8401820192898101908e8511156123165760008081fd5b948301945b848610156123345785358252948a0194908a019061231b565b828b0152508752505050928401928401612258565b5090979650505050505050565b6000604080838503121561236957600080fd5b612371611d65565b915082356001600160401b038082111561238a57600080fd5b818501915085601f83011261239e57600080fd5b813560206123ae611e7f83611e3b565b82815260059290921b840181019181810190898411156123cd57600080fd5b8286015b8481101561243f578035868111156123e95760008081fd5b8701808c03601f19018913156123ff5760008081fd5b612407611d65565b85820135888111156124195760008081fd5b6124278e8883860101611fa4565b825250908901358582015283529183019183016123d1565b508752508681013594508285111561245657600080fd5b61220588868901612214565b6000604080838503121561247557600080fd5b61247d611d65565b915082356001600160401b038082111561249657600080fd5b818501915085601f8301126124aa57600080fd5b813560206124ba611e7f83611e3b565b82815260059290921b840181019181810190898411156124d957600080fd5b8286015b8481101561243f578035868111156124f55760008081fd5b8701808c03601f190189131561250b5760008081fd5b612513611d65565b85820135888111156125255760008081fd5b6125338e8883860101611fa4565b825250908901358582015283529183019183016124dd565b600082601f83011261255c57600080fd5b8135602061256c611e7f83611e3b565b828152600592831b850182019282820191908785111561258b57600080fd5b8387015b858110156123495780356001600160401b03808211156125af5760008081fd5b908901906040828c03601f19018113156125c95760008081fd5b6125d1611d65565b88840135838111156125e35760008081fd5b6125f18e8b83880101611fa4565b82525081840135838111156126065760008081fd5b8085019450508c603f85011261261e57600092508283fd5b888401359250612630611e7f84611e3b565b83815292861b8401820192898101908e85111561264d5760008081fd5b948301945b84861015612677578535935061266784611f49565b838252948a0194908a0190612652565b828b015250875250505092840192840161258f565b6000604080838503121561269f57600080fd5b6126a7611d65565b915082356001600160401b03808211156126c057600080fd5b818501915085601f8301126126d457600080fd5b813560206126e4611e7f83611e3b565b82815260059290921b8401810191818101908984111561270357600080fd5b8286015b848110156127825780358681111561271f5760008081fd5b8701808c03601f19018913156127355760008081fd5b61273d611d65565b858201358881111561274f5760008081fd5b61275d8e8883860101611fa4565b825250908901359061276e82611f49565b808601919091528352918301918301612707565b508752508681013594508285111561279957600080fd5b6122058886890161254b565b600082601f8301126127b657600080fd5b813560206127c6611e7f83611e3b565b82815260059290921b840181019181810190868411156127e557600080fd5b8286015b84811015611ec5576001600160401b03813581101561280757600080fd5b813588016040818b03601f1901121561281f57600080fd5b612827611d65565b868201358381111561283857600080fd5b6128468c8983860101611fa4565b82525060408201358381111561285b57600080fd5b8083019250508a603f83011261287057600080fd5b86820135612880611e7f82611e3b565b81815260059190911b830160400190888101908d8311156128a057600080fd5b604085015b838110156128d85786813511156128bb57600080fd5b6128cb8f60408335890101611fa4565b8352918a01918a016128a5565b50838a01525050855250509183019183016127e9565b6000604080838503121561290157600080fd5b612909611d65565b915082356001600160401b038082111561292257600080fd5b818501915085601f83011261293657600080fd5b81356020612946611e7f83611e3b565b82815260059290921b8401810191818101908984111561296557600080fd5b8286015b848110156129f5578035868111156129815760008081fd5b8701808c03601f19018913156129975760008081fd5b61299f611d65565b85820135888111156129b15760008081fd5b6129bf8e8883860101611fa4565b82525089820135888111156129d45760008081fd5b6129e28e8883860101611fa4565b8288015250845250918301918301612969565b5087525086810135945082851115612a0c57600080fd5b612205888689016127a5565b600082601f830112612a2957600080fd5b81356020612a39611e7f83611e3b565b82815260059290921b84018101918181019086841115612a5857600080fd5b8286015b84811015611ec5576001600160401b038135811015612a7a57600080fd5b813588016040818b03601f19011215612a9257600080fd5b612a9a611d65565b8682013583811115612aab57600080fd5b612ab98c8983860101611fa4565b825250604082013583811115612ace57600080fd5b8083019250508a603f830112612ae357600080fd5b86820135612af3611e7f82611e3b565b81815260059190911b830160400190888101908d831115612b1357600080fd5b604085015b83811015612b4b578681351115612b2e57600080fd5b612b3e8f60408335890101611fa4565b8352918a01918a01612b18565b50838a0152505085525050918301918301612a5c565b60006040808385031215612b7457600080fd5b612b7c611d65565b915082356001600160401b0380821115612b9557600080fd5b818501915085601f830112612ba957600080fd5b81356020612bb9611e7f83611e3b565b82815260059290921b84018101918181019089841115612bd857600080fd5b8286015b84811015612c6857803586811115612bf45760008081fd5b8701808c03601f1901891315612c0a5760008081fd5b612c12611d65565b8582013588811115612c245760008081fd5b612c328e8883860101611fa4565b8252508982013588811115612c475760008081fd5b612c558e8883860101611fa4565b8288015250845250918301918301612bdc565b5087525086810135945082851115612c7f57600080fd5b61220588868901612a18565b600060e08284031215612c9d57600080fd5b612ca5611d8d565b905081356001600160401b0380821115612cbe57600080fd5b612cca858386016120f1565b83526020840135915080821115612ce057600080fd5b612cec85838601612356565b60208401526040840135915080821115612d0557600080fd5b612d1185838601612462565b60408401526060840135915080821115612d2a57600080fd5b612d368583860161268c565b60608401526080840135915080821115612d4f57600080fd5b612d5b85838601612356565b608084015260a0840135915080821115612d7457600080fd5b612d80858386016128ee565b60a084015260c0840135915080821115612d9957600080fd5b50612da684828501612b61565b60c08301525092915050565b600080600060608486031215612dc757600080fd5b8335925060208401356001600160401b0380821115612de557600080fd5b8186019150610100808389031215612dfc57600080fd5b612e04611daf565b833583811115612e1357600080fd5b8401610120818b031215612e2657600080fd5b612e2e611dd1565b612e3782611e24565b8152612e4560208301611e24565b6020820152612e5660408301611e24565b6040820152612e6760608301611e24565b6060820152612e7860808301611e24565b6080820152612e8960a08301611e24565b60a0820152612e9a60c08301611e24565b60c082015260e082013585811115612eb157600080fd5b612ebd8c828501611e5e565b60e0830152508382013585811115612ed457600080fd5b612ee08c828501611e5e565b8286015250825250612ef58960208601611ed0565b6020820152612f078960e08601611f57565b604082015280955050506040860135915080821115612f2557600080fd5b50612f3286828701612c8b565b9150509250925092565b600080600060608486031215612f5157600080fd5b8335925060208401356001600160401b0380821115612f6f57600080fd5b908501906101008288031215612f8457600080fd5b612f8c611daf565b823582811115612f9b57600080fd5b830160e0818a031215612fad57600080fd5b612fb5611d8d565b612fbe82611e24565b8152612fcc60208301611e24565b6020820152612fdd60408301611e24565b6040820152612fee60608301611e24565b6060820152612fff60808301611e24565b608082015260a08201358481111561301657600080fd5b6130228b828501611e5e565b60a08301525060c08201358481111561303a57600080fd5b6130468b828501611e5e565b60c08301525082525061305c8860208501611ed0565b602082015261306e8860e08501611f57565b6040820152809450506040860135915080821115612f2557600080fd5b60208082526022908201527f4d757374206265206120474d5820563220617574686f72697a6564204b65657060408201526132b960f11b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b0391909116815260200190565b60006020828403121561312a57600080fd5b5051919050565b60006020828403121561314357600080fd5b815160ff8116811461315457600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156131ac5781600019048211156131925761319261315b565b8085161561319f57918102915b93841c9390800290613176565b509250929050565b6000826131c357506001611cfa565b816131d057506000611cfa565b81600181146131e657600281146131f05761320c565b6001915050611cfa565b60ff8411156132015761320161315b565b50506001821b611cfa565b5060208310610133831016604e8410600b841016171561322f575081810a611cfa565b6132398383613171565b806000190482111561324d5761324d61315b565b029392505050565b6000611cf760ff8416836131b4565b8082028115828204841417611cfa57611cfa61315b565b60008261329857634e487b7160e01b600052601260045260246000fd5b500490565b918252602082015260400190565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b60006020828403121561330e57600080fd5b815161315481611f4956fea2646970667358221220434cf18fa430777190a6a32c1ab1bc17b94ba367273d72ed1ecbe871c975615b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80634ef189b81461005c578063a02ba64d14610071578063a224323b14610084578063c3fa402b14610097578063ee0fc121146100aa575b600080fd5b61006f61006a366004612db2565b6100c4565b005b61006f61007f366004612db2565b61073d565b61006f610092366004612f3c565b610b10565b61006f6100a5366004612f3c565b61127e565b6100b261175d565b60405190815260200160405180910390f35b6100cd33611785565b6100f25760405162461bcd60e51b81526004016100e99061308b565b60405180910390fd5b60006100fc61185d565b8054909150600119016101215760405162461bcd60e51b81526004016100e9906130cd565b60028155600061012f611881565b90506000610144856000015160800151611899565b9050600061015986600001516080015161199f565b90506000826001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016101899190613104565b602060405180830381865afa1580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190613118565b1115610247576040516307c11f8f60e51b8152610247906001600160a01b0385169063f823f1e090610200908690600401613104565b602060405180830381865afa15801561021d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102419190613118565b83611a61565b6040516370a0823160e01b81526000906001600160a01b038316906370a0823190610276903090600401613104565b602060405180830381865afa158015610293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b79190613118565b1115610334576040516307c11f8f60e51b8152610334906001600160a01b0385169063f823f1e0906102ed908590600401613104565b602060405180830381865afa15801561030a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061032e9190613118565b82611a61565b61033c611b50565b6020860151511561049b576040516307c11f8f60e51b81526001600160a01b0384169063c3cc6c7a90829063f823f1e09061037b908790600401613104565b602060405180830381865afa158015610398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bc9190613118565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190613131565b61042990600a613255565b60208a01515161044190670de0b6b3a7640000613264565b61044b919061327b565b6040518363ffffffff1660e01b815260040161046892919061329d565b600060405180830381600087803b15801561048257600080fd5b505af1158015610496573d6000803e3d6000fd5b505050505b6020808701510151156105fe576040516307c11f8f60e51b81526001600160a01b0384169063c3cc6c7a90829063f823f1e0906104dc908690600401613104565b602060405180830381865afa1580156104f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051d9190613118565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057f9190613131565b61058a90600a613255565b6020808b015101516105a490670de0b6b3a7640000613264565b6105ae919061327b565b6040518363ffffffff1660e01b81526004016105cb92919061329d565b600060405180830381600087803b1580156105e557600080fd5b505af11580156105f9573d6000803e3d6000fd5b505050505b8551608001516040516307c11f8f60e51b81526001600160a01b0385169163ed0994cd91839163f823f1e0916106379190600401613104565b602060405180830381865afa158015610654573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106789190613118565b8851516040518363ffffffff1660e01b81526004016106989291906132ab565b600060405180830381600087803b1580156106b257600080fd5b505af11580156106c6573d6000803e3d6000fd5b505050506106d333611bd8565b8560000151608001516001600160a01b0316336001600160a01b03167fa9d54d01b9c80d333d155788c57b7d54ee17d436024e3dac5ea05137476d278588602001516080015160405161072891815260200190565b60405180910390a35050600190915550505050565b61074633611785565b6107625760405162461bcd60e51b81526004016100e99061308b565b600061076c61185d565b8054909150600119016107915760405162461bcd60e51b81526004016100e9906130cd565b60028155600061079f611881565b905060008360200151600001516000815181106107be576107be6132c2565b6020026020010151602001519050600085600001516080015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016108079190613104565b602060405180830381865afa158015610824573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108489190613118565b90508015610880576040516307c11f8f60e51b8152610880906001600160a01b0386169063f823f1e090610200908690600401613104565b610888611b50565b6040516307c11f8f60e51b81526001600160a01b0385169063c3cc6c7a90829063f823f1e0906108bc908790600401613104565b602060405180830381865afa1580156108d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fd9190613118565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095f9190613131565b61096a90600a613255565b61097c87670de0b6b3a7640000613264565b610986919061327b565b6040518363ffffffff1660e01b81526004016109a392919061329d565b600060405180830381600087803b1580156109bd57600080fd5b505af11580156109d1573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038716925063ed0994cd9150829063f823f1e090610a09908790600401613104565b602060405180830381865afa158015610a26573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4a9190613118565b8951516040518363ffffffff1660e01b8152600401610a6a9291906132ab565b600060405180830381600087803b158015610a8457600080fd5b505af1158015610a98573d6000803e3d6000fd5b50505050610aa533611bd8565b8660000151608001516001600160a01b0316336001600160a01b03167fe1e067eab571218f837c5015c854ebbbc631dc6ec63b28e9deb6718d78a858b7858a6020015160800151604051610afa92919061329d565b60405180910390a3505060019092555050505050565b610b1933611785565b610b355760405162461bcd60e51b81526004016100e99061308b565b6000610b3f61185d565b805490915060011901610b645760405162461bcd60e51b81526004016100e9906130cd565b600281556000610b72611881565b90506000610b87856000015160800151611899565b90506000610b9c86600001516080015161199f565b90506000856020015160000151600081518110610bbb57610bbb6132c2565b60200260200101516020015190506000866020015160000151600181518110610be657610be66132c2565b60200260200101516020015190506000846001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610c229190613104565b602060405180830381865afa158015610c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c639190613118565b1115610ce0576040516307c11f8f60e51b8152610ce0906001600160a01b0387169063f823f1e090610c99908890600401613104565b602060405180830381865afa158015610cb6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cda9190613118565b85611a61565b6040516370a0823160e01b81526000906001600160a01b038516906370a0823190610d0f903090600401613104565b602060405180830381865afa158015610d2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d509190613118565b1115610dcd576040516307c11f8f60e51b8152610dcd906001600160a01b0387169063f823f1e090610d86908790600401613104565b602060405180830381865afa158015610da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc79190613118565b84611a61565b8115610f21576040516307c11f8f60e51b81526001600160a01b0386169063c3cc6c7a90829063f823f1e090610e07908990600401613104565b602060405180830381865afa158015610e24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e489190613118565b866001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eaa9190613131565b610eb590600a613255565b610ec786670de0b6b3a7640000613264565b610ed1919061327b565b6040518363ffffffff1660e01b8152600401610eee92919061329d565b600060405180830381600087803b158015610f0857600080fd5b505af1158015610f1c573d6000803e3d6000fd5b505050505b8015611075576040516307c11f8f60e51b81526001600160a01b0386169063c3cc6c7a90829063f823f1e090610f5b908890600401613104565b602060405180830381865afa158015610f78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9c9190613118565b856001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ffe9190613131565b61100990600a613255565b61101b85670de0b6b3a7640000613264565b611025919061327b565b6040518363ffffffff1660e01b815260040161104292919061329d565b600060405180830381600087803b15801561105c57600080fd5b505af1158015611070573d6000803e3d6000fd5b505050505b6040516307c11f8f60e51b81526001600160a01b0386169063ed0994cd90829063f823f1e0906110a9908990600401613104565b602060405180830381865afa1580156110c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ea9190613118565b8a51516040518363ffffffff1660e01b815260040161110a9291906132ab565b600060405180830381600087803b15801561112457600080fd5b505af1158015611138573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038816925063ed0994cd9150829063f823f1e090611170908890600401613104565b602060405180830381865afa15801561118d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111b19190613118565b8a51516040518363ffffffff1660e01b81526004016111d19291906132ab565b600060405180830381600087803b1580156111eb57600080fd5b505af11580156111ff573d6000803e3d6000fd5b5050505061120b611b50565b61121433611bd8565b87516080908101516020808b015190920151604080518681529384018590528301526001600160a01b03169033907f0f00ca74793891bdff0dfe249f88fde6f2c5bb8452bbf09514b669abb92bc0a29060600160405180910390a350506001909355505050505050565b61128733611785565b6112a35760405162461bcd60e51b81526004016100e99061308b565b60006112ad61185d565b8054909150600119016112d25760405162461bcd60e51b81526004016100e9906130cd565b6002815560006112e0611881565b905060006112f5856000015160800151611899565b9050600061130a86600001516080015161199f565b905060008660000151608001516001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016113429190613104565b602060405180830381865afa15801561135f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113839190613118565b1115611409578551608001516040516307c11f8f60e51b8152611409916001600160a01b0386169163f823f1e0916113bd91600401613104565b602060405180830381865afa1580156113da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113fe9190613118565b875160800151611a61565b611411611b50565b8551608001516040516307c11f8f60e51b81526001600160a01b0385169163c3cc6c7a91839163f823f1e09161144a9190600401613104565b602060405180830381865afa158015611467573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061148b9190613118565b8860000151608001516001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f59190613131565b61150090600a613255565b60208a01515161151890670de0b6b3a7640000613264565b611522919061327b565b6040518363ffffffff1660e01b815260040161153f92919061329d565b600060405180830381600087803b15801561155957600080fd5b505af115801561156d573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038616925063ed0994cd9150829063f823f1e0906115a5908790600401613104565b602060405180830381865afa1580156115c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e69190613118565b8851516040518363ffffffff1660e01b81526004016116069291906132ab565b600060405180830381600087803b15801561162057600080fd5b505af1158015611634573d6000803e3d6000fd5b50506040516307c11f8f60e51b81526001600160a01b038616925063ed0994cd9150829063f823f1e09061166c908690600401613104565b602060405180830381865afa158015611689573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ad9190613118565b8851516040518363ffffffff1660e01b81526004016116cd9291906132ab565b600060405180830381600087803b1580156116e757600080fd5b505af11580156116fb573d6000803e3d6000fd5b5050505061170833611bd8565b8560000151608001516001600160a01b0316336001600160a01b03167f75f1e929bc3763cbb44e9f41114fbc63fb4dc8b10ecb29e801d0970fddb3077988602001516080015160405161072891815260200190565b60405160200161176c906132d8565b6040516020818303038152906040528051906020012081565b60008073a44f830b6a2b6fa76657a3b92c1fe74fcb7c6afd9050806001600160a01b031663ac4ab3fb846040516020016117be906132d8565b604051602081830303815290604052805190602001206040518363ffffffff1660e01b81526004016118059291906001600160a01b03929092168252602082015260400190565b602060405180830381865afa158015611822573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184691906132fc565b156118545750600192915050565b50600092915050565b7f1c85eba10a4cf2d29c83fc15f97931886b9fd3caeb70d8c377aeedc58b919e3b90565b73f3978209b7cff2b90100c6f87cec77de928ed58e90565b600073fb02132333a79c8b5bd0b64e3abcca5f7faf2936196001600160a01b038316016118db575073152b9d0fdc40c096757f570a51e494bd4b943e50919050565b73b7e69749e3d2edd90ea59a4932efea2d41e245d6196001600160a01b0383160161191b57507349d5c2bdffac6ce2bfdb6640f4f80f226bc10bab919050565b73913c1f46b48b3ed35e7dc3cf754d4ae8499f31ce196001600160a01b0383160161195b575073b31f66aa3c1e785363f0875a1b74e27b85fd66c7919050565b60405162461bcd60e51b815260206004820152601460248201527313585c9ad95d081b9bdd081cdd5c1c1bdc9d195960621b60448201526064016100e9565b919050565b600073fb02132333a79c8b5bd0b64e3abcca5f7faf2936196001600160a01b038316016119e1575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e919050565b73b7e69749e3d2edd90ea59a4932efea2d41e245d6196001600160a01b03831601611a21575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e919050565b73913c1f46b48b3ed35e7dc3cf754d4ae8499f31ce196001600160a01b0383160161195b575073b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e919050565b81600003611aaa5760405162461bcd60e51b815260206004820152601660248201527553796d626f6c2063616e6e6f7420626520656d70747960501b60448201526064016100e9565b6001600160a01b038116611af65760405162461bcd60e51b8152602060048201526013602482015272496e76616c696420416464726573735a65726f60681b60448201526064016100e9565b6000611b00611c79565b9050611b10816004018484611c9d565b50827f21eab7d98872eb1399cd56d99a43442b9b50720f3222e49563d2be182c6a6a3f42604051611b4391815260200190565b60405180910390a2505050565b4715611bd6576000611b60611cbb565b9050806001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b158015611b9d57600080fd5b505af1158015611bb1573d6000803e3d6000fd5b5050505050611bd4611bc763082ac82b60e31b90565b611bcf611cbb565b611a61565b505b565b6000611be2611c79565b90508060080154600003611c305760405162461bcd60e51b815260206004820152601560248201527420b1b1b7bab73a1034b9903737ba10333937bd32b760591b60448201526064016100e9565b600060088201556040514281526001600160a01b038316907fd1857c2ae6a9e5e353aa7eef9b8377c98206ccbd4578e56fbe5b6b27e503e56f9060200160405180910390a25050565b7f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90565b6000611cb384846001600160a01b038516611cd3565b949350505050565b73b31f66aa3c1e785363f0875a1b74e27b85fd66c790565b60008281526002840160205260408120829055611cb384846000611cf78383611d00565b90505b92915050565b6000818152600183016020526040812054611d4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155611cfa565b506000611cfa565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715611d8757611d87611d4f565b60405290565b60405160e081016001600160401b0381118282101715611d8757611d87611d4f565b604051606081016001600160401b0381118282101715611d8757611d87611d4f565b60405161012081016001600160401b0381118282101715611d8757611d87611d4f565b604051601f8201601f191681016001600160401b0381118282101715611e1c57611e1c611d4f565b604052919050565b80356001600160a01b038116811461199a57600080fd5b60006001600160401b03821115611e5457611e54611d4f565b5060051b60200190565b600082601f830112611e6f57600080fd5b81356020611e84611e7f83611e3b565b611df4565b82815260059290921b84018101918181019086841115611ea357600080fd5b8286015b84811015611ec557611eb881611e24565b8352918301918301611ea7565b509695505050505050565b600060c08284031215611ee257600080fd5b60405160c081016001600160401b0381118282101715611f0457611f04611d4f565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201526080830135608082015260a083013560a08201525092915050565b8015158114611bd457600080fd5b600060208284031215611f6957600080fd5b604051602081016001600160401b0381118282101715611f8b57611f8b611d4f565b6040529050808235611f9c81611f49565b905292915050565b600082601f830112611fb557600080fd5b81356001600160401b03811115611fce57611fce611d4f565b611fe1601f8201601f1916602001611df4565b818152846020838601011115611ff657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f83011261202457600080fd5b81356020612034611e7f83611e3b565b82815260059290921b8401810191818101908684111561205357600080fd5b8286015b84811015611ec55780356001600160401b03808211156120775760008081fd5b908801906040828b03601f19018113156120915760008081fd5b612099611d65565b87840135838111156120ab5760008081fd5b6120b98d8a83880101611fa4565b8252509083013590828211156120cf5760008081fd5b6120dd8c8984870101611e5e565b818901528652505050918301918301612057565b6000604080838503121561210457600080fd5b61210c611d65565b915082356001600160401b038082111561212557600080fd5b818501915085601f83011261213957600080fd5b81356020612149611e7f83611e3b565b82815260059290921b8401810191818101908984111561216857600080fd5b8286015b848110156121e2578035868111156121845760008081fd5b8701808c03601f190189131561219a5760008081fd5b6121a2611d65565b85820135888111156121b45760008081fd5b6121c28e8883860101611fa4565b8252506121d08a8301611e24565b8187015284525091830191830161216c565b50875250868101359450828511156121f957600080fd5b61220588868901612013565b81870152505050505092915050565b600082601f83011261222557600080fd5b81356020612235611e7f83611e3b565b828152600592831b850182019282820191908785111561225457600080fd5b8387015b858110156123495780356001600160401b03808211156122785760008081fd5b908901906040828c03601f19018113156122925760008081fd5b61229a611d65565b88840135838111156122ac5760008081fd5b6122ba8e8b83880101611fa4565b82525081840135838111156122cf5760008081fd5b8085019450508c603f8501126122e757600092508283fd5b8884013592506122f9611e7f84611e3b565b83815292861b8401820192898101908e8511156123165760008081fd5b948301945b848610156123345785358252948a0194908a019061231b565b828b0152508752505050928401928401612258565b5090979650505050505050565b6000604080838503121561236957600080fd5b612371611d65565b915082356001600160401b038082111561238a57600080fd5b818501915085601f83011261239e57600080fd5b813560206123ae611e7f83611e3b565b82815260059290921b840181019181810190898411156123cd57600080fd5b8286015b8481101561243f578035868111156123e95760008081fd5b8701808c03601f19018913156123ff5760008081fd5b612407611d65565b85820135888111156124195760008081fd5b6124278e8883860101611fa4565b825250908901358582015283529183019183016123d1565b508752508681013594508285111561245657600080fd5b61220588868901612214565b6000604080838503121561247557600080fd5b61247d611d65565b915082356001600160401b038082111561249657600080fd5b818501915085601f8301126124aa57600080fd5b813560206124ba611e7f83611e3b565b82815260059290921b840181019181810190898411156124d957600080fd5b8286015b8481101561243f578035868111156124f55760008081fd5b8701808c03601f190189131561250b5760008081fd5b612513611d65565b85820135888111156125255760008081fd5b6125338e8883860101611fa4565b825250908901358582015283529183019183016124dd565b600082601f83011261255c57600080fd5b8135602061256c611e7f83611e3b565b828152600592831b850182019282820191908785111561258b57600080fd5b8387015b858110156123495780356001600160401b03808211156125af5760008081fd5b908901906040828c03601f19018113156125c95760008081fd5b6125d1611d65565b88840135838111156125e35760008081fd5b6125f18e8b83880101611fa4565b82525081840135838111156126065760008081fd5b8085019450508c603f85011261261e57600092508283fd5b888401359250612630611e7f84611e3b565b83815292861b8401820192898101908e85111561264d5760008081fd5b948301945b84861015612677578535935061266784611f49565b838252948a0194908a0190612652565b828b015250875250505092840192840161258f565b6000604080838503121561269f57600080fd5b6126a7611d65565b915082356001600160401b03808211156126c057600080fd5b818501915085601f8301126126d457600080fd5b813560206126e4611e7f83611e3b565b82815260059290921b8401810191818101908984111561270357600080fd5b8286015b848110156127825780358681111561271f5760008081fd5b8701808c03601f19018913156127355760008081fd5b61273d611d65565b858201358881111561274f5760008081fd5b61275d8e8883860101611fa4565b825250908901359061276e82611f49565b808601919091528352918301918301612707565b508752508681013594508285111561279957600080fd5b6122058886890161254b565b600082601f8301126127b657600080fd5b813560206127c6611e7f83611e3b565b82815260059290921b840181019181810190868411156127e557600080fd5b8286015b84811015611ec5576001600160401b03813581101561280757600080fd5b813588016040818b03601f1901121561281f57600080fd5b612827611d65565b868201358381111561283857600080fd5b6128468c8983860101611fa4565b82525060408201358381111561285b57600080fd5b8083019250508a603f83011261287057600080fd5b86820135612880611e7f82611e3b565b81815260059190911b830160400190888101908d8311156128a057600080fd5b604085015b838110156128d85786813511156128bb57600080fd5b6128cb8f60408335890101611fa4565b8352918a01918a016128a5565b50838a01525050855250509183019183016127e9565b6000604080838503121561290157600080fd5b612909611d65565b915082356001600160401b038082111561292257600080fd5b818501915085601f83011261293657600080fd5b81356020612946611e7f83611e3b565b82815260059290921b8401810191818101908984111561296557600080fd5b8286015b848110156129f5578035868111156129815760008081fd5b8701808c03601f19018913156129975760008081fd5b61299f611d65565b85820135888111156129b15760008081fd5b6129bf8e8883860101611fa4565b82525089820135888111156129d45760008081fd5b6129e28e8883860101611fa4565b8288015250845250918301918301612969565b5087525086810135945082851115612a0c57600080fd5b612205888689016127a5565b600082601f830112612a2957600080fd5b81356020612a39611e7f83611e3b565b82815260059290921b84018101918181019086841115612a5857600080fd5b8286015b84811015611ec5576001600160401b038135811015612a7a57600080fd5b813588016040818b03601f19011215612a9257600080fd5b612a9a611d65565b8682013583811115612aab57600080fd5b612ab98c8983860101611fa4565b825250604082013583811115612ace57600080fd5b8083019250508a603f830112612ae357600080fd5b86820135612af3611e7f82611e3b565b81815260059190911b830160400190888101908d831115612b1357600080fd5b604085015b83811015612b4b578681351115612b2e57600080fd5b612b3e8f60408335890101611fa4565b8352918a01918a01612b18565b50838a0152505085525050918301918301612a5c565b60006040808385031215612b7457600080fd5b612b7c611d65565b915082356001600160401b0380821115612b9557600080fd5b818501915085601f830112612ba957600080fd5b81356020612bb9611e7f83611e3b565b82815260059290921b84018101918181019089841115612bd857600080fd5b8286015b84811015612c6857803586811115612bf45760008081fd5b8701808c03601f1901891315612c0a5760008081fd5b612c12611d65565b8582013588811115612c245760008081fd5b612c328e8883860101611fa4565b8252508982013588811115612c475760008081fd5b612c558e8883860101611fa4565b8288015250845250918301918301612bdc565b5087525086810135945082851115612c7f57600080fd5b61220588868901612a18565b600060e08284031215612c9d57600080fd5b612ca5611d8d565b905081356001600160401b0380821115612cbe57600080fd5b612cca858386016120f1565b83526020840135915080821115612ce057600080fd5b612cec85838601612356565b60208401526040840135915080821115612d0557600080fd5b612d1185838601612462565b60408401526060840135915080821115612d2a57600080fd5b612d368583860161268c565b60608401526080840135915080821115612d4f57600080fd5b612d5b85838601612356565b608084015260a0840135915080821115612d7457600080fd5b612d80858386016128ee565b60a084015260c0840135915080821115612d9957600080fd5b50612da684828501612b61565b60c08301525092915050565b600080600060608486031215612dc757600080fd5b8335925060208401356001600160401b0380821115612de557600080fd5b8186019150610100808389031215612dfc57600080fd5b612e04611daf565b833583811115612e1357600080fd5b8401610120818b031215612e2657600080fd5b612e2e611dd1565b612e3782611e24565b8152612e4560208301611e24565b6020820152612e5660408301611e24565b6040820152612e6760608301611e24565b6060820152612e7860808301611e24565b6080820152612e8960a08301611e24565b60a0820152612e9a60c08301611e24565b60c082015260e082013585811115612eb157600080fd5b612ebd8c828501611e5e565b60e0830152508382013585811115612ed457600080fd5b612ee08c828501611e5e565b8286015250825250612ef58960208601611ed0565b6020820152612f078960e08601611f57565b604082015280955050506040860135915080821115612f2557600080fd5b50612f3286828701612c8b565b9150509250925092565b600080600060608486031215612f5157600080fd5b8335925060208401356001600160401b0380821115612f6f57600080fd5b908501906101008288031215612f8457600080fd5b612f8c611daf565b823582811115612f9b57600080fd5b830160e0818a031215612fad57600080fd5b612fb5611d8d565b612fbe82611e24565b8152612fcc60208301611e24565b6020820152612fdd60408301611e24565b6040820152612fee60608301611e24565b6060820152612fff60808301611e24565b608082015260a08201358481111561301657600080fd5b6130228b828501611e5e565b60a08301525060c08201358481111561303a57600080fd5b6130468b828501611e5e565b60c08301525082525061305c8860208501611ed0565b602082015261306e8860e08501611f57565b6040820152809450506040860135915080821115612f2557600080fd5b60208082526022908201527f4d757374206265206120474d5820563220617574686f72697a6564204b65657060408201526132b960f11b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b0391909116815260200190565b60006020828403121561312a57600080fd5b5051919050565b60006020828403121561314357600080fd5b815160ff8116811461315457600080fd5b9392505050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156131ac5781600019048211156131925761319261315b565b8085161561319f57918102915b93841c9390800290613176565b509250929050565b6000826131c357506001611cfa565b816131d057506000611cfa565b81600181146131e657600281146131f05761320c565b6001915050611cfa565b60ff8411156132015761320161315b565b50506001821b611cfa565b5060208310610133831016604e8410600b841016171561322f575081810a611cfa565b6132398383613171565b806000190482111561324d5761324d61315b565b029392505050565b6000611cf760ff8416836131b4565b8082028115828204841417611cfa57611cfa61315b565b60008261329857634e487b7160e01b600052601260045260246000fd5b500490565b918252602082015260400190565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052603260045260246000fd5b6020808252600a908201526921a7a72a2927a62622a960b11b604082015260600190565b60006020828403121561330e57600080fd5b815161315481611f4956fea2646970667358221220434cf18fa430777190a6a32c1ab1bc17b94ba367273d72ed1ecbe871c975615b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 900,
        "contract": "contracts/facets/avalanche/GmxV2CallbacksFacetAvalanche.sol:GmxV2CallbacksFacetAvalanche",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}