{
  "address": "0x13652F4a37235293a90a1dE5B878c9435EAf4c58",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ISPrimeTraderJoe",
          "name": "prime",
          "type": "address"
        }
      ],
      "name": "SPrimeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "forceTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "centerId",
          "type": "uint256"
        }
      ],
      "name": "getDepositConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "depositIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "liquidityConfigs",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct IPositionManager.DepositConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDepositConfigFromTokenId",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "depositIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "liquidityConfigs",
              "type": "bytes32[]"
            }
          ],
          "internalType": "struct IPositionManager.DepositConfig",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerId",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "liquidityMinted",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "liquidityConfigs",
              "type": "bytes32[]"
            },
            {
              "internalType": "uint256[]",
              "name": "depositIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct IPositionManager.MintParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "positions",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "token0",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "contract ILBPair",
          "name": "pairAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "totalShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "centerId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "liquidityMinted",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sPrime",
      "outputs": [
        {
          "internalType": "contract ISPrimeTraderJoe",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ISPrimeTraderJoe",
          "name": "sPrime_",
          "type": "address"
        }
      ],
      "name": "setSPrime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "share",
              "type": "uint256"
            },
            {
              "internalType": "uint256[]",
              "name": "liquidityAmounts",
              "type": "uint256[]"
            },
            {
              "internalType": "bool",
              "name": "isAdd",
              "type": "bool"
            }
          ],
          "internalType": "struct IPositionManager.UpdateParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "update",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7370c2835a7871ca1de7dbb8ee208152f8daf900f2915ce4e5ef12e4eea9b2df",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x13652F4a37235293a90a1dE5B878c9435EAf4c58",
    "transactionIndex": 0,
    "gasUsed": "2121875",
    "logsBloom": "0x00000010000000080000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000040000000000020000000000000000000800000000000000000000000000000000400000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000008000000000000000000000000000000020000000000000000000",
    "blockHash": "0x5f2827987715c36a7850430308db2b645958537c1ee80e77444a580ddb81b40e",
    "transactionHash": "0x7370c2835a7871ca1de7dbb8ee208152f8daf900f2915ce4e5ef12e4eea9b2df",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 47296203,
        "transactionHash": "0x7370c2835a7871ca1de7dbb8ee208152f8daf900f2915ce4e5ef12e4eea9b2df",
        "address": "0x13652F4a37235293a90a1dE5B878c9435EAf4c58",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x5f2827987715c36a7850430308db2b645958537c1ee80e77444a580ddb81b40e"
      }
    ],
    "blockNumber": 47296203,
    "cumulativeGasUsed": "2121875",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0614b63bea7d297236d078d08a60ab04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ISPrimeTraderJoe\",\"name\":\"prime\",\"type\":\"address\"}],\"name\":\"SPrimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"forceTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"centerId\",\"type\":\"uint256\"}],\"name\":\"getDepositConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"liquidityConfigs\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IPositionManager.DepositConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDepositConfigFromTokenId\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"liquidityConfigs\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IPositionManager.DepositConfig\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidityMinted\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"liquidityConfigs\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"depositIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct IPositionManager.MintParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"positions\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"contract ILBPair\",\"name\":\"pairAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidityMinted\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sPrime\",\"outputs\":[{\"internalType\":\"contract ISPrimeTraderJoe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISPrimeTraderJoe\",\"name\":\"sPrime_\",\"type\":\"address\"}],\"name\":\"setSPrime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"liquidityAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"isAdd\",\"type\":\"bool\"}],\"internalType\":\"struct IPositionManager.UpdateParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"NFT positions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/NonfungibleNFT/PositionManager.sol\":\"PositionManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport \\\"./ISPrimeTraderJoe.sol\\\";\\n\\ninterface IPositionManager is IERC721Enumerable {\\n    // details about the position\\n    struct Position {\\n        // the liquidity of the position\\n        uint256 totalShare;\\n        uint256 centerId;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    struct DepositConfig {\\n        uint256[] depositIds;\\n        bytes32[] liquidityConfigs;\\n    }\\n\\n\\n    struct UpdateParams {\\n        uint256 tokenId;\\n        uint256 share;\\n        uint256[] liquidityAmounts;\\n        bool isAdd;\\n    }\\n\\n    struct MintParams {\\n        address recipient;\\n        uint256 totalShare;\\n        uint256 centerId;\\n        uint256[] liquidityMinted;\\n        bytes32[] liquidityConfigs;\\n        uint256[] depositIds;\\n    }\\n\\n    event SPrimeUpdated(ISPrimeTraderJoe prime);\\n\\n    // Mint new position NFT\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        returns (\\n            uint256 tokenId\\n        );\\n\\n    // Burn position NFT\\n    function burn(\\n        uint256 tokenId\\n    )\\n        external;\\n\\n    function update(\\n        UpdateParams calldata params\\n    )\\n        external;\\n\\n    function forceTransfer(address from, address to, uint256 tokenId) external;\\n    function getDepositConfig(uint256 centerId) external view returns(DepositConfig memory);\\n    function getDepositConfigFromTokenId(uint256 tokenId) external view returns(DepositConfig memory);\\n    \\n    // Get position details\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            IERC20 token0,\\n            IERC20 token1,\\n            ILBPair pairAddr,\\n            uint256 totalShare,\\n            uint256 centerId,\\n            uint256[] memory liquidityMinted\\n        );\\n}\",\"keccak256\":\"0xeefc1bda708fe8363247eadbe3cf0fffdad193f69d5ffae4787c5e5dfc5f735c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISPrime {\\n    /**\\n    * @dev Struct representing details of a locked amount.\\n    * @param lockPeriod The duration for which the amount is locked.\\n    * @param amount The amount that is locked.\\n    * @param unlockTime The timestamp when the locked amount will be able to released.\\n    */\\n    struct LockDetails {\\n        uint256 lockPeriod;\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    /**\\n    * @dev Users can use withdraw function for withdrawing their share.\\n    * @param shareWithdraw The amount of share to withdraw.\\n    */\\n    function withdraw(\\n        uint256 shareWithdraw\\n    ) external;\\n\\n    function getTokenX() external view returns(IERC20);\\n    function getTokenY() external view returns(IERC20);\\n    function getPoolPrice() external view returns(uint256);\\n    function getUserValueInTokenY(address user, uint256 poolPrice) external view returns (uint256);\\n    function getFullyVestedLockedBalance(address account) external view returns(uint256);\\n}\",\"keccak256\":\"0x44a6e69d8afec39db9947e2895d033ba82a1bd6ec1d6e3e48e31ff6326b26ad4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISPrimeTraderJoe.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ISPrime.sol\\\";\\nimport \\\"./joe-v2/ILBPair.sol\\\";\\n\\ninterface ISPrimeTraderJoe is ISPrime {\\n  struct DepositForm{\\n    int256 deltaId;\\n    uint64 distributionX;\\n    uint64 distributionY;\\n  }\\n\\n  /**\\n    * @dev Users can use deposit function for depositing tokens to the specific bin.\\n    * @param activeIdDesired The active id that user wants to add liquidity from\\n    * @param idSlippage The number of id that are allowed to slip\\n    * @param amountX The amount of token X to deposit.\\n    * @param amountY The amount of token Y to deposit.\\n    * @param isRebalance Rebalance the existing position with deposit.\\n    * @param swapSlippage Slippage for the rebalance.\\n    */\\n    function deposit(\\n        uint256 activeIdDesired,\\n        uint256 idSlippage,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bool isRebalance,\\n        uint256 swapSlippage\\n    ) external;\\n    \\n  function getLBPair() external view returns(ILBPair);\\n}\\n\",\"keccak256\":\"0x3bb47d65d662c85334b8fa579c90847302a0821423e2b9ac5dfb39cd4ebc50e1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/joe-v2/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x611e9da56c7f56456a2fae4aa4d4d74c266e1e9b4228509fe5eb0a2a1f1e349a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0595b40912fd6ba4c3ea7d6739e467b4381c9d6cc85218c5bd3536c9fb4ecc2b\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0xea919172ab21c9642383edcad886c93b21953b5811b83acb7227aa9df91c92bf\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xecbc396e150ad6643d5749ed99402dfeb19fc3a5cd0536467755b49dcf795e3f\",\"license\":\"MIT\"},\"contracts/token/NonfungibleNFT/PositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 7791f4c6f965248c1000f6642d53e9701e04a22d;\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\n\\nimport \\\"../../interfaces/IPositionManager.sol\\\";\\n\\n/// @title NFT positions\\ncontract PositionManager is\\n    ERC721Enumerable,\\n    IPositionManager,\\n    Ownable\\n{   \\n    // token id => Position Information\\n    mapping(uint256 => Position) private _positions;\\n    // bin id => Bin Information\\n    mapping(uint256 => DepositConfig) private _binInfo;\\n    uint176 private _nextId = 1;\\n    ISPrimeTraderJoe public sPrime;\\n\\n    // Nothing to initialize from the constructor. \\n    // Only had to call the contructor for ERC721\\n    constructor() ERC721('SPrime Position NFT', 'SPRIME-POS') {}\\n\\n    modifier onlySPrime() {\\n        require(address(sPrime) == _msgSender(), \\\"Not sPrime\\\");\\n        _;\\n    }\\n\\n    function setSPrime(ISPrimeTraderJoe sPrime_) external onlyOwner {\\n        sPrime = sPrime_;\\n        emit SPrimeUpdated(sPrime_);\\n    }\\n\\n    function getDepositConfig(uint256 centerId) external view returns(DepositConfig memory) {\\n        return _binInfo[centerId];\\n    }\\n\\n    function getDepositConfigFromTokenId(uint256 tokenId) external view returns(DepositConfig memory) {\\n        uint256 centerId = _positions[tokenId].centerId;\\n        return _binInfo[centerId];\\n    }\\n\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        override\\n        returns (\\n            IERC20 token0,\\n            IERC20 token1,\\n            ILBPair pairAddr,\\n            uint256 totalShare,\\n            uint256 centerId,\\n            uint256[] memory liquidityMinted\\n        )\\n    {\\n        Position memory position = _positions[tokenId];\\n\\n        return (\\n            sPrime.getTokenX(),\\n            sPrime.getTokenY(),\\n            sPrime.getLBPair(),\\n            position.totalShare,\\n            position.centerId,\\n            position.liquidityMinted\\n        );\\n    }\\n\\n    function mint(MintParams calldata params)\\n        external\\n        override\\n        onlySPrime\\n        returns (\\n            uint256 tokenId\\n        )\\n    {\\n        _mint(params.recipient, tokenId = _nextId++);\\n\\n        _positions[tokenId] = Position({\\n            totalShare: params.totalShare,\\n            centerId: params.centerId,\\n            liquidityMinted: params.liquidityMinted\\n        });\\n        \\n        DepositConfig storage binInfo = _binInfo[params.centerId];\\n        if(binInfo.depositIds.length == 0) {\\n            binInfo.depositIds = params.depositIds;\\n            binInfo.liquidityConfigs = params.liquidityConfigs;\\n        }\\n    }\\n\\n    function update(UpdateParams calldata params)\\n        external\\n        override\\n        onlySPrime\\n    {\\n        Position storage position = _positions[params.tokenId];\\n        require(position.liquidityMinted.length == params.liquidityAmounts.length, \\\"Length Dismatch\\\");\\n        if(params.isAdd) {\\n            position.totalShare += params.share;\\n            for(uint i = 0 ; i < params.liquidityAmounts.length ; i ++) {\\n                position.liquidityMinted[i] += params.liquidityAmounts[i];\\n            }\\n        } else {\\n            position.totalShare -= params.share;\\n            for(uint i = 0 ; i < params.liquidityAmounts.length ; i ++) {\\n                position.liquidityMinted[i] -= params.liquidityAmounts[i];\\n            }\\n        }\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId));\\n        return \\\"\\\";\\n    }\\n\\n    function forceTransfer(address from, address to, uint256 tokenId) external override {\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    function burn(uint256 tokenId) external override {        \\n        _burn(tokenId);\\n        delete _positions[tokenId];\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override onlySPrime{\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n    }\\n}\",\"keccak256\":\"0x8677684b52acff8bf72ad8bc3ddce35686419b4187c86071469c2f0747a267e9\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080604052600d80546001600160b01b03191660011790553480156200002457600080fd5b506040518060400160405280601381526020017f535072696d6520506f736974696f6e204e4654000000000000000000000000008152506040518060400160405280600a815260200169535052494d452d504f5360b01b81525081600090816200008f9190620001bc565b5060016200009e8282620001bc565b505050620000bb620000b5620000c160201b60201c565b620000c5565b62000288565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200014257607f821691505b6020821081036200016357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001b757600081815260208120601f850160051c81016020861015620001925750805b601f850160051c820191505b81811015620001b3578281556001016200019e565b5050505b505050565b81516001600160401b03811115620001d857620001d862000117565b620001f081620001e984546200012d565b8462000169565b602080601f8311600181146200022857600084156200020f5750858301515b600019600386901b1c1916600185901b178555620001b3565b600085815260208120601f198616915b82811015620002595788860151825594840194600190910190840162000238565b5085821015620002785787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61239680620002986000396000f3fe608060405234801561001057600080fd5b50600436106101545760003560e01c806301ffc9a71461015957806306fdde0314610181578063081812fc14610196578063095ea7b3146101b657806312431a63146101cb578063124f70a9146101eb57806318160ddd1461020c57806323b872dd146102145780632f745c591461022757806333bebb771461023a57806342842e0e1461024d57806342966c68146102605780634f6ccce7146102735780635d75169e146102865780636352211e1461029957806370a08231146102ac578063715018a6146102bf5780638da5cb5b146102c757806395d89b41146102cf57806397e71374146102d757806399fbab88146102ea578063a22cb4651461030f578063b88d4fde14610322578063b91e526f14610335578063c87b56dd14610348578063e985e9c51461035b578063f2fde38b1461036e578063face292d14610381575b600080fd5b61016c610167366004611bc8565b610394565b60405190151581526020015b60405180910390f35b6101896103bf565b6040516101789190611c32565b6101a96101a4366004611c45565b610451565b6040516101789190611c5e565b6101c96101c4366004611c87565b610478565b005b6101de6101d9366004611c45565b610592565b6040516101789190611cb3565b6101fe6101f9366004611d48565b610670565b604051908152602001610178565b6008546101fe565b6101c9610222366004611d82565b6107f1565b6101fe610235366004611c87565b610822565b6101c9610248366004611d82565b610817565b6101c961025b366004611d82565b6108b8565b6101c961026e366004611c45565b6108d3565b6101fe610281366004611c45565b610902565b600e546101a9906001600160a01b031681565b6101a96102a7366004611c45565b610995565b6101fe6102ba366004611dc3565b6109c9565b6101c9610a4f565b6101a9610a63565b610189610a72565b6101c96102e5366004611de0565b610a81565b6102fd6102f8366004611c45565b610c6b565b60405161017896959493929190611e1a565b6101c961031d366004611ea8565b610e89565b6101c9610330366004611ef3565b610e94565b6101de610343366004611c45565b610ecc565b610189610356366004611c45565b610f9a565b61016c610369366004611fd2565b610fc2565b6101c961037c366004611dc3565b610ff0565b6101c961038f366004611dc3565b611069565b60006001600160e01b0319821663780e9d6360e01b14806103b957506103b9826110c7565b92915050565b6060600080546103ce9061200b565b80601f01602080910402602001604051908101604052809291908181526020018280546103fa9061200b565b80156104475780601f1061041c57610100808354040283529160200191610447565b820191906000526020600020905b81548152906001019060200180831161042a57829003601f168201915b5050505050905090565b600061045c82611117565b506000908152600460205260409020546001600160a01b031690565b600061048382610995565b9050806001600160a01b0316836001600160a01b0316036104f55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061051157506105118133610fc2565b6105835760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104ec565b61058d838361113c565b505050565b61059a611ae3565b6000828152600b6020908152604080832060010154808452600c83529281902081518154606094810282018501845292810183815290939192849284919084018282801561060757602002820191906000526020600020905b8154815260200190600101908083116105f3575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561065f57602002820191906000526020600020905b81548152602001906001019080831161064b575b505050505081525050915050919050565b600e546000906001600160a01b0316331461069d5760405162461bcd60e51b81526004016104ec9061203f565b6106fb6106ad6020840184611dc3565b600d80546001600160b01b03169060006106c683612079565b91906101000a8154816001600160b01b0302191690836001600160b01b031602179055506001600160b01b03169250826111aa565b6040518060600160405280836020013581526020018360400135815260200183806060019061072a91906120a7565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050838152600b6020908152604091829020845181558482015160018201559184015180519293506107969260028501929190910190611afd565b5050506040808301356000908152600c60205290812080549091036107eb576107c260a08401846120a7565b6107cd918391611b48565b506107db60808401846120a7565b6107e9916001840191611b48565b505b50919050565b6107fb33826112b3565b6108175760405162461bcd60e51b81526004016104ec906120f7565b61058d838383611312565b600061082d836109c9565b821061088f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104ec565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61058d83838360405180602001604052806000815250610e94565b6108dc81611471565b6000818152600b60205260408120818155600181018290559061058d6002830182611b83565b600061090d60085490565b82106109705760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104ec565b6008828154811061098357610983612144565b90600052602060002001549050919050565b6000806109a183611502565b90506001600160a01b0381166103b95760405162461bcd60e51b81526004016104ec9061215a565b60006001600160a01b038216610a335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104ec565b506001600160a01b031660009081526003602052604090205490565b610a5761151d565b610a61600061157c565b565b600a546001600160a01b031690565b6060600180546103ce9061200b565b600e546001600160a01b03163314610aab5760405162461bcd60e51b81526004016104ec9061203f565b80356000908152600b60205260409081902090610aca908301836120a7565b6002830154149050610b105760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d04088d2e6dac2e8c6d608b1b60448201526064016104ec565b610b20608083016060840161218c565b15610bc6578160200135816000016000828254610b3d91906121a7565b90915550600090505b610b5360408401846120a7565b905081101561058d57610b6960408401846120a7565b82818110610b7957610b79612144565b90506020020135826002018281548110610b9557610b95612144565b906000526020600020016000828254610bae91906121a7565b90915550819050610bbe816121ba565b915050610b46565b8160200135816000016000828254610bde91906121d3565b90915550600090505b610bf460408401846120a7565b905081101561058d57610c0a60408401846120a7565b82818110610c1a57610c1a612144565b90506020020135826002018281548110610c3657610c36612144565b906000526020600020016000828254610c4f91906121d3565b90915550819050610c5f816121ba565b915050610be7565b5050565b600080600080600060606000600b6000898152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610cf857602002820191906000526020600020905b815481526020019060010190808311610ce4575b5050505050815250509050600e60009054906101000a90046001600160a01b03166001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a91906121e6565b600e60009054906101000a90046001600160a01b03166001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df191906121e6565b600e60009054906101000a90046001600160a01b03166001600160a01b0316635f9c01b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6891906121e6565b83516020850151604090950151939c929b5090995097509195509350915050565b610c673383836115ce565b610e9e33836112b3565b610eba5760405162461bcd60e51b81526004016104ec906120f7565b610ec684848484611698565b50505050565b610ed4611ae3565b6000828152600c60209081526040918290208251815460609381028201840185529381018481529093919284928491840182828015610f3257602002820191906000526020600020905b815481526020019060010190808311610f1e575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f8a57602002820191906000526020600020905b815481526020019060010190808311610f76575b5050505050815250509050919050565b6060610fa5826116cb565b610fae57600080fd5b505060408051602081019091526000815290565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610ff861151d565b6001600160a01b03811661105d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ec565b6110668161157c565b50565b61107161151d565b600e80546001600160a01b0319166001600160a01b0383161790556040517fa133d1c633054e7d0713f5eb0a45cadc3356b12604e59bc776620fb2f58eb983906110bc908390611c5e565b60405180910390a150565b60006001600160e01b031982166380ac58cd60e01b14806110f857506001600160e01b03198216635b5e139f60e01b145b806103b957506301ffc9a760e01b6001600160e01b03198316146103b9565b611120816116cb565b6110665760405162461bcd60e51b81526004016104ec9061215a565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061117182610995565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104ec565b611209816116cb565b156112265760405162461bcd60e51b81526004016104ec90612203565b6112346000838360016116e8565b61123d816116cb565b1561125a5760405162461bcd60e51b81526004016104ec90612203565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b031916841790555183929190600080516020612341833981519152908290a45050565b6000806112bf83610995565b9050806001600160a01b0316846001600160a01b031614806112e657506112e68185610fc2565b8061130a5750836001600160a01b03166112ff84610451565b6001600160a01b0316145b949350505050565b826001600160a01b031661132582610995565b6001600160a01b03161461134b5760405162461bcd60e51b81526004016104ec90612239565b6001600160a01b0382166113ad5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104ec565b6113ba83838360016116e8565b826001600160a01b03166113cd82610995565b6001600160a01b0316146113f35760405162461bcd60e51b81526004016104ec90612239565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652600385528386208054600019019055908716808652838620805460010190558686526002909452828520805490921684179091559051849360008051602061234183398151915291a4505050565b600061147c82610995565b905061148c8160008460016116e8565b61149582610995565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b038516808552600384528285208054600019019055878552600290935281842080549091169055519293508492600080516020612341833981519152908390a45050565b6000908152600260205260409020546001600160a01b031690565b33611526610a63565b6001600160a01b031614610a615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ec565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361162b5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104ec565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116a3848484611312565b6116af8484848461171e565b610ec65760405162461bcd60e51b81526004016104ec9061227e565b6000806116d783611502565b6001600160a01b0316141592915050565b600e546001600160a01b031633146117125760405162461bcd60e51b81526004016104ec9061203f565b610ec68484848461181f565b60006001600160a01b0384163b1561181457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906117629033908990889088906004016122d0565b6020604051808303816000875af192505050801561179d575060408051601f3d908101601f1916820190925261179a9181019061230d565b60015b6117fa573d8080156117cb576040519150601f19603f3d011682016040523d82523d6000602084013e6117d0565b606091505b5080516000036117f25760405162461bcd60e51b81526004016104ec9061227e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061130a565b506001949350505050565b600181111561188e5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016104ec565b816001600160a01b0385166118ea576118e581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61190d565b836001600160a01b0316856001600160a01b03161461190d5761190d8582611953565b6001600160a01b03841661192957611924816119f0565b61194c565b846001600160a01b0316846001600160a01b03161461194c5761194c8482611a9f565b5050505050565b60006001611960846109c9565b61196a91906121d3565b6000838152600760205260409020549091508082146119bd576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611a02906001906121d3565b60008381526009602052604081205460088054939450909284908110611a2a57611a2a612144565b906000526020600020015490508060088381548110611a4b57611a4b612144565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611a8357611a8361232a565b6001900381819060005260206000200160009055905550505050565b6000611aaa836109c9565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215611b38579160200282015b82811115611b38578251825591602001919060010190611b1d565b50611b44929150611b9d565b5090565b828054828255906000526020600020908101928215611b38579160200282015b82811115611b38578235825591602001919060010190611b68565b508054600082559060005260206000209081019061106691905b5b80821115611b445760008155600101611b9e565b6001600160e01b03198116811461106657600080fd5b600060208284031215611bda57600080fd5b8135611be581611bb2565b9392505050565b6000815180845260005b81811015611c1257602081850181015186830182015201611bf6565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611be56020830184611bec565b600060208284031215611c5757600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461106657600080fd5b60008060408385031215611c9a57600080fd5b8235611ca581611c72565b946020939093013593505050565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015611cf85783518252928401926001929092019190840190611cd8565b5086840151868203601f190160408801528051808352908501935090840191506000905b80821015611d3c5783518352928401929184019160019190910190611d1c565b50909695505050505050565b600060208284031215611d5a57600080fd5b81356001600160401b03811115611d7057600080fd5b820160c08185031215611be557600080fd5b600080600060608486031215611d9757600080fd5b8335611da281611c72565b92506020840135611db281611c72565b929592945050506040919091013590565b600060208284031215611dd557600080fd5b8135611be581611c72565b600060208284031215611df257600080fd5b81356001600160401b03811115611e0857600080fd5b820160808185031215611be557600080fd5b600060c0820160018060a01b03808a1684526020818a1681860152818916604086015287606086015286608086015260c060a0860152829150855180845260e086019250818701935060005b81811015611e8257845184529382019392820192600101611e66565b50919b9a5050505050505050505050565b80358015158114611ea357600080fd5b919050565b60008060408385031215611ebb57600080fd5b8235611ec681611c72565b9150611ed460208401611e93565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611f0957600080fd5b8435611f1481611c72565b93506020850135611f2481611c72565b92506040850135915060608501356001600160401b0380821115611f4757600080fd5b818701915087601f830112611f5b57600080fd5b813581811115611f6d57611f6d611edd565b604051601f8201601f19908116603f01168101908382118183101715611f9557611f95611edd565b816040528281528a6020848701011115611fae57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611fe557600080fd5b8235611ff081611c72565b9150602083013561200081611c72565b809150509250929050565b600181811c9082168061201f57607f821691505b6020821081036107eb57634e487b7160e01b600052602260045260246000fd5b6020808252600a90820152694e6f7420735072696d6560b01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160b01b038281166002600160b01b0319810161209d5761209d612063565b6001019392505050565b6000808335601e198436030181126120be57600080fd5b8301803591506001600160401b038211156120d857600080fd5b6020019150600581901b36038213156120f057600080fd5b9250929050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60006020828403121561219e57600080fd5b611be582611e93565b808201808211156103b9576103b9612063565b6000600182016121cc576121cc612063565b5060010190565b818103818111156103b9576103b9612063565b6000602082840312156121f857600080fd5b8151611be581611c72565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061230390830184611bec565b9695505050505050565b60006020828403121561231f57600080fd5b8151611be581611bb2565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220814f771ded9c2dcc12d1f6d1a1eaf70248233ea097878c1997538855e474fd8064736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101545760003560e01c806301ffc9a71461015957806306fdde0314610181578063081812fc14610196578063095ea7b3146101b657806312431a63146101cb578063124f70a9146101eb57806318160ddd1461020c57806323b872dd146102145780632f745c591461022757806333bebb771461023a57806342842e0e1461024d57806342966c68146102605780634f6ccce7146102735780635d75169e146102865780636352211e1461029957806370a08231146102ac578063715018a6146102bf5780638da5cb5b146102c757806395d89b41146102cf57806397e71374146102d757806399fbab88146102ea578063a22cb4651461030f578063b88d4fde14610322578063b91e526f14610335578063c87b56dd14610348578063e985e9c51461035b578063f2fde38b1461036e578063face292d14610381575b600080fd5b61016c610167366004611bc8565b610394565b60405190151581526020015b60405180910390f35b6101896103bf565b6040516101789190611c32565b6101a96101a4366004611c45565b610451565b6040516101789190611c5e565b6101c96101c4366004611c87565b610478565b005b6101de6101d9366004611c45565b610592565b6040516101789190611cb3565b6101fe6101f9366004611d48565b610670565b604051908152602001610178565b6008546101fe565b6101c9610222366004611d82565b6107f1565b6101fe610235366004611c87565b610822565b6101c9610248366004611d82565b610817565b6101c961025b366004611d82565b6108b8565b6101c961026e366004611c45565b6108d3565b6101fe610281366004611c45565b610902565b600e546101a9906001600160a01b031681565b6101a96102a7366004611c45565b610995565b6101fe6102ba366004611dc3565b6109c9565b6101c9610a4f565b6101a9610a63565b610189610a72565b6101c96102e5366004611de0565b610a81565b6102fd6102f8366004611c45565b610c6b565b60405161017896959493929190611e1a565b6101c961031d366004611ea8565b610e89565b6101c9610330366004611ef3565b610e94565b6101de610343366004611c45565b610ecc565b610189610356366004611c45565b610f9a565b61016c610369366004611fd2565b610fc2565b6101c961037c366004611dc3565b610ff0565b6101c961038f366004611dc3565b611069565b60006001600160e01b0319821663780e9d6360e01b14806103b957506103b9826110c7565b92915050565b6060600080546103ce9061200b565b80601f01602080910402602001604051908101604052809291908181526020018280546103fa9061200b565b80156104475780601f1061041c57610100808354040283529160200191610447565b820191906000526020600020905b81548152906001019060200180831161042a57829003601f168201915b5050505050905090565b600061045c82611117565b506000908152600460205260409020546001600160a01b031690565b600061048382610995565b9050806001600160a01b0316836001600160a01b0316036104f55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b038216148061051157506105118133610fc2565b6105835760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016104ec565b61058d838361113c565b505050565b61059a611ae3565b6000828152600b6020908152604080832060010154808452600c83529281902081518154606094810282018501845292810183815290939192849284919084018282801561060757602002820191906000526020600020905b8154815260200190600101908083116105f3575b505050505081526020016001820180548060200260200160405190810160405280929190818152602001828054801561065f57602002820191906000526020600020905b81548152602001906001019080831161064b575b505050505081525050915050919050565b600e546000906001600160a01b0316331461069d5760405162461bcd60e51b81526004016104ec9061203f565b6106fb6106ad6020840184611dc3565b600d80546001600160b01b03169060006106c683612079565b91906101000a8154816001600160b01b0302191690836001600160b01b031602179055506001600160b01b03169250826111aa565b6040518060600160405280836020013581526020018360400135815260200183806060019061072a91906120a7565b808060200260200160405190810160405280939291908181526020018383602002808284376000920182905250939094525050838152600b6020908152604091829020845181558482015160018201559184015180519293506107969260028501929190910190611afd565b5050506040808301356000908152600c60205290812080549091036107eb576107c260a08401846120a7565b6107cd918391611b48565b506107db60808401846120a7565b6107e9916001840191611b48565b505b50919050565b6107fb33826112b3565b6108175760405162461bcd60e51b81526004016104ec906120f7565b61058d838383611312565b600061082d836109c9565b821061088f5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b60648201526084016104ec565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b61058d83838360405180602001604052806000815250610e94565b6108dc81611471565b6000818152600b60205260408120818155600181018290559061058d6002830182611b83565b600061090d60085490565b82106109705760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b60648201526084016104ec565b6008828154811061098357610983612144565b90600052602060002001549050919050565b6000806109a183611502565b90506001600160a01b0381166103b95760405162461bcd60e51b81526004016104ec9061215a565b60006001600160a01b038216610a335760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016104ec565b506001600160a01b031660009081526003602052604090205490565b610a5761151d565b610a61600061157c565b565b600a546001600160a01b031690565b6060600180546103ce9061200b565b600e546001600160a01b03163314610aab5760405162461bcd60e51b81526004016104ec9061203f565b80356000908152600b60205260409081902090610aca908301836120a7565b6002830154149050610b105760405162461bcd60e51b815260206004820152600f60248201526e098cadccee8d04088d2e6dac2e8c6d608b1b60448201526064016104ec565b610b20608083016060840161218c565b15610bc6578160200135816000016000828254610b3d91906121a7565b90915550600090505b610b5360408401846120a7565b905081101561058d57610b6960408401846120a7565b82818110610b7957610b79612144565b90506020020135826002018281548110610b9557610b95612144565b906000526020600020016000828254610bae91906121a7565b90915550819050610bbe816121ba565b915050610b46565b8160200135816000016000828254610bde91906121d3565b90915550600090505b610bf460408401846120a7565b905081101561058d57610c0a60408401846120a7565b82818110610c1a57610c1a612144565b90506020020135826002018281548110610c3657610c36612144565b906000526020600020016000828254610c4f91906121d3565b90915550819050610c5f816121ba565b915050610be7565b5050565b600080600080600060606000600b6000898152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201805480602002602001604051908101604052809291908181526020018280548015610cf857602002820191906000526020600020905b815481526020019060010190808311610ce4575b5050505050815250509050600e60009054906101000a90046001600160a01b03166001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7a91906121e6565b600e60009054906101000a90046001600160a01b03166001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df191906121e6565b600e60009054906101000a90046001600160a01b03166001600160a01b0316635f9c01b16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6891906121e6565b83516020850151604090950151939c929b5090995097509195509350915050565b610c673383836115ce565b610e9e33836112b3565b610eba5760405162461bcd60e51b81526004016104ec906120f7565b610ec684848484611698565b50505050565b610ed4611ae3565b6000828152600c60209081526040918290208251815460609381028201840185529381018481529093919284928491840182828015610f3257602002820191906000526020600020905b815481526020019060010190808311610f1e575b5050505050815260200160018201805480602002602001604051908101604052809291908181526020018280548015610f8a57602002820191906000526020600020905b815481526020019060010190808311610f76575b5050505050815250509050919050565b6060610fa5826116cb565b610fae57600080fd5b505060408051602081019091526000815290565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b610ff861151d565b6001600160a01b03811661105d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104ec565b6110668161157c565b50565b61107161151d565b600e80546001600160a01b0319166001600160a01b0383161790556040517fa133d1c633054e7d0713f5eb0a45cadc3356b12604e59bc776620fb2f58eb983906110bc908390611c5e565b60405180910390a150565b60006001600160e01b031982166380ac58cd60e01b14806110f857506001600160e01b03198216635b5e139f60e01b145b806103b957506301ffc9a760e01b6001600160e01b03198316146103b9565b611120816116cb565b6110665760405162461bcd60e51b81526004016104ec9061215a565b600081815260046020526040902080546001600160a01b0319166001600160a01b038416908117909155819061117182610995565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6001600160a01b0382166112005760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104ec565b611209816116cb565b156112265760405162461bcd60e51b81526004016104ec90612203565b6112346000838360016116e8565b61123d816116cb565b1561125a5760405162461bcd60e51b81526004016104ec90612203565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b031916841790555183929190600080516020612341833981519152908290a45050565b6000806112bf83610995565b9050806001600160a01b0316846001600160a01b031614806112e657506112e68185610fc2565b8061130a5750836001600160a01b03166112ff84610451565b6001600160a01b0316145b949350505050565b826001600160a01b031661132582610995565b6001600160a01b03161461134b5760405162461bcd60e51b81526004016104ec90612239565b6001600160a01b0382166113ad5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104ec565b6113ba83838360016116e8565b826001600160a01b03166113cd82610995565b6001600160a01b0316146113f35760405162461bcd60e51b81526004016104ec90612239565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b03878116808652600385528386208054600019019055908716808652838620805460010190558686526002909452828520805490921684179091559051849360008051602061234183398151915291a4505050565b600061147c82610995565b905061148c8160008460016116e8565b61149582610995565b600083815260046020908152604080832080546001600160a01b03199081169091556001600160a01b038516808552600384528285208054600019019055878552600290935281842080549091169055519293508492600080516020612341833981519152908390a45050565b6000908152600260205260409020546001600160a01b031690565b33611526610a63565b6001600160a01b031614610a615760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ec565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b03160361162b5760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b60448201526064016104ec565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6116a3848484611312565b6116af8484848461171e565b610ec65760405162461bcd60e51b81526004016104ec9061227e565b6000806116d783611502565b6001600160a01b0316141592915050565b600e546001600160a01b031633146117125760405162461bcd60e51b81526004016104ec9061203f565b610ec68484848461181f565b60006001600160a01b0384163b1561181457604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906117629033908990889088906004016122d0565b6020604051808303816000875af192505050801561179d575060408051601f3d908101601f1916820190925261179a9181019061230d565b60015b6117fa573d8080156117cb576040519150601f19603f3d011682016040523d82523d6000602084013e6117d0565b606091505b5080516000036117f25760405162461bcd60e51b81526004016104ec9061227e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061130a565b506001949350505050565b600181111561188e5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e7365637574697665207472604482015274185b9cd9995c9cc81b9bdd081cdd5c1c1bdc9d1959605a1b60648201526084016104ec565b816001600160a01b0385166118ea576118e581600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61190d565b836001600160a01b0316856001600160a01b03161461190d5761190d8582611953565b6001600160a01b03841661192957611924816119f0565b61194c565b846001600160a01b0316846001600160a01b03161461194c5761194c8482611a9f565b5050505050565b60006001611960846109c9565b61196a91906121d3565b6000838152600760205260409020549091508082146119bd576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090611a02906001906121d3565b60008381526009602052604081205460088054939450909284908110611a2a57611a2a612144565b906000526020600020015490508060088381548110611a4b57611a4b612144565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480611a8357611a8361232a565b6001900381819060005260206000200160009055905550505050565b6000611aaa836109c9565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b604051806040016040528060608152602001606081525090565b828054828255906000526020600020908101928215611b38579160200282015b82811115611b38578251825591602001919060010190611b1d565b50611b44929150611b9d565b5090565b828054828255906000526020600020908101928215611b38579160200282015b82811115611b38578235825591602001919060010190611b68565b508054600082559060005260206000209081019061106691905b5b80821115611b445760008155600101611b9e565b6001600160e01b03198116811461106657600080fd5b600060208284031215611bda57600080fd5b8135611be581611bb2565b9392505050565b6000815180845260005b81811015611c1257602081850181015186830182015201611bf6565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000611be56020830184611bec565b600060208284031215611c5757600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461106657600080fd5b60008060408385031215611c9a57600080fd5b8235611ca581611c72565b946020939093013593505050565b6020808252825160408383015280516060840181905260009291820190839060808601905b80831015611cf85783518252928401926001929092019190840190611cd8565b5086840151868203601f190160408801528051808352908501935090840191506000905b80821015611d3c5783518352928401929184019160019190910190611d1c565b50909695505050505050565b600060208284031215611d5a57600080fd5b81356001600160401b03811115611d7057600080fd5b820160c08185031215611be557600080fd5b600080600060608486031215611d9757600080fd5b8335611da281611c72565b92506020840135611db281611c72565b929592945050506040919091013590565b600060208284031215611dd557600080fd5b8135611be581611c72565b600060208284031215611df257600080fd5b81356001600160401b03811115611e0857600080fd5b820160808185031215611be557600080fd5b600060c0820160018060a01b03808a1684526020818a1681860152818916604086015287606086015286608086015260c060a0860152829150855180845260e086019250818701935060005b81811015611e8257845184529382019392820192600101611e66565b50919b9a5050505050505050505050565b80358015158114611ea357600080fd5b919050565b60008060408385031215611ebb57600080fd5b8235611ec681611c72565b9150611ed460208401611e93565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215611f0957600080fd5b8435611f1481611c72565b93506020850135611f2481611c72565b92506040850135915060608501356001600160401b0380821115611f4757600080fd5b818701915087601f830112611f5b57600080fd5b813581811115611f6d57611f6d611edd565b604051601f8201601f19908116603f01168101908382118183101715611f9557611f95611edd565b816040528281528a6020848701011115611fae57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60008060408385031215611fe557600080fd5b8235611ff081611c72565b9150602083013561200081611c72565b809150509250929050565b600181811c9082168061201f57607f821691505b6020821081036107eb57634e487b7160e01b600052602260045260246000fd5b6020808252600a90820152694e6f7420735072696d6560b01b604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60006001600160b01b038281166002600160b01b0319810161209d5761209d612063565b6001019392505050565b6000808335601e198436030181126120be57600080fd5b8301803591506001600160401b038211156120d857600080fd5b6020019150600581901b36038213156120f057600080fd5b9250929050565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b602080825260189082015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b604082015260600190565b60006020828403121561219e57600080fd5b611be582611e93565b808201808211156103b9576103b9612063565b6000600182016121cc576121cc612063565b5060010190565b818103818111156103b9576103b9612063565b6000602082840312156121f857600080fd5b8151611be581611c72565b6020808252601c908201527b115490cdcc8c4e881d1bdad95b88185b1c9958591e481b5a5b9d195960221b604082015260600190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061230390830184611bec565b9695505050505050565b60006020828403121561231f57600080fd5b8151611be581611bb2565b634e487b7160e01b600052603160045260246000fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220814f771ded9c2dcc12d1f6d1a1eaf70248233ea097878c1997538855e474fd8064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "NFT positions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 216,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 218,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 222,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 226,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 230,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 236,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1266,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1270,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1273,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1277,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 4518,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_positions",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_struct(Position)3265_storage)"
      },
      {
        "astId": 4523,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_binInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(DepositConfig)3272_storage)"
      },
      {
        "astId": 4526,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "_nextId",
        "offset": 0,
        "slot": "13",
        "type": "t_uint176"
      },
      {
        "astId": 4529,
        "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
        "label": "sPrime",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(ISPrimeTraderJoe)3455"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ISPrimeTraderJoe)3455": {
        "encoding": "inplace",
        "label": "contract ISPrimeTraderJoe",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(DepositConfig)3272_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPositionManager.DepositConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DepositConfig)3272_storage"
      },
      "t_mapping(t_uint256,t_struct(Position)3265_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IPositionManager.Position)",
        "numberOfBytes": "32",
        "value": "t_struct(Position)3265_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositConfig)3272_storage": {
        "encoding": "inplace",
        "label": "struct IPositionManager.DepositConfig",
        "members": [
          {
            "astId": 3268,
            "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
            "label": "depositIds",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 3271,
            "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
            "label": "liquidityConfigs",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes32)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Position)3265_storage": {
        "encoding": "inplace",
        "label": "struct IPositionManager.Position",
        "members": [
          {
            "astId": 3259,
            "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
            "label": "totalShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3261,
            "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
            "label": "centerId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3264,
            "contract": "contracts/token/NonfungibleNFT/PositionManager.sol:PositionManager",
            "label": "liquidityMinted",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint176": {
        "encoding": "inplace",
        "label": "uint176",
        "numberOfBytes": "22"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}