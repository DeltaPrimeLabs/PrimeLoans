{
  "address": "0xF1A98F4dbcCc78615105d70dBC8bEfb2A785dA62",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "_getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "_getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resetPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_setPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_fundedAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_withdrawnAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe9fae47b8c371feffaae70786a14dd3c934fc41c5eed026e951ddaa375a5fdcc",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xF1A98F4dbcCc78615105d70dBC8bEfb2A785dA62",
    "transactionIndex": 0,
    "gasUsed": "3736321",
    "logsBloom": "0x
    "blockHash": "0xd6896910ac73b63acd9c74a05d958f87251f8797945cdcd4251105ae986030f5",
    "transactionHash": "0xe9fae47b8c371feffaae70786a14dd3c934fc41c5eed026e951ddaa375a5fdcc",
    "logs": [],
    "blockNumber": 26033496,
    "cumulativeGasUsed": "3736321",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "8884242c41847447aded0cf8ecdf99b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"_getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"_getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resetPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_setPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fundedAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_withdrawnAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Borrowed(address,bytes32,uint256,uint256)\":{\"details\":\"emitted when funds are borrowed from the pool\",\"params\":{\"amount\":\"of the borrowed funds\",\"asset\":\"borrowed by an= user\",\"timestamp\":\"time of the borrowing*\",\"user\":\"the address of borrower\"}},\"Funded(address,bytes32,uint256,uint256)\":{\"details\":\"emitted after a loan is funded\",\"params\":{\"amount\":\"the amount of funds\",\"asset\":\"funded by a user\",\"timestamp\":\"time of funding*\",\"user\":\"the address which funded the loan\"}},\"Repaid(address,bytes32,uint256,uint256)\":{\"details\":\"emitted when funds are repaid to the pool\",\"params\":{\"amount\":\"of repaid funds\",\"asset\":\"asset repaid by a user\",\"timestamp\":\"of the repayment*\",\"user\":\"the address initiating repayment\"}},\"Withdrawn(address,bytes32,uint256,uint256)\":{\"details\":\"emitted after the funds are withdrawn from the loan\",\"params\":{\"amount\":\"of funds withdrawn\",\"asset\":\"withdrawn by a user\",\"timestamp\":\"of the withdrawal*\",\"user\":\"the address which withdraws funds from the loan\"}}},\"kind\":\"dev\",\"methods\":{\"borrow(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_amount\":\"of funds to borrow*\",\"_asset\":\"to be borrowed\"}},\"fund(bytes32,uint256)\":{\"details\":\"Requires approval for ERC20 token on frontend side\",\"params\":{\"_amount\":\"to be funded*\",\"_fundedAsset\":\"asset to be funded\"}},\"fundGLP(uint256)\":{\"details\":\"Requires approval for stakedGLP token on frontend side\",\"params\":{\"_amount\":\"to be funded*\"}},\"repay(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_amount\":\"of funds to repay*\",\"_asset\":\"to be repaid\"}},\"withdraw(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_amount\":\"to be withdrawn*\",\"_withdrawnAsset\":\"asset to be withdrawn\"}},\"withdrawGLP(uint256)\":{\"params\":{\"_amount\":\"to be withdrawn*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(bytes32,uint256)\":{\"notice\":\"Borrows funds from the pool\"},\"fund(bytes32,uint256)\":{\"notice\":\"Funds the loan with a specified amount of a defined token\"},\"fundGLP(uint256)\":{\"notice\":\"Funds the loan with a specified amount of a GLP\"},\"repay(bytes32,uint256)\":{\"notice\":\"Repays funds to the pool\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws an amount of a defined asset from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal\"},\"withdrawGLP(uint256)\":{\"notice\":\"Withdraws specified amount of a GLP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/AssetsOperationsFacet.sol\":\"AssetsOperationsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x816269b87f6d7fdbac50710b9bd7ecbea0afc660ed4ea8a4441d5f3d163f9e61\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0x723a0c1f122a50e6743b0f99a11f5619bd02268269e191806ed7136d8f1f2b10\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\n/**\\r\\n * DiamondHelper\\r\\n * Helper methods\\r\\n **/\\r\\ncontract DiamondHelper {\\r\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\r\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x1260e163609ca1f1b7508e0cf0b3b11ed45f844659f1720460000203de90d634\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"./interfaces/IIndex.sol\\\";\\r\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\r\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\r\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\r\\n\\r\\n\\r\\n/**\\r\\n * @title Pool\\r\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\r\\n * Depositors are rewarded with the interest rates collected from borrowers.\\r\\n * The interest rates calculation is delegated to an external calculator contract.\\r\\n */\\r\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\r\\n    using TransferHelper for address payable;\\r\\n\\r\\n    uint256 public totalSupplyCap;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowed;\\r\\n    mapping(address => uint256) internal _deposited;\\r\\n\\r\\n    mapping(address => uint256) public borrowed;\\r\\n\\r\\n    IRatesCalculator public ratesCalculator;\\r\\n    IBorrowersRegistry public borrowersRegistry;\\r\\n    IPoolRewarder public poolRewarder;\\r\\n\\r\\n    IIndex public depositIndex;\\r\\n    IIndex public borrowIndex;\\r\\n\\r\\n    address payable public tokenAddress;\\r\\n\\r\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\r\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\r\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\r\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\r\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\r\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        depositIndex = depositIndex_;\\r\\n        borrowIndex = borrowIndex_;\\r\\n        poolRewarder = poolRewarder_;\\r\\n        tokenAddress = tokenAddress_;\\r\\n        totalSupplyCap = _totalSupplyCap;\\r\\n\\r\\n        __Ownable_init();\\r\\n        __ReentrancyGuard_init();\\r\\n        _updateRates();\\r\\n    }\\r\\n\\r\\n    /* ========== SETTERS ========== */\\r\\n\\r\\n    /**\\r\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _newTotalSupplyCap new deposit cap\\r\\n    **/\\r\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\r\\n        totalSupplyCap = _newTotalSupplyCap;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new Pool Rewarder.\\r\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev _poolRewarder the address of PoolRewarder\\r\\n    **/\\r\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\r\\n        poolRewarder = _poolRewarder;\\r\\n\\r\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new rate calculator.\\r\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev ratesCalculator the address of rates calculator\\r\\n     **/\\r\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\r\\n        // setting address(0) ratesCalculator_ freezes the pool\\r\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\r\\n        ratesCalculator = ratesCalculator_;\\r\\n        if (address(ratesCalculator_) != address(0)) {\\r\\n            _updateRates();\\r\\n        }\\r\\n\\r\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Sets the new borrowers registry contract.\\r\\n     * The borrowers registry decides if an account can borrow funds.\\r\\n     * Only the owner of the Contract can execute this function.\\r\\n     * @dev borrowersRegistry the address of borrowers registry\\r\\n     **/\\r\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\r\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\r\\n\\r\\n        borrowersRegistry = borrowersRegistry_;\\r\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\r\\n\\r\\n        // (this is verified in \\\"require\\\" above)\\r\\n        unchecked {\\r\\n            _deposited[msg.sender] -= amount;\\r\\n        }\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\r\\n        return _allowed[owner][spender];\\r\\n    }\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\r\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\r\\n\\r\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\r\\n        _allowed[msg.sender][spender] = newAllowance;\\r\\n\\r\\n        emit Approval(msg.sender, spender, newAllowance);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\r\\n        if(spender == address(0)) revert SpenderZeroAddress();\\r\\n        _allowed[msg.sender][spender] = amount;\\r\\n\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\r\\n\\r\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\r\\n\\r\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\r\\n\\r\\n        _accumulateDepositInterest(sender);\\r\\n\\r\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\r\\n\\r\\n\\r\\n        _deposited[sender] -= amount;\\r\\n        _allowed[sender][msg.sender] -= amount;\\r\\n\\r\\n        _accumulateDepositInterest(recipient);\\r\\n        _deposited[recipient] += amount;\\r\\n\\r\\n        // Handle rewards\\r\\n        if(address(poolRewarder) != address(0) && amount != 0){\\r\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\r\\n            if(unstaked > 0) {\\r\\n                poolRewarder.stakeFor(unstaked, recipient);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Deposits the amount\\r\\n     * It updates user deposited balance, total deposited and rates\\r\\n     **/\\r\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\r\\n        if(_amount == 0) revert ZeroDepositAmount();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(totalSupplyCap != 0){\\r\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\r\\n        }\\r\\n\\r\\n        _transferToPool(msg.sender, _amount);\\r\\n\\r\\n        _mint(msg.sender, _amount);\\r\\n        _deposited[address(this)] += _amount;\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.stakeFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\r\\n    }\\r\\n\\r\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\r\\n        tokenAddress.safeTransfer(to, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Withdraws selected amount from the user deposits\\r\\n     * @dev _amount the amount to be withdrawn\\r\\n     **/\\r\\n    function withdraw(uint256 _amount) external nonReentrant {\\r\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateDepositInterest(msg.sender);\\r\\n\\r\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[address(this)] -= _amount;\\r\\n        }\\r\\n        _burn(msg.sender, _amount);\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        if (address(poolRewarder) != address(0)) {\\r\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\r\\n        }\\r\\n\\r\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Borrows the specified amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev _amount the amount to be borrowed\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\r\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\r\\n\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        borrowed[msg.sender] += _amount;\\r\\n        borrowed[address(this)] += _amount;\\r\\n\\r\\n        _transferFromPool(msg.sender, _amount);\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Repays the amount\\r\\n     * It updates user borrowed balance, total borrowed amount and rates\\r\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\r\\n     **/\\r\\n    function repay(uint256 amount) external nonReentrant {\\r\\n        _accumulateBorrowingInterest(msg.sender);\\r\\n\\r\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\r\\n        _transferToPool(msg.sender, amount);\\r\\n\\r\\n        borrowed[msg.sender] -= amount;\\r\\n        borrowed[address(this)] -= amount;\\r\\n\\r\\n        _updateRates();\\r\\n\\r\\n        emit Repayment(msg.sender, amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* =========\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current borrowed amount for the given user\\r\\n     * The value includes the interest rates owned at the current moment\\r\\n     * @dev _user the address of queried borrower\\r\\n    **/\\r\\n    function getBorrowed(address _user) public view returns (uint256) {\\r\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view override returns (uint256) {\\r\\n        return balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    function totalBorrowed() public view returns (uint256) {\\r\\n        return getBorrowed(address(this));\\r\\n    }\\r\\n\\r\\n\\r\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\r\\n    function getRewards() external {\\r\\n        poolRewarder.getRewardsFor(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns number of pending rewards for msg.sender\\r\\n    function checkRewards() external view returns (uint256) {\\r\\n        return poolRewarder.earned(msg.sender);\\r\\n    }\\r\\n\\r\\n    // Returns max. acceptable pool utilisation after borrow action\\r\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\r\\n        return 0.9e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current deposited amount for the given user\\r\\n     * The value includes the interest rates earned at the current moment\\r\\n     * @dev _user the address of queried depositor\\r\\n     **/\\r\\n    function balanceOf(address user) public view override returns (uint256) {\\r\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for deposits\\r\\n     **/\\r\\n    function getDepositRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current interest rate for borrowings\\r\\n     **/\\r\\n    function getBorrowingRate() public view returns (uint256) {\\r\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\r\\n     **/\\r\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\r\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\r\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\r\\n\\r\\n        if(amount > balance) revert InsufficientPoolFunds();\\r\\n        if(surplus < amount) revert InsufficientSurplus();\\r\\n\\r\\n        _transferFromPool(account, amount);\\r\\n    }\\r\\n\\r\\n    /* ========== INTERNAL FUNCTIONS ========== */\\r\\n\\r\\n    function _mint(address to, uint256 amount) internal {\\r\\n        if(to == address(0)) revert MintToAddressZero();\\r\\n\\r\\n        _deposited[to] += amount;\\r\\n\\r\\n        emit Transfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal {\\r\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\r\\n\\r\\n        // verified in \\\"require\\\" above\\r\\n        unchecked {\\r\\n            _deposited[account] -= amount;\\r\\n        }\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _updateRates() internal {\\r\\n        uint256 _totalBorrowed = totalBorrowed();\\r\\n        uint256 _totalSupply = totalSupply();\\r\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\r\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\r\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\r\\n    }\\r\\n\\r\\n    function _accumulateDepositInterest(address user) internal {\\r\\n        uint256 interest = balanceOf(user) - _deposited[user];\\r\\n\\r\\n        _mint(user, interest);\\r\\n        _deposited[address(this)] = balanceOf(address(this));\\r\\n\\r\\n        emit InterestCollected(user, interest, block.timestamp);\\r\\n\\r\\n        depositIndex.updateUser(user);\\r\\n        depositIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    function _accumulateBorrowingInterest(address user) internal {\\r\\n        borrowed[user] = getBorrowed(user);\\r\\n        borrowed[address(this)] = getBorrowed(address(this));\\r\\n\\r\\n        borrowIndex.updateUser(user);\\r\\n        borrowIndex.updateUser(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\r\\n\\r\\n    function renounceOwnership() public virtual override {}\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier canBorrow() {\\r\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\r\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\r\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\r\\n        _;\\r\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user deposits funds\\r\\n     * @param user the address performing the deposit\\r\\n     * @param value the amount deposited\\r\\n     * @param timestamp of the deposit\\r\\n     **/\\r\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user withdraws funds\\r\\n     * @param user the address performing the withdrawal\\r\\n     * @param value the amount withdrawn\\r\\n     * @param timestamp of the withdrawal\\r\\n     **/\\r\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user borrows funds\\r\\n     * @param user the address that borrows\\r\\n     * @param value the amount borrowed\\r\\n     * @param timestamp time of the borrowing\\r\\n     **/\\r\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the user repays debt\\r\\n     * @param user the address that repays debt\\r\\n     * @param value the amount repaid\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after accumulating deposit interest\\r\\n     * @param user the address that the deposit interest is accumulated for\\r\\n     * @param value the amount that interest is calculated from\\r\\n     * @param timestamp of the interest accumulation\\r\\n     **/\\r\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing borrowers registry\\r\\n    * @param registry an address of the newly set borrowers registry\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing rates calculator\\r\\n    * @param calculator an address of the newly set rates calculator\\r\\n    * @param timestamp of the borrowers registry change\\r\\n    **/\\r\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n    * @dev emitted after changing pool rewarder\\r\\n    * @param poolRewarder an address of the newly set pool rewarder\\r\\n    * @param timestamp of the pool rewarder change\\r\\n    **/\\r\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\r\\n\\r\\n    /* ========== ERRORS ========== */\\r\\n\\r\\n    // Only authorized accounts may borrow\\r\\n    error NotAuthorizedToBorrow();\\r\\n\\r\\n    // Borrowers registry is not configured\\r\\n    error BorrowersRegistryNotConfigured();\\r\\n\\r\\n    // Pool is frozen\\r\\n    error PoolFrozen();\\r\\n\\r\\n    // Not enough funds in the pool.\\r\\n    error InsufficientPoolFunds();\\r\\n\\r\\n    // Insufficient pool surplus to cover the requested recover amount\\r\\n    error InsufficientSurplus();\\r\\n\\r\\n    // Address (`target`) must be a contract\\r\\n    // @param target target address that must be a contract\\r\\n    error NotAContract(address target);\\r\\n\\r\\n    //  ERC20: Spender cannot be a zero address\\r\\n    error SpenderZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the zero address\\r\\n    error TransferToZeroAddress();\\r\\n\\r\\n    //  ERC20: cannot transfer to the pool address\\r\\n    error TransferToPoolAddress();\\r\\n\\r\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\r\\n    /// @param amount transfer amount\\r\\n    /// @param balance available balance\\r\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\r\\n\\r\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\r\\n    /// @param requested requested transfer amount\\r\\n    /// @param allowance current allowance\\r\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\r\\n\\r\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\r\\n    error TotalSupplyCapBreached();\\r\\n\\r\\n    // The deposit amount must be > 0\\r\\n    error ZeroDepositAmount();\\r\\n\\r\\n    // ERC20: cannot mint to the zero address\\r\\n    error MintToAddressZero();\\r\\n\\r\\n    // ERC20: burn amount exceeds current pool indexed balance\\r\\n    error BurnAmountExceedsBalance();\\r\\n\\r\\n    // Trying to repay more than was borrowed\\r\\n    error RepayingMoreThanWasBorrowed();\\r\\n\\r\\n    // getMaxPoolUtilisationForBorrowing was breached\\r\\n    error MaxPoolUtilisationBreached();\\r\\n}\",\"keccak256\":\"0xd59448147e759ba73843ca7a8c5a85549a2152601ab3577f80681835c41ecd54\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\r\\n// contract that uses keccak slots instead of the standard storage layout.\\r\\n\\r\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n */\\r\\nabstract contract ReentrancyGuardKeccak {\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\r\\n        // On the first call to nonReentrant, _notEntered will be true\\r\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        rgs._status = _ENTERED;\\r\\n\\r\\n        _;\\r\\n\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        rgs._status = _NOT_ENTERED;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x10cf073a638c2bd869485bfe43d40720a1f65bb7521c5d780853c13baec74e19\",\"license\":\"MIT\"},\"contracts/facets/AssetsExposureController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract AssetsExposureController {\\r\\n\\r\\n    function resetPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setPrimeAccountAssetsExposure() external {\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        for(uint i=0; i<ownedAssets.length; i++){\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\r\\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\r\\n        }\\r\\n        for(uint i=0; i<positions.length; i++){\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\r\\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1a596ec4476c5f9798427c5bc82bf5d0206f09b5ac7bedb88b7e6b83f5817504\",\"license\":\"BUSL-1.1\"},\"contracts/facets/AssetsOperationsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 1deeca6c1ae5859a08de6e6e30738ca03b3bd165;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\r\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\r\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\n\\r\\n//this path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract AssetsOperationsFacet is ReentrancyGuardKeccak, SolvencyMethods {\\r\\n    using TransferHelper for address payable;\\r\\n    using TransferHelper for address;\\r\\n\\r\\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\\r\\n\\r\\n    /**\\r\\n    * Funds the loan with a specified amount of a defined token\\r\\n    * @dev Requires approval for ERC20 token on frontend side\\r\\n    * @param _fundedAsset asset to be funded\\r\\n    * @param _amount to be funded\\r\\n    **/\\r\\n    function fund(bytes32 _fundedAsset, uint256 _amount) public virtual {\\r\\n        IERC20Metadata token = getERC20TokenInstance(_fundedAsset, false);\\r\\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        if (token.balanceOf(address(this)) > 0) {\\r\\n            DiamondStorageLib.addOwnedAsset(_fundedAsset, address(token));\\r\\n        }\\r\\n\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        tokenManager.increaseProtocolExposure(_fundedAsset, _amount * 1e18 / 10 ** token.decimals());\\r\\n\\r\\n        emit Funded(msg.sender, _fundedAsset, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Funds the loan with a specified amount of a GLP\\r\\n    * @dev Requires approval for stakedGLP token on frontend side\\r\\n    * @param _amount to be funded\\r\\n    **/\\r\\n    function fundGLP(uint256 _amount) public virtual {\\r\\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\\r\\n        address(stakedGlpToken).safeTransferFrom(msg.sender, address(this), _amount);\\r\\n        if (stakedGlpToken.balanceOf(address(this)) > 0) {\\r\\n            DiamondStorageLib.addOwnedAsset(\\\"GLP\\\", address(stakedGlpToken));\\r\\n        }\\r\\n\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        tokenManager.increaseProtocolExposure(\\\"GLP\\\", _amount);\\r\\n\\r\\n        emit Funded(msg.sender, \\\"GLP\\\", _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Withdraws an amount of a defined asset from the loan\\r\\n    * This method could be used to cash out profits from investments\\r\\n    * The loan needs to remain solvent after the withdrawal\\r\\n    * @dev This function uses the redstone-evm-connector\\r\\n    * @param _withdrawnAsset asset to be withdrawn\\r\\n    * @param _amount to be withdrawn\\r\\n    **/\\r\\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\\r\\n        IERC20Metadata token = getERC20TokenInstance(_withdrawnAsset, true);\\r\\n        _amount = Math.min(_amount, token.balanceOf(address(this)));\\r\\n\\r\\n        address(token).safeTransfer(msg.sender, _amount);\\r\\n        if (token.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(_withdrawnAsset);\\r\\n        }\\r\\n\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        tokenManager.decreaseProtocolExposure(_withdrawnAsset, _amount * 1e18 / 10 ** token.decimals());\\r\\n\\r\\n        emit Withdrawn(msg.sender, _withdrawnAsset, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n        * Withdraws specified amount of a GLP\\r\\n        * @param _amount to be withdrawn\\r\\n    **/\\r\\n    function withdrawGLP(uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\\r\\n        IERC20Metadata token = getERC20TokenInstance(\\\"GLP\\\", true);\\r\\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\\r\\n        _amount = Math.min(token.balanceOf(address(this)), _amount);\\r\\n\\r\\n        address(stakedGlpToken).safeTransfer(msg.sender, _amount);\\r\\n        if (token.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(\\\"GLP\\\");\\r\\n        }\\r\\n\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        tokenManager.decreaseProtocolExposure(\\\"GLP\\\", _amount * 1e18 / 10 ** token.decimals());\\r\\n\\r\\n        emit Withdrawn(msg.sender, \\\"GLP\\\", _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Borrows funds from the pool\\r\\n    * @dev This function uses the redstone-evm-connector\\r\\n    * @param _asset to be borrowed\\r\\n    * @param _amount of funds to borrow\\r\\n    **/\\r\\n    function borrow(bytes32 _asset, uint256 _amount) external onlyOwner remainsSolvent {\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        ds._lastBorrowTimestamp = block.timestamp;\\r\\n\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        Pool pool = Pool(tokenManager.getPoolAddress(_asset));\\r\\n        pool.borrow(_amount);\\r\\n\\r\\n        IERC20Metadata token = getERC20TokenInstance(_asset, false);\\r\\n        if (token.balanceOf(address(this)) > 0) {\\r\\n            DiamondStorageLib.addOwnedAsset(_asset, address(token));\\r\\n        }\\r\\n\\r\\n        emit Borrowed(msg.sender, _asset, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Repays funds to the pool\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     * @param _asset to be repaid\\r\\n     * @param _amount of funds to repay\\r\\n     **/\\r\\n    function repay(bytes32 _asset, uint256 _amount) public payable {\\r\\n        IERC20Metadata token = getERC20TokenInstance(_asset, true);\\r\\n\\r\\n        if (_isSolvent()) {\\r\\n            DiamondStorageLib.enforceIsContractOwner();\\r\\n        }\\r\\n\\r\\n        Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(_asset));\\r\\n\\r\\n        _amount = Math.min(_amount, pool.getBorrowed(address(this)));\\r\\n        require(token.balanceOf(address(this)) >= _amount, \\\"There is not enough funds to repay\\\");\\r\\n\\r\\n        address(token).safeApprove(address(pool), 0);\\r\\n        address(token).safeApprove(address(pool), _amount);\\r\\n\\r\\n        pool.repay(_amount);\\r\\n\\r\\n        if (token.balanceOf(address(this)) == 0) {\\r\\n            DiamondStorageLib.removeOwnedAsset(_asset);\\r\\n        }\\r\\n\\r\\n        emit Repaid(msg.sender, _asset, _amount, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /* ======= VIEW FUNCTIONS ======*/\\r\\n\\r\\n    /**\\r\\n    * Returns a current balance of the asset held by the smart loan\\r\\n    * @param _asset the code of an asset\\r\\n    **/\\r\\n    function getBalance(bytes32 _asset) internal view returns (uint256) {\\r\\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\\r\\n        return token.balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /* ========== MODIFIERS ========== */\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        DiamondStorageLib.enforceIsContractOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /* ========== EVENTS ========== */\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after a loan is funded\\r\\n     * @param user the address which funded the loan\\r\\n     * @param asset funded by a user\\r\\n     * @param amount the amount of funds\\r\\n     * @param timestamp time of funding\\r\\n     **/\\r\\n    event Funded(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted after the funds are withdrawn from the loan\\r\\n     * @param user the address which withdraws funds from the loan\\r\\n     * @param asset withdrawn by a user\\r\\n     * @param amount of funds withdrawn\\r\\n     * @param timestamp of the withdrawal\\r\\n     **/\\r\\n    event Withdrawn(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when funds are borrowed from the pool\\r\\n     * @param user the address of borrower\\r\\n     * @param asset borrowed by an= user\\r\\n     * @param amount of the borrowed funds\\r\\n     * @param timestamp time of the borrowing\\r\\n     **/\\r\\n    event Borrowed(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n\\r\\n    /**\\r\\n     * @dev emitted when funds are repaid to the pool\\r\\n     * @param user the address initiating repayment\\r\\n     * @param asset asset repaid by a user\\r\\n     * @param amount of repaid funds\\r\\n     * @param timestamp of the repayment\\r\\n     **/\\r\\n    event Repaid(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\r\\n}\",\"keccak256\":\"0x09178ded9ddbb9352b2cd41b313f67ea7ce982a1af98c04f319e7284d143dbcb\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\r\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\r\\nimport \\\"../Pool.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n//This path is updated during deployment\\r\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\r\\n\\r\\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\\r\\n    struct AssetPrice {\\r\\n        bytes32 asset;\\r\\n        uint256 price;\\r\\n    }\\r\\n\\r\\n    // Struct used in the liquidation process to obtain necessary prices only once\\r\\n    struct CachedPrices {\\r\\n        AssetPrice[] ownedAssetsPrices;\\r\\n        AssetPrice[] debtAssetsPrices;\\r\\n        AssetPrice[] stakedPositionsPrices;\\r\\n        AssetPrice[] assetsToRepayPrices;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function isSolvent() public view returns (bool) {\\r\\n        return getHealthRatio() >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Checks if the loan is solvent.\\r\\n      * It means that the Health Ratio is greater than 1e18.\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\r\\n    **/\\r\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\r\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of staked positions.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\r\\n        for(uint256 i=0; i<positions.length; i++) {\\r\\n            symbols[i] = positions[i].symbol;\\r\\n        }\\r\\n\\r\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\r\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\r\\n\\r\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: symbols[i],\\r\\n                price: stakedPositionsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\r\\n    **/\\r\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        result = tokenManager.getAllPoolAssets();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n\\r\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\r\\n        result = new AssetPrice[](debtAssetsPrices.length);\\r\\n\\r\\n        for(uint i; i<debtAssetsPrices.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: debtAssets[i],\\r\\n                price: debtAssetsPrices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\r\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\r\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\r\\n\\r\\n        result = new AssetPrice[](assetsEnriched.length);\\r\\n\\r\\n        for(uint i; i<assetsEnriched.length; i++){\\r\\n            result[i] = AssetPrice({\\r\\n                asset: assetsEnriched[i],\\r\\n                price: prices[i]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns an array of bytes32[] symbols of staked positions.\\r\\n    **/\\r\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n        result = new bytes32[](positions.length);\\r\\n        for(uint i; i<positions.length; i++) {\\r\\n            result[i] = positions[i].symbol;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\r\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i + offset] = source[i];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\r\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\r\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\r\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\r\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\r\\n\\r\\n        for(uint i; i<numberOfItems; i++){\\r\\n            target[i] = AssetPrice({\\r\\n                asset: sourceAssets[i+offset],\\r\\n                price: sourcePrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\r\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\r\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\r\\n        bytes32[] memory debtAssets = getDebtAssets();\\r\\n        bytes32[] memory stakedAssets = getStakedAssets();\\r\\n\\r\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\r\\n        uint256 offset;\\r\\n\\r\\n        // Populate allAssetsSymbols with owned assets symbols\\r\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with debt assets symbols\\r\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\r\\n        offset += debtAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with staked assets symbols\\r\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate allAssetsSymbols with assets to repay symbols\\r\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\r\\n\\r\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\r\\n\\r\\n        offset = 0;\\r\\n\\r\\n        // Populate ownedAssetsPrices struct\\r\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\r\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\r\\n        offset += ownedAssetsEnriched.length;\\r\\n\\r\\n        // Populate debtAssetsPrices struct\\r\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\r\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\r\\n        offset += debtAssetsPrices.length;\\r\\n\\r\\n        // Populate stakedPositionsPrices struct\\r\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\r\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\r\\n        offset += stakedAssets.length;\\r\\n\\r\\n        // Populate assetsToRepayPrices struct\\r\\n        // Stack too deep :F\\r\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\r\\n        for(uint i=0; i<assetsToRepay.length; i++){\\r\\n            assetsToRepayPrices[i] = AssetPrice({\\r\\n            asset: allAssetsSymbols[i+offset],\\r\\n            price: allAssetsPrices[i+offset]\\r\\n            });\\r\\n        }\\r\\n\\r\\n        result = CachedPrices({\\r\\n        ownedAssetsPrices: ownedAssetsPrices,\\r\\n        debtAssetsPrices: debtAssetsPrices,\\r\\n        stakedPositionsPrices: stakedPositionsPrices,\\r\\n        assetsToRepayPrices: assetsToRepayPrices\\r\\n        });\\r\\n    }\\r\\n\\r\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\r\\n    function canRepayDebtFully() external view returns(bool) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\r\\n\\r\\n        for(uint i; i< poolAssets.length; i++) {\\r\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\r\\n            IERC20 token = IERC20(pool.tokenAddress());\\r\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\r\\n        return getOracleNumericValuesFromTxMsg(symbols);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\r\\n        return getOracleNumericValueFromTxMsg(symbol);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\r\\n\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\r\\n            }\\r\\n        }\\r\\n        return weightedValueOfTokens;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\r\\n    **/\\r\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 weightedValueOfStaked;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n\\r\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\\r\\n            }\\r\\n\\r\\n\\r\\n        }\\r\\n        return weightedValueOfStaked;\\r\\n    }\\r\\n\\r\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\r\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\r\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\r\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n        uint256 debt;\\r\\n\\r\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\r\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\r\\n\\r\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\r\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\r\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\r\\n            / 10 ** token.decimals();\\r\\n        }\\r\\n\\r\\n        return debt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getDebt() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current debt denominated in USD\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\r\\n        return getDebtBase(debtAssetsPrices);\\r\\n    }\\r\\n\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\r\\n        if (ownedAssetsPrices.length > 0) {\\r\\n            ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\r\\n\\r\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\r\\n\\r\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\r\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\r\\n                uint256 assetBalance = token.balanceOf(address(this));\\r\\n\\r\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\r\\n            }\\r\\n            return total;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\r\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n      * Returns list of owned assets that always included NativeToken at index 0\\r\\n    **/\\r\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\r\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\r\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\r\\n\\r\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\r\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\r\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\r\\n\\r\\n        uint256 lastUsedIndex;\\r\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\r\\n\\r\\n        for(uint i=0; i< ownedAssets.length; i++){\\r\\n            if(ownedAssets[i] != nativeTokenSymbol){\\r\\n                lastUsedIndex += 1;\\r\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\r\\n            }\\r\\n        }\\r\\n        return assetsWithNative;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\r\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\r\\n\\r\\n        uint256 usdValue;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\r\\n\\r\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\r\\n\\r\\n            if (success) {\\r\\n                uint256 balance = abi.decode(result, (uint256));\\r\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\r\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return usdValue;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of staked positions in USD.\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getStakedValue() public view virtual returns (uint256) {\\r\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\r\\n        return _getStakedValueBase(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n    **/\\r\\n    function getTotalValue() public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValue() + getStakedValue();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n    **/\\r\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\r\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\r\\n    }\\r\\n\\r\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\r\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * @dev This function uses the redstone-evm-connector\\r\\n     **/\\r\\n    function getHealthRatio() public view virtual returns (uint256) {\\r\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\r\\n     * by current debt\\r\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\r\\n     **/\\r\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\r\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\r\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\r\\n\\r\\n        if (debt == 0) {\\r\\n            return type(uint256).max;\\r\\n        } else {\\r\\n            return thresholdWeightedValue * 1e18 / debt;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xeb5bdb172ee6bd5549baa8764acbf330a605b3a663c490b65c7d74eb6a3cc93e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IBorrowersRegistry\\r\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\r\\n */\\r\\ninterface IBorrowersRegistry {\\r\\n    function canBorrow(address _account) external view returns (bool);\\r\\n\\r\\n    function getLoanForOwner(address _owner) external view returns (address);\\r\\n\\r\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xb8aaf225432273e91887b0ecda730ad062eaeef212cfd099e322393d1c3f56e3\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\r\\n */\\r\\ninterface IDiamondBeacon {\\r\\n\\r\\n    function implementation() external view returns (address);\\r\\n\\r\\n    /**\\r\\n     * @dev Must return an address that can be used as a delegate call target.\\r\\n     *\\r\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\r\\n     */\\r\\n    function implementation(bytes4) external view returns (address);\\r\\n\\r\\n    function getStatus() external view returns (bool);\\r\\n\\r\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\r\\n\\r\\n    function acceptBeaconOwnership() external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9ebb1752fb7c26826cf3cccd2fb54a4db53d76a8d16dfa7614d772c3e92dd6cf\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\n\\r\\ninterface IDiamondCut {\\r\\n    enum FacetCutAction {Add, Replace, Remove}\\r\\n    // Add=0, Replace=1, Remove=2\\r\\n\\r\\n    struct FacetCut {\\r\\n        address facetAddress;\\r\\n        FacetCutAction action;\\r\\n        bytes4[] functionSelectors;\\r\\n    }\\r\\n\\r\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\r\\n    ///         a function with delegatecall\\r\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\r\\n    /// @param _init The address of the contract or facet to execute _calldata\\r\\n    /// @param _calldata A function call, including function selector and arguments\\r\\n    ///                  _calldata is executed with delegatecall on _init\\r\\n    function diamondCut(\\r\\n        FacetCut[] calldata _diamondCut,\\r\\n        address _init,\\r\\n        bytes calldata _calldata\\r\\n    ) external;\\r\\n\\r\\n    function pause() external;\\r\\n\\r\\n    function unpause() external;\\r\\n\\r\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n}\",\"keccak256\":\"0x98b528120c0598f550cf85472f8dd759952a41505d1c7c5a2f07ed03c18c87a7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\ninterface IIndex {\\r\\n\\r\\n    function setRate(uint256 _rate) external;\\r\\n\\r\\n    function updateUser(address user) external;\\r\\n\\r\\n    function getIndex() external view returns (uint256);\\r\\n\\r\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\r\\n\\r\\n}\\r\\n\",\"keccak256\":\"0x0f06bd722f4574e6296b2e55a393e8b2abe81411ae1ec8598d761e5a8565390a\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IPoolRewarder {\\r\\n\\r\\n    function stakeFor(uint _amount, address _stakeFor) external;\\r\\n\\r\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\r\\n\\r\\n    function getRewardsFor(address _user) external;\\r\\n\\r\\n    function earned(address _account) external view returns (uint);\\r\\n\\r\\n    function balanceOf(address _account) external view returns (uint);\\r\\n}\\r\\n\",\"keccak256\":\"0xe5ff460a400055a73324bb2b6661e47bb5227c6bce4adec8befa541ded0b252d\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IRatesCalculator\\r\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\r\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\r\\n */\\r\\ninterface IRatesCalculator {\\r\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n\\r\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0xc6f00bcba86f3aa78e79bec4943c8f47daf4b85698ce6686b4b2457a92f06bc8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/**\\r\\n * @title IStakingPositions\\r\\n * Types for staking\\r\\n */\\r\\ninterface IStakingPositions {\\r\\n    struct StakedPosition {\\r\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\r\\n        address asset;\\r\\n        bytes32 symbol;\\r\\n        bytes32 identifier;\\r\\n        bytes4 balanceSelector;\\r\\n        bytes4 unstakeSelector;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xce66179b8d802e46a03c412a23e2cb59fa4bc228cf475ca091b0425aecd0f16b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\r\\n    struct poolAsset {\\r\\n        bytes32 asset;\\r\\n        address poolAddress;\\r\\n    }\\r\\n\\r\\n    struct Asset {\\r\\n        bytes32 asset;\\r\\n        address assetAddress;\\r\\n        uint256 debtCoverage;\\r\\n    }\\r\\n\\r\\n    function activateToken ( address token ) external;\\r\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\r\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\r\\n    function deactivateToken ( address token ) external;\\r\\n    function debtCoverage ( address ) external view returns ( uint256 );\\r\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\r\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\r\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\r\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\r\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\r\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\r\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\r\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\r\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\r\\n    function owner (  ) external view returns ( address );\\r\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\r\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\r\\n    function renounceOwnership (  ) external;\\r\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\r\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\r\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\r\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\r\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\r\\n    function transferOwnership ( address newOwner ) external;\\r\\n}\",\"keccak256\":\"0x11244baa1d2c247ef14bf9c7fbb6e447d405f2020df59293cf1cd88b012e3f06\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\n\\r\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\r\\n\\r\\n/**\\r\\n * @dev Library for managing an enumerable variant of Solidity's\\r\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\r\\n * type.\\r\\n *\\r\\n * Maps have the following properties:\\r\\n *\\r\\n * - Entries are added, removed, and checked for existence in constant time\\r\\n * (O(1)).\\r\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\r\\n *\\r\\n */\\r\\nlibrary EnumerableMap {\\r\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\r\\n\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Map type with\\r\\n    // bytes32 keys and values.\\r\\n    // The Map implementation uses private functions, and user-facing\\r\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\r\\n    // the underlying Map.\\r\\n    // This means that we can only create new EnumerableMaps for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Map {\\r\\n        // Storage of keys\\r\\n        EnumerableSet.Bytes32Set _keys;\\r\\n        mapping(bytes32 => bytes32) _values;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _set(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        bytes32 value\\r\\n    ) private returns (bool) {\\r\\n        map._values[key] = value;\\r\\n        return map._keys.add(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a key-value pair from a map. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\r\\n        delete map._values[key];\\r\\n        return map._keys.remove(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\r\\n        return map._keys.contains(key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\r\\n     */\\r\\n    function _length(Map storage map) private view returns (uint256) {\\r\\n        return map._keys.length();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of entries inside the\\r\\n     * array, and it may change when more entries are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\r\\n        bytes32 key = map._keys.at(index);\\r\\n        return (key, map._values[key]);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     */\\r\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        if (value == bytes32(0)) {\\r\\n            return (_contains(map, key), bytes32(0));\\r\\n        } else {\\r\\n            return (true, value);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\r\\n     */\\r\\n    function _get(\\r\\n        Map storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) private view returns (bytes32) {\\r\\n        bytes32 value = map._values[key];\\r\\n        require(value != 0 || _contains(map, key), errorMessage);\\r\\n        return value;\\r\\n    }\\r\\n\\r\\n    // Bytes32ToAddressMap\\r\\n\\r\\n    struct Bytes32ToAddressMap {\\r\\n        Map _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\r\\n     * key. O(1).\\r\\n     *\\r\\n     * Returns true if the key was added to the map, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function set(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        address value\\r\\n    ) internal returns (bool) {\\r\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the key was removed from the map, that is if it was present.\\r\\n     */\\r\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\r\\n        return _remove(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the key is in the map. O(1).\\r\\n     */\\r\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\r\\n        return _contains(map._inner, key);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of elements in the map. O(1).\\r\\n     */\\r\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\r\\n        return _length(map._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\r\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\r\\n        return (key, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\r\\n     * Does not revert if `key` is not in the map.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\r\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\r\\n        return (success, address(uint160(uint256(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value associated with `key`.  O(1).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `key` must be in the map.\\r\\n     */\\r\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\r\\n     */\\r\\n    function get(\\r\\n        Bytes32ToAddressMap storage map,\\r\\n        bytes32 key,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (address) {\\r\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x7c9de7c7f3406d29dc518366c68a88cb29aaf36907b95422cceac140959c2463\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n/******************************************************************************\\\\\\r\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\r\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\r\\n/******************************************************************************/\\r\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\r\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\r\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\r\\n\\r\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\r\\n// The loupe functions are required by the EIP2535 Diamonds standard\\r\\n\\r\\nlibrary DiamondStorageLib {\\r\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\r\\n\\r\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\r\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\r\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\r\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\r\\n\\r\\n    struct FacetAddressAndPosition {\\r\\n        address facetAddress;\\r\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\r\\n    }\\r\\n\\r\\n    struct FacetFunctionSelectors {\\r\\n        bytes4[] functionSelectors;\\r\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\r\\n    }\\r\\n\\r\\n    struct DiamondStorage {\\r\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\r\\n        // maps function selector to the facet address and\\r\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\r\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\r\\n        // maps facet addresses to function selectors\\r\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\r\\n        // facet addresses\\r\\n        address[] facetAddresses;\\r\\n        // Used to query if a contract implements an interface.\\r\\n        // Used to implement ERC-165.\\r\\n        mapping(bytes4 => bool) supportedInterfaces;\\r\\n        // Used to select methods that can be executed even when Diamond is paused\\r\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\r\\n\\r\\n        bool _initialized;\\r\\n        bool _active;\\r\\n\\r\\n        uint256 _lastBorrowTimestamp;\\r\\n    }\\r\\n\\r\\n    struct SmartLoanStorage {\\r\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\r\\n        address pauseAdmin;\\r\\n        // Owner of the contract\\r\\n        address contractOwner;\\r\\n        // Proposed owner of the contract\\r\\n        address proposedOwner;\\r\\n        // Proposed pauseAdmin of the contract\\r\\n        address proposedPauseAdmin;\\r\\n        // Is contract initialized?\\r\\n        bool _initialized;\\r\\n        // TODO: mock staking tokens until redstone oracle supports them\\r\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\r\\n        // Staked positions of the contract\\r\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    struct LiquidationStorage {\\r\\n        // Mapping controlling addresses that can execute the liquidation methods\\r\\n        mapping(address=>bool) canLiquidate;\\r\\n    }\\r\\n\\r\\n    struct ReentrancyGuardStorage {\\r\\n        uint256 _status;\\r\\n    }\\r\\n\\r\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\r\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            rgs.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\r\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ds.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\r\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            ls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\r\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\r\\n        assembly {\\r\\n            sls.slot := position\\r\\n        }\\r\\n    }\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\r\\n\\r\\n    function setContractOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousOwner = sls.contractOwner;\\r\\n        sls.contractOwner = _newOwner;\\r\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\r\\n    }\\r\\n\\r\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        address previousPauseAdmin = sls.pauseAdmin;\\r\\n        sls.pauseAdmin = _newPauseAdmin;\\r\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\r\\n    }\\r\\n\\r\\n    function contractOwner() internal view returns (address contractOwner_) {\\r\\n        contractOwner_ = smartLoanStorage().contractOwner;\\r\\n    }\\r\\n\\r\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\r\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\r\\n    }\\r\\n\\r\\n    function setProposedOwner(address _newOwner) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedOwner = _newOwner;\\r\\n    }\\r\\n\\r\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\r\\n    }\\r\\n\\r\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\r\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\r\\n    }\\r\\n\\r\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\r\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\r\\n    }\\r\\n\\r\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\r\\n        _positions = smartLoanStorage().currentStakedPositions;\\r\\n    }\\r\\n\\r\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        bool found;\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == position.identifier) {\\r\\n                found = true;\\r\\n                break;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!found) {\\r\\n            positions.push(position);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeStakedPosition(bytes32 identifier) internal {\\r\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\r\\n\\r\\n        for (uint256 i; i < positions.length; i++) {\\r\\n            if (positions[i].identifier == identifier) {\\r\\n                positions[i] = positions[positions.length - 1];\\r\\n                positions.pop();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\r\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\r\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\r\\n    }\\r\\n\\r\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        return sls.ownedAssets.contains(_symbol);\\r\\n    }\\r\\n\\r\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\r\\n        SmartLoanStorage storage sls = smartLoanStorage();\\r\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\r\\n    }\\r\\n\\r\\n    function enforceIsContractOwner() internal view {\\r\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\r\\n    }\\r\\n\\r\\n    function enforceIsPauseAdmin() internal view {\\r\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\r\\n    }\\r\\n\\r\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\r\\n\\r\\n    // Internal function version of diamondCut\\r\\n    function diamondCut(\\r\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\r\\n        address _init,\\r\\n        bytes memory _calldata\\r\\n    ) internal {\\r\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\r\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\r\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\r\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\r\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\r\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\r\\n            } else {\\r\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\r\\n            }\\r\\n        }\\r\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\r\\n        initializeDiamondCut(_init, _calldata);\\r\\n    }\\r\\n\\r\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\r\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\r\\n        // add new facet address if it does not exist\\r\\n        if (selectorPosition == 0) {\\r\\n            addFacet(ds, _facetAddress);\\r\\n        }\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\r\\n            selectorPosition++;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\r\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\r\\n        DiamondStorage storage ds = diamondStorage();\\r\\n        // if function does not exist then do nothing and return\\r\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\r\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\r\\n            bytes4 selector = _functionSelectors[selectorIndex];\\r\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\r\\n            removeFunction(ds, oldFacetAddress, selector);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\r\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\r\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\r\\n        ds.facetAddresses.push(_facetAddress);\\r\\n    }\\r\\n\\r\\n\\r\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\r\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\r\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\r\\n    }\\r\\n\\r\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\r\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\r\\n        // an immutable function is a function defined directly in a diamond\\r\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\r\\n        // replace selector with last selector, then delete last selector\\r\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\r\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\r\\n        // if not the same then replace _selector with lastSelector\\r\\n        if (selectorPosition != lastSelectorPosition) {\\r\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\r\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\r\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\r\\n        }\\r\\n        // delete the last selector\\r\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\r\\n        delete ds.selectorToFacetAndPosition[_selector];\\r\\n\\r\\n        // if no more selectors for facet address then delete the facet address\\r\\n        if (lastSelectorPosition == 0) {\\r\\n            // replace facet address with last facet address and delete last facet address\\r\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\r\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\r\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\r\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\r\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\r\\n            }\\r\\n            ds.facetAddresses.pop();\\r\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\r\\n        if (_init == address(0)) {\\r\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\r\\n        } else {\\r\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\r\\n            if (_init != address(this)) {\\r\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\r\\n            }\\r\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\r\\n            if (!success) {\\r\\n                if (error.length > 0) {\\r\\n                    // bubble up the error\\r\\n                    revert(string(error));\\r\\n                } else {\\r\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\r\\n        uint256 contractSize;\\r\\n        assembly {\\r\\n            contractSize := extcodesize(_contract)\\r\\n        }\\r\\n        require(contractSize > 0, _errorMessage);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x4b0e53f952c3f8716cdda77a08f22018249081a9d450a1d51510b0a24f77e237\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: ;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\r\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\r\\nimport \\\"../facets/AssetsExposureController.sol\\\";\\r\\nimport \\\"../DiamondHelper.sol\\\";\\r\\n\\r\\n// TODO Rename to contract instead of lib\\r\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\r\\n    // This function executes SolvencyFacetProd.getDebt()\\r\\n    function _getDebt() internal virtual returns (uint256 debt) {\\r\\n        debt = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\r\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\r\\n        debt = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\r\\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.isSolvent()\\r\\n    function _isSolvent() internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\\r\\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\\r\\n        solvent = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\\r\\n            ),\\r\\n            (bool)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalValue()\\r\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\r\\n        totalValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\r\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\r\\n        assetsValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\r\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\\r\\n        health = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\r\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\r\\n        health = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\r\\n        prices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\r\\n            ),\\r\\n            (uint256[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\r\\n        result = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\r\\n            ),\\r\\n            (SolvencyFacetProd.CachedPrices)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\\r\\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\r\\n        ownedAssetsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\r\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\r\\n        debtAssetsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\r\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\r\\n        stakedPositionsPrices = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\r\\n            ),\\r\\n            (SolvencyFacetProd.AssetPrice[])\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\r\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\r\\n        totalValue = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes SolvencyFacetProd.getPrices()\\r\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\r\\n        price = abi.decode(\\r\\n            proxyDelegateCalldata(\\r\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\r\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\r\\n            ),\\r\\n            (uint256)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes AssetsExposureController.decreaseAssetsExposure()\\r\\n    function _resetPrimeAccountAssetsExposure() public {\\r\\n        proxyDelegateCalldata(\\r\\n            DiamondHelper._getFacetAddress(AssetsExposureController.resetPrimeAccountAssetsExposure.selector),\\r\\n            abi.encodeWithSelector(AssetsExposureController.resetPrimeAccountAssetsExposure.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // This function executes AssetsExposureController.increaseAssetsExposure()\\r\\n    function _setPrimeAccountAssetsExposure() public {\\r\\n        proxyDelegateCalldata(\\r\\n            DiamondHelper._getFacetAddress(AssetsExposureController.setPrimeAccountAssetsExposure.selector),\\r\\n            abi.encodeWithSelector(AssetsExposureController.setPrimeAccountAssetsExposure.selector)\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Returns IERC20Metadata instance of a token\\r\\n     * @param _asset the code of an asset\\r\\n     **/\\r\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\r\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\r\\n    }\\r\\n\\r\\n    modifier recalculateAssetsExposure() {\\r\\n        _resetPrimeAccountAssetsExposure();\\r\\n        _;\\r\\n        _setPrimeAccountAssetsExposure();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Checks whether account is solvent (health higher than 1)\\r\\n    * @dev This modifier uses the redstone-evm-connector\\r\\n    **/\\r\\n    modifier remainsSolvent() {\\r\\n        _;\\r\\n\\r\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\r\\n    }\\r\\n\\r\\n    modifier canRepayDebtFully() {\\r\\n        _;\\r\\n        require(_canRepayDebtFully(), \\\"Insufficient assets to fully repay the debt\\\");\\r\\n    }\\r\\n\\r\\n    modifier noBorrowInTheSameBlock() {\\r\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\r\\n        require(ds._lastBorrowTimestamp != block.timestamp, \\\"Borrowing must happen in a standalone transaction\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xd459d20337250b733972fe5cd58879e417396a6388e214a2c13d145a5c187545\",\"license\":\"BUSL-1.1\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\r\\npragma solidity 0.8.17;\\r\\n\\r\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\r\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\r\\n\\r\\n/**\\r\\n * DeploymentConstants\\r\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\r\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\r\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\r\\n **/\\r\\nlibrary DeploymentConstants {\\r\\n\\r\\n    // Used for LiquidationBonus calculations\\r\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\r\\n\\r\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\r\\n\\r\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\r\\n\\r\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\r\\n\\r\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\r\\n\\r\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\r\\n\\r\\n    //implementation-specific\\r\\n\\r\\n    function getPercentagePrecision() internal pure returns (uint256) {\\r\\n        return _PERCENTAGE_PRECISION;\\r\\n    }\\r\\n\\r\\n    //blockchain-specific\\r\\n\\r\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\r\\n        return _NATIVE_TOKEN_SYMBOL;\\r\\n    }\\r\\n\\r\\n    function getNativeToken() internal pure returns (address payable) {\\r\\n        return payable(_NATIVE_ADDRESS);\\r\\n    }\\r\\n\\r\\n    //deployment-specific\\r\\n\\r\\n    function getDiamondAddress() internal pure returns (address) {\\r\\n        return _DIAMOND_BEACON_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\r\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\r\\n    }\\r\\n\\r\\n    function getTokenManager() internal pure returns (ITokenManager) {\\r\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * Returns all owned assets keys\\r\\n    **/\\r\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\r\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\r\\n        return sls.ownedAssets._inner._keys._inner._values;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf019b3600c687707821c088c11c02df81e157e4e0c66827ce4c3ac66aba0bf9f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600160008190555061427c806100286000396000f3fe6080604052600436106100c15760003560e01c80636e3bfe9f1161007f578063b2d40e7311610059578063b2d40e7314610256578063d66e297914610293578063e46bbc9e146102bc578063f8f18553146102e5576100c1565b80636e3bfe9f146101c75780637c93ec30146102045780639d9a355e1461022d576100c1565b8062f989ad146100c6578063040cf020146100e257806326ee48361461010b57806331d98b3f1461014857806339e2719e146101855780635b4fad9c146101b0575b600080fd5b6100e060048036038101906100db919061299e565b6102fc565b005b3480156100ee57600080fd5b506101096004803603810190610104919061299e565b61068b565b005b34801561011757600080fd5b50610132600480360381019061012d9190612b37565b610a3b565b60405161013f9190612c3e565b60405180910390f35b34801561015457600080fd5b5061016f600480360381019061016a9190612c60565b610ae5565b60405161017c9190612c9c565b60405180910390f35b34801561019157600080fd5b5061019a610b8f565b6040516101a79190612c9c565b60405180910390f35b3480156101bc57600080fd5b506101c5610c2c565b005b3480156101d357600080fd5b506101ee60048036038101906101e99190612ebc565b610cb2565b6040516101fb9190612c9c565b60405180910390f35b34801561021057600080fd5b5061022b6004803603810190610226919061299e565b610d5c565b005b34801561023957600080fd5b50610254600480360381019061024f9190612f05565b610faa565b005b34801561026257600080fd5b5061027d60048036038101906102789190612b37565b6113d1565b60405161028a9190613097565b60405180910390f35b34801561029f57600080fd5b506102ba60048036038101906102b59190612f05565b611481565b005b3480156102c857600080fd5b506102e360048036038101906102de919061299e565b611661565b005b3480156102f157600080fd5b506102fa611892565b005b6000610309836001611918565b90506103136119a5565b1561032157610320611a42565b5b600061032b611add565b73ffffffffffffffffffffffffffffffffffffffff16630edc25b6856040518263ffffffff1660e01b815260040161036391906130c8565b602060405180830381865afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a49190613141565b9050610429838273ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016103e3919061317d565b602060405180830381865afa158015610400573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042491906131ad565b611af9565b9250828273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610465919061317d565b602060405180830381865afa158015610482573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a691906131ad565b10156104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de9061325d565b60405180910390fd5b6105138160008473ffffffffffffffffffffffffffffffffffffffff16611b129092919063ffffffff16565b61053e81848473ffffffffffffffffffffffffffffffffffffffff16611b129092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663371fd8e6846040518263ffffffff1660e01b81526004016105779190612c9c565b600060405180830381600087803b15801561059157600080fd5b505af11580156105a5573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105e4919061317d565b602060405180830381865afa158015610601573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062591906131ad565b036106345761063384611c48565b5b833373ffffffffffffffffffffffffffffffffffffffff167fa2f4fa14f0b0fee8b10babfdacfbfff6d29bbce82209ad5e7b2ac1dc2c35ab9b854260405161067d92919061327d565b60405180910390a350505050565b610693611a42565b600061069d611c66565b905060028160000154036106e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106dd906132f2565b60405180910390fd5b6002816000018190555060006106fd846001611918565b9050610782838273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161073c919061317d565b602060405180830381865afa158015610759573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077d91906131ad565b611af9565b92506107af33848373ffffffffffffffffffffffffffffffffffffffff16611c939092919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107ea919061317d565b602060405180830381865afa158015610807573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b91906131ad565b0361083a5761083984611c48565b5b6000610844611add565b90508073ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f868473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d2919061334b565b600a6108de91906134da565b670de0b6b3a7640000886108f29190613525565b6108fc9190613596565b6040518363ffffffff1660e01b81526004016109199291906135c7565b600060405180830381600087803b15801561093357600080fd5b505af1158015610947573d6000803e3d6000fd5b50505050843373ffffffffffffffffffffffffffffffffffffffff167f2c2b206b9475386bb995c366956ade2de7bd0e3208dd1fb3833c280929a93005864260405161099492919061327d565b60405180910390a350506109a66119a5565b6109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dc90613662565b60405180910390fd5b6109ed611dc9565b610a2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a23906136f4565b60405180910390fd5b60018160000181905550505050565b6060610acb610a506326ee483660e01b611e66565b6326ee483660e01b84604051602401610a6991906137c3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b806020019051810190610ade91906138a8565b9050919050565b6000610b75610afa6331d98b3f60e01b611e66565b6331d98b3f60e01b84604051602401610b1391906130c8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b806020019051810190610b8891906131ad565b9050919050565b6000610c14610ba4637914334f60e01b611e66565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b806020019051810190610c2791906131ad565b905090565b610caf610c3f63b1c9fbc160e01b611e66565b63b1c9fbc160e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b50565b6000610d42610cc763360398a360e01b611e66565b63360398a360e01b84604051602401610ce09190613097565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b806020019051810190610d5591906131ad565b9050919050565b610d64611a42565b6000610d6e611f81565b90504281600601819055506000610d83611add565b905060008173ffffffffffffffffffffffffffffffffffffffff16630edc25b6866040518263ffffffff1660e01b8152600401610dc091906130c8565b602060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190613141565b90508073ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec856040518263ffffffff1660e01b8152600401610e3c9190612c9c565b600060405180830381600087803b158015610e5657600080fd5b505af1158015610e6a573d6000803e3d6000fd5b505050506000610e7b866000611918565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610eb8919061317d565b602060405180830381865afa158015610ed5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ef991906131ad565b1115610f0a57610f098682611fae565b5b853373ffffffffffffffffffffffffffffffffffffffff167fb44d1174a7e8b37725504ef78b9e681eb337ec859b8829dafb4a817ac9ab7c3f8742604051610f5392919061327d565b60405180910390a350505050610f676119a5565b610fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f9d90613662565b60405180910390fd5b5050565b610fb2611a42565b6000610fbc611c66565b90506002816000015403611005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ffc906132f2565b60405180910390fd5b60028160000181905550600061103c7f474c5000000000000000000000000000000000000000000000000000000000006001611918565b9050600073ae64d55a6f09e4263421737397d1fdfa71896a6990506110da8273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611093919061317d565b602060405180830381865afa1580156110b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d491906131ad565b85611af9565b935061110733858373ffffffffffffffffffffffffffffffffffffffff16611c939092919063ffffffff16565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611142919061317d565b602060405180830381865afa15801561115f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118391906131ad565b036111b2576111b17f474c500000000000000000000000000000000000000000000000000000000000611c48565b5b60006111bc611add565b90508073ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f8473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611225573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611249919061334b565b600a61125591906134da565b670de0b6b3a7640000886112699190613525565b6112739190613596565b6040518263ffffffff1660e01b815260040161128f9190613917565b600060405180830381600087803b1580156112a957600080fd5b505af11580156112bd573d6000803e3d6000fd5b505050507f474c5000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff167f2c2b206b9475386bb995c366956ade2de7bd0e3208dd1fb3833c280929a93005874260405161132a92919061327d565b60405180910390a350505061133d6119a5565b61137c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137390613662565b60405180910390fd5b611384611dc9565b6113c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ba906136f4565b60405180910390fd5b600181600001819055505050565b6113d96128f6565b6114676113ec63a3aa8d1e60e01b611e66565b63a3aa8d1e60e01b8460405160240161140591906137c3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b80602001905181019061147a9190613b22565b9050919050565b600073ae64d55a6f09e4263421737397d1fdfa71896a6990506114c73330848473ffffffffffffffffffffffffffffffffffffffff16612080909392919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611502919061317d565b602060405180830381865afa15801561151f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154391906131ad565b1115611574576115737f474c50000000000000000000000000000000000000000000000000000000000082611fae565b5b600061157e611add565b90508073ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a846040518263ffffffff1660e01b81526004016115b99190613917565b600060405180830381600087803b1580156115d357600080fd5b505af11580156115e7573d6000803e3d6000fd5b505050507f474c5000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff167f2d66a92de57f2082107528ba4d5d87f02f49967bfc7aab0013f4d66461033547854260405161165492919061327d565b60405180910390a3505050565b600061166e836000611918565b905061169d3330848473ffffffffffffffffffffffffffffffffffffffff16612080909392919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116d8919061317d565b602060405180830381865afa1580156116f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061171991906131ad565b111561172a576117298382611fae565b5b6000611734611add565b90508073ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a858473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c2919061334b565b600a6117ce91906134da565b670de0b6b3a7640000876117e29190613525565b6117ec9190613596565b6040518363ffffffff1660e01b81526004016118099291906135c7565b600060405180830381600087803b15801561182357600080fd5b505af1158015611837573d6000803e3d6000fd5b50505050833373ffffffffffffffffffffffffffffffffffffffff167f2d66a92de57f2082107528ba4d5d87f02f49967bfc7aab0013f4d66461033547854260405161188492919061327d565b60405180910390a350505050565b6119156118a563e017e12560e01b611e66565b63e017e12560e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b50565b6000611922611add565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b815260040161195c929190613b86565b602060405180830381865afa158015611979573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199d9190613141565b905092915050565b6000611a2a6119ba635ce2395060e01b611e66565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b806020019051810190611a3d9190613bdb565b905090565b611a4a6121b9565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611adb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ad290613c7a565b60405180910390fd5b565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b6000818310611b085781611b0a565b825b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401611b44929190613c9a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611b929190613d34565b6000604051808303816000865af19150503d8060008114611bcf576040519150601f19603f3d011682016040523d82523d6000602084013e611bd4565b606091505b5091509150818015611c025750600081511480611c01575080806020019051810190611c009190613bdb565b5b5b611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3890613dbd565b60405180910390fd5b5050505050565b6000611c526121b9565b9050611c6181600401836121e6565b505050565b6000807f1c85eba10a4cf2d29c83fc15f97931886b9fd3caeb70d8c377aeedc58b919e3b90508091505090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611cc5929190613c9a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611d139190613d34565b6000604051808303816000865af19150503d8060008114611d50576040519150601f19603f3d011682016040523d82523d6000602084013e611d55565b606091505b5091509150818015611d835750600081511480611d82575080806020019051810190611d819190613bdb565b5b5b611dc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db990613e4f565b60405180910390fd5b5050505050565b6000611e4e611dde633942a52e60e01b611e66565b633942a52e60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611ef0565b806020019051810190611e619190613bdb565b905090565b6000611e706121fd565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b8152600401611ea89190613eaa565b602060405180830381865afa158015611ec5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee99190613141565b9050919050565b60606000611efd83612219565b90506000808573ffffffffffffffffffffffffffffffffffffffff1683604051611f279190613d34565b600060405180830381855af49150503d8060008114611f62576040519150601f19603f3d011682016040523d82523d6000602084013e611f67565b606091505b5091509150611f7682826122d3565b935050505092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b60008203611ff1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe890613f11565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612060576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161205790613f7d565b60405180910390fd5b600061206a6121b9565b905061207a8160040184846123d3565b50505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016120b493929190613f9d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516121029190613d34565b6000604051808303816000865af19150503d806000811461213f576040519150601f19603f3d011682016040523d82523d6000602084013e612144565b606091505b509150915081801561217257506000815114806121715750808060200190518101906121709190613bdb565b5b5b6121b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a890614046565b60405180910390fd5b505050505050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b60006121f58360000183612405565b905092915050565b6000732916b3bf7c35bd21e63d01c93c62fb0d4994e56d905090565b6060600082519050600061222b61243e565b90506000818361223b9190614066565b9050600036905082111561227b576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b818310156122ae5782518152602083019250602081019050612291565b5050508283360385602001830137602084840182010160405280945050505050919050565b6060826123ca576000825103612315576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a0000000000000000000000000000000000000000000000000000000008114915050801561238d576060604484019050806040517f0f7e827800000000000000000000000000000000000000000000000000000000815260040161238491906140de565b60405180910390fd5b826040517ffd36fde30000000000000000000000000000000000000000000000000000000081526004016123c1919061414a565b60405180910390fd5b81905092915050565b60006123fc84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b6124ae565b90509392505050565b60008260020160008381526020019081526020016000206000905561243682846000016124e990919063ffffffff16565b905092915050565b600080612449612500565b9050600061245682612611565b61ffff1690506002826124699190614066565b915060005b818110156124a55760006124818461266d565b9050808461248f9190614066565b935050808061249d9061416c565b91505061246e565b50819250505090565b600081846002016000858152602001908152602001600020819055506124e083856000016126ac90919063ffffffff16565b90509392505050565b60006124f883600001836126c3565b905092915050565b60008060203603356602ed57011e000081166602ed57011e00001491505080612555576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115612595576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff166125b29190614066565b6125bc9190614066565b905060003690506002826125d09190614066565b1115612608576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b6000806020836126219190614066565b90506000369050811115612661576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b600080600061267b846127d7565b91509150604e81602061268e9190614066565b836126999190613525565b6126a39190614066565b92505050919050565b60006126bb836000018361284d565b905092915050565b600080836001016000848152602001908152602001600020549050600081146127cb5760006001826126f591906141b4565b905060006001866000018054905061270d91906141b4565b905081811461277c57600086600001828154811061272e5761272d6141e8565b5b9060005260206000200154905080876000018481548110612752576127516141e8565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806127905761278f614217565b5b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506127d1565b60009150505b92915050565b60008060008060006041866127ec9190614066565b905060006128136020836128009190614066565b60003690506128bd90919063ffffffff16565b90508035935061282d6003826128bd90919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b600061285983836128d3565b6128b25782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506128b7565b600090505b92915050565b600081836128cb91906141b4565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61294581612932565b811461295057600080fd5b50565b6000813590506129628161293c565b92915050565b6000819050919050565b61297b81612968565b811461298657600080fd5b50565b60008135905061299881612972565b92915050565b600080604083850312156129b5576129b4612928565b5b60006129c385828601612953565b92505060206129d485828601612989565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612a2c826129e3565b810181811067ffffffffffffffff82111715612a4b57612a4a6129f4565b5b80604052505050565b6000612a5e61291e565b9050612a6a8282612a23565b919050565b600067ffffffffffffffff821115612a8a57612a896129f4565b5b602082029050602081019050919050565b600080fd5b6000612ab3612aae84612a6f565b612a54565b90508083825260208201905060208402830185811115612ad657612ad5612a9b565b5b835b81811015612aff5780612aeb8882612953565b845260208401935050602081019050612ad8565b5050509392505050565b600082601f830112612b1e57612b1d6129de565b5b8135612b2e848260208601612aa0565b91505092915050565b600060208284031215612b4d57612b4c612928565b5b600082013567ffffffffffffffff811115612b6b57612b6a61292d565b5b612b7784828501612b09565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612bb581612968565b82525050565b6000612bc78383612bac565b60208301905092915050565b6000602082019050919050565b6000612beb82612b80565b612bf58185612b8b565b9350612c0083612b9c565b8060005b83811015612c31578151612c188882612bbb565b9750612c2383612bd3565b925050600181019050612c04565b5085935050505092915050565b60006020820190508181036000830152612c588184612be0565b905092915050565b600060208284031215612c7657612c75612928565b5b6000612c8484828501612953565b91505092915050565b612c9681612968565b82525050565b6000602082019050612cb16000830184612c8d565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff821115612cdc57612cdb6129f4565b5b602082029050602081019050919050565b600060408284031215612d0357612d02612cb7565b5b612d0d6040612a54565b90506000612d1d84828501612953565b6000830152506020612d3184828501612989565b60208301525092915050565b6000612d50612d4b84612cc1565b612a54565b90508083825260208201905060408402830185811115612d7357612d72612a9b565b5b835b81811015612d9c5780612d888882612ced565b845260208401935050604081019050612d75565b5050509392505050565b600082601f830112612dbb57612dba6129de565b5b8135612dcb848260208601612d3d565b91505092915050565b600060808284031215612dea57612de9612cb7565b5b612df46080612a54565b9050600082013567ffffffffffffffff811115612e1457612e13612cbc565b5b612e2084828501612da6565b600083015250602082013567ffffffffffffffff811115612e4457612e43612cbc565b5b612e5084828501612da6565b602083015250604082013567ffffffffffffffff811115612e7457612e73612cbc565b5b612e8084828501612da6565b604083015250606082013567ffffffffffffffff811115612ea457612ea3612cbc565b5b612eb084828501612da6565b60608301525092915050565b600060208284031215612ed257612ed1612928565b5b600082013567ffffffffffffffff811115612ef057612eef61292d565b5b612efc84828501612dd4565b91505092915050565b600060208284031215612f1b57612f1a612928565b5b6000612f2984828501612989565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612f6781612932565b82525050565b604082016000820151612f836000850182612f5e565b506020820151612f966020850182612bac565b50505050565b6000612fa88383612f6d565b60408301905092915050565b6000602082019050919050565b6000612fcc82612f32565b612fd68185612f3d565b9350612fe183612f4e565b8060005b83811015613012578151612ff98882612f9c565b975061300483612fb4565b925050600181019050612fe5565b5085935050505092915050565b6000608083016000830151848203600086015261303c8282612fc1565b915050602083015184820360208601526130568282612fc1565b915050604083015184820360408601526130708282612fc1565b9150506060830151848203606086015261308a8282612fc1565b9150508091505092915050565b600060208201905081810360008301526130b1818461301f565b905092915050565b6130c281612932565b82525050565b60006020820190506130dd60008301846130b9565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061310e826130e3565b9050919050565b61311e81613103565b811461312957600080fd5b50565b60008151905061313b81613115565b92915050565b60006020828403121561315757613156612928565b5b60006131658482850161312c565b91505092915050565b61317781613103565b82525050565b6000602082019050613192600083018461316e565b92915050565b6000815190506131a781612972565b92915050565b6000602082840312156131c3576131c2612928565b5b60006131d184828501613198565b91505092915050565b600082825260208201905092915050565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2072657060008201527f6179000000000000000000000000000000000000000000000000000000000000602082015250565b60006132476022836131da565b9150613252826131eb565b604082019050919050565b600060208201905081810360008301526132768161323a565b9050919050565b60006040820190506132926000830185612c8d565b61329f6020830184612c8d565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b60006132dc601f836131da565b91506132e7826132a6565b602082019050919050565b6000602082019050818103600083015261330b816132cf565b9050919050565b600060ff82169050919050565b61332881613312565b811461333357600080fd5b50565b6000815190506133458161331f565b92915050565b60006020828403121561336157613360612928565b5b600061336f84828501613336565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b60018511156133fe578086048111156133da576133d9613378565b5b60018516156133e95780820291505b80810290506133f7856133a7565b94506133be565b94509492505050565b60008261341757600190506134d3565b8161342557600090506134d3565b816001811461343b576002811461344557613474565b60019150506134d3565b60ff84111561345757613456613378565b5b8360020a91508482111561346e5761346d613378565b5b506134d3565b5060208310610133831016604e8410600b84101617156134a95782820a9050838111156134a4576134a3613378565b5b6134d3565b6134b684848460016133b4565b925090508184048111156134cd576134cc613378565b5b81810290505b9392505050565b60006134e582612968565b91506134f083613312565b925061351d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613407565b905092915050565b600061353082612968565b915061353b83612968565b925082820261354981612968565b915082820484148315176135605761355f613378565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006135a182612968565b91506135ac83612968565b9250826135bc576135bb613567565b5b828204905092915050565b60006040820190506135dc60008301856130b9565b6135e96020830184612c8d565b9392505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b600061364c6033836131da565b9150613657826135f0565b604082019050919050565b6000602082019050818103600083015261367b8161363f565b9050919050565b7f496e73756666696369656e742061737365747320746f2066756c6c792072657060008201527f6179207468652064656274000000000000000000000000000000000000000000602082015250565b60006136de602b836131da565b91506136e982613682565b604082019050919050565b6000602082019050818103600083015261370d816136d1565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061374c8383612f5e565b60208301905092915050565b6000602082019050919050565b600061377082613714565b61377a818561371f565b935061378583613730565b8060005b838110156137b657815161379d8882613740565b97506137a883613758565b925050600181019050613789565b5085935050505092915050565b600060208201905081810360008301526137dd8184613765565b905092915050565b600067ffffffffffffffff821115613800576137ff6129f4565b5b602082029050602081019050919050565b600061382461381f846137e5565b612a54565b9050808382526020820190506020840283018581111561384757613846612a9b565b5b835b81811015613870578061385c8882613198565b845260208401935050602081019050613849565b5050509392505050565b600082601f83011261388f5761388e6129de565b5b815161389f848260208601613811565b91505092915050565b6000602082840312156138be576138bd612928565b5b600082015167ffffffffffffffff8111156138dc576138db61292d565b5b6138e88482850161387a565b91505092915050565b7f474c500000000000000000000000000000000000000000000000000000000000815250565b600060408201905061392b600083016138f1565b6139386020830184612c8d565b92915050565b60008151905061394d8161293c565b92915050565b60006040828403121561396957613968612cb7565b5b6139736040612a54565b905060006139838482850161393e565b600083015250602061399784828501613198565b60208301525092915050565b60006139b66139b184612cc1565b612a54565b905080838252602082019050604084028301858111156139d9576139d8612a9b565b5b835b81811015613a0257806139ee8882613953565b8452602084019350506040810190506139db565b5050509392505050565b600082601f830112613a2157613a206129de565b5b8151613a318482602086016139a3565b91505092915050565b600060808284031215613a5057613a4f612cb7565b5b613a5a6080612a54565b9050600082015167ffffffffffffffff811115613a7a57613a79612cbc565b5b613a8684828501613a0c565b600083015250602082015167ffffffffffffffff811115613aaa57613aa9612cbc565b5b613ab684828501613a0c565b602083015250604082015167ffffffffffffffff811115613ada57613ad9612cbc565b5b613ae684828501613a0c565b604083015250606082015167ffffffffffffffff811115613b0a57613b09612cbc565b5b613b1684828501613a0c565b60608301525092915050565b600060208284031215613b3857613b37612928565b5b600082015167ffffffffffffffff811115613b5657613b5561292d565b5b613b6284828501613a3a565b91505092915050565b60008115159050919050565b613b8081613b6b565b82525050565b6000604082019050613b9b60008301856130b9565b613ba86020830184613b77565b9392505050565b613bb881613b6b565b8114613bc357600080fd5b50565b600081519050613bd581613baf565b92915050565b600060208284031215613bf157613bf0612928565b5b6000613bff84828501613bc6565b91505092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000613c646029836131da565b9150613c6f82613c08565b604082019050919050565b60006020820190508181036000830152613c9381613c57565b9050919050565b6000604082019050613caf600083018561316e565b613cbc6020830184612c8d565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015613cf7578082015181840152602081019050613cdc565b60008484015250505050565b6000613d0e82613cc3565b613d188185613cce565b9350613d28818560208601613cd9565b80840191505092915050565b6000613d408284613d03565b915081905092915050565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b6000613da7602b836131da565b9150613db282613d4b565b604082019050919050565b60006020820190508181036000830152613dd681613d9a565b9050919050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000613e39602d836131da565b9150613e4482613ddd565b604082019050919050565b60006020820190508181036000830152613e6881613e2c565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613ea481613e6f565b82525050565b6000602082019050613ebf6000830184613e9b565b92915050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000613efb6016836131da565b9150613f0682613ec5565b602082019050919050565b60006020820190508181036000830152613f2a81613eee565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b6000613f676013836131da565b9150613f7282613f31565b602082019050919050565b60006020820190508181036000830152613f9681613f5a565b9050919050565b6000606082019050613fb2600083018661316e565b613fbf602083018561316e565b613fcc6040830184612c8d565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b60006140306031836131da565b915061403b82613fd4565b604082019050919050565b6000602082019050818103600083015261405f81614023565b9050919050565b600061407182612968565b915061407c83612968565b925082820190508082111561409457614093613378565b5b92915050565b600081519050919050565b60006140b08261409a565b6140ba81856131da565b93506140ca818560208601613cd9565b6140d3816129e3565b840191505092915050565b600060208201905081810360008301526140f881846140a5565b905092915050565b600082825260208201905092915050565b600061411c82613cc3565b6141268185614100565b9350614136818560208601613cd9565b61413f816129e3565b840191505092915050565b600060208201905081810360008301526141648184614111565b905092915050565b600061417782612968565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036141a9576141a8613378565b5b600182019050919050565b60006141bf82612968565b91506141ca83612968565b92508282039050818111156141e2576141e1613378565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea264697066735822122042731c1e686c828f6a1d118ff10c823af432c3c5bff88c22930b25dc82b5caf264736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Borrowed(address,bytes32,uint256,uint256)": {
        "details": "emitted when funds are borrowed from the pool",
        "params": {
          "amount": "of the borrowed funds",
          "asset": "borrowed by an= user",
          "timestamp": "time of the borrowing*",
          "user": "the address of borrower"
        }
      },
      "Funded(address,bytes32,uint256,uint256)": {
        "details": "emitted after a loan is funded",
        "params": {
          "amount": "the amount of funds",
          "asset": "funded by a user",
          "timestamp": "time of funding*",
          "user": "the address which funded the loan"
        }
      },
      "Repaid(address,bytes32,uint256,uint256)": {
        "details": "emitted when funds are repaid to the pool",
        "params": {
          "amount": "of repaid funds",
          "asset": "asset repaid by a user",
          "timestamp": "of the repayment*",
          "user": "the address initiating repayment"
        }
      },
      "Withdrawn(address,bytes32,uint256,uint256)": {
        "details": "emitted after the funds are withdrawn from the loan",
        "params": {
          "amount": "of funds withdrawn",
          "asset": "withdrawn by a user",
          "timestamp": "of the withdrawal*",
          "user": "the address which withdraws funds from the loan"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "borrow(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_amount": "of funds to borrow*",
          "_asset": "to be borrowed"
        }
      },
      "fund(bytes32,uint256)": {
        "details": "Requires approval for ERC20 token on frontend side",
        "params": {
          "_amount": "to be funded*",
          "_fundedAsset": "asset to be funded"
        }
      },
      "fundGLP(uint256)": {
        "details": "Requires approval for stakedGLP token on frontend side",
        "params": {
          "_amount": "to be funded*"
        }
      },
      "repay(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_amount": "of funds to repay*",
          "_asset": "to be repaid"
        }
      },
      "withdraw(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_amount": "to be withdrawn*",
          "_withdrawnAsset": "asset to be withdrawn"
        }
      },
      "withdrawGLP(uint256)": {
        "params": {
          "_amount": "to be withdrawn*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(bytes32,uint256)": {
        "notice": "Borrows funds from the pool"
      },
      "fund(bytes32,uint256)": {
        "notice": "Funds the loan with a specified amount of a defined token"
      },
      "fundGLP(uint256)": {
        "notice": "Funds the loan with a specified amount of a GLP"
      },
      "repay(bytes32,uint256)": {
        "notice": "Repays funds to the pool"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws an amount of a defined asset from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal"
      },
      "withdrawGLP(uint256)": {
        "notice": "Withdraws specified amount of a GLP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7927,
        "contract": "contracts/facets/AssetsOperationsFacet.sol:AssetsOperationsFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}