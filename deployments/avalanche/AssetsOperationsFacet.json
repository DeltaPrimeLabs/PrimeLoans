{
  "address": "0xE657d0D17CA06c28A19c2CCaFB4092cFAa4EA3A8",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "fromToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "toToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "DebtSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Funded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "asset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "_getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "cachedPrices",
          "type": "tuple"
        }
      ],
      "name": "_getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resetPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_setPrimeAccountAssetsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_fundedAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "fundGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_fromAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_toAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "name": "swapDebt",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_withdrawnAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawGLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x17947ba3134c9bb0e74fcac9def747494bcb958ecc068720cc7338d9310562b5",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xE657d0D17CA06c28A19c2CCaFB4092cFAa4EA3A8",
    "transactionIndex": 0,
    "gasUsed": "4330742",
    "logsBloom": "0x
    "blockHash": "0xcdd3b08e4e8b5bfa67933ccf3a0784f6f6f741588440befd342f41d47fff2938",
    "transactionHash": "0x17947ba3134c9bb0e74fcac9def747494bcb958ecc068720cc7338d9310562b5",
    "logs": [],
    "blockNumber": 28046243,
    "cumulativeGasUsed": "4330742",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 10,
  "solcInputHash": "8e42f8e6e28155dd141ec5f81fee1cfb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fromToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"toToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DebtSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Funded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"_getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"cachedPrices\",\"type\":\"tuple\"}],\"name\":\"_getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resetPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_setPrimeAccountAssetsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fundedAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"fundGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_fromAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_toAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"name\":\"swapDebt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_withdrawnAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawGLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Borrowed(address,bytes32,uint256,uint256)\":{\"details\":\"emitted when funds are borrowed from the pool\",\"params\":{\"amount\":\"of the borrowed funds\",\"asset\":\"borrowed by an= user\",\"timestamp\":\"time of the borrowing*\",\"user\":\"the address of borrower\"}},\"DebtSwap(address,address,address,uint256,uint256,uint256)\":{\"details\":\"emitted after a debt swap\",\"params\":{\"borrowAmount\":\"the amount of toToken that was borrowed\",\"fromToken\":\"token that was repaid\",\"repayAmount\":\"the amount of fromToken that was repaid\",\"timestamp\":\"time of debt swap*\",\"toToken\":\"token that was borrowed\",\"user\":\"the address which performed the debt swap\"}},\"Funded(address,bytes32,uint256,uint256)\":{\"details\":\"emitted after a loan is funded\",\"params\":{\"amount\":\"the amount of funds\",\"asset\":\"funded by a user\",\"timestamp\":\"time of funding*\",\"user\":\"the address which funded the loan\"}},\"Repaid(address,bytes32,uint256,uint256)\":{\"details\":\"emitted when funds are repaid to the pool\",\"params\":{\"amount\":\"of repaid funds\",\"asset\":\"asset repaid by a user\",\"timestamp\":\"of the repayment*\",\"user\":\"the address initiating repayment\"}},\"Withdrawn(address,bytes32,uint256,uint256)\":{\"details\":\"emitted after the funds are withdrawn from the loan\",\"params\":{\"amount\":\"of funds withdrawn\",\"asset\":\"withdrawn by a user\",\"timestamp\":\"of the withdrawal*\",\"user\":\"the address which withdraws funds from the loan\"}}},\"kind\":\"dev\",\"methods\":{\"borrow(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_amount\":\"of funds to borrow*\",\"_asset\":\"to be borrowed\"}},\"fund(bytes32,uint256)\":{\"details\":\"Requires approval for ERC20 token on frontend side\",\"params\":{\"_amount\":\"to be funded*\",\"_fundedAsset\":\"asset to be funded\"}},\"fundGLP(uint256)\":{\"details\":\"Requires approval for stakedGLP token on frontend side\",\"params\":{\"_amount\":\"to be funded*\"}},\"repay(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_amount\":\"of funds to repay*\",\"_asset\":\"to be repaid\"}},\"swapDebt(bytes32,bytes32,uint256,uint256,address[],address[])\":{\"details\":\"This function uses the redstone-evm-connector_repayAmount and __borrowAmount can be used to control the slippage.\",\"params\":{\"_adapters\":\"yield yak swap adapters\",\"_borrowAmount\":\"debt borrow amount\",\"_fromAsset\":\"existing debt asset\",\"_path\":\"yield yak swap path\",\"_repayAmount\":\"debt repay amount\",\"_toAsset\":\"new debt asset\"}},\"withdraw(bytes32,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_amount\":\"to be withdrawn*\",\"_withdrawnAsset\":\"asset to be withdrawn\"}},\"withdrawGLP(uint256)\":{\"params\":{\"_amount\":\"to be withdrawn*\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"borrow(bytes32,uint256)\":{\"notice\":\"Borrows funds from the pool\"},\"fund(bytes32,uint256)\":{\"notice\":\"Funds the loan with a specified amount of a defined token\"},\"fundGLP(uint256)\":{\"notice\":\"Funds the loan with a specified amount of a GLP\"},\"repay(bytes32,uint256)\":{\"notice\":\"Repays funds to the pool\"},\"swapDebt(bytes32,bytes32,uint256,uint256,address[],address[])\":{\"notice\":\"Swap existing debt to another debt\"},\"withdraw(bytes32,uint256)\":{\"notice\":\"Withdraws an amount of a defined asset from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal\"},\"withdrawGLP(uint256)\":{\"notice\":\"Withdraws specified amount of a GLP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/AssetsOperationsFacet.sol\":\"AssetsOperationsFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xdd3de13c7194743e56133e19bb228a88d446e41a9494215c8e4b908155644eae\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0x82ab78ed59f4a811f5ab5c32064099235d753f98df42c087476ddabbf0348f21\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overridden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of authorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0xcea791cdbc054d88248f94d600761fe2b33721f016608444828b400511c2f14a\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x816269b87f6d7fdbac50710b9bd7ecbea0afc660ed4ea8a4441d5f3d163f9e61\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\n\\n/**\\n * DiamondHelper\\n * Helper methods\\n **/\\ncontract DiamondHelper {\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\n    }\\n}\",\"keccak256\":\"0x3836f18acae7434ca2528eb5ddafc6cf76c237e1bb3ba458bdf859fb98c0582e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\n\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\n        return 0.9e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns full pool status\\n     */\\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\\n        return [\\n            totalSupply(),\\n            getDepositRate(),\\n            getBorrowingRate(),\\n            totalBorrowed(),\\n            getMaxPoolUtilisationForBorrowing()\\n        ];\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x735eb90588f5d83e5c1065f68f30a7ca9cf09d605b99e2fcc2d5e0a2e9001cf2\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\n// contract that uses keccak slots instead of the standard storage layout.\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n */\\nabstract contract ReentrancyGuardKeccak {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rgs._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rgs._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xff292b8761ea7ade758ddc700e6e8b8727210285859db6a48d7bba1778ab7e1a\",\"license\":\"MIT\"},\"contracts/facets/AssetsExposureController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract AssetsExposureController {\\n\\n    function resetPrimeAccountAssetsExposure() external {\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        for(uint i=0; i<ownedAssets.length; i++){\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\n            tokenManager.decreaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\n        }\\n        for(uint i=0; i<positions.length; i++){\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\n                tokenManager.decreaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\n            }\\n        }\\n    }\\n\\n    function setPrimeAccountAssetsExposure() external {\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        for(uint i=0; i<ownedAssets.length; i++){\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssets[i], true));\\n            tokenManager.increaseProtocolExposure(ownedAssets[i], token.balanceOf(address(this)) * 1e18 / 10**token.decimals());\\n        }\\n        for(uint i=0; i<positions.length; i++){\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n                uint256 decimals = IERC20Metadata(tokenManager.getAssetAddress(positions[i].symbol, true)).decimals();\\n                tokenManager.increaseProtocolExposure(positions[i].identifier, balance * 1e18 / 10**decimals);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f2e7e9fa547682391dc7e0ed81d887781cf200418fd441b74edfca62306c6d5\",\"license\":\"BUSL-1.1\"},\"contracts/facets/AssetsOperationsFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 4da64a8a04844045e51b88c6202064e16ea118aa;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/facets/avalanche/IYieldYakRouter.sol\\\";\\n\\n//this path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract AssetsOperationsFacet is ReentrancyGuardKeccak, SolvencyMethods {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    address private constant YY_ROUTER = 0xC4729E56b831d74bBc18797e0e17A295fA77488c;\\n\\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n    * Funds the loan with a specified amount of a defined token\\n    * @dev Requires approval for ERC20 token on frontend side\\n    * @param _fundedAsset asset to be funded\\n    * @param _amount to be funded\\n    **/\\n    function fund(bytes32 _fundedAsset, uint256 _amount) public virtual {\\n        IERC20Metadata token = getERC20TokenInstance(_fundedAsset, false);\\n        _amount = Math.min(_amount, token.balanceOf(msg.sender));\\n\\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (token.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_fundedAsset, address(token));\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.increaseProtocolExposure(_fundedAsset, _amount * 1e18 / 10 ** token.decimals());\\n\\n        emit Funded(msg.sender, _fundedAsset, _amount, block.timestamp);\\n    }\\n\\n    /**\\n    * Funds the loan with a specified amount of a GLP\\n    * @dev Requires approval for stakedGLP token on frontend side\\n    * @param _amount to be funded\\n    **/\\n    function fundGLP(uint256 _amount) public virtual {\\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\\n        _amount = Math.min(_amount, stakedGlpToken.balanceOf(msg.sender));\\n        address(stakedGlpToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        if (stakedGlpToken.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(\\\"GLP\\\", address(stakedGlpToken));\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.increaseProtocolExposure(\\\"GLP\\\", _amount);\\n\\n        emit Funded(msg.sender, \\\"GLP\\\", _amount, block.timestamp);\\n    }\\n\\n    /**\\n    * Withdraws an amount of a defined asset from the loan\\n    * This method could be used to cash out profits from investments\\n    * The loan needs to remain solvent after the withdrawal\\n    * @dev This function uses the redstone-evm-connector\\n    * @param _withdrawnAsset asset to be withdrawn\\n    * @param _amount to be withdrawn\\n    **/\\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\\n        IERC20Metadata token = getERC20TokenInstance(_withdrawnAsset, true);\\n        _amount = Math.min(_amount, token.balanceOf(address(this)));\\n\\n        address(token).safeTransfer(msg.sender, _amount);\\n        if (token.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_withdrawnAsset);\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.decreaseProtocolExposure(_withdrawnAsset, _amount * 1e18 / 10 ** token.decimals());\\n\\n        emit Withdrawn(msg.sender, _withdrawnAsset, _amount, block.timestamp);\\n    }\\n\\n    /**\\n        * Withdraws specified amount of a GLP\\n        * @param _amount to be withdrawn\\n    **/\\n    function withdrawGLP(uint256 _amount) public virtual onlyOwner nonReentrant canRepayDebtFully remainsSolvent{\\n        IERC20Metadata token = getERC20TokenInstance(\\\"GLP\\\", true);\\n        IERC20Metadata stakedGlpToken = IERC20Metadata(0xaE64d55a6f09E4263421737397D1fdFA71896a69);\\n        _amount = Math.min(token.balanceOf(address(this)), _amount);\\n\\n        address(stakedGlpToken).safeTransfer(msg.sender, _amount);\\n        if (token.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(\\\"GLP\\\");\\n        }\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        tokenManager.decreaseProtocolExposure(\\\"GLP\\\", _amount * 1e18 / 10 ** token.decimals());\\n\\n        emit Withdrawn(msg.sender, \\\"GLP\\\", _amount, block.timestamp);\\n    }\\n\\n    /**\\n    * Borrows funds from the pool\\n    * @dev This function uses the redstone-evm-connector\\n    * @param _asset to be borrowed\\n    * @param _amount of funds to borrow\\n    **/\\n    function borrow(bytes32 _asset, uint256 _amount) external onlyOwner remainsSolvent {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        ds._lastBorrowTimestamp = block.timestamp;\\n\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        Pool pool = Pool(tokenManager.getPoolAddress(_asset));\\n        pool.borrow(_amount);\\n\\n        IERC20Metadata token = getERC20TokenInstance(_asset, false);\\n        if (token.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_asset, address(token));\\n        }\\n\\n        emit Borrowed(msg.sender, _asset, _amount, block.timestamp);\\n    }\\n\\n\\n    /**\\n     * Repays funds to the pool\\n     * @dev This function uses the redstone-evm-connector\\n     * @param _asset to be repaid\\n     * @param _amount of funds to repay\\n     **/\\n    function repay(bytes32 _asset, uint256 _amount) public payable {\\n        IERC20Metadata token = getERC20TokenInstance(_asset, true);\\n\\n        if (_isSolvent()) {\\n            DiamondStorageLib.enforceIsContractOwner();\\n        }\\n\\n        Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(_asset));\\n\\n        _amount = Math.min(_amount, pool.getBorrowed(address(this)));\\n        require(token.balanceOf(address(this)) >= _amount, \\\"There is not enough funds to repay\\\");\\n\\n        address(token).safeApprove(address(pool), 0);\\n        address(token).safeApprove(address(pool), _amount);\\n\\n        pool.repay(_amount);\\n\\n        if (token.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_asset);\\n        }\\n\\n        emit Repaid(msg.sender, _asset, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Swap existing debt to another debt\\n    * @dev This function uses the redstone-evm-connector\\n    * @dev _repayAmount and __borrowAmount can be used to control the slippage.\\n     * @param _fromAsset existing debt asset\\n     * @param _toAsset new debt asset\\n     * @param _repayAmount debt repay amount\\n     * @param _borrowAmount debt borrow amount\\n     * @param _path yield yak swap path\\n     * @param _adapters yield yak swap adapters\\n     */\\n    function swapDebt(bytes32 _fromAsset, bytes32 _toAsset, uint256 _repayAmount, uint256 _borrowAmount, address[] calldata _path, address[] calldata _adapters) external onlyOwner remainsSolvent nonReentrant {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        Pool fromAssetPool = Pool(tokenManager.getPoolAddress(_fromAsset));\\n        _repayAmount = Math.min(_repayAmount, fromAssetPool.getBorrowed(address(this)));\\n\\n        IERC20Metadata toToken = getERC20TokenInstance(_toAsset, false);\\n        IERC20Metadata fromToken = getERC20TokenInstance(_fromAsset, false);\\n\\n        Pool toAssetPool = Pool(tokenManager.getPoolAddress(_toAsset));\\n        toAssetPool.borrow(_borrowAmount);\\n\\n        {\\n            // swap toAsset to fromAsset\\n            address(toToken).safeApprove(YY_ROUTER, 0);\\n            address(toToken).safeApprove(YY_ROUTER, _borrowAmount);\\n\\n            IYieldYakRouter router = IYieldYakRouter(YY_ROUTER);\\n\\n            IYieldYakRouter.Trade memory trade = IYieldYakRouter.Trade({\\n                amountIn: _borrowAmount,\\n                amountOut: _repayAmount,\\n                path: _path,\\n                adapters: _adapters\\n            });\\n\\n            router.swapNoSplit(trade, address(this), 0);\\n        }\\n        \\n        address(fromToken).safeApprove(address(fromAssetPool), 0);\\n        address(fromToken).safeApprove(address(fromAssetPool), _repayAmount);\\n        fromAssetPool.repay(_repayAmount);\\n\\n        if (fromToken.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_fromAsset, address(fromToken));\\n        } else {\\n            DiamondStorageLib.removeOwnedAsset(_fromAsset);\\n        }\\n\\n        emit DebtSwap(msg.sender, address(fromToken), address(toToken), _repayAmount, _borrowAmount, block.timestamp);\\n    }\\n\\n    /* ======= VIEW FUNCTIONS ======*/\\n\\n    /**\\n    * Returns a current balance of the asset held by the smart loan\\n    * @param _asset the code of an asset\\n    **/\\n    function getBalance(bytes32 _asset) internal view returns (uint256) {\\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyOwner() {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after a debt swap\\n     * @param user the address which performed the debt swap\\n     * @param fromToken token that was repaid\\n     * @param toToken token that was borrowed\\n     * @param repayAmount the amount of fromToken that was repaid\\n     * @param borrowAmount the amount of toToken that was borrowed\\n     * @param timestamp time of debt swap\\n     **/\\n    event DebtSwap(address indexed user, address indexed fromToken, address indexed toToken, uint256 repayAmount, uint256 borrowAmount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after a loan is funded\\n     * @param user the address which funded the loan\\n     * @param asset funded by a user\\n     * @param amount the amount of funds\\n     * @param timestamp time of funding\\n     **/\\n    event Funded(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the funds are withdrawn from the loan\\n     * @param user the address which withdraws funds from the loan\\n     * @param asset withdrawn by a user\\n     * @param amount of funds withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawn(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted when funds are borrowed from the pool\\n     * @param user the address of borrower\\n     * @param asset borrowed by an= user\\n     * @param amount of the borrowed funds\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowed(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted when funds are repaid to the pool\\n     * @param user the address initiating repayment\\n     * @param asset asset repaid by a user\\n     * @param amount of repaid funds\\n     * @param timestamp of the repayment\\n     **/\\n    event Repaid(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\\n}\",\"keccak256\":\"0xaf62f362fabbabfa06cdb11467eb8c7227d477b617c5b20361b8d4b094bd6878\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract SolvencyFacetProd is AvalancheDataServiceConsumerBase, DiamondHelper {\\n    struct AssetPrice {\\n        bytes32 asset;\\n        uint256 price;\\n    }\\n\\n    // Struct used in the liquidation process to obtain necessary prices only once\\n    struct CachedPrices {\\n        AssetPrice[] ownedAssetsPrices;\\n        AssetPrice[] debtAssetsPrices;\\n        AssetPrice[] stakedPositionsPrices;\\n        AssetPrice[] assetsToRepayPrices;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function isSolvent() public view returns (bool) {\\n        return getHealthRatio() >= 1e18;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n      * @param cachedPrices Struct containing arrays of Asset/Price structs used to calculate value of owned assets, debt and staked positions\\n    **/\\n    function isSolventWithPrices(CachedPrices memory cachedPrices) public view returns (bool) {\\n        return getHealthRatioWithPrices(cachedPrices) >= 1e18;\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of staked positions.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\n        for(uint256 i=0; i<positions.length; i++) {\\n            symbols[i] = positions[i].symbol;\\n        }\\n\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\n\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: symbols[i],\\n                price: stakedPositionsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\n    **/\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        result = tokenManager.getAllPoolAssets();\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory debtAssets = getDebtAssets();\\n\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\n        result = new AssetPrice[](debtAssetsPrices.length);\\n\\n        for(uint i; i<debtAssetsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: debtAssets[i],\\n                price: debtAssetsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getOwnedAssetsWithNativePrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory assetsEnriched = getOwnedAssetsWithNative();\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\n\\n        result = new AssetPrice[](assetsEnriched.length);\\n\\n        for(uint i; i<assetsEnriched.length; i++){\\n            result[i] = AssetPrice({\\n                asset: assetsEnriched[i],\\n                price: prices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of staked positions.\\n    **/\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        result = new bytes32[](positions.length);\\n        for(uint i; i<positions.length; i++) {\\n            result[i] = positions[i].symbol;\\n        }\\n    }\\n\\n    function copyToArray(bytes32[] memory target, bytes32[] memory source, uint256 offset, uint256 numberOfItems) pure internal {\\n        require(numberOfItems <= source.length, \\\"numberOfItems > target array length\\\");\\n        require(offset + numberOfItems <= target.length, \\\"offset + numberOfItems > target array length\\\");\\n\\n        for(uint i; i<numberOfItems; i++){\\n            target[i + offset] = source[i];\\n        }\\n    }\\n\\n    function copyToAssetPriceArray(AssetPrice[] memory target, bytes32[] memory sourceAssets, uint256[] memory sourcePrices, uint256 offset, uint256 numberOfItems) pure internal {\\n        require(numberOfItems <= sourceAssets.length, \\\"numberOfItems > sourceAssets array length\\\");\\n        require(numberOfItems <= sourcePrices.length, \\\"numberOfItems > sourcePrices array length\\\");\\n        require(offset + numberOfItems <= sourceAssets.length, \\\"offset + numberOfItems > sourceAssets array length\\\");\\n        require(offset + numberOfItems <= sourcePrices.length, \\\"offset + numberOfItems > sourcePrices array length\\\");\\n\\n        for(uint i; i<numberOfItems; i++){\\n            target[i] = AssetPrice({\\n                asset: sourceAssets[i+offset],\\n                price: sourcePrices[i+offset]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public view returns (CachedPrices memory result) {\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsWithNative();\\n        bytes32[] memory debtAssets = getDebtAssets();\\n        bytes32[] memory stakedAssets = getStakedAssets();\\n\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\n        uint256 offset;\\n\\n        // Populate allAssetsSymbols with owned assets symbols\\n        copyToArray(allAssetsSymbols, ownedAssetsEnriched, offset, ownedAssetsEnriched.length);\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate allAssetsSymbols with debt assets symbols\\n        copyToArray(allAssetsSymbols, debtAssets, offset, debtAssets.length);\\n        offset += debtAssets.length;\\n\\n        // Populate allAssetsSymbols with staked assets symbols\\n        copyToArray(allAssetsSymbols, stakedAssets, offset, stakedAssets.length);\\n        offset += stakedAssets.length;\\n\\n        // Populate allAssetsSymbols with assets to repay symbols\\n        copyToArray(allAssetsSymbols, assetsToRepay, offset, assetsToRepay.length);\\n\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\n\\n        offset = 0;\\n\\n        // Populate ownedAssetsPrices struct\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\n        copyToAssetPriceArray(ownedAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, ownedAssetsEnriched.length);\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate debtAssetsPrices struct\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\n        copyToAssetPriceArray(debtAssetsPrices, allAssetsSymbols, allAssetsPrices, offset, debtAssets.length);\\n        offset += debtAssetsPrices.length;\\n\\n        // Populate stakedPositionsPrices struct\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\n        copyToAssetPriceArray(stakedPositionsPrices, allAssetsSymbols, allAssetsPrices, offset, stakedAssets.length);\\n        offset += stakedAssets.length;\\n\\n        // Populate assetsToRepayPrices struct\\n        // Stack too deep :F\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\n        for(uint i=0; i<assetsToRepay.length; i++){\\n            assetsToRepayPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n\\n        result = CachedPrices({\\n        ownedAssetsPrices: ownedAssetsPrices,\\n        debtAssetsPrices: debtAssetsPrices,\\n        stakedPositionsPrices: stakedPositionsPrices,\\n        assetsToRepayPrices: assetsToRepayPrices\\n        });\\n    }\\n\\n    // Check whether there is enough debt-denominated tokens to fully repaid what was previously borrowed\\n    function canRepayDebtFully() external view returns(bool) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        bytes32[] memory poolAssets = tokenManager.getAllPoolAssets();\\n\\n        for(uint i; i< poolAssets.length; i++) {\\n            Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(poolAssets[i]));\\n            IERC20 token = IERC20(pool.tokenAddress());\\n            if(token.balanceOf(address(this)) < pool.getBorrowed(address(this))) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\n        return getOracleNumericValuesFromTxMsg(symbols);\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\n        return getOracleNumericValueFromTxMsg(symbol);\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and debtCoverage\\n    **/\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        uint256 weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\n\\n        if (ownedAssetsPrices.length > 0) {\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * token.balanceOf(address(this)) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n            }\\n        }\\n        return weightedValueOfTokens;\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and debtCoverage\\n    **/\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 weightedValueOfStaked;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\\n            }\\n\\n\\n        }\\n        return weightedValueOfStaked;\\n    }\\n\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        uint256 debt;\\n\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\n\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\n            / 10 ** token.decimals();\\n        }\\n\\n        return debt;\\n    }\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebt() public view virtual returns (uint256) {\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current debt denominated in USD\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\n        if (ownedAssetsPrices.length > 0) {\\n            ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                uint256 assetBalance = token.balanceOf(address(this));\\n\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\n            }\\n            return total;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsWithNativePrices();\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n      * Returns list of owned assets that always included NativeToken at index 0\\n    **/\\n    function getOwnedAssetsWithNative() public view returns(bytes32[] memory){\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\n\\n        uint256 lastUsedIndex;\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\n\\n        for(uint i=0; i< ownedAssets.length; i++){\\n            if(ownedAssets[i] != nativeTokenSymbol){\\n                lastUsedIndex += 1;\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\n            }\\n        }\\n        return assetsWithNative;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 usdValue;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\n            }\\n        }\\n\\n        return usdValue;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getTotalValue() public view virtual returns (uint256) {\\n        return getTotalAssetsValue() + getStakedValue();\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\n    }\\n\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getHealthRatio() public view virtual returns (uint256) {\\n        CachedPrices memory cachedPrices = getAllPricesForLiquidation(new bytes32[](0));\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n     **/\\n    function getHealthRatioWithPrices(CachedPrices memory cachedPrices) public view virtual returns (uint256) {\\n        uint256 debt = getDebtWithPrices(cachedPrices.debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7776f85126138874e61aa3a1e9c7a2138444dd96a0ab087e57221709e6da14b5\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IDiamondBeacon {\\n\\n    function implementation() external view returns (address);\\n\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\n     */\\n    function implementation(bytes4) external view returns (address);\\n\\n    function getStatus() external view returns (bool);\\n\\n    function proposeBeaconOwnershipTransfer(address _newOwner) external;\\n\\n    function acceptBeaconOwnership() external;\\n}\\n\",\"keccak256\":\"0xed5c84e80ef7559d35ce307d5e673496bf190b030cc0d67ac3f02776a9b659de\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\n        address asset;\\n        bytes32 symbol;\\n        bytes32 identifier;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0x10a1d6e52d762a40d3a632aaf2807daf64e5fdc66047c5eec6f451ad4c760532\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n}\",\"keccak256\":\"0x7c8fbf587aacf7f651978dd4e8fecd6bc98243fdb739af94ef1200eae3613b36\"},\"contracts/interfaces/facets/avalanche/IYieldYakRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IYieldYakRouter {\\n    struct Trade {\\n        uint256 amountIn;\\n        uint256 amountOut;\\n        address[] path;\\n        address[] adapters;\\n    }\\n\\n    struct FormattedOffer {\\n        uint256[] amounts;\\n        address[] adapters;\\n        address[] path;\\n    }\\n\\n    function swapNoSplit(\\n        Trade calldata _trade,\\n        address _to,\\n        uint256 _fee\\n    ) external;\\n}\",\"keccak256\":\"0x8b3eb66efff1b454a0860d6d08d0f6ad5208f6ff2471abfd4e2a5c582c0c2fa8\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == position.identifier) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes32 identifier) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == identifier) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0xa4dc99332411f1fe4ca13d4e2949e4f4e8342b34b72a7eb87854cf2833d5d53a\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\nimport \\\"../facets/AssetsExposureController.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\n\\n// TODO Rename to contract instead of lib\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\n    // This function executes SolvencyFacetProd.getDebt()\\n    function _getDebt() internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\n    function _isSolventWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, cachedPrices)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolvent()\\n    function _isSolvent() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.canRepayDebtFully()\\n    function _canRepayDebtFully() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.canRepayDebtFully.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.canRepayDebtFully.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalValue()\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\n        assetsValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.CachedPrices memory cachedPrices) public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, cachedPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\n        prices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\n            ),\\n            (uint256[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\n        result = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\n            ),\\n            (SolvencyFacetProd.CachedPrices)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getOwnedAssetsWithNativePrices()\\n    function _getOwnedAssetsWithNativePrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\n        ownedAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsWithNativePrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\n        debtAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\n        stakedPositionsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\n        price = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes AssetsExposureController.decreaseAssetsExposure()\\n    function _resetPrimeAccountAssetsExposure() public {\\n        proxyDelegateCalldata(\\n            DiamondHelper._getFacetAddress(AssetsExposureController.resetPrimeAccountAssetsExposure.selector),\\n            abi.encodeWithSelector(AssetsExposureController.resetPrimeAccountAssetsExposure.selector)\\n        );\\n    }\\n\\n    // This function executes AssetsExposureController.increaseAssetsExposure()\\n    function _setPrimeAccountAssetsExposure() public {\\n        proxyDelegateCalldata(\\n            DiamondHelper._getFacetAddress(AssetsExposureController.setPrimeAccountAssetsExposure.selector),\\n            abi.encodeWithSelector(AssetsExposureController.setPrimeAccountAssetsExposure.selector)\\n        );\\n    }\\n\\n    /**\\n     * Returns IERC20Metadata instance of a token\\n     * @param _asset the code of an asset\\n     **/\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\n    }\\n\\n    modifier recalculateAssetsExposure() {\\n        _resetPrimeAccountAssetsExposure();\\n        _;\\n        _setPrimeAccountAssetsExposure();\\n    }\\n\\n    /**\\n    * Checks whether account is solvent (health higher than 1)\\n    * @dev This modifier uses the redstone-evm-connector\\n    **/\\n    modifier remainsSolvent() {\\n        _;\\n\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\n    }\\n\\n    modifier canRepayDebtFully() {\\n        _;\\n        require(_canRepayDebtFully(), \\\"Insufficient assets to fully repay the debt\\\");\\n    }\\n\\n    modifier noBorrowInTheSameBlock() {\\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\\n        require(ds._lastBorrowTimestamp != block.timestamp, \\\"Borrowing must happen in a standalone transaction\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd8749f1445660198608f8c3d2928efd4dd4c2e1a9cbcaea94402a05a585590\",\"license\":\"BUSL-1.1\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (ITokenManager) {\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0x7ed69bc3442b020fd8374db1806c6e9d50f3d05806765a5959d86cfebc2f3f9f\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550614d40806100286000396000f3fe6080604052600436106100dc5760003560e01c80636e3bfe9f1161007f578063b2d40e7311610059578063b2d40e731461029a578063d66e2979146102d7578063e46bbc9e14610300578063f8f1855314610329576100dc565b80636e3bfe9f1461020b5780637c93ec30146102485780639d9a355e14610271576100dc565b806326ee4836116100bb57806326ee48361461014f57806331d98b3f1461018c57806339e2719e146101c95780635b4fad9c146101f4576100dc565b8062f989ad146100e1578063040cf020146100fd5780631281f5fe14610126575b600080fd5b6100fb60048036038101906100f69190613156565b610340565b005b34801561010957600080fd5b50610124600480360381019061011f9190613156565b6106cf565b005b34801561013257600080fd5b5061014d600480360381019061014891906131fb565b610a7f565b005b34801561015b57600080fd5b5061017660048036038101906101719190613419565b6110e9565b6040516101839190613520565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190613542565b611193565b6040516101c0919061357e565b60405180910390f35b3480156101d557600080fd5b506101de61123d565b6040516101eb919061357e565b60405180910390f35b34801561020057600080fd5b506102096112da565b005b34801561021757600080fd5b50610232600480360381019061022d919061379e565b611360565b60405161023f919061357e565b60405180910390f35b34801561025457600080fd5b5061026f600480360381019061026a9190613156565b61140a565b005b34801561027d57600080fd5b50610298600480360381019061029391906137e7565b611658565b005b3480156102a657600080fd5b506102c160048036038101906102bc9190613419565b611a7f565b6040516102ce9190613979565b60405180910390f35b3480156102e357600080fd5b506102fe60048036038101906102f991906137e7565b611b2f565b005b34801561030c57600080fd5b5061032760048036038101906103229190613156565b611d94565b005b34801561033557600080fd5b5061033e61204a565b005b600061034d8360016120d0565b905061035761215d565b15610365576103646121fa565b5b600061036f612295565b73ffffffffffffffffffffffffffffffffffffffff16630edc25b6856040518263ffffffff1660e01b81526004016103a791906139aa565b602060405180830381865afa1580156103c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e89190613a23565b905061046d838273ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b81526004016104279190613a5f565b602060405180830381865afa158015610444573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104689190613a8f565b6122b1565b9250828273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016104a99190613a5f565b602060405180830381865afa1580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190613a8f565b101561052b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052290613b3f565b60405180910390fd5b6105578160008473ffffffffffffffffffffffffffffffffffffffff166122ca9092919063ffffffff16565b61058281848473ffffffffffffffffffffffffffffffffffffffff166122ca9092919063ffffffff16565b8073ffffffffffffffffffffffffffffffffffffffff1663371fd8e6846040518263ffffffff1660e01b81526004016105bb919061357e565b600060405180830381600087803b1580156105d557600080fd5b505af11580156105e9573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016106289190613a5f565b602060405180830381865afa158015610645573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106699190613a8f565b036106785761067784612400565b5b833373ffffffffffffffffffffffffffffffffffffffff167fa2f4fa14f0b0fee8b10babfdacfbfff6d29bbce82209ad5e7b2ac1dc2c35ab9b85426040516106c1929190613b5f565b60405180910390a350505050565b6106d76121fa565b60006106e161241e565b9050600281600001540361072a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072190613bd4565b60405180910390fd5b6002816000018190555060006107418460016120d0565b90506107c6838273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107809190613a5f565b602060405180830381865afa15801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c19190613a8f565b6122b1565b92506107f333848373ffffffffffffffffffffffffffffffffffffffff1661244b9092919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161082e9190613a5f565b602060405180830381865afa15801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f9190613a8f565b0361087e5761087d84612400565b5b6000610888612295565b90508073ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f868473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109169190613c2d565b600a6109229190613dbc565b670de0b6b3a7640000886109369190613e07565b6109409190613e78565b6040518363ffffffff1660e01b815260040161095d929190613ea9565b600060405180830381600087803b15801561097757600080fd5b505af115801561098b573d6000803e3d6000fd5b50505050843373ffffffffffffffffffffffffffffffffffffffff167f2c2b206b9475386bb995c366956ade2de7bd0e3208dd1fb3833c280929a9300586426040516109d8929190613b5f565b60405180910390a350506109ea61215d565b610a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a2090613f44565b60405180910390fd5b610a31612581565b610a70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a6790613fd6565b60405180910390fd5b60018160000181905550505050565b610a876121fa565b6000610a9161241e565b90506002816000015403610ada576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad190613bd4565b60405180910390fd5b600281600001819055506000610aee612295565b905060008173ffffffffffffffffffffffffffffffffffffffff16630edc25b68c6040518263ffffffff1660e01b8152600401610b2b91906139aa565b602060405180830381865afa158015610b48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b6c9190613a23565b9050610bf1898273ffffffffffffffffffffffffffffffffffffffff16636011163e306040518263ffffffff1660e01b8152600401610bab9190613a5f565b602060405180830381865afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190613a8f565b6122b1565b98506000610c008b60006120d0565b90506000610c0f8d60006120d0565b905060008473ffffffffffffffffffffffffffffffffffffffff16630edc25b68e6040518263ffffffff1660e01b8152600401610c4c91906139aa565b602060405180830381865afa158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d9190613a23565b90508073ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec8c6040518263ffffffff1660e01b8152600401610cc8919061357e565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b50505050610d3a73c4729e56b831d74bbc18797e0e17a295fa77488c60008573ffffffffffffffffffffffffffffffffffffffff166122ca9092919063ffffffff16565b610d7973c4729e56b831d74bbc18797e0e17a295fa77488c8c8573ffffffffffffffffffffffffffffffffffffffff166122ca9092919063ffffffff16565b600073c4729e56b831d74bbc18797e0e17a295fa77488c9050600060405180608001604052808e81526020018f81526020018d8d80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081526020018b8b80806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f8201169050808301925050505050505081525090508173ffffffffffffffffffffffffffffffffffffffff16636bf2df86823060006040518463ffffffff1660e01b8152600401610e7793929190614163565b600060405180830381600087803b158015610e9157600080fd5b505af1158015610ea5573d6000803e3d6000fd5b505050505050610ed78460008473ffffffffffffffffffffffffffffffffffffffff166122ca9092919063ffffffff16565b610f02848d8473ffffffffffffffffffffffffffffffffffffffff166122ca9092919063ffffffff16565b8373ffffffffffffffffffffffffffffffffffffffff1663371fd8e68d6040518263ffffffff1660e01b8152600401610f3b919061357e565b600060405180830381600087803b158015610f5557600080fd5b505af1158015610f69573d6000803e3d6000fd5b5050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fa89190613a5f565b602060405180830381865afa158015610fc5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe99190613a8f565b1115610ffe57610ff98e8361261e565b611008565b6110078e612400565b5b8273ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f748fff53294fa79798345b252110328971a595b971caf6adc7933174d722597d8f8f42604051611080939291906141a1565b60405180910390a4505050505060018160000181905550506110a061215d565b6110df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d690613f44565b60405180910390fd5b5050505050505050565b60606111796110fe6326ee483660e01b6126f0565b6326ee483660e01b846040516024016111179190614287565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b80602001905181019061118c919061436c565b9050919050565b60006112236111a86331d98b3f60e01b6126f0565b6331d98b3f60e01b846040516024016111c191906139aa565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b8060200190518101906112369190613a8f565b9050919050565b60006112c2611252637914334f60e01b6126f0565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b8060200190518101906112d59190613a8f565b905090565b61135d6112ed63b1c9fbc160e01b6126f0565b63b1c9fbc160e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b50565b60006113f061137563360398a360e01b6126f0565b63360398a360e01b8460405160240161138e9190613979565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b8060200190518101906114039190613a8f565b9050919050565b6114126121fa565b600061141c61280b565b90504281600601819055506000611431612295565b905060008173ffffffffffffffffffffffffffffffffffffffff16630edc25b6866040518263ffffffff1660e01b815260040161146e91906139aa565b602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190613a23565b90508073ffffffffffffffffffffffffffffffffffffffff1663c5ebeaec856040518263ffffffff1660e01b81526004016114ea919061357e565b600060405180830381600087803b15801561150457600080fd5b505af1158015611518573d6000803e3d6000fd5b5050505060006115298660006120d0565b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115669190613a5f565b602060405180830381865afa158015611583573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a79190613a8f565b11156115b8576115b7868261261e565b5b853373ffffffffffffffffffffffffffffffffffffffff167fb44d1174a7e8b37725504ef78b9e681eb337ec859b8829dafb4a817ac9ab7c3f8742604051611601929190613b5f565b60405180910390a35050505061161561215d565b611654576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164b90613f44565b60405180910390fd5b5050565b6116606121fa565b600061166a61241e565b905060028160000154036116b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116aa90613bd4565b60405180910390fd5b6002816000018190555060006116ea7f474c50000000000000000000000000000000000000000000000000000000000060016120d0565b9050600073ae64d55a6f09e4263421737397d1fdfa71896a6990506117888273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117419190613a5f565b602060405180830381865afa15801561175e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117829190613a8f565b856122b1565b93506117b533858373ffffffffffffffffffffffffffffffffffffffff1661244b9092919063ffffffff16565b60008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117f09190613a5f565b602060405180830381865afa15801561180d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118319190613a8f565b036118605761185f7f474c500000000000000000000000000000000000000000000000000000000000612400565b5b600061186a612295565b90508073ffffffffffffffffffffffffffffffffffffffff1663adfe6a0f8473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f79190613c2d565b600a6119039190613dbc565b670de0b6b3a7640000886119179190613e07565b6119219190613e78565b6040518263ffffffff1660e01b815260040161193d91906143db565b600060405180830381600087803b15801561195757600080fd5b505af115801561196b573d6000803e3d6000fd5b505050507f474c5000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff167f2c2b206b9475386bb995c366956ade2de7bd0e3208dd1fb3833c280929a9300587426040516119d8929190613b5f565b60405180910390a35050506119eb61215d565b611a2a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2190613f44565b60405180910390fd5b611a32612581565b611a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6890613fd6565b60405180910390fd5b600181600001819055505050565b611a876130ae565b611b15611a9a63a3aa8d1e60e01b6126f0565b63a3aa8d1e60e01b84604051602401611ab39190614287565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b806020019051810190611b2891906145e6565b9050919050565b600073ae64d55a6f09e4263421737397d1fdfa71896a699050611bcb828273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611b859190613a5f565b602060405180830381865afa158015611ba2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bc69190613a8f565b6122b1565b9150611bfa3330848473ffffffffffffffffffffffffffffffffffffffff16612838909392919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611c359190613a5f565b602060405180830381865afa158015611c52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c769190613a8f565b1115611ca757611ca67f474c5000000000000000000000000000000000000000000000000000000000008261261e565b5b6000611cb1612295565b90508073ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a846040518263ffffffff1660e01b8152600401611cec91906143db565b600060405180830381600087803b158015611d0657600080fd5b505af1158015611d1a573d6000803e3d6000fd5b505050507f474c5000000000000000000000000000000000000000000000000000000000003373ffffffffffffffffffffffffffffffffffffffff167f2d66a92de57f2082107528ba4d5d87f02f49967bfc7aab0013f4d664610335478542604051611d87929190613b5f565b60405180910390a3505050565b6000611da18360006120d0565b9050611e26828273ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401611de09190613a5f565b602060405180830381865afa158015611dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e219190613a8f565b6122b1565b9150611e553330848473ffffffffffffffffffffffffffffffffffffffff16612838909392919063ffffffff16565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e909190613a5f565b602060405180830381865afa158015611ead573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed19190613a8f565b1115611ee257611ee1838261261e565b5b6000611eec612295565b90508073ffffffffffffffffffffffffffffffffffffffff1663c3cc6c7a858473ffffffffffffffffffffffffffffffffffffffff1663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f56573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7a9190613c2d565b600a611f869190613dbc565b670de0b6b3a764000087611f9a9190613e07565b611fa49190613e78565b6040518363ffffffff1660e01b8152600401611fc1929190613ea9565b600060405180830381600087803b158015611fdb57600080fd5b505af1158015611fef573d6000803e3d6000fd5b50505050833373ffffffffffffffffffffffffffffffffffffffff167f2d66a92de57f2082107528ba4d5d87f02f49967bfc7aab0013f4d66461033547854260405161203c929190613b5f565b60405180910390a350505050565b6120cd61205d63e017e12560e01b6126f0565b63e017e12560e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b50565b60006120da612295565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b815260040161211492919061464a565b602060405180830381865afa158015612131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121559190613a23565b905092915050565b60006121e2612172635ce2395060e01b6126f0565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b8060200190518101906121f5919061469f565b905090565b612202612971565b60010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614612293576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161228a9061473e565b60405180910390fd5b565b600073f3978209b7cff2b90100c6f87cec77de928ed58e905090565b60008183106122c057816122c2565b825b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b385856040516024016122fc92919061475e565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161234a91906147f8565b6000604051808303816000865af19150503d8060008114612387576040519150601f19603f3d011682016040523d82523d6000602084013e61238c565b606091505b50915091508180156123ba57506000815114806123b95750808060200190518101906123b8919061469f565b5b5b6123f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f090614881565b60405180910390fd5b5050505050565b600061240a612971565b9050612419816004018361299e565b505050565b6000807f1c85eba10a4cf2d29c83fc15f97931886b9fd3caeb70d8c377aeedc58b919e3b90508091505090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161247d92919061475e565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516124cb91906147f8565b6000604051808303816000865af19150503d8060008114612508576040519150601f19603f3d011682016040523d82523d6000602084013e61250d565b606091505b509150915081801561253b575060008151148061253a575080806020019051810190612539919061469f565b5b5b61257a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161257190614913565b60405180910390fd5b5050505050565b6000612606612596633942a52e60e01b6126f0565b633942a52e60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061277a565b806020019051810190612619919061469f565b905090565b60008203612661576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126589061497f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036126d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126c7906149eb565b60405180910390fd5b60006126da612971565b90506126ea8160040184846129b5565b50505050565b60006126fa6129e7565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b81526004016127329190614a46565b602060405180830381865afa15801561274f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127739190613a23565b9050919050565b6060600061278783612a03565b90506000808573ffffffffffffffffffffffffffffffffffffffff16836040516127b191906147f8565b600060405180830381855af49150503d80600081146127ec576040519150601f19603f3d011682016040523d82523d6000602084013e6127f1565b606091505b50915091506128008282612abd565b935050505092915050565b6000807fc8fcad8db84d3cc18b4c41d551ea0ee66dd599cde068d998e57d5e09332c131c90508091505090565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161286c93929190614a61565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516128ba91906147f8565b6000604051808303816000865af19150503d80600081146128f7576040519150601f19603f3d011682016040523d82523d6000602084013e6128fc565b606091505b509150915081801561292a5750600081511480612929575080806020019051810190612928919061469f565b5b5b612969576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161296090614b0a565b60405180910390fd5b505050505050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b60006129ad8360000183612bbd565b905092915050565b60006129de84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b612bf6565b90509392505050565b6000732916b3bf7c35bd21e63d01c93c62fb0d4994e56d905090565b60606000825190506000612a15612c31565b905060008183612a259190614b2a565b90506000369050821115612a65576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b81831015612a985782518152602083019250602081019050612a7b565b5050508283360385602001830137602084840182010160405280945050505050919050565b606082612bb4576000825103612aff576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a00000000000000000000000000000000000000000000000000000000081149150508015612b77576060604484019050806040517f0f7e8278000000000000000000000000000000000000000000000000000000008152600401612b6e9190614ba2565b60405180910390fd5b826040517ffd36fde3000000000000000000000000000000000000000000000000000000008152600401612bab9190614c0e565b60405180910390fd5b81905092915050565b600082600201600083815260200190815260200160002060009055612bee8284600001612ca190919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550612c288385600001612cb890919063ffffffff16565b90509392505050565b600080612c3c612ccf565b90506000612c4982612de0565b61ffff169050600282612c5c9190614b2a565b915060005b81811015612c98576000612c7484612e3c565b90508084612c829190614b2a565b9350508080612c9090614c30565b915050612c61565b50819250505090565b6000612cb08360000183612e7b565b905092915050565b6000612cc78360000183612f8f565b905092915050565b60008060203603356602ed57011e000081166602ed57011e00001491505080612d24576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115612d64576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff16612d819190614b2a565b612d8b9190614b2a565b90506000369050600282612d9f9190614b2a565b1115612dd7576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b600080602083612df09190614b2a565b90506000369050811115612e30576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b6000806000612e4a84612fff565b91509150604e816020612e5d9190614b2a565b83612e689190613e07565b612e729190614b2a565b92505050919050565b60008083600101600084815260200190815260200160002054905060008114612f83576000600182612ead9190614c78565b9050600060018660000180549050612ec59190614c78565b9050818114612f34576000866000018281548110612ee657612ee5614cac565b5b9060005260206000200154905080876000018481548110612f0a57612f09614cac565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612f4857612f47614cdb565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612f89565b60009150505b92915050565b6000612f9b8383613075565b612ff4578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050612ff9565b600090505b92915050565b60008060008060006041866130149190614b2a565b9050600061303b6020836130289190614b2a565b600036905061309890919063ffffffff16565b90508035935061305560038261309890919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b600080836001016000848152602001908152602001600020541415905092915050565b600081836130a69190614c78565b905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6130fd816130ea565b811461310857600080fd5b50565b60008135905061311a816130f4565b92915050565b6000819050919050565b61313381613120565b811461313e57600080fd5b50565b6000813590506131508161312a565b92915050565b6000806040838503121561316d5761316c6130e0565b5b600061317b8582860161310b565b925050602061318c85828601613141565b9150509250929050565b600080fd5b600080fd5b600080fd5b60008083601f8401126131bb576131ba613196565b5b8235905067ffffffffffffffff8111156131d8576131d761319b565b5b6020830191508360208202830111156131f4576131f36131a0565b5b9250929050565b60008060008060008060008060c0898b03121561321b5761321a6130e0565b5b60006132298b828c0161310b565b985050602061323a8b828c0161310b565b975050604061324b8b828c01613141565b965050606061325c8b828c01613141565b955050608089013567ffffffffffffffff81111561327d5761327c6130e5565b5b6132898b828c016131a5565b945094505060a089013567ffffffffffffffff8111156132ac576132ab6130e5565b5b6132b88b828c016131a5565b92509250509295985092959890939650565b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613313826132ca565b810181811067ffffffffffffffff82111715613332576133316132db565b5b80604052505050565b60006133456130d6565b9050613351828261330a565b919050565b600067ffffffffffffffff821115613371576133706132db565b5b602082029050602081019050919050565b600061339561339084613356565b61333b565b905080838252602082019050602084028301858111156133b8576133b76131a0565b5b835b818110156133e157806133cd888261310b565b8452602084019350506020810190506133ba565b5050509392505050565b600082601f830112613400576133ff613196565b5b8135613410848260208601613382565b91505092915050565b60006020828403121561342f5761342e6130e0565b5b600082013567ffffffffffffffff81111561344d5761344c6130e5565b5b613459848285016133eb565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61349781613120565b82525050565b60006134a9838361348e565b60208301905092915050565b6000602082019050919050565b60006134cd82613462565b6134d7818561346d565b93506134e28361347e565b8060005b838110156135135781516134fa888261349d565b9750613505836134b5565b9250506001810190506134e6565b5085935050505092915050565b6000602082019050818103600083015261353a81846134c2565b905092915050565b600060208284031215613558576135576130e0565b5b60006135668482850161310b565b91505092915050565b61357881613120565b82525050565b6000602082019050613593600083018461356f565b92915050565b600080fd5b600080fd5b600067ffffffffffffffff8211156135be576135bd6132db565b5b602082029050602081019050919050565b6000604082840312156135e5576135e4613599565b5b6135ef604061333b565b905060006135ff8482850161310b565b600083015250602061361384828501613141565b60208301525092915050565b600061363261362d846135a3565b61333b565b90508083825260208201905060408402830185811115613655576136546131a0565b5b835b8181101561367e578061366a88826135cf565b845260208401935050604081019050613657565b5050509392505050565b600082601f83011261369d5761369c613196565b5b81356136ad84826020860161361f565b91505092915050565b6000608082840312156136cc576136cb613599565b5b6136d6608061333b565b9050600082013567ffffffffffffffff8111156136f6576136f561359e565b5b61370284828501613688565b600083015250602082013567ffffffffffffffff8111156137265761372561359e565b5b61373284828501613688565b602083015250604082013567ffffffffffffffff8111156137565761375561359e565b5b61376284828501613688565b604083015250606082013567ffffffffffffffff8111156137865761378561359e565b5b61379284828501613688565b60608301525092915050565b6000602082840312156137b4576137b36130e0565b5b600082013567ffffffffffffffff8111156137d2576137d16130e5565b5b6137de848285016136b6565b91505092915050565b6000602082840312156137fd576137fc6130e0565b5b600061380b84828501613141565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b613849816130ea565b82525050565b6040820160008201516138656000850182613840565b506020820151613878602085018261348e565b50505050565b600061388a838361384f565b60408301905092915050565b6000602082019050919050565b60006138ae82613814565b6138b8818561381f565b93506138c383613830565b8060005b838110156138f45781516138db888261387e565b97506138e683613896565b9250506001810190506138c7565b5085935050505092915050565b6000608083016000830151848203600086015261391e82826138a3565b9150506020830151848203602086015261393882826138a3565b9150506040830151848203604086015261395282826138a3565b9150506060830151848203606086015261396c82826138a3565b9150508091505092915050565b600060208201905081810360008301526139938184613901565b905092915050565b6139a4816130ea565b82525050565b60006020820190506139bf600083018461399b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006139f0826139c5565b9050919050565b613a00816139e5565b8114613a0b57600080fd5b50565b600081519050613a1d816139f7565b92915050565b600060208284031215613a3957613a386130e0565b5b6000613a4784828501613a0e565b91505092915050565b613a59816139e5565b82525050565b6000602082019050613a746000830184613a50565b92915050565b600081519050613a898161312a565b92915050565b600060208284031215613aa557613aa46130e0565b5b6000613ab384828501613a7a565b91505092915050565b600082825260208201905092915050565b7f5468657265206973206e6f7420656e6f7567682066756e647320746f2072657060008201527f6179000000000000000000000000000000000000000000000000000000000000602082015250565b6000613b29602283613abc565b9150613b3482613acd565b604082019050919050565b60006020820190508181036000830152613b5881613b1c565b9050919050565b6000604082019050613b74600083018561356f565b613b81602083018461356f565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613bbe601f83613abc565b9150613bc982613b88565b602082019050919050565b60006020820190508181036000830152613bed81613bb1565b9050919050565b600060ff82169050919050565b613c0a81613bf4565b8114613c1557600080fd5b50565b600081519050613c2781613c01565b92915050565b600060208284031215613c4357613c426130e0565b5b6000613c5184828501613c18565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008160011c9050919050565b6000808291508390505b6001851115613ce057808604811115613cbc57613cbb613c5a565b5b6001851615613ccb5780820291505b8081029050613cd985613c89565b9450613ca0565b94509492505050565b600082613cf95760019050613db5565b81613d075760009050613db5565b8160018114613d1d5760028114613d2757613d56565b6001915050613db5565b60ff841115613d3957613d38613c5a565b5b8360020a915084821115613d5057613d4f613c5a565b5b50613db5565b5060208310610133831016604e8410600b8410161715613d8b5782820a905083811115613d8657613d85613c5a565b5b613db5565b613d988484846001613c96565b92509050818404811115613daf57613dae613c5a565b5b81810290505b9392505050565b6000613dc782613120565b9150613dd283613bf4565b9250613dff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484613ce9565b905092915050565b6000613e1282613120565b9150613e1d83613120565b9250828202613e2b81613120565b91508282048414831517613e4257613e41613c5a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000613e8382613120565b9150613e8e83613120565b925082613e9e57613e9d613e49565b5b828204905092915050565b6000604082019050613ebe600083018561399b565b613ecb602083018461356f565b9392505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b6000613f2e603383613abc565b9150613f3982613ed2565b604082019050919050565b60006020820190508181036000830152613f5d81613f21565b9050919050565b7f496e73756666696369656e742061737365747320746f2066756c6c792072657060008201527f6179207468652064656274000000000000000000000000000000000000000000602082015250565b6000613fc0602b83613abc565b9150613fcb82613f64565b604082019050919050565b60006020820190508181036000830152613fef81613fb3565b9050919050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61402b816139e5565b82525050565b600061403d8383614022565b60208301905092915050565b6000602082019050919050565b600061406182613ff6565b61406b8185614001565b935061407683614012565b8060005b838110156140a757815161408e8882614031565b975061409983614049565b92505060018101905061407a565b5085935050505092915050565b60006080830160008301516140cc600086018261348e565b5060208301516140df602086018261348e565b50604083015184820360408601526140f78282614056565b915050606083015184820360608601526141118282614056565b9150508091505092915050565b6000819050919050565b6000819050919050565b600061414d6141486141438461411e565b614128565b613120565b9050919050565b61415d81614132565b82525050565b6000606082019050818103600083015261417d81866140b4565b905061418c6020830185613a50565b6141996040830184614154565b949350505050565b60006060820190506141b6600083018661356f565b6141c3602083018561356f565b6141d0604083018461356f565b949350505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006142108383613840565b60208301905092915050565b6000602082019050919050565b6000614234826141d8565b61423e81856141e3565b9350614249836141f4565b8060005b8381101561427a5781516142618882614204565b975061426c8361421c565b92505060018101905061424d565b5085935050505092915050565b600060208201905081810360008301526142a18184614229565b905092915050565b600067ffffffffffffffff8211156142c4576142c36132db565b5b602082029050602081019050919050565b60006142e86142e3846142a9565b61333b565b9050808382526020820190506020840283018581111561430b5761430a6131a0565b5b835b8181101561433457806143208882613a7a565b84526020840193505060208101905061430d565b5050509392505050565b600082601f83011261435357614352613196565b5b81516143638482602086016142d5565b91505092915050565b600060208284031215614382576143816130e0565b5b600082015167ffffffffffffffff8111156143a05761439f6130e5565b5b6143ac8482850161433e565b91505092915050565b7f474c500000000000000000000000000000000000000000000000000000000000815250565b60006040820190506143ef600083016143b5565b6143fc602083018461356f565b92915050565b600081519050614411816130f4565b92915050565b60006040828403121561442d5761442c613599565b5b614437604061333b565b9050600061444784828501614402565b600083015250602061445b84828501613a7a565b60208301525092915050565b600061447a614475846135a3565b61333b565b9050808382526020820190506040840283018581111561449d5761449c6131a0565b5b835b818110156144c657806144b28882614417565b84526020840193505060408101905061449f565b5050509392505050565b600082601f8301126144e5576144e4613196565b5b81516144f5848260208601614467565b91505092915050565b60006080828403121561451457614513613599565b5b61451e608061333b565b9050600082015167ffffffffffffffff81111561453e5761453d61359e565b5b61454a848285016144d0565b600083015250602082015167ffffffffffffffff81111561456e5761456d61359e565b5b61457a848285016144d0565b602083015250604082015167ffffffffffffffff81111561459e5761459d61359e565b5b6145aa848285016144d0565b604083015250606082015167ffffffffffffffff8111156145ce576145cd61359e565b5b6145da848285016144d0565b60608301525092915050565b6000602082840312156145fc576145fb6130e0565b5b600082015167ffffffffffffffff81111561461a576146196130e5565b5b614626848285016144fe565b91505092915050565b60008115159050919050565b6146448161462f565b82525050565b600060408201905061465f600083018561399b565b61466c602083018461463b565b9392505050565b61467c8161462f565b811461468757600080fd5b50565b60008151905061469981614673565b92915050565b6000602082840312156146b5576146b46130e0565b5b60006146c38482850161468a565b91505092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000614728602983613abc565b9150614733826146cc565b604082019050919050565b600060208201905081810360008301526147578161471b565b9050919050565b60006040820190506147736000830185613a50565b614780602083018461356f565b9392505050565b600081519050919050565b600081905092915050565b60005b838110156147bb5780820151818401526020810190506147a0565b60008484015250505050565b60006147d282614787565b6147dc8185614792565b93506147ec81856020860161479d565b80840191505092915050565b600061480482846147c7565b915081905092915050565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b600061486b602b83613abc565b91506148768261480f565b604082019050919050565b6000602082019050818103600083015261489a8161485e565b9050919050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b60006148fd602d83613abc565b9150614908826148a1565b604082019050919050565b6000602082019050818103600083015261492c816148f0565b9050919050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000614969601683613abc565b915061497482614933565b602082019050919050565b600060208201905081810360008301526149988161495c565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b60006149d5601383613abc565b91506149e08261499f565b602082019050919050565b60006020820190508181036000830152614a04816149c8565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b614a4081614a0b565b82525050565b6000602082019050614a5b6000830184614a37565b92915050565b6000606082019050614a766000830186613a50565b614a836020830185613a50565b614a90604083018461356f565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000614af4603183613abc565b9150614aff82614a98565b604082019050919050565b60006020820190508181036000830152614b2381614ae7565b9050919050565b6000614b3582613120565b9150614b4083613120565b9250828201905080821115614b5857614b57613c5a565b5b92915050565b600081519050919050565b6000614b7482614b5e565b614b7e8185613abc565b9350614b8e81856020860161479d565b614b97816132ca565b840191505092915050565b60006020820190508181036000830152614bbc8184614b69565b905092915050565b600082825260208201905092915050565b6000614be082614787565b614bea8185614bc4565b9350614bfa81856020860161479d565b614c03816132ca565b840191505092915050565b60006020820190508181036000830152614c288184614bd5565b905092915050565b6000614c3b82613120565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203614c6d57614c6c613c5a565b5b600182019050919050565b6000614c8382613120565b9150614c8e83613120565b9250828203905081811115614ca657614ca5613c5a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212209962df45cf2f4a649372c6272c143c21b433927cb0aadb2d7945c99dda10bc4064736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "events": {
      "Borrowed(address,bytes32,uint256,uint256)": {
        "details": "emitted when funds are borrowed from the pool",
        "params": {
          "amount": "of the borrowed funds",
          "asset": "borrowed by an= user",
          "timestamp": "time of the borrowing*",
          "user": "the address of borrower"
        }
      },
      "DebtSwap(address,address,address,uint256,uint256,uint256)": {
        "details": "emitted after a debt swap",
        "params": {
          "borrowAmount": "the amount of toToken that was borrowed",
          "fromToken": "token that was repaid",
          "repayAmount": "the amount of fromToken that was repaid",
          "timestamp": "time of debt swap*",
          "toToken": "token that was borrowed",
          "user": "the address which performed the debt swap"
        }
      },
      "Funded(address,bytes32,uint256,uint256)": {
        "details": "emitted after a loan is funded",
        "params": {
          "amount": "the amount of funds",
          "asset": "funded by a user",
          "timestamp": "time of funding*",
          "user": "the address which funded the loan"
        }
      },
      "Repaid(address,bytes32,uint256,uint256)": {
        "details": "emitted when funds are repaid to the pool",
        "params": {
          "amount": "of repaid funds",
          "asset": "asset repaid by a user",
          "timestamp": "of the repayment*",
          "user": "the address initiating repayment"
        }
      },
      "Withdrawn(address,bytes32,uint256,uint256)": {
        "details": "emitted after the funds are withdrawn from the loan",
        "params": {
          "amount": "of funds withdrawn",
          "asset": "withdrawn by a user",
          "timestamp": "of the withdrawal*",
          "user": "the address which withdraws funds from the loan"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "borrow(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_amount": "of funds to borrow*",
          "_asset": "to be borrowed"
        }
      },
      "fund(bytes32,uint256)": {
        "details": "Requires approval for ERC20 token on frontend side",
        "params": {
          "_amount": "to be funded*",
          "_fundedAsset": "asset to be funded"
        }
      },
      "fundGLP(uint256)": {
        "details": "Requires approval for stakedGLP token on frontend side",
        "params": {
          "_amount": "to be funded*"
        }
      },
      "repay(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_amount": "of funds to repay*",
          "_asset": "to be repaid"
        }
      },
      "swapDebt(bytes32,bytes32,uint256,uint256,address[],address[])": {
        "details": "This function uses the redstone-evm-connector_repayAmount and __borrowAmount can be used to control the slippage.",
        "params": {
          "_adapters": "yield yak swap adapters",
          "_borrowAmount": "debt borrow amount",
          "_fromAsset": "existing debt asset",
          "_path": "yield yak swap path",
          "_repayAmount": "debt repay amount",
          "_toAsset": "new debt asset"
        }
      },
      "withdraw(bytes32,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_amount": "to be withdrawn*",
          "_withdrawnAsset": "asset to be withdrawn"
        }
      },
      "withdrawGLP(uint256)": {
        "params": {
          "_amount": "to be withdrawn*"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "borrow(bytes32,uint256)": {
        "notice": "Borrows funds from the pool"
      },
      "fund(bytes32,uint256)": {
        "notice": "Funds the loan with a specified amount of a defined token"
      },
      "fundGLP(uint256)": {
        "notice": "Funds the loan with a specified amount of a GLP"
      },
      "repay(bytes32,uint256)": {
        "notice": "Repays funds to the pool"
      },
      "swapDebt(bytes32,bytes32,uint256,uint256,address[],address[])": {
        "notice": "Swap existing debt to another debt"
      },
      "withdraw(bytes32,uint256)": {
        "notice": "Withdraws an amount of a defined asset from the loan This method could be used to cash out profits from investments The loan needs to remain solvent after the withdrawal"
      },
      "withdrawGLP(uint256)": {
        "notice": "Withdraws specified amount of a GLP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7963,
        "contract": "contracts/facets/AssetsOperationsFacet.sol:AssetsOperationsFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}