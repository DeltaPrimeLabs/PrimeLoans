{
  "address": "0x881fa171A7b5bf5c84d213043037ab867ce4688c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "primeToken_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startTime_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InputLengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidStartTime",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidVestingPeriod",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitialized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserExists",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "VestingAlreadyStarted",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroClaimAmount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "totalAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cliffPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vestingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "VestingUserAdded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "claimFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimForWithAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimWithAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users_",
          "type": "address[]"
        },
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "cliffPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "vestingPeriod",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "grantClaimRightTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PrimeVesting.VestingInfo[]",
          "name": "vestingInfos_",
          "type": "tuple[]"
        },
        {
          "internalType": "bool",
          "name": "isLastBatch",
          "type": "bool"
        }
      ],
      "name": "initializeVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "primeToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendTokensToVesting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfos",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "cliffPeriod",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "vestingPeriod",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "grantClaimRightTo",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "totalAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct PrimeVesting.VestingInfo",
          "name": "info",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "claimed",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x54c8ff026348c1e7438fc8c99d556ab48b4ddcc392ac4d4e5929d2218ee722b2",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x881fa171A7b5bf5c84d213043037ab867ce4688c",
    "transactionIndex": 0,
    "gasUsed": "1159255",
    "logsBloom": "0x
    "blockHash": "0xf4718683d6f97105cdb2881c8285356ba0418a5afa8ca490fa2cab0cd5f8ce5d",
    "transactionHash": "0x54c8ff026348c1e7438fc8c99d556ab48b4ddcc392ac4d4e5929d2218ee722b2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 47418552,
        "transactionHash": "0x54c8ff026348c1e7438fc8c99d556ab48b4ddcc392ac4d4e5929d2218ee722b2",
        "address": "0x881fa171A7b5bf5c84d213043037ab867ce4688c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf4718683d6f97105cdb2881c8285356ba0418a5afa8ca490fa2cab0cd5f8ce5d"
      }
    ],
    "blockNumber": 47418552,
    "cumulativeGasUsed": "1159255",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x33C8036E99082B0C395374832FECF70c42C7F298",
    1719853200
  ],
  "numDeployments": 1,
  "solcInputHash": "a9f111f5427ac91540e0f38f0c98066c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"primeToken_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InputLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidStartTime\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitialized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VestingAlreadyStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroClaimAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cliffPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vestingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"VestingUserAdded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimForWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimWithAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users_\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"cliffPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"grantClaimRightTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimeVesting.VestingInfo[]\",\"name\":\"vestingInfos_\",\"type\":\"tuple[]\"},{\"internalType\":\"bool\",\"name\":\"isLastBatch\",\"type\":\"bool\"}],\"name\":\"initializeVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"primeToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendTokensToVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfos\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"cliffPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriod\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"grantClaimRightTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PrimeVesting.VestingInfo\",\"name\":\"info\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract distributing PRIME among vesting participants.\",\"errors\":{\"AlreadyInitialized()\":[{\"details\":\"Vesting already initialized\"}],\"InputLengthMismatch()\":[{\"details\":\"Input array lengths do not match\"}],\"InsufficientAllowance()\":[{\"details\":\"Insufficient allowance\"}],\"InsufficientBalance()\":[{\"details\":\"Insufficient balance\"}],\"InvalidAddress()\":[{\"details\":\"Invalid address\"}],\"InvalidStartTime()\":[{\"details\":\"Invalid vesting start time\"}],\"InvalidVestingPeriod()\":[{\"details\":\"Invalid vesting period\"}],\"NotInitialized()\":[{\"details\":\"Vesting not initialized\"}],\"NothingToClaim()\":[{\"details\":\"No claim available\"}],\"Unauthorized()\":[{\"details\":\"Trying to claim from unautorized account\"}],\"UserExists()\":[{\"details\":\"User already exists\"}],\"VestingAlreadyStarted()\":[{\"details\":\"Vesting already started\"}],\"ZeroClaimAmount()\":[{\"details\":\"Trying to claim 0 amount\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PRIME vesting contract\",\"version\":1},\"userdoc\":{\"events\":{\"Claimed(address,address,uint256,uint256)\":{\"notice\":\"Events\"}},\"kind\":\"user\",\"methods\":{\"claim()\":{\"notice\":\"Public functions\"},\"constructor\":{\"notice\":\"Constructor\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PrimeVesting.sol\":\"PrimeVesting\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"contracts/PrimeVesting.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ec8ad20352ed7105f63a2430665145c7f25c5cb2;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title PRIME vesting contract\\n * @dev Contract distributing PRIME among vesting participants.\\n */\\ncontract PrimeVesting is Ownable, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    struct VestingInfo {\\n        uint32 cliffPeriod;\\n        uint32 vestingPeriod;\\n        address grantClaimRightTo;\\n        uint256 totalAmount;\\n    }\\n\\n    struct UserInfo {\\n        VestingInfo info;\\n        uint256 claimed;\\n    }\\n\\n    IERC20 public immutable primeToken;\\n\\n    uint256 public immutable startTime;\\n\\n    uint256 public totalAmount;\\n\\n    bool public vestingInitialized;\\n\\n    mapping(address => UserInfo) public userInfos;\\n\\n    /// Errors\\n\\n    /// @dev Trying to claim from unautorized account\\n    error Unauthorized();\\n\\n    /// @dev Input array lengths do not match\\n    error InputLengthMismatch();\\n\\n    /// @dev Invalid vesting start time\\n    error InvalidStartTime();\\n\\n    /// @dev Invalid address\\n    error InvalidAddress();\\n\\n    /// @dev Invalid vesting period\\n    error InvalidVestingPeriod();\\n\\n    /// @dev No claim available\\n    error NothingToClaim();\\n\\n    /// @dev Trying to claim 0 amount\\n    error ZeroClaimAmount();\\n\\n    /// @dev Vesting already initialized\\n    error AlreadyInitialized();\\n\\n    /// @dev User already exists\\n    error UserExists();\\n\\n    /// @dev Vesting not initialized\\n    error NotInitialized();\\n\\n    /// @dev Vesting already started\\n    error VestingAlreadyStarted();\\n\\n    /// @dev Insufficient allowance\\n    error InsufficientAllowance();\\n\\n    /// @dev Insufficient balance\\n    error InsufficientBalance();\\n\\n    /// Events\\n\\n    event Claimed(\\n        address indexed user,\\n        address indexed claimant,\\n        uint256 indexed amount,\\n        uint256 timestamp\\n    );\\n\\n    event VestingUserAdded(\\n        address indexed user,\\n        uint256 indexed totalAmount,\\n        uint256 cliffPeriod,\\n        uint256 vestingPeriod,\\n        uint256 timestamp\\n    );\\n\\n    /// Constructor\\n\\n    constructor(\\n        address primeToken_,\\n        uint256 startTime_\\n    ) {\\n        if (startTime_ < block.timestamp) {\\n            revert InvalidStartTime();\\n        }\\n        if (primeToken_ == address(0)) {\\n            revert InvalidAddress();\\n        }\\n\\n        primeToken = IERC20(primeToken_);\\n        startTime = startTime_;\\n    }\\n\\n    function initializeVesting(\\n        address[] memory users_,\\n        VestingInfo[] memory vestingInfos_,\\n        bool isLastBatch\\n    ) external onlyOwner {\\n        if(vestingInitialized){\\n            revert AlreadyInitialized();\\n        }\\n        if (users_.length != vestingInfos_.length) {\\n            revert InputLengthMismatch();\\n        }\\n        uint256 _totalAmount;\\n\\n        uint256 len = users_.length;\\n        for (uint256 i; i != len; ++i) {\\n            address user = users_[i];\\n            if (user == address(0)) {\\n                revert InvalidAddress();\\n            }\\n            if(vestingInfos_[i].vestingPeriod == 0){\\n                revert InvalidVestingPeriod();\\n            }\\n\\n            UserInfo storage userInfo = userInfos[user];\\n\\n            if(userInfo.info.totalAmount != 0){\\n                revert UserExists();\\n            }\\n\\n            userInfo.info = vestingInfos_[i];\\n            _totalAmount += userInfo.info.totalAmount;\\n\\n            emit VestingUserAdded(\\n                user,\\n                userInfo.info.totalAmount,\\n                userInfo.info.cliffPeriod,\\n                userInfo.info.vestingPeriod,\\n                block.timestamp\\n            );\\n        }\\n        totalAmount += _totalAmount;\\n\\n        if (isLastBatch) {\\n            vestingInitialized = true;\\n        }\\n    }\\n\\n    /// Public functions\\n\\n    function claim() external nonReentrant {\\n        _claimFor(msg.sender, msg.sender, _claimable(msg.sender));\\n    }\\n\\n    function claimWithAmount(uint256 amount) nonReentrant external {\\n        _claimFor(msg.sender, msg.sender, amount);\\n    }\\n\\n    function claimFor(address user) nonReentrant external {\\n        _claimFor(user, msg.sender, _claimable(user));\\n    }\\n\\n    function claimForWithAmount(address user, uint256 amount) nonReentrant external {\\n        _claimFor(user, msg.sender, amount);\\n    }\\n\\n    function claimable(address user) public view returns (uint256) {\\n        return _claimable(user);\\n    }\\n\\n    function sendTokensToVesting() external nonReentrant onlyOwner {\\n        if(!vestingInitialized){\\n            revert NotInitialized();\\n        }\\n        if(primeToken.balanceOf(owner()) < totalAmount){\\n            revert InsufficientBalance();\\n        }\\n        if(primeToken.allowance(owner(), address(this)) < totalAmount){\\n            revert InsufficientAllowance();\\n        }\\n        if(block.timestamp >= startTime){\\n            revert VestingAlreadyStarted();\\n        }\\n\\n        primeToken.safeTransferFrom(owner(), address(this), totalAmount);\\n    }\\n\\n    /// Internal functions\\n\\n    function _claimFor(address user, address claimant, uint256 amount) internal {\\n        UserInfo storage userInfo = userInfos[user];\\n\\n        if (user != claimant && userInfo.info.grantClaimRightTo != claimant) {\\n            revert Unauthorized();\\n        }\\n\\n        uint256 claimableAmount = _claimable(user);\\n        if (claimableAmount == 0) {\\n            revert NothingToClaim();\\n        }\\n        amount = Math.min(amount, claimableAmount);\\n        if (amount == 0) {\\n            revert ZeroClaimAmount();\\n        }\\n\\n        userInfo.claimed += amount;\\n\\n        primeToken.safeTransfer(user, amount);\\n\\n        emit Claimed(user, claimant, amount, block.timestamp);\\n    }\\n\\n    function _claimable(address user) internal view returns (uint256) {\\n        UserInfo storage userInfo = userInfos[user];\\n\\n        if(userInfo.info.totalAmount == 0){\\n            return 0;\\n        }\\n\\n        uint256 cliffEnd = startTime + userInfo.info.cliffPeriod;\\n        if (cliffEnd >= block.timestamp) {\\n            return 0;\\n        }\\n\\n        uint256 duration = Math.min(\\n            block.timestamp - cliffEnd,\\n            userInfo.info.vestingPeriod\\n        );\\n\\n        return\\n            (userInfo.info.totalAmount * duration) /\\n            userInfo.info.vestingPeriod -\\n            userInfo.claimed;\\n    }\\n}\\n\",\"keccak256\":\"0x489ff7a1546d46c9fc1196a573f1b36dfa1253c85e91d4fc5bd558ce7f68a283\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b5060405161148f38038061148f83398101604081905261002f916100ea565b6100383361009a565b600180554281101561005d57604051632ca4094f60e21b815260040160405180910390fd5b6001600160a01b0382166100845760405163e6c4247b60e01b815260040160405180910390fd5b6001600160a01b0390911660805260a052610124565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100fd57600080fd5b82516001600160a01b038116811461011457600080fd5b6020939093015192949293505050565b60805160a05161131c610173600039600081816101f90152818161073301526108ff015260008181610289015281816105b90152818161066f015281816107890152610ad7015261131c6000f3fe608060405234801561001057600080fd5b50600436106100c55760003560e01c80631a39d8ef146100ca57806329ad504f146100e6578063402914f5146100fb57806343b0215f1461010e5780634e71d92d146101c7578063715018a6146101cf578063721d3f7c146101d757806378e97925146101f45780638da5cb5b1461021b578063a4557a1114610230578063a8ed0c0614610243578063ddeae0331461024b578063e2c153781461025e578063f2fde38b14610271578063fe5a451a14610284575b600080fd5b6100d360025481565b6040519081526020015b60405180910390f35b6100f96100f4366004611058565b6102ab565b005b6100d3610109366004611127565b61050a565b61017c61011c366004611127565b6004602090815260009182526040918290208251608081018452815463ffffffff8082168352600160201b82041693820193909352600160401b9092046001600160a01b0316928201929092526001820154606082015260029091015482565b60408051835163ffffffff908116825260208086015190911690820152838201516001600160a01b03169181019190915260609283015192810192909252608082015260a0016100dd565b6100f961051b565b6100f9610541565b6003546101e49060ff1681565b60405190151581526020016100dd565b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b610223610553565b6040516100dd9190611142565b6100f961023e366004611156565b610562565b6100f9610581565b6100f9610259366004611127565b6107b2565b6100f961026c36600461116f565b6107c8565b6100f961027f366004611127565b6107e8565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6102b3610863565b60035460ff16156102d65760405162dc149f60e41b815260040160405180910390fd5b81518351146102f85760405163aaad13f760e01b815260040160405180910390fd5b8251600090815b8181146104d757600086828151811061031a5761031a611199565b6020026020010151905060006001600160a01b0316816001600160a01b0316036103575760405163e6c4247b60e01b815260040160405180910390fd5b85828151811061036957610369611199565b60200260200101516020015163ffffffff1660000361039b5760405163ca6075df60e01b815260040160405180910390fd5b6001600160a01b03811660009081526004602052604090206001810154156103d65760405163877ee34960e01b815260040160405180910390fd5b8683815181106103e8576103e8611199565b602090810291909101810151805183549282015160408301516001600160a01b0316600160401b02600160401b600160e01b031963ffffffff928316600160201b026001600160401b031990961692909316919091179390931716919091178255606001516001820181905561045e90866111c5565b600182015482546040805163ffffffff8084168252600160201b90930490921660208301524290820152919650906001600160a01b038416907f7e182484e259c2dce5375595d9c324ebcce431c378614bd30bf2824bec10010d9060600160405180910390a35050806104d0906111d8565b90506102ff565b5081600260008282546104ea91906111c5565b90915550508215610503576003805460ff191660011790555b5050505050565b6000610515826108c2565b92915050565b6105236109a1565b6105363333610531336108c2565b6109fa565b61053f60018055565b565b610549610863565b61053f6000610b53565b6000546001600160a01b031690565b61056a6109a1565b6105753333836109fa565b61057e60018055565b50565b6105896109a1565b610591610863565b60035460ff166105b4576040516321c4e35760e21b815260040160405180910390fd5b6002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082316105ee610553565b6040518263ffffffff1660e01b815260040161060a9190611142565b602060405180830381865afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b91906111f1565b101561066a57604051631e9acf1760e31b815260040160405180910390fd5b6002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dd62ed3e6106a4610553565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906111f1565b1015610731576040516313be252b60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004210610771576040516372de7acd60e01b815260040160405180910390fd5b61053661077c610553565b6002546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691903090610ba3565b6107ba6109a1565b6105758133610531846108c2565b6107d06109a1565b6107db8233836109fa565b6107e460018055565b5050565b6107f0610863565b6001600160a01b03811661085a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61057e81610b53565b3361086c610553565b6001600160a01b03161461053f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610851565b6001600160a01b0381166000908152600460205260408120600181015482036108ee5750600092915050565b80546000906109239063ffffffff167f00000000000000000000000000000000000000000000000000000000000000006111c5565b9050428110610936575060009392505050565b6000610959610945834261120a565b8454600160201b900463ffffffff16610c14565b6002840154845460018601549293509091600160201b90910463ffffffff169061098490849061121d565b61098e9190611234565b610998919061120a565b95945050505050565b6002600154036109f35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610851565b6002600155565b6001600160a01b03808416600081815260046020526040902091841614801590610a38575080546001600160a01b03848116600160401b9092041614155b15610a55576040516282b42960e81b815260040160405180910390fd5b6000610a60856108c2565b905080600003610a83576040516312d37ee560e31b815260040160405180910390fd5b610a8d8382610c14565b925082600003610ab0576040516360640efd60e11b815260040160405180910390fd5b82826002016000828254610ac491906111c5565b90915550610afe90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168685610c2c565b82846001600160a01b0316866001600160a01b03167f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e6842604051610b4491815260200190565b60405180910390a45050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c0e9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c61565b50505050565b6000818310610c235781610c25565b825b9392505050565b6040516001600160a01b038316602482015260448101829052610c5c90849063a9059cbb60e01b90606401610bd7565b505050565b6000610cb6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d369092919063ffffffff16565b9050805160001480610cd7575080806020019051810190610cd79190611256565b610c5c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610851565b6060610d458484600085610d4d565b949350505050565b606082471015610dae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610851565b600080866001600160a01b03168587604051610dca9190611297565b60006040518083038185875af1925050503d8060008114610e07576040519150601f19603f3d011682016040523d82523d6000602084013e610e0c565b606091505b5091509150610e1d87838387610e28565b979650505050505050565b60608315610e97578251600003610e90576001600160a01b0385163b610e905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610851565b5081610d45565b610d458383815115610eac5781518083602001fd5b8060405162461bcd60e51b815260040161085191906112b3565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610efe57610efe610ec6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610f2c57610f2c610ec6565b604052919050565b60006001600160401b03821115610f4d57610f4d610ec6565b5060051b60200190565b80356001600160a01b0381168114610f6e57600080fd5b919050565b803563ffffffff81168114610f6e57600080fd5b600082601f830112610f9857600080fd5b81356020610fad610fa883610f34565b610f04565b82815260079290921b84018101918181019086841115610fcc57600080fd5b8286015b848110156110345760808189031215610fe95760008081fd5b610ff1610edc565b610ffa82610f73565b8152611007858301610f73565b858201526040611018818401610f57565b9082015260608281013590820152835291830191608001610fd0565b509695505050505050565b801515811461057e57600080fd5b8035610f6e8161103f565b60008060006060848603121561106d57600080fd5b83356001600160401b038082111561108457600080fd5b818601915086601f83011261109857600080fd5b813560206110a8610fa883610f34565b82815260059290921b8401810191818101908a8411156110c757600080fd5b948201945b838610156110ec576110dd86610f57565b825294820194908201906110cc565b9750508701359250508082111561110257600080fd5b5061110f86828701610f87565b92505061111e6040850161104d565b90509250925092565b60006020828403121561113957600080fd5b610c2582610f57565b6001600160a01b0391909116815260200190565b60006020828403121561116857600080fd5b5035919050565b6000806040838503121561118257600080fd5b61118b83610f57565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610515576105156111af565b6000600182016111ea576111ea6111af565b5060010190565b60006020828403121561120357600080fd5b5051919050565b81810381811115610515576105156111af565b8082028115828204841417610515576105156111af565b60008261125157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561126857600080fd5b8151610c258161103f565b60005b8381101561128e578181015183820152602001611276565b50506000910152565b600082516112a9818460208701611273565b9190910192915050565b60208152600082518060208401526112d2816040850160208701611273565b601f01601f1916919091016040019291505056fea26469706673582212208019c9dca1d11c70f09f11b9dc6b47e5491d7a5b3fd3601c7f9fd843923119f364736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100c55760003560e01c80631a39d8ef146100ca57806329ad504f146100e6578063402914f5146100fb57806343b0215f1461010e5780634e71d92d146101c7578063715018a6146101cf578063721d3f7c146101d757806378e97925146101f45780638da5cb5b1461021b578063a4557a1114610230578063a8ed0c0614610243578063ddeae0331461024b578063e2c153781461025e578063f2fde38b14610271578063fe5a451a14610284575b600080fd5b6100d360025481565b6040519081526020015b60405180910390f35b6100f96100f4366004611058565b6102ab565b005b6100d3610109366004611127565b61050a565b61017c61011c366004611127565b6004602090815260009182526040918290208251608081018452815463ffffffff8082168352600160201b82041693820193909352600160401b9092046001600160a01b0316928201929092526001820154606082015260029091015482565b60408051835163ffffffff908116825260208086015190911690820152838201516001600160a01b03169181019190915260609283015192810192909252608082015260a0016100dd565b6100f961051b565b6100f9610541565b6003546101e49060ff1681565b60405190151581526020016100dd565b6100d37f000000000000000000000000000000000000000000000000000000000000000081565b610223610553565b6040516100dd9190611142565b6100f961023e366004611156565b610562565b6100f9610581565b6100f9610259366004611127565b6107b2565b6100f961026c36600461116f565b6107c8565b6100f961027f366004611127565b6107e8565b6102237f000000000000000000000000000000000000000000000000000000000000000081565b6102b3610863565b60035460ff16156102d65760405162dc149f60e41b815260040160405180910390fd5b81518351146102f85760405163aaad13f760e01b815260040160405180910390fd5b8251600090815b8181146104d757600086828151811061031a5761031a611199565b6020026020010151905060006001600160a01b0316816001600160a01b0316036103575760405163e6c4247b60e01b815260040160405180910390fd5b85828151811061036957610369611199565b60200260200101516020015163ffffffff1660000361039b5760405163ca6075df60e01b815260040160405180910390fd5b6001600160a01b03811660009081526004602052604090206001810154156103d65760405163877ee34960e01b815260040160405180910390fd5b8683815181106103e8576103e8611199565b602090810291909101810151805183549282015160408301516001600160a01b0316600160401b02600160401b600160e01b031963ffffffff928316600160201b026001600160401b031990961692909316919091179390931716919091178255606001516001820181905561045e90866111c5565b600182015482546040805163ffffffff8084168252600160201b90930490921660208301524290820152919650906001600160a01b038416907f7e182484e259c2dce5375595d9c324ebcce431c378614bd30bf2824bec10010d9060600160405180910390a35050806104d0906111d8565b90506102ff565b5081600260008282546104ea91906111c5565b90915550508215610503576003805460ff191660011790555b5050505050565b6000610515826108c2565b92915050565b6105236109a1565b6105363333610531336108c2565b6109fa565b61053f60018055565b565b610549610863565b61053f6000610b53565b6000546001600160a01b031690565b61056a6109a1565b6105753333836109fa565b61057e60018055565b50565b6105896109a1565b610591610863565b60035460ff166105b4576040516321c4e35760e21b815260040160405180910390fd5b6002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166370a082316105ee610553565b6040518263ffffffff1660e01b815260040161060a9190611142565b602060405180830381865afa158015610627573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064b91906111f1565b101561066a57604051631e9acf1760e31b815260040160405180910390fd5b6002547f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dd62ed3e6106a4610553565b6040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604401602060405180830381865afa1580156106ee573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071291906111f1565b1015610731576040516313be252b60e01b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004210610771576040516372de7acd60e01b815260040160405180910390fd5b61053661077c610553565b6002546001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691903090610ba3565b6107ba6109a1565b6105758133610531846108c2565b6107d06109a1565b6107db8233836109fa565b6107e460018055565b5050565b6107f0610863565b6001600160a01b03811661085a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b61057e81610b53565b3361086c610553565b6001600160a01b03161461053f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610851565b6001600160a01b0381166000908152600460205260408120600181015482036108ee5750600092915050565b80546000906109239063ffffffff167f00000000000000000000000000000000000000000000000000000000000000006111c5565b9050428110610936575060009392505050565b6000610959610945834261120a565b8454600160201b900463ffffffff16610c14565b6002840154845460018601549293509091600160201b90910463ffffffff169061098490849061121d565b61098e9190611234565b610998919061120a565b95945050505050565b6002600154036109f35760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610851565b6002600155565b6001600160a01b03808416600081815260046020526040902091841614801590610a38575080546001600160a01b03848116600160401b9092041614155b15610a55576040516282b42960e81b815260040160405180910390fd5b6000610a60856108c2565b905080600003610a83576040516312d37ee560e31b815260040160405180910390fd5b610a8d8382610c14565b925082600003610ab0576040516360640efd60e11b815260040160405180910390fd5b82826002016000828254610ac491906111c5565b90915550610afe90506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168685610c2c565b82846001600160a01b0316866001600160a01b03167f2f6639d24651730c7bf57c95ddbf96d66d11477e4ec626876f92c22e5f365e6842604051610b4491815260200190565b60405180910390a45050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610c0e9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610c61565b50505050565b6000818310610c235781610c25565b825b9392505050565b6040516001600160a01b038316602482015260448101829052610c5c90849063a9059cbb60e01b90606401610bd7565b505050565b6000610cb6826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610d369092919063ffffffff16565b9050805160001480610cd7575080806020019051810190610cd79190611256565b610c5c5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610851565b6060610d458484600085610d4d565b949350505050565b606082471015610dae5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610851565b600080866001600160a01b03168587604051610dca9190611297565b60006040518083038185875af1925050503d8060008114610e07576040519150601f19603f3d011682016040523d82523d6000602084013e610e0c565b606091505b5091509150610e1d87838387610e28565b979650505050505050565b60608315610e97578251600003610e90576001600160a01b0385163b610e905760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610851565b5081610d45565b610d458383815115610eac5781518083602001fd5b8060405162461bcd60e51b815260040161085191906112b3565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b0381118282101715610efe57610efe610ec6565b60405290565b604051601f8201601f191681016001600160401b0381118282101715610f2c57610f2c610ec6565b604052919050565b60006001600160401b03821115610f4d57610f4d610ec6565b5060051b60200190565b80356001600160a01b0381168114610f6e57600080fd5b919050565b803563ffffffff81168114610f6e57600080fd5b600082601f830112610f9857600080fd5b81356020610fad610fa883610f34565b610f04565b82815260079290921b84018101918181019086841115610fcc57600080fd5b8286015b848110156110345760808189031215610fe95760008081fd5b610ff1610edc565b610ffa82610f73565b8152611007858301610f73565b858201526040611018818401610f57565b9082015260608281013590820152835291830191608001610fd0565b509695505050505050565b801515811461057e57600080fd5b8035610f6e8161103f565b60008060006060848603121561106d57600080fd5b83356001600160401b038082111561108457600080fd5b818601915086601f83011261109857600080fd5b813560206110a8610fa883610f34565b82815260059290921b8401810191818101908a8411156110c757600080fd5b948201945b838610156110ec576110dd86610f57565b825294820194908201906110cc565b9750508701359250508082111561110257600080fd5b5061110f86828701610f87565b92505061111e6040850161104d565b90509250925092565b60006020828403121561113957600080fd5b610c2582610f57565b6001600160a01b0391909116815260200190565b60006020828403121561116857600080fd5b5035919050565b6000806040838503121561118257600080fd5b61118b83610f57565b946020939093013593505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610515576105156111af565b6000600182016111ea576111ea6111af565b5060010190565b60006020828403121561120357600080fd5b5051919050565b81810381811115610515576105156111af565b8082028115828204841417610515576105156111af565b60008261125157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561126857600080fd5b8151610c258161103f565b60005b8381101561128e578181015183820152602001611276565b50506000910152565b600082516112a9818460208701611273565b9190910192915050565b60208152600082518060208401526112d2816040850160208701611273565b601f01601f1916919091016040019291505056fea26469706673582212208019c9dca1d11c70f09f11b9dc6b47e5491d7a5b3fd3601c7f9fd843923119f364736f6c63430008110033",
  "devdoc": {
    "details": "Contract distributing PRIME among vesting participants.",
    "errors": {
      "AlreadyInitialized()": [
        {
          "details": "Vesting already initialized"
        }
      ],
      "InputLengthMismatch()": [
        {
          "details": "Input array lengths do not match"
        }
      ],
      "InsufficientAllowance()": [
        {
          "details": "Insufficient allowance"
        }
      ],
      "InsufficientBalance()": [
        {
          "details": "Insufficient balance"
        }
      ],
      "InvalidAddress()": [
        {
          "details": "Invalid address"
        }
      ],
      "InvalidStartTime()": [
        {
          "details": "Invalid vesting start time"
        }
      ],
      "InvalidVestingPeriod()": [
        {
          "details": "Invalid vesting period"
        }
      ],
      "NotInitialized()": [
        {
          "details": "Vesting not initialized"
        }
      ],
      "NothingToClaim()": [
        {
          "details": "No claim available"
        }
      ],
      "Unauthorized()": [
        {
          "details": "Trying to claim from unautorized account"
        }
      ],
      "UserExists()": [
        {
          "details": "User already exists"
        }
      ],
      "VestingAlreadyStarted()": [
        {
          "details": "Vesting already started"
        }
      ],
      "ZeroClaimAmount()": [
        {
          "details": "Trying to claim 0 amount"
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PRIME vesting contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Claimed(address,address,uint256,uint256)": {
        "notice": "Events"
      }
    },
    "kind": "user",
    "methods": {
      "claim()": {
        "notice": "Public functions"
      },
      "constructor": {
        "notice": "Constructor"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PrimeVesting.sol:PrimeVesting",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/PrimeVesting.sol:PrimeVesting",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1923,
        "contract": "contracts/PrimeVesting.sol:PrimeVesting",
        "label": "totalAmount",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1925,
        "contract": "contracts/PrimeVesting.sol:PrimeVesting",
        "label": "vestingInitialized",
        "offset": 0,
        "slot": "3",
        "type": "t_bool"
      },
      {
        "astId": 1930,
        "contract": "contracts/PrimeVesting.sol:PrimeVesting",
        "label": "userInfos",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(UserInfo)1916_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(UserInfo)1916_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct PrimeVesting.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1916_storage"
      },
      "t_struct(UserInfo)1916_storage": {
        "encoding": "inplace",
        "label": "struct PrimeVesting.UserInfo",
        "members": [
          {
            "astId": 1913,
            "contract": "contracts/PrimeVesting.sol:PrimeVesting",
            "label": "info",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(VestingInfo)1910_storage"
          },
          {
            "astId": 1915,
            "contract": "contracts/PrimeVesting.sol:PrimeVesting",
            "label": "claimed",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(VestingInfo)1910_storage": {
        "encoding": "inplace",
        "label": "struct PrimeVesting.VestingInfo",
        "members": [
          {
            "astId": 1903,
            "contract": "contracts/PrimeVesting.sol:PrimeVesting",
            "label": "cliffPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1905,
            "contract": "contracts/PrimeVesting.sol:PrimeVesting",
            "label": "vestingPeriod",
            "offset": 4,
            "slot": "0",
            "type": "t_uint32"
          },
          {
            "astId": 1907,
            "contract": "contracts/PrimeVesting.sol:PrimeVesting",
            "label": "grantClaimRightTo",
            "offset": 8,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1909,
            "contract": "contracts/PrimeVesting.sol:PrimeVesting",
            "label": "totalAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}