{
  "address": "0xA4d395bDE6b0faDA7Db05b6f2F1e56347d3cc5F1",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "exposureGroup",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "IdentifierToExposureGroupSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "groupIdentifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevCurrentExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newCurrentExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProtocolCurrentExposureSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "identifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProtocolExposureChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "groupIdentifier",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "prevMaxExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMaxExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "currentExposure",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ProtocolExposureSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addPoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deactivateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "debtCoverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "debtCoverageStaked",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exposureDecrease",
          "type": "uint256"
        }
      ],
      "name": "decreaseProtocolExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowInactive",
          "type": "bool"
        }
      ],
      "name": "getAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSmartLoansFactoryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokensAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "groupToExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "current",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "max",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "identifierToExposureGroup",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "increasePendingExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "exposureIncrease",
          "type": "uint256"
        }
      ],
      "name": "increaseProtocolExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "debtCoverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "isTokenAssetActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pendingProtocolExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "pendingUserExposure",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_poolAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removePoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_tokenAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removeTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "groupIdentifiers",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "currentExposures",
          "type": "uint256[]"
        }
      ],
      "name": "setCurrentProtocolExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "stakedAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "coverage",
          "type": "uint256"
        }
      ],
      "name": "setDebtCoverageStaked",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "identifiers",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes32[]",
          "name": "exposureGroups",
          "type": "bytes32[]"
        }
      ],
      "name": "setIdentifiersToExposureGroups",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "groupIdentifiers",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256[]",
          "name": "maxExposures",
          "type": "uint256[]"
        }
      ],
      "name": "setMaxProtocolsExposure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "assetIdentifier",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "setPendingExposureToZero",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddressToSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24fc6f2d86c22fc4686b49d728e6fa33934d87c84e9dde5019267bd7631179a0",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xA4d395bDE6b0faDA7Db05b6f2F1e56347d3cc5F1",
    "transactionIndex": 0,
    "gasUsed": "2212200",
    "logsBloom": "0x
    "blockHash": "0x09c7d81a621974e8b08862787dd4061b22d7c142c907e6431556bcd8ad492079",
    "transactionHash": "0x24fc6f2d86c22fc4686b49d728e6fa33934d87c84e9dde5019267bd7631179a0",
    "logs": [],
    "blockNumber": 41584868,
    "cumulativeGasUsed": "2212200",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 7,
  "solcInputHash": "f07c577e86895f2134cc873a63a2a4bb",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"exposureGroup\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"IdentifierToExposureGroupSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"groupIdentifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevCurrentExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newCurrentExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtocolCurrentExposureSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"identifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtocolExposureChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"groupIdentifier\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevMaxExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMaxExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"currentExposure\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ProtocolExposureSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"addPoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"}],\"name\":\"addTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deactivateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtCoverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"debtCoverageStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exposureDecrease\",\"type\":\"uint256\"}],\"name\":\"decreaseProtocolExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowInactive\",\"type\":\"bool\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSmartLoansFactoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"groupToExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"identifierToExposureGroup\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"increasePendingExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exposureIncrease\",\"type\":\"uint256\"}],\"name\":\"increaseProtocolExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtCoverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenAssetActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingProtocolExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"pendingUserExposure\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_poolAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removePoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokenAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removeTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"groupIdentifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"currentExposures\",\"type\":\"uint256[]\"}],\"name\":\"setCurrentProtocolExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"stakedAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"coverage\",\"type\":\"uint256\"}],\"name\":\"setDebtCoverageStaked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"identifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"exposureGroups\",\"type\":\"bytes32[]\"}],\"name\":\"setIdentifiersToExposureGroups\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"groupIdentifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxExposures\",\"type\":\"uint256[]\"}],\"name\":\"setMaxProtocolsExposure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"assetIdentifier\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"setPendingExposureToZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"IdentifierToExposureGroupSet(address,bytes32,bytes32,uint256)\":{\"details\":\"emitted after associating identifier with a exposure group\",\"params\":{\"exposureGroup\":\"exposure group identifier\",\"identifier\":\"asset identifier\",\"performer\":\"an address of the wallet setting max exposure\",\"timestamp\":\"time of associating identifier with a exposure group*\"}},\"PoolAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a pool asset\",\"params\":{\"performer\":\"an address of wallet adding the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of the pool asset addition*\"}},\"PoolAssetRemoved(address,bytes32,address,uint256)\":{\"details\":\"emitted after removing a pool asset\",\"params\":{\"performer\":\"an address of wallet removing the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of a pool asset removal*\"}},\"ProtocolCurrentExposureSet(address,bytes32,uint256,uint256,uint256)\":{\"details\":\"emitted after setting max exposure for a given protocol.\",\"params\":{\"groupIdentifier\":\"exposure group identifier\",\"newCurrentExposure\":\"new max protocol exposure\",\"performer\":\"an address of the wallet setting max exposure\",\"prevCurrentExposure\":\"previous max protocol exposure\",\"timestamp\":\"time of setting max exposure*\"}},\"ProtocolExposureChanged(address,bytes32,uint256,uint256)\":{\"details\":\"emitted after changing current protocol exposure\",\"params\":{\"identifier\":\"group identifier\",\"newExposure\":\"new current protocol exposure\",\"performer\":\"an address of the wallet changing the exposure\",\"timestamp\":\"time of associating identifier with a exposure group*\"}},\"ProtocolExposureSet(address,bytes32,uint256,uint256,uint256,uint256)\":{\"details\":\"emitted after setting max exposure for a given protocol.\",\"params\":{\"currentExposure\":\"current protocol exposure\",\"groupIdentifier\":\"exposure group identifier\",\"newMaxExposure\":\"new max protocol exposure\",\"performer\":\"an address of the wallet setting max exposure\",\"prevMaxExposure\":\"previous max protocol exposure\",\"timestamp\":\"time of setting max exposure*\"}},\"TokenAssetActivated(address,address,uint256)\":{\"details\":\"emitted after activating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet activating a token asset\",\"timestamp\":\"time of activating a token asset*\"}},\"TokenAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet adding a token asset\",\"timestamp\":\"time of adding a token asset*\",\"tokenAsset\":\"token asset\"}},\"TokenAssetDeactivated(address,address,uint256)\":{\"details\":\"emitted after deactivating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet deactivating a token asset\",\"timestamp\":\"time of deactivating a token asset*\"}},\"TokenAssetRemoved(address,bytes32,uint256)\":{\"details\":\"emitted after removing a token asset\",\"params\":{\"performer\":\"an address of the wallet removing a token asset\",\"timestamp\":\"time a token asset removal*\",\"tokenAsset\":\"token asset\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetAddress(bytes32,bool)\":{\"notice\":\"Returns address of an asset*\"},\"getPoolAddress(bytes32)\":{\"notice\":\"Returns address of an asset's lending pool*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 163cb6d95659cf59c2c6c38001dc26adb791e5bc;\\npragma solidity 0.8.17;\\n\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract TokenManager is OwnableUpgradeable {\\n    /**\\n     * For adding supported assets\\n     **/\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    /**\\n     * For adding supported lending pools\\n     **/\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Exposure {\\n        uint256 current;\\n        uint256 max; // Setting max to 0 means no exposure limitations.\\n    }\\n\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    uint256 private constant _NOT_SUPPORTED = 0;\\n    uint256 private constant _INACTIVE = 1;\\n    uint256 private constant _ACTIVE = 2;\\n\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\n    mapping(address => uint256) private tokenPositionInList;\\n    // used for defining different leverage ratios for tokens\\n    mapping(address => uint256) public debtCoverage;\\n    address[] public supportedTokensList;\\n\\n    mapping(address => uint256) public tokenToStatus;\\n    // used for defining different leverage ratios for staked assets\\n    mapping(bytes32 => uint256) public debtCoverageStaked;\\n\\n    mapping(bytes32 => bytes32) public identifierToExposureGroup;\\n    mapping(bytes32 => Exposure) public groupToExposure;\\n\\n    mapping(address => mapping(bytes32 => uint256)) public pendingUserExposure;\\n    mapping(bytes32 => uint256) public pendingProtocolExposure;\\n\\n    function initialize(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) external initializer {\\n        __Ownable_init();\\n\\n        addTokenAssets(tokenAssets);\\n        addPoolAssets(poolAssets);\\n    }\\n\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\n        return assetToPoolAddress._inner._keys._inner._values;\\n    }\\n\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\n        return supportedTokensList;\\n    }\\n\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\n        return assetToTokenAddress._inner._keys._inner._values;\\n    }\\n\\n    /**\\n    * Returns address of an asset\\n    **/\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n        if (!allowInactive) {\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\n        }\\n\\n        return assetAddress;\\n    }\\n\\n    /**\\n    * Returns address of an asset's lending pool\\n    **/\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\n\\n        return assetAddress;\\n    }\\n\\n    function increaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureIncrease) public onlyPrimeAccountOrOwner {\\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\\n        if(group != \\\"\\\"){\\n            Exposure storage exposure = groupToExposure[group];\\n            if(exposure.max != 0){\\n                exposure.current += exposureIncrease;\\n                require(exposure.current <= exposure.max, \\\"Max asset exposure breached\\\");\\n                emit ProtocolExposureChanged(msg.sender, group, exposure.current, block.timestamp);\\n            }\\n        }\\n    }\\n\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) public onlyPrimeAccountOrOwner {\\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\\n        if(group != \\\"\\\"){\\n            Exposure storage exposure = groupToExposure[group];\\n            if(exposure.max != 0){\\n                exposure.current = exposure.current <= exposureDecrease ? 0 : exposure.current - exposureDecrease;\\n                emit ProtocolExposureChanged(msg.sender, group, exposure.current, block.timestamp);\\n            }\\n        }\\n    }\\n\\n    function setCurrentProtocolExposure(bytes32[] memory groupIdentifiers, uint256[] memory currentExposures) external onlyOwner {\\n        require(groupIdentifiers.length == currentExposures.length, \\\"Arrays lengths mismatch\\\");\\n        for (uint256 i = 0; i < groupIdentifiers.length; i++) {\\n            _setCurrentProtocolExposure(groupIdentifiers[i], currentExposures[i]);\\n        }\\n    }\\n\\n    function setMaxProtocolsExposure(bytes32[] memory groupIdentifiers, uint256[] memory maxExposures) public onlyOwner {\\n        require(groupIdentifiers.length == maxExposures.length, \\\"Arrays lengths mismatch\\\");\\n        for (uint256 i = 0; i < groupIdentifiers.length; i++) {\\n            _setMaxProtocolExposure(groupIdentifiers[i], maxExposures[i]);\\n        }\\n    }\\n\\n    function _setMaxProtocolExposure(bytes32 groupIdentifier, uint256 maxExposure) internal {\\n        require(groupIdentifier != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        uint256 prevExposure = groupToExposure[groupIdentifier].max;\\n        groupToExposure[groupIdentifier].max = maxExposure;\\n\\n        emit ProtocolExposureSet(msg.sender, groupIdentifier, prevExposure, maxExposure, groupToExposure[groupIdentifier].current , block.timestamp);\\n    }\\n\\n    function _setCurrentProtocolExposure(bytes32 groupIdentifier, uint256 currentExposure) internal {\\n        require(groupIdentifier != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        uint256 prevExposure = groupToExposure[groupIdentifier].current;\\n        groupToExposure[groupIdentifier].current = currentExposure;\\n\\n        emit ProtocolCurrentExposureSet(msg.sender, groupIdentifier, prevExposure, currentExposure, block.timestamp);\\n    }\\n\\n    function setIdentifiersToExposureGroups(bytes32[] memory identifiers, bytes32[] memory exposureGroups) public onlyOwner {\\n        require(identifiers.length == exposureGroups.length, \\\"Arrays lengths mismatch\\\");\\n        for(uint i=0; i<identifiers.length; i++){\\n            identifierToExposureGroup[identifiers[i]] = exposureGroups[i];\\n            emit IdentifierToExposureGroupSet(msg.sender, identifiers[i], exposureGroups[i], block.timestamp);\\n        }\\n\\n    }\\n\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyOwner {\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\n        }\\n    }\\n\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\n        assetToPoolAddress.set(_asset, _poolAddress);\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\n    }\\n\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyOwner {\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].debtCoverage);\\n        }\\n    }\\n\\n    function isTokenAssetActive(address token) external view returns(bool) {\\n        return tokenToStatus[token] == _ACTIVE;\\n    }\\n\\n    function activateToken(address token) public onlyOwner {\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\n        tokenToStatus[token] = _ACTIVE;\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function deactivateToken(address token) public onlyOwner {\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\n        tokenToStatus[token] = _INACTIVE;\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _debtCoverage) internal {\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\n        require(tokenAddressToSymbol[_tokenAddress] == 0, \\\"Asset address is already in use\\\");\\n        setDebtCoverage(_tokenAddress, _debtCoverage);\\n\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\n\\n        supportedTokensList.push(_tokenAddress);\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\n\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\n    }\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        require(tokenToRemoveIndex < supportedTokensList.length, \\\"Index out of range\\\");\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        supportedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyOwner {\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\n            _removeTokenAsset(_tokenAssets[i]);\\n        }\\n    }\\n\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\n        tokenAddressToSymbol[tokenAddress] = 0;\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\n        debtCoverage[tokenAddress] = 0;\\n        _removeTokenFromList(tokenAddress);\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\n    }\\n\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyOwner {\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\n            _removePoolAsset(_poolAssets[i]);\\n        }\\n    }\\n\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\n        address poolAddress = getPoolAddress(_poolAsset);\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\n    }\\n\\n    function setDebtCoverage(address token, uint256 coverage) public onlyOwner {\\n        //LTV must be lower than 5\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\n        debtCoverage[token] = coverage;\\n    }\\n\\n    function setDebtCoverageStaked(bytes32 stakedAsset, uint256 coverage) public onlyOwner {\\n        //LTV must be lower than 5\\n        require(coverage <= 0.833333333333333333e18, 'Debt coverage higher than maximum acceptable');\\n        debtCoverageStaked[stakedAsset] = coverage;\\n    }\\n\\n    function isExposureAvailable(bytes32 assetIdentifier) internal view returns(bool) {\\n        bytes32 group = identifierToExposureGroup[assetIdentifier];\\n        if(group != \\\"\\\"){\\n            Exposure memory exposure = groupToExposure[group];\\n            if(exposure.max != 0){\\n                if(exposure.max <= exposure.current + pendingProtocolExposure[assetIdentifier]) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    function increasePendingExposure(bytes32 assetIdentifier, address user, uint256 amount) public onlyPrimeAccountOrOwner {\\n        require(pendingUserExposure[user][assetIdentifier] == 0, \\\"Pending Tx\\\");\\n\\n        pendingUserExposure[user][assetIdentifier] += amount;\\n        pendingProtocolExposure[assetIdentifier] += amount;\\n        \\n        require(isExposureAvailable(assetIdentifier), \\\"Lack of Exposure\\\");\\n    }\\n\\n    function setPendingExposureToZero(bytes32 assetIdentifier, address user) public onlyPrimeAccountOrOwner {\\n        uint256 pending = pendingUserExposure[user][assetIdentifier];\\n        if(pending > 0) {\\n            pendingProtocolExposure[assetIdentifier] -= pending;\\n            pendingUserExposure[user][assetIdentifier] = 0;\\n        }\\n    }\\n\\n    function getSmartLoansFactoryAddress() public view virtual returns (address) {\\n        return DeploymentConstants.getSmartLoansFactoryAddress();\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyPrimeAccountOrOwner() {\\n        IBorrowersRegistry borrowersRegistry = IBorrowersRegistry(getSmartLoansFactoryAddress());\\n        require(borrowersRegistry.canBorrow(msg.sender) || owner() == _msgSender(), \\\"Only PrimeAccount or owner can change protocol exposure\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after changing current protocol exposure\\n     * @param performer an address of the wallet changing the exposure\\n     * @param identifier group identifier\\n     * @param newExposure new current protocol exposure\\n     * @param timestamp time of associating identifier with a exposure group\\n     **/\\n    event ProtocolExposureChanged(address indexed performer, bytes32 indexed identifier, uint256 newExposure, uint256 timestamp);\\n\\n\\n    /**\\n     * @dev emitted after associating identifier with a exposure group\\n     * @param performer an address of the wallet setting max exposure\\n     * @param identifier asset identifier\\n     * @param exposureGroup exposure group identifier\\n     * @param timestamp time of associating identifier with a exposure group\\n     **/\\n    event IdentifierToExposureGroupSet(address indexed performer, bytes32 indexed identifier, bytes32 indexed exposureGroup, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after setting max exposure for a given protocol.\\n     * @param performer an address of the wallet setting max exposure\\n     * @param groupIdentifier exposure group identifier\\n     * @param prevMaxExposure previous max protocol exposure\\n     * @param newMaxExposure new max protocol exposure\\n     * @param currentExposure current protocol exposure\\n     * @param timestamp time of setting max exposure\\n     **/\\n    event ProtocolExposureSet(address indexed performer, bytes32 indexed groupIdentifier, uint256 prevMaxExposure, uint256 newMaxExposure, uint256 currentExposure, uint256 timestamp);\\n\\n\\n    /**\\n         * @dev emitted after setting max exposure for a given protocol.\\n     * @param performer an address of the wallet setting max exposure\\n     * @param groupIdentifier exposure group identifier\\n     * @param prevCurrentExposure previous max protocol exposure\\n     * @param newCurrentExposure new max protocol exposure\\n     * @param timestamp time of setting max exposure\\n     **/\\n    event ProtocolCurrentExposureSet(address indexed performer, bytes32 indexed groupIdentifier, uint256 prevCurrentExposure, uint256 newCurrentExposure, uint256 timestamp);\\n\\n\\n\\n    /**\\n     * @dev emitted after adding a token asset\\n     * @param performer an address of the wallet adding a token asset\\n     * @param tokenAsset token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of adding a token asset\\n     **/\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after activating a token asset\\n     * @param performer an address of the wallet activating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of activating a token asset\\n     **/\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after deactivating a token asset\\n     * @param performer an address of the wallet deactivating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of deactivating a token asset\\n     **/\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a token asset\\n     * @param performer an address of the wallet removing a token asset\\n     * @param tokenAsset token asset\\n     * @param timestamp time a token asset removal\\n     **/\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a pool asset\\n     * @param performer an address of wallet adding the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of the pool asset addition\\n     **/\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a pool asset\\n     * @param performer an address of wallet removing the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of a pool asset removal\\n     **/\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x21bdff9b0ecaa60c18921a2a2be5075513f01fc471176831b4df19375eb1c810\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\n        address asset;\\n        bytes32 symbol;\\n        bytes32 identifier;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0x10a1d6e52d762a40d3a632aaf2807daf64e5fdc66047c5eec6f451ad4c760532\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n    function increasePendingExposure ( bytes32 , address, uint256 ) external;\\n    function setPendingExposureToZero ( bytes32, address ) external;\\n}\",\"keccak256\":\"0x90b06911b212a857f906bf8904eed90f89fa821541c81cec85d3f6ad52e99120\"},\"contracts/interfaces/facets/avalanche/ITraderJoeV2Facet.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../../joe-v2/ILBRouter.sol\\\";\\n\\ninterface ITraderJoeV2Facet {\\n\\n    struct TraderJoeV2Bin {\\n        ILBPair pair;\\n        uint24 id;\\n    }\\n\\n    struct RemoveLiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint16 binStep;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256[] ids;\\n        uint256[] amounts;\\n        uint256 deadline;\\n    }\\n\\n    function fundLiquidityTraderJoeV2(ILBPair pair, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    function withdrawLiquidityTraderJoeV2(ILBPair pair, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    function addLiquidityTraderJoeV2(ILBRouter.LiquidityParameters memory liquidityParameters) external;\\n\\n    function removeLiquidityTraderJoeV2(RemoveLiquidityParameters memory parameters) external;\\n\\n    function getOwnedTraderJoeV2Bins() external view returns (TraderJoeV2Bin[] memory result);\\n\\n}\\n\",\"keccak256\":\"0x33d922cfb95b24e840904cd09a606dd5b427d1be5217704ac7899e0c3b27b15a\"},\"contracts/interfaces/joe-v2/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xd1f116ee8133101c2c07112dfe871fabdcb182f9b84468765b58a5136d661ba6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/joe-v2/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x611e9da56c7f56456a2fae4aa4d4d74c266e1e9b4228509fe5eb0a2a1f1e349a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0595b40912fd6ba4c3ea7d6739e467b4381c9d6cc85218c5bd3536c9fb4ecc2b\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\",\"keccak256\":\"0xa8b0bc670a63176a8573d2afbc365955c3b212f2bed0d4b28021fe6cb3131915\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\",\"keccak256\":\"0x50691b25afe50c5f24b7dc4d89e15872c1ff833962503ee3985616025d715f25\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x6dd45a103c84d545155f1d1010c0b0cfe4e9e4097ab7c50a8498756e46f2c80a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x7910e19e35a01a163a9f8c4040dc19e1663c4d562a22a1181d25610ebc5295a1\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0xea919172ab21c9642383edcad886c93b21953b5811b83acb7227aa9df91c92bf\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0xe9fa3e531acbc8c43d230061bce4155a7699951d48d6512f232148e1dbe59082\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xecbc396e150ad6643d5749ed99402dfeb19fc3a5cd0536467755b49dcf795e3f\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IWNATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x60ffbeb68bc35b80c5a8046854ac095c73cdffbe0f293091f69f0adaf31543e3\",\"license\":\"MIT\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\nimport \\\"../interfaces/facets/avalanche/ITraderJoeV2Facet.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n    bytes32 constant OWNED_TRADERJOE_V2_BINS_POSITION = keccak256(\\\"diamond.standard.traderjoe_v2_bins_1685370112\\\");\\n    //TODO: maybe we should keep here a tuple[tokenId, factory] to account for multiple Uniswap V3 deployments\\n    bytes32 constant OWNED_UNISWAP_V3_TOKEN_IDS_POSITION = keccak256(\\\"diamond.standard.uniswap_v3_token_ids_1685370112\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n\\n        // Timestamp since which the account is frozen\\n        // 0 means an account that is not frozen. Any other value means that the account is frozen\\n        uint256 frozenSince;\\n    }\\n\\n    struct TraderJoeV2Storage {\\n        // TJ v2 bins of the contract\\n        ITraderJoeV2Facet.TraderJoeV2Bin[] ownedTjV2Bins;\\n    }\\n\\n    struct UniswapV3Storage {\\n        // UniswapV3 token IDs of the contract\\n        uint256[] ownedUniswapV3TokenIds;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function traderJoeV2Storage() internal pure returns (TraderJoeV2Storage storage tjv2s) {\\n        bytes32 position = OWNED_TRADERJOE_V2_BINS_POSITION;\\n        assembly {\\n            tjv2s.slot := position\\n        }\\n    }\\n\\n    function uniswapV3Storage() internal pure returns (UniswapV3Storage storage uv3s) {\\n        bytes32 position = OWNED_UNISWAP_V3_TOKEN_IDS_POSITION;\\n        assembly {\\n            uv3s.slot := position\\n        }\\n    }\\n\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    event AccountFrozen(address indexed freezeToken, uint256 timestamp);\\n\\n    event AccountUnfrozen(address indexed keeper, uint256 timestamp);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function freezeAccount(address freezeToken) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        require(sls.frozenSince == 0, \\\"Account is already frozen\\\");\\n        sls.frozenSince = block.timestamp;\\n        emit AccountFrozen(freezeToken, block.timestamp);\\n    }\\n\\n    function isAccountFrozen() internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.frozenSince != 0;\\n    }\\n\\n    function unfreezeAccount(address keeperAddress) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        require(sls.frozenSince != 0, \\\"Account is not frozen\\\");\\n        sls.frozenSince = 0;\\n        emit AccountUnfrozen(keeperAddress, block.timestamp);\\n    }\\n\\n    function getTjV2OwnedBins() internal returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\\n        bins = tjv2s.ownedTjV2Bins;\\n    }\\n\\n    function getTjV2OwnedBinsView() internal view returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\\n        bins = tjv2s.ownedTjV2Bins;\\n    }\\n\\n    function getUV3OwnedTokenIds() internal returns(uint256[] storage tokenIds){\\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\\n    }\\n\\n    function getUV3OwnedTokenIdsView() internal view returns(uint256[] storage tokenIds){\\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == position.identifier) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes32 identifier) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == identifier) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n        emit OwnedAssetAdded(_symbol, block.timestamp);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n\\n        emit OwnedAssetAdded(_symbol, block.timestamp);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    event OwnedAssetAdded(bytes32 indexed asset, uint256 timestamp);\\n\\n    event OwnedAssetRemoved(bytes32 indexed asset, uint256 timestamp);\\n}\",\"keccak256\":\"0x049bcbb4c8f7015000e47e982bbd899d43c118920949ab180ee73b3516a0bb0f\",\"license\":\"MIT\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\n\\n    address private constant _ADDRESS_PROVIDER = address(0);\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (ITokenManager) {\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    function getAddressProvider() internal pure returns (address) {\\n        return _ADDRESS_PROVIDER;\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0x30520f1f2ca757cb792d660bf6b0d62cbeebc9f60e5f2bd2b0a16418e0640845\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061270c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101a15760003560e01c806303223bb4146101a65780630d1ce2d2146101bb5780630e8b514b146101ce5780630edc25b61461020c57806321f880971461022c57806325eb876f146102415780632caeffe21461025457806331e7866c1461025c578063326c2e971461026f57806335923e031461028f5780633f8ef5c8146102cb57806363c91877146102eb57806366273c19146102fe57806368173bcf146103135780636953c06c14610326578063715018a6146101b9578063762b887a146103465780638310466714610359578063869c490d146103795780638ce76c05146103815780638da5cb5b146103945780639ab520451461039c578063a2d27933146103af578063adfe6a0f146103c2578063c3cc6c7a146103d5578063d195f047146103e8578063d1bc0831146103fb578063e0117bdd1461040e578063ecfc19a01461042e578063ed0994cd14610441578063f2fde38b14610454578063f38555aa14610467578063f823f1e01461047a578063fda4963b1461049a578063fff3d39a146104ad575b600080fd5b6101b96101b4366004611f98565b6104e9565b005b6101b96101c9366004612017565b6105ff565b6101f96101dc366004612032565b607360209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61021f61021a36600461205c565b6106bd565b6040516102039190612075565b610234610726565b6040516102039190612089565b61021f61024f3660046120e4565b610788565b61021f61084b565b6101b961026a366004612032565b610863565b6101f961027d36600461205c565b60716020526000908152604090205481565b6102bb61029d366004612017565b6001600160a01b03166000908152606f602052604090205460021490565b6040519015158152602001610203565b6101f96102d936600461205c565b60706020526000908152604090205481565b61021f6102f936600461205c565b6108af565b6103066108d9565b6040516102039190612114565b6101b9610321366004612017565b61092f565b6101f9610334366004612017565b606d6020526000908152604090205481565b6101b961035436600461226d565b6109e2565b6101f961036736600461205c565b60746020526000908152604090205481565b610306610b0d565b6101b961038f3660046122c6565b610b62565b61021f610be5565b6101b96103aa366004612380565b610bf4565b6101b96103bd3660046123b5565b610dac565b6101b96103d03660046123e9565b610e38565b6101b96103e33660046123e9565b610f69565b6101b96103f63660046122c6565b6110db565b6101b961040936600461240b565b61115e565b6101f961041c366004612017565b606f6020526000908152604090205481565b6101b961043c3660046123e9565b6111a6565b6101b961044f36600461243f565b6111e8565b6101b9610462366004612017565b61130d565b6101b961047536600461246b565b611386565b6101f9610488366004612017565b606b6020526000908152604090205481565b6101b96104a836600461240b565b6113f0565b6104d46104bb36600461205c565b6072602052600090815260409020805460019091015482565b60408051928352602083019190915201610203565b6104f1611438565b805182511461051b5760405162461bcd60e51b81526004016105129061249f565b60405180910390fd5b60005b82518110156105fa57818181518110610539576105396124d0565b602002602001015160716000858481518110610557576105576124d0565b6020026020010151815260200190815260200160002081905550818181518110610583576105836124d0565b602002602001015183828151811061059d5761059d6124d0565b6020026020010151336001600160a01b03167f6185e65460908e4de770553685b03f20921bc24a081923fc2ca1f0ba7d18cd5f426040516105e091815260200190565b60405180910390a4806105f2816124fc565b91505061051e565b505050565b610607611438565b6001600160a01b0381166000908152606f60205260409020546001146106625760405162461bcd60e51b815260206004820152601060248201526f4d75737420626520696e61637469766560801b6044820152606401610512565b6001600160a01b0381166000908152606f602052604090819020600290555133907febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4906106b29084904290612515565b60405180910390a250565b6000806106cb606584611497565b9150506001600160a01b0381166107205760405162461bcd60e51b81526020600482015260196024820152782837b7b61030b9b9b2ba103737ba1039bab83837b93a32b21760391b6044820152606401610512565b92915050565b6060606e80548060200260200160405190810160405280929190818152602001828054801561077e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610760575b5050505050905090565b600080610796606885611497565b9150506001600160a01b0381166107e65760405162461bcd60e51b815260206004820152601460248201527320b9b9b2ba103737ba1039bab83837b93a32b21760611b6044820152606401610512565b82610844576001600160a01b0381166000908152606f60205260409020546002146108445760405162461bcd60e51b815260206004820152600e60248201526d417373657420696e61637469766560901b6044820152606401610512565b9392505050565b733ea9d480295a73fd2af95b4d96c2aff88b21b03d90565b61086b611438565b670b90984060d355558111156108935760405162461bcd60e51b81526004016105129061252e565b6001600160a01b039091166000908152606d6020526040902055565b606e81815481106108bf57600080fd5b6000918252602090912001546001600160a01b0316905081565b60658054604080516020808402820181019092528281526060939092909183018282801561077e57602002820191906000526020600020905b815481526020019060010190808311610912575050505050905090565b610937611438565b6001600160a01b0381166000908152606f60205260409020546002146109905760405162461bcd60e51b815260206004820152600e60248201526d4d7573742062652061637469766560901b6044820152606401610512565b6001600160a01b0381166000908152606f602052604090819020600190555133907fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f0906106b29084904290612515565b565b600054610100900460ff1615808015610a025750600054600160ff909116105b80610a235750610a11306114b5565b158015610a23575060005460ff166001145b610a865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610512565b6000805460ff191660011790558015610aa9576000805461ff0019166101001790555b610ab16114c4565b610aba83610dac565b610ac382611386565b80156105fa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60688054604080516020808402820181019092528281526060939092909183018282801561077e5760200282019190600052602060002090815481526020019060010190808311610912575050505050905090565b610b6a611438565b8051825114610b8b5760405162461bcd60e51b81526004016105129061249f565b60005b82518110156105fa57610bd3838281518110610bac57610bac6124d0565b6020026020010151838381518110610bc657610bc66124d0565b60200260200101516114f3565b80610bdd816124fc565b915050610b8e565b6033546001600160a01b031690565b6000610bfe61084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490610c2d903390600401612075565b602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e919061257a565b80610c88575033610c7d610be5565b6001600160a01b0316145b610ca45760405162461bcd60e51b815260040161051290612597565b6001600160a01b038316600090815260736020908152604080832087845290915290205415610d025760405162461bcd60e51b815260206004820152600a6024820152690a0cadcc8d2dcce40a8f60b31b6044820152606401610512565b6001600160a01b038316600090815260736020908152604080832087845290915281208054849290610d359084906125ee565b909155505060008481526074602052604081208054849290610d589084906125ee565b90915550610d67905084611575565b610da65760405162461bcd60e51b815260206004820152601060248201526f4c61636b206f66204578706f7375726560801b6044820152606401610512565b50505050565b610db4611438565b60005b8151811015610e3457610e22828281518110610dd557610dd56124d0565b602002602001015160000151838381518110610df357610df36124d0565b602002602001015160200151848481518110610e1157610e116124d0565b6020026020010151604001516115f1565b80610e2c816124fc565b915050610db7565b5050565b6000610e4261084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490610e71903390600401612075565b602060405180830381865afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb2919061257a565b80610ecc575033610ec1610be5565b6001600160a01b0316145b610ee85760405162461bcd60e51b815260040161051290612597565b6000838152607160205260409020548015610da6576000818152607260205260409020600181015415610f62578054841015610f30578054610f2b908590612601565b610f33565b60005b80825560408051918252426020830152839133916000805160206126b783398151915291015b60405180910390a35b5050505050565b6000610f7361084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490610fa2903390600401612075565b602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe3919061257a565b80610ffd575033610ff2610be5565b6001600160a01b0316145b6110195760405162461bcd60e51b815260040161051290612597565b6000838152607160205260409020548015610da6576000818152607260205260409020600181015415610f62578381600001600082825461105a91906125ee565b90915550506001810154815411156110b25760405162461bcd60e51b815260206004820152601b60248201527a13585e08185cdcd95d08195e1c1bdcdd5c9948189c995858da1959602a1b6044820152606401610512565b805460408051918252426020830152839133916000805160206126b78339815191529101610f59565b6110e3611438565b80518251146111045760405162461bcd60e51b81526004016105129061249f565b60005b82518110156105fa5761114c838281518110611125576111256124d0565b602002602001015183838151811061113f5761113f6124d0565b6020026020010151611804565b80611156816124fc565b915050611107565b611166611438565b60005b8151811015610e3457611194828281518110611187576111876124d0565b6020026020010151611888565b8061119e816124fc565b915050611169565b6111ae611438565b670b90984060d355558111156111d65760405162461bcd60e51b81526004016105129061252e565b60009182526070602052604090912055565b60006111f261084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490611221903390600401612075565b602060405180830381865afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611262919061257a565b8061127c575033611271610be5565b6001600160a01b0316145b6112985760405162461bcd60e51b815260040161051290612597565b6001600160a01b03821660009081526073602090815260408083208684529091529020548015610da657600084815260746020526040812080548392906112e0908490612601565b909155505050506001600160a01b0316600090815260736020908152604080832093835292905290812055565b611315611438565b6001600160a01b03811661137a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610512565b61138381611918565b50565b61138e611438565b60005b8151811015610e34576113de8282815181106113af576113af6124d0565b6020026020010151600001518383815181106113cd576113cd6124d0565b60200260200101516020015161196a565b806113e8816124fc565b915050611391565b6113f8611438565b60005b8151811015610e3457611426828281518110611419576114196124d0565b6020026020010151611a6c565b80611430816124fc565b9150506113fb565b33611441610be5565b6001600160a01b0316146109e05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610512565b60008080806114a68686611ac1565b909450925050505b9250929050565b6001600160a01b03163b151590565b600054610100900460ff166114eb5760405162461bcd60e51b815260040161051290612614565b6109e0611afb565b816000036115135760405162461bcd60e51b81526004016105129061265f565b60008281526072602090815260409182902080549084905582518181529182018490524292820192909252839033907f073dc16e9ad72465ac9c9d5249ac0b1ba512ca440e461ff67a34c38e29c3413e906060015b60405180910390a3505050565b60008181526071602052604081205480156115e85760008181526072602090815260409182902082518084019093528054835260010154908201819052156115e65760008481526074602052604090205481516115d291906125ee565b8160200151116115e6575060009392505050565b505b50600192915050565b826000036116115760405162461bcd60e51b81526004016105129061265f565b6001600160a01b0382166116665760405162461bcd60e51b815260206004820152601c60248201527b21b0b73737ba1039b2ba1030b71032b6b83a3c9030b2323932b9b99760211b6044820152606401610512565b611671606884611b2b565b156116bd5760405162461bcd60e51b815260206004820152601c60248201527b4173736574277320746f6b656e20616c72656164792065786973747360201b6044820152606401610512565b6001600160a01b0382166000908152606b6020526040902054156117235760405162461bcd60e51b815260206004820152601f60248201527f4173736574206164647265737320697320616c726561647920696e20757365006044820152606401610512565b61172d8282610863565b61173960688484611b37565b506001600160a01b0382166000818152606b60209081526040808320879055606f909152812060029055606e805460018181018355928290527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a0180546001600160a01b03191690931790925590546117b29190612601565b6001600160a01b0383166000908152606c6020526040908190209190915551839033907ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6906115689086904290612515565b816000036118245760405162461bcd60e51b81526004016105129061265f565b600082815260726020908152604091829020600181018054908590559054835182815292830185905292820192909252426060820152839033907f4e3db1a563ebfee7c496974d792038536dc8311892551dc36d19116131e3dd3c90608001611568565b6000611895826001610788565b90506118a2606883611b55565b506001600160a01b0381166000908152606b60209081526040808320839055606f8252808320839055606d9091528120556118dc81611b61565b604051428152829033907f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93906020015b60405180910390a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611973816114b5565b6119cd5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610512565b6119d8606583611b2b565b15611a235760405162461bcd60e51b815260206004820152601b60248201527a4173736574277320706f6f6c20616c72656164792065786973747360281b6044820152606401610512565b611a2f60658383611b37565b5081336001600160a01b03167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161190c929190612515565b6000611a77826106bd565b9050611a84606583611b55565b5081336001600160a01b03167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e83834260405161190c929190612515565b6000818152600283016020526040812054819080611af057611ae38585611cbb565b9250600091506114ae9050565b6001925090506114ae565b600054610100900460ff16611b225760405162461bcd60e51b815260040161051290612614565b6109e033611918565b60006108448383611cbb565b6000611b4d84846001600160a01b038516611cc7565b949350505050565b60006108448383611ce4565b6001600160a01b0381166000908152606c6020526040902054606e548110611bc05760405162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b6044820152606401610512565b606e54611bcf90600190612601565b8114611c6957606e805460009190611be990600190612601565b81548110611bf957611bf96124d0565b60009182526020808320909101546001600160a01b0316808352606c9091526040909120839055606e8054919250829184908110611c3957611c396124d0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b606e805480611c7a57611c7a6126a0565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03939093168152606c909252506040812055565b60006108448383611d01565b60008281526002840160205260408120829055611b4d8484611d0d565b600081815260028301602052604081208190556108448383611d19565b60006108448383611d25565b60006108448383611d3d565b60006108448383611d87565b60009081526001919091016020526040902054151590565b6000611d498383611d25565b611d7f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610720565b506000610720565b60008181526001830160205260408120548015611e70576000611dab600183612601565b8554909150600090611dbf90600190612601565b9050818114611e24576000866000018281548110611ddf57611ddf6124d0565b9060005260206000200154905080876000018481548110611e0257611e026124d0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e3557611e356126a0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610720565b6000915050610720565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715611eb257611eb2611e7a565b60405290565b604080519081016001600160401b0381118282101715611eb257611eb2611e7a565b604051601f8201601f191681016001600160401b0381118282101715611f0257611f02611e7a565b604052919050565b60006001600160401b03821115611f2357611f23611e7a565b5060051b60200190565b600082601f830112611f3e57600080fd5b81356020611f53611f4e83611f0a565b611eda565b82815260059290921b84018101918181019086841115611f7257600080fd5b8286015b84811015611f8d5780358352918301918301611f76565b509695505050505050565b60008060408385031215611fab57600080fd5b82356001600160401b0380821115611fc257600080fd5b611fce86838701611f2d565b93506020850135915080821115611fe457600080fd5b50611ff185828601611f2d565b9150509250929050565b80356001600160a01b038116811461201257600080fd5b919050565b60006020828403121561202957600080fd5b61084482611ffb565b6000806040838503121561204557600080fd5b61204e83611ffb565b946020939093013593505050565b60006020828403121561206e57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156120ca5783516001600160a01b0316835292840192918401916001016120a5565b50909695505050505050565b801515811461138357600080fd5b600080604083850312156120f757600080fd5b823591506020830135612109816120d6565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156120ca57835183529284019291840191600101612130565b600082601f83011261215d57600080fd5b8135602061216d611f4e83611f0a565b8281526060928302850182019282820191908785111561218c57600080fd5b8387015b858110156121da5781818a0312156121a85760008081fd5b6121b0611e90565b813581526121bf868301611ffb565b81870152604082810135908201528452928401928101612190565b5090979650505050505050565b600082601f8301126121f857600080fd5b81356020612208611f4e83611f0a565b82815260069290921b8401810191818101908684111561222757600080fd5b8286015b84811015611f8d57604081890312156122445760008081fd5b61224c611eb8565b8135815261225b858301611ffb565b8186015283529183019160400161222b565b6000806040838503121561228057600080fd5b82356001600160401b038082111561229757600080fd5b6122a38683870161214c565b935060208501359150808211156122b957600080fd5b50611ff1858286016121e7565b600080604083850312156122d957600080fd5b82356001600160401b03808211156122f057600080fd5b6122fc86838701611f2d565b935060209150818501358181111561231357600080fd5b85019050601f8101861361232657600080fd5b8035612334611f4e82611f0a565b81815260059190911b8201830190838101908883111561235357600080fd5b928401925b8284101561237157833582529284019290840190612358565b80955050505050509250929050565b60008060006060848603121561239557600080fd5b833592506123a560208501611ffb565b9150604084013590509250925092565b6000602082840312156123c757600080fd5b81356001600160401b038111156123dd57600080fd5b611b4d8482850161214c565b600080604083850312156123fc57600080fd5b50508035926020909101359150565b60006020828403121561241d57600080fd5b81356001600160401b0381111561243357600080fd5b611b4d84828501611f2d565b6000806040838503121561245257600080fd5b8235915061246260208401611ffb565b90509250929050565b60006020828403121561247d57600080fd5b81356001600160401b0381111561249357600080fd5b611b4d848285016121e7565b602080825260179082015276082e4e4c2f2e640d8cadccee8d0e640dad2e6dac2e8c6d604b1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161250e5761250e6124e6565b5060010190565b6001600160a01b03929092168252602082015260400190565b6020808252602c908201527f4465627420636f76657261676520686967686572207468616e206d6178696d7560408201526b6d2061636365707461626c6560a01b606082015260800190565b60006020828403121561258c57600080fd5b8151610844816120d6565b60208082526037908201527f4f6e6c79205072696d654163636f756e74206f72206f776e65722063616e206360408201527668616e67652070726f746f636f6c206578706f7375726560481b606082015260800190565b80820180821115610720576107206124e6565b81810381811115610720576107206124e6565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526021908201527f43616e6e6f742073657420616e20656d70747920737472696e672061737365746040820152601760f91b606082015260800190565b634e487b7160e01b600052603160045260246000fdfe45262a952f63661e3b881eb82a0d0bd391ab35692bd26023356b06e452230d43a264697066735822122015767ce5b563db36f7b30bf76f1393e0f207c9f347babbcfcf080a382cc02f3264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101a15760003560e01c806303223bb4146101a65780630d1ce2d2146101bb5780630e8b514b146101ce5780630edc25b61461020c57806321f880971461022c57806325eb876f146102415780632caeffe21461025457806331e7866c1461025c578063326c2e971461026f57806335923e031461028f5780633f8ef5c8146102cb57806363c91877146102eb57806366273c19146102fe57806368173bcf146103135780636953c06c14610326578063715018a6146101b9578063762b887a146103465780638310466714610359578063869c490d146103795780638ce76c05146103815780638da5cb5b146103945780639ab520451461039c578063a2d27933146103af578063adfe6a0f146103c2578063c3cc6c7a146103d5578063d195f047146103e8578063d1bc0831146103fb578063e0117bdd1461040e578063ecfc19a01461042e578063ed0994cd14610441578063f2fde38b14610454578063f38555aa14610467578063f823f1e01461047a578063fda4963b1461049a578063fff3d39a146104ad575b600080fd5b6101b96101b4366004611f98565b6104e9565b005b6101b96101c9366004612017565b6105ff565b6101f96101dc366004612032565b607360209081526000928352604080842090915290825290205481565b6040519081526020015b60405180910390f35b61021f61021a36600461205c565b6106bd565b6040516102039190612075565b610234610726565b6040516102039190612089565b61021f61024f3660046120e4565b610788565b61021f61084b565b6101b961026a366004612032565b610863565b6101f961027d36600461205c565b60716020526000908152604090205481565b6102bb61029d366004612017565b6001600160a01b03166000908152606f602052604090205460021490565b6040519015158152602001610203565b6101f96102d936600461205c565b60706020526000908152604090205481565b61021f6102f936600461205c565b6108af565b6103066108d9565b6040516102039190612114565b6101b9610321366004612017565b61092f565b6101f9610334366004612017565b606d6020526000908152604090205481565b6101b961035436600461226d565b6109e2565b6101f961036736600461205c565b60746020526000908152604090205481565b610306610b0d565b6101b961038f3660046122c6565b610b62565b61021f610be5565b6101b96103aa366004612380565b610bf4565b6101b96103bd3660046123b5565b610dac565b6101b96103d03660046123e9565b610e38565b6101b96103e33660046123e9565b610f69565b6101b96103f63660046122c6565b6110db565b6101b961040936600461240b565b61115e565b6101f961041c366004612017565b606f6020526000908152604090205481565b6101b961043c3660046123e9565b6111a6565b6101b961044f36600461243f565b6111e8565b6101b9610462366004612017565b61130d565b6101b961047536600461246b565b611386565b6101f9610488366004612017565b606b6020526000908152604090205481565b6101b96104a836600461240b565b6113f0565b6104d46104bb36600461205c565b6072602052600090815260409020805460019091015482565b60408051928352602083019190915201610203565b6104f1611438565b805182511461051b5760405162461bcd60e51b81526004016105129061249f565b60405180910390fd5b60005b82518110156105fa57818181518110610539576105396124d0565b602002602001015160716000858481518110610557576105576124d0565b6020026020010151815260200190815260200160002081905550818181518110610583576105836124d0565b602002602001015183828151811061059d5761059d6124d0565b6020026020010151336001600160a01b03167f6185e65460908e4de770553685b03f20921bc24a081923fc2ca1f0ba7d18cd5f426040516105e091815260200190565b60405180910390a4806105f2816124fc565b91505061051e565b505050565b610607611438565b6001600160a01b0381166000908152606f60205260409020546001146106625760405162461bcd60e51b815260206004820152601060248201526f4d75737420626520696e61637469766560801b6044820152606401610512565b6001600160a01b0381166000908152606f602052604090819020600290555133907febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4906106b29084904290612515565b60405180910390a250565b6000806106cb606584611497565b9150506001600160a01b0381166107205760405162461bcd60e51b81526020600482015260196024820152782837b7b61030b9b9b2ba103737ba1039bab83837b93a32b21760391b6044820152606401610512565b92915050565b6060606e80548060200260200160405190810160405280929190818152602001828054801561077e57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311610760575b5050505050905090565b600080610796606885611497565b9150506001600160a01b0381166107e65760405162461bcd60e51b815260206004820152601460248201527320b9b9b2ba103737ba1039bab83837b93a32b21760611b6044820152606401610512565b82610844576001600160a01b0381166000908152606f60205260409020546002146108445760405162461bcd60e51b815260206004820152600e60248201526d417373657420696e61637469766560901b6044820152606401610512565b9392505050565b733ea9d480295a73fd2af95b4d96c2aff88b21b03d90565b61086b611438565b670b90984060d355558111156108935760405162461bcd60e51b81526004016105129061252e565b6001600160a01b039091166000908152606d6020526040902055565b606e81815481106108bf57600080fd5b6000918252602090912001546001600160a01b0316905081565b60658054604080516020808402820181019092528281526060939092909183018282801561077e57602002820191906000526020600020905b815481526020019060010190808311610912575050505050905090565b610937611438565b6001600160a01b0381166000908152606f60205260409020546002146109905760405162461bcd60e51b815260206004820152600e60248201526d4d7573742062652061637469766560901b6044820152606401610512565b6001600160a01b0381166000908152606f602052604090819020600190555133907fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f0906106b29084904290612515565b565b600054610100900460ff1615808015610a025750600054600160ff909116105b80610a235750610a11306114b5565b158015610a23575060005460ff166001145b610a865760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610512565b6000805460ff191660011790558015610aa9576000805461ff0019166101001790555b610ab16114c4565b610aba83610dac565b610ac382611386565b80156105fa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a1505050565b60688054604080516020808402820181019092528281526060939092909183018282801561077e5760200282019190600052602060002090815481526020019060010190808311610912575050505050905090565b610b6a611438565b8051825114610b8b5760405162461bcd60e51b81526004016105129061249f565b60005b82518110156105fa57610bd3838281518110610bac57610bac6124d0565b6020026020010151838381518110610bc657610bc66124d0565b60200260200101516114f3565b80610bdd816124fc565b915050610b8e565b6033546001600160a01b031690565b6000610bfe61084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490610c2d903390600401612075565b602060405180830381865afa158015610c4a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6e919061257a565b80610c88575033610c7d610be5565b6001600160a01b0316145b610ca45760405162461bcd60e51b815260040161051290612597565b6001600160a01b038316600090815260736020908152604080832087845290915290205415610d025760405162461bcd60e51b815260206004820152600a6024820152690a0cadcc8d2dcce40a8f60b31b6044820152606401610512565b6001600160a01b038316600090815260736020908152604080832087845290915281208054849290610d359084906125ee565b909155505060008481526074602052604081208054849290610d589084906125ee565b90915550610d67905084611575565b610da65760405162461bcd60e51b815260206004820152601060248201526f4c61636b206f66204578706f7375726560801b6044820152606401610512565b50505050565b610db4611438565b60005b8151811015610e3457610e22828281518110610dd557610dd56124d0565b602002602001015160000151838381518110610df357610df36124d0565b602002602001015160200151848481518110610e1157610e116124d0565b6020026020010151604001516115f1565b80610e2c816124fc565b915050610db7565b5050565b6000610e4261084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490610e71903390600401612075565b602060405180830381865afa158015610e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eb2919061257a565b80610ecc575033610ec1610be5565b6001600160a01b0316145b610ee85760405162461bcd60e51b815260040161051290612597565b6000838152607160205260409020548015610da6576000818152607260205260409020600181015415610f62578054841015610f30578054610f2b908590612601565b610f33565b60005b80825560408051918252426020830152839133916000805160206126b783398151915291015b60405180910390a35b5050505050565b6000610f7361084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490610fa2903390600401612075565b602060405180830381865afa158015610fbf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe3919061257a565b80610ffd575033610ff2610be5565b6001600160a01b0316145b6110195760405162461bcd60e51b815260040161051290612597565b6000838152607160205260409020548015610da6576000818152607260205260409020600181015415610f62578381600001600082825461105a91906125ee565b90915550506001810154815411156110b25760405162461bcd60e51b815260206004820152601b60248201527a13585e08185cdcd95d08195e1c1bdcdd5c9948189c995858da1959602a1b6044820152606401610512565b805460408051918252426020830152839133916000805160206126b78339815191529101610f59565b6110e3611438565b80518251146111045760405162461bcd60e51b81526004016105129061249f565b60005b82518110156105fa5761114c838281518110611125576111256124d0565b602002602001015183838151811061113f5761113f6124d0565b6020026020010151611804565b80611156816124fc565b915050611107565b611166611438565b60005b8151811015610e3457611194828281518110611187576111876124d0565b6020026020010151611888565b8061119e816124fc565b915050611169565b6111ae611438565b670b90984060d355558111156111d65760405162461bcd60e51b81526004016105129061252e565b60009182526070602052604090912055565b60006111f261084b565b60405163039ff21960e21b81529091506001600160a01b03821690630e7fc86490611221903390600401612075565b602060405180830381865afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611262919061257a565b8061127c575033611271610be5565b6001600160a01b0316145b6112985760405162461bcd60e51b815260040161051290612597565b6001600160a01b03821660009081526073602090815260408083208684529091529020548015610da657600084815260746020526040812080548392906112e0908490612601565b909155505050506001600160a01b0316600090815260736020908152604080832093835292905290812055565b611315611438565b6001600160a01b03811661137a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610512565b61138381611918565b50565b61138e611438565b60005b8151811015610e34576113de8282815181106113af576113af6124d0565b6020026020010151600001518383815181106113cd576113cd6124d0565b60200260200101516020015161196a565b806113e8816124fc565b915050611391565b6113f8611438565b60005b8151811015610e3457611426828281518110611419576114196124d0565b6020026020010151611a6c565b80611430816124fc565b9150506113fb565b33611441610be5565b6001600160a01b0316146109e05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610512565b60008080806114a68686611ac1565b909450925050505b9250929050565b6001600160a01b03163b151590565b600054610100900460ff166114eb5760405162461bcd60e51b815260040161051290612614565b6109e0611afb565b816000036115135760405162461bcd60e51b81526004016105129061265f565b60008281526072602090815260409182902080549084905582518181529182018490524292820192909252839033907f073dc16e9ad72465ac9c9d5249ac0b1ba512ca440e461ff67a34c38e29c3413e906060015b60405180910390a3505050565b60008181526071602052604081205480156115e85760008181526072602090815260409182902082518084019093528054835260010154908201819052156115e65760008481526074602052604090205481516115d291906125ee565b8160200151116115e6575060009392505050565b505b50600192915050565b826000036116115760405162461bcd60e51b81526004016105129061265f565b6001600160a01b0382166116665760405162461bcd60e51b815260206004820152601c60248201527b21b0b73737ba1039b2ba1030b71032b6b83a3c9030b2323932b9b99760211b6044820152606401610512565b611671606884611b2b565b156116bd5760405162461bcd60e51b815260206004820152601c60248201527b4173736574277320746f6b656e20616c72656164792065786973747360201b6044820152606401610512565b6001600160a01b0382166000908152606b6020526040902054156117235760405162461bcd60e51b815260206004820152601f60248201527f4173736574206164647265737320697320616c726561647920696e20757365006044820152606401610512565b61172d8282610863565b61173960688484611b37565b506001600160a01b0382166000818152606b60209081526040808320879055606f909152812060029055606e805460018181018355928290527f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a0180546001600160a01b03191690931790925590546117b29190612601565b6001600160a01b0383166000908152606c6020526040908190209190915551839033907ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6906115689086904290612515565b816000036118245760405162461bcd60e51b81526004016105129061265f565b600082815260726020908152604091829020600181018054908590559054835182815292830185905292820192909252426060820152839033907f4e3db1a563ebfee7c496974d792038536dc8311892551dc36d19116131e3dd3c90608001611568565b6000611895826001610788565b90506118a2606883611b55565b506001600160a01b0381166000908152606b60209081526040808320839055606f8252808320839055606d9091528120556118dc81611b61565b604051428152829033907f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93906020015b60405180910390a35050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611973816114b5565b6119cd5760405162461bcd60e51b815260206004820152602560248201527f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e6044820152641d1c9858dd60da1b6064820152608401610512565b6119d8606583611b2b565b15611a235760405162461bcd60e51b815260206004820152601b60248201527a4173736574277320706f6f6c20616c72656164792065786973747360281b6044820152606401610512565b611a2f60658383611b37565b5081336001600160a01b03167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161190c929190612515565b6000611a77826106bd565b9050611a84606583611b55565b5081336001600160a01b03167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e83834260405161190c929190612515565b6000818152600283016020526040812054819080611af057611ae38585611cbb565b9250600091506114ae9050565b6001925090506114ae565b600054610100900460ff16611b225760405162461bcd60e51b815260040161051290612614565b6109e033611918565b60006108448383611cbb565b6000611b4d84846001600160a01b038516611cc7565b949350505050565b60006108448383611ce4565b6001600160a01b0381166000908152606c6020526040902054606e548110611bc05760405162461bcd60e51b8152602060048201526012602482015271496e646578206f7574206f662072616e676560701b6044820152606401610512565b606e54611bcf90600190612601565b8114611c6957606e805460009190611be990600190612601565b81548110611bf957611bf96124d0565b60009182526020808320909101546001600160a01b0316808352606c9091526040909120839055606e8054919250829184908110611c3957611c396124d0565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b606e805480611c7a57611c7a6126a0565b60008281526020808220830160001990810180546001600160a01b03191690559092019092556001600160a01b03939093168152606c909252506040812055565b60006108448383611d01565b60008281526002840160205260408120829055611b4d8484611d0d565b600081815260028301602052604081208190556108448383611d19565b60006108448383611d25565b60006108448383611d3d565b60006108448383611d87565b60009081526001919091016020526040902054151590565b6000611d498383611d25565b611d7f57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610720565b506000610720565b60008181526001830160205260408120548015611e70576000611dab600183612601565b8554909150600090611dbf90600190612601565b9050818114611e24576000866000018281548110611ddf57611ddf6124d0565b9060005260206000200154905080876000018481548110611e0257611e026124d0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611e3557611e356126a0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610720565b6000915050610720565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b0381118282101715611eb257611eb2611e7a565b60405290565b604080519081016001600160401b0381118282101715611eb257611eb2611e7a565b604051601f8201601f191681016001600160401b0381118282101715611f0257611f02611e7a565b604052919050565b60006001600160401b03821115611f2357611f23611e7a565b5060051b60200190565b600082601f830112611f3e57600080fd5b81356020611f53611f4e83611f0a565b611eda565b82815260059290921b84018101918181019086841115611f7257600080fd5b8286015b84811015611f8d5780358352918301918301611f76565b509695505050505050565b60008060408385031215611fab57600080fd5b82356001600160401b0380821115611fc257600080fd5b611fce86838701611f2d565b93506020850135915080821115611fe457600080fd5b50611ff185828601611f2d565b9150509250929050565b80356001600160a01b038116811461201257600080fd5b919050565b60006020828403121561202957600080fd5b61084482611ffb565b6000806040838503121561204557600080fd5b61204e83611ffb565b946020939093013593505050565b60006020828403121561206e57600080fd5b5035919050565b6001600160a01b0391909116815260200190565b6020808252825182820181905260009190848201906040850190845b818110156120ca5783516001600160a01b0316835292840192918401916001016120a5565b50909695505050505050565b801515811461138357600080fd5b600080604083850312156120f757600080fd5b823591506020830135612109816120d6565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156120ca57835183529284019291840191600101612130565b600082601f83011261215d57600080fd5b8135602061216d611f4e83611f0a565b8281526060928302850182019282820191908785111561218c57600080fd5b8387015b858110156121da5781818a0312156121a85760008081fd5b6121b0611e90565b813581526121bf868301611ffb565b81870152604082810135908201528452928401928101612190565b5090979650505050505050565b600082601f8301126121f857600080fd5b81356020612208611f4e83611f0a565b82815260069290921b8401810191818101908684111561222757600080fd5b8286015b84811015611f8d57604081890312156122445760008081fd5b61224c611eb8565b8135815261225b858301611ffb565b8186015283529183019160400161222b565b6000806040838503121561228057600080fd5b82356001600160401b038082111561229757600080fd5b6122a38683870161214c565b935060208501359150808211156122b957600080fd5b50611ff1858286016121e7565b600080604083850312156122d957600080fd5b82356001600160401b03808211156122f057600080fd5b6122fc86838701611f2d565b935060209150818501358181111561231357600080fd5b85019050601f8101861361232657600080fd5b8035612334611f4e82611f0a565b81815260059190911b8201830190838101908883111561235357600080fd5b928401925b8284101561237157833582529284019290840190612358565b80955050505050509250929050565b60008060006060848603121561239557600080fd5b833592506123a560208501611ffb565b9150604084013590509250925092565b6000602082840312156123c757600080fd5b81356001600160401b038111156123dd57600080fd5b611b4d8482850161214c565b600080604083850312156123fc57600080fd5b50508035926020909101359150565b60006020828403121561241d57600080fd5b81356001600160401b0381111561243357600080fd5b611b4d84828501611f2d565b6000806040838503121561245257600080fd5b8235915061246260208401611ffb565b90509250929050565b60006020828403121561247d57600080fd5b81356001600160401b0381111561249357600080fd5b611b4d848285016121e7565b602080825260179082015276082e4e4c2f2e640d8cadccee8d0e640dad2e6dac2e8c6d604b1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161250e5761250e6124e6565b5060010190565b6001600160a01b03929092168252602082015260400190565b6020808252602c908201527f4465627420636f76657261676520686967686572207468616e206d6178696d7560408201526b6d2061636365707461626c6560a01b606082015260800190565b60006020828403121561258c57600080fd5b8151610844816120d6565b60208082526037908201527f4f6e6c79205072696d654163636f756e74206f72206f776e65722063616e206360408201527668616e67652070726f746f636f6c206578706f7375726560481b606082015260800190565b80820180821115610720576107206124e6565b81810381811115610720576107206124e6565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60208082526021908201527f43616e6e6f742073657420616e20656d70747920737472696e672061737365746040820152601760f91b606082015260800190565b634e487b7160e01b600052603160045260246000fdfe45262a952f63661e3b881eb82a0d0bd391ab35692bd26023356b06e452230d43a264697066735822122015767ce5b563db36f7b30bf76f1393e0f207c9f347babbcfcf080a382cc02f3264736f6c63430008110033",
  "devdoc": {
    "events": {
      "IdentifierToExposureGroupSet(address,bytes32,bytes32,uint256)": {
        "details": "emitted after associating identifier with a exposure group",
        "params": {
          "exposureGroup": "exposure group identifier",
          "identifier": "asset identifier",
          "performer": "an address of the wallet setting max exposure",
          "timestamp": "time of associating identifier with a exposure group*"
        }
      },
      "PoolAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a pool asset",
        "params": {
          "performer": "an address of wallet adding the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of the pool asset addition*"
        }
      },
      "PoolAssetRemoved(address,bytes32,address,uint256)": {
        "details": "emitted after removing a pool asset",
        "params": {
          "performer": "an address of wallet removing the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of a pool asset removal*"
        }
      },
      "ProtocolCurrentExposureSet(address,bytes32,uint256,uint256,uint256)": {
        "details": "emitted after setting max exposure for a given protocol.",
        "params": {
          "groupIdentifier": "exposure group identifier",
          "newCurrentExposure": "new max protocol exposure",
          "performer": "an address of the wallet setting max exposure",
          "prevCurrentExposure": "previous max protocol exposure",
          "timestamp": "time of setting max exposure*"
        }
      },
      "ProtocolExposureChanged(address,bytes32,uint256,uint256)": {
        "details": "emitted after changing current protocol exposure",
        "params": {
          "identifier": "group identifier",
          "newExposure": "new current protocol exposure",
          "performer": "an address of the wallet changing the exposure",
          "timestamp": "time of associating identifier with a exposure group*"
        }
      },
      "ProtocolExposureSet(address,bytes32,uint256,uint256,uint256,uint256)": {
        "details": "emitted after setting max exposure for a given protocol.",
        "params": {
          "currentExposure": "current protocol exposure",
          "groupIdentifier": "exposure group identifier",
          "newMaxExposure": "new max protocol exposure",
          "performer": "an address of the wallet setting max exposure",
          "prevMaxExposure": "previous max protocol exposure",
          "timestamp": "time of setting max exposure*"
        }
      },
      "TokenAssetActivated(address,address,uint256)": {
        "details": "emitted after activating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet activating a token asset",
          "timestamp": "time of activating a token asset*"
        }
      },
      "TokenAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet adding a token asset",
          "timestamp": "time of adding a token asset*",
          "tokenAsset": "token asset"
        }
      },
      "TokenAssetDeactivated(address,address,uint256)": {
        "details": "emitted after deactivating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet deactivating a token asset",
          "timestamp": "time of deactivating a token asset*"
        }
      },
      "TokenAssetRemoved(address,bytes32,uint256)": {
        "details": "emitted after removing a token asset",
        "params": {
          "performer": "an address of the wallet removing a token asset",
          "timestamp": "time a token asset removal*",
          "tokenAsset": "token asset"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetAddress(bytes32,bool)": {
        "notice": "Returns address of an asset*"
      },
      "getPoolAddress(bytes32)": {
        "notice": "Returns address of an asset's lending pool*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 671,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1747,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToPoolAddress",
        "offset": 0,
        "slot": "101",
        "type": "t_struct(Bytes32ToAddressMap)6652_storage"
      },
      {
        "astId": 1750,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToTokenAddress",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Bytes32ToAddressMap)6652_storage"
      },
      {
        "astId": 1754,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenAddressToSymbol",
        "offset": 0,
        "slot": "107",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 1758,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenPositionInList",
        "offset": 0,
        "slot": "108",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1762,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverage",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1765,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "supportedTokensList",
        "offset": 0,
        "slot": "110",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1769,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenToStatus",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1773,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "debtCoverageStaked",
        "offset": 0,
        "slot": "112",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 1777,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "identifierToExposureGroup",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 1782,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "groupToExposure",
        "offset": 0,
        "slot": "114",
        "type": "t_mapping(t_bytes32,t_struct(Exposure)1731_storage)"
      },
      {
        "astId": 1788,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "pendingUserExposure",
        "offset": 0,
        "slot": "115",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 1792,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "pendingProtocolExposure",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_bytes32,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_struct(Exposure)1731_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct TokenManager.Exposure)",
        "numberOfBytes": "32",
        "value": "t_struct(Exposure)1731_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)1297_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 1296,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1103_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToAddressMap)6652_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToAddressMap",
        "members": [
          {
            "astId": 6651,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)6422_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Exposure)1731_storage": {
        "encoding": "inplace",
        "label": "struct TokenManager.Exposure",
        "members": [
          {
            "astId": 1728,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "current",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1730,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "max",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Map)6422_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 6417,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)1297_storage"
          },
          {
            "astId": 6421,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1103_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1098,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1102,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}