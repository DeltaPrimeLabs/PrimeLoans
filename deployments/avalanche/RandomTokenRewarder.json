{
  "address": "0xa384b0aF911F6ecBB5ffcCAe11Ba427d8459D812",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_btcEligibleUsersList",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "numWords",
          "type": "uint32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "rewardToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "RewardTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "btcEligibleUsersList",
      "outputs": [
        {
          "internalType": "contract BtcEligibleUsersList",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "linkAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRewardDistributionWithRandomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardToken",
          "type": "address"
        }
      ],
      "name": "setRewardToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a1afffe0c60ea0df5b0c658652393e9781d0d5af8f65ee79e4909a12292dc2f",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xa384b0aF911F6ecBB5ffcCAe11Ba427d8459D812",
    "transactionIndex": 0,
    "gasUsed": "849920",
    "logsBloom": "0x
    "blockHash": "0x3a6c916f01ada696e3e167480e8b6f32c97cadb9d8fb2a25297579140ffe210a",
    "transactionHash": "0x0a1afffe0c60ea0df5b0c658652393e9781d0d5af8f65ee79e4909a12292dc2f",
    "logs": [],
    "blockNumber": 42249870,
    "cumulativeGasUsed": "849920",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4109d34B4fB8427ABc03D9D0C76c04bBe453D640"
  ],
  "numDeployments": 2,
  "solcInputHash": "19a1cc1b7dcbd3f6ee5681e7c8852d2a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_btcEligibleUsersList\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"numWords\",\"type\":\"uint32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"RewardTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"btcEligibleUsersList\",\"outputs\":[{\"internalType\":\"contract BtcEligibleUsersList\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"linkAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRewardDistributionWithRandomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomTokenRewarder.sol\":\"RandomTokenRewarder\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/VRFV2WrapperInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFV2WrapperInterface {\\n  /**\\n   * @return the request ID of the most recent VRF V2 request made by this wrapper. This should only\\n   * be relied option within the same transaction that the request was made.\\n   */\\n  function lastRequestId() external view returns (uint256);\\n\\n  /**\\n   * @notice Calculates the price of a VRF request with the given callbackGasLimit at the current\\n   * @notice block.\\n   *\\n   * @dev This function relies on the transaction gas price which is not automatically set during\\n   * @dev simulation. To estimate the price at a specific gas price, use the estimatePrice function.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   */\\n  function calculateRequestPrice(uint32 _callbackGasLimit) external view returns (uint256);\\n\\n  /**\\n   * @notice Estimates the price of a VRF request with a specific gas limit and gas price.\\n   *\\n   * @dev This is a convenience function that can be called in simulation to better understand\\n   * @dev pricing.\\n   *\\n   * @param _callbackGasLimit is the gas limit used to estimate the price.\\n   * @param _requestGasPriceWei is the gas price in wei used for the estimation.\\n   */\\n  function estimateRequestPrice(uint32 _callbackGasLimit, uint256 _requestGasPriceWei) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x44f6fa0cb1867a0bc137a195d4603bafa1cf74ecfbe69eb82a5dabeca8957738\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xac02fbc0c7d194e525a71f524d1f7c472df73e19c2b527d7b529badaeaf0ec51\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vrf/VRFV2WrapperConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"../interfaces/VRFV2WrapperInterface.sol\\\";\\n\\n/** *******************************************************************************\\n * @notice Interface for contracts using VRF randomness through the VRF V2 wrapper\\n * ********************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Create VRF V2 requests without the need for subscription management. Rather than creating\\n * @dev and funding a VRF V2 subscription, a user can use this wrapper to create one off requests,\\n * @dev paying up front rather than at fulfillment.\\n *\\n * @dev Since the price is determined using the gas price of the request transaction rather than\\n * @dev the fulfillment transaction, the wrapper charges an additional premium on callback gas\\n * @dev usage, in addition to some extra overhead costs associated with the VRFV2Wrapper contract.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFV2WrapperConsumerBase. The consumer must be funded\\n * @dev with enough LINK to make the request, otherwise requests will revert. To request randomness,\\n * @dev call the 'requestRandomness' function with the desired VRF parameters. This function handles\\n * @dev paying for the request based on the current pricing.\\n *\\n * @dev Consumers must implement the fullfillRandomWords function, which will be called during\\n * @dev fulfillment with the randomness result.\\n */\\nabstract contract VRFV2WrapperConsumerBase {\\n  LinkTokenInterface internal immutable LINK;\\n  VRFV2WrapperInterface internal immutable VRF_V2_WRAPPER;\\n\\n  /**\\n   * @param _link is the address of LinkToken\\n   * @param _vrfV2Wrapper is the address of the VRFV2Wrapper contract\\n   */\\n  constructor(address _link, address _vrfV2Wrapper) {\\n    LINK = LinkTokenInterface(_link);\\n    VRF_V2_WRAPPER = VRFV2WrapperInterface(_vrfV2Wrapper);\\n  }\\n\\n  /**\\n   * @dev Requests randomness from the VRF V2 wrapper.\\n   *\\n   * @param _callbackGasLimit is the gas limit that should be used when calling the consumer's\\n   *        fulfillRandomWords function.\\n   * @param _requestConfirmations is the number of confirmations to wait before fulfilling the\\n   *        request. A higher number of confirmations increases security by reducing the likelihood\\n   *        that a chain re-org changes a published randomness outcome.\\n   * @param _numWords is the number of random words to request.\\n   *\\n   * @return requestId is the VRF V2 request ID of the newly created randomness request.\\n   */\\n  function requestRandomness(\\n    uint32 _callbackGasLimit,\\n    uint16 _requestConfirmations,\\n    uint32 _numWords\\n  ) internal returns (uint256 requestId) {\\n    LINK.transferAndCall(\\n      address(VRF_V2_WRAPPER),\\n      VRF_V2_WRAPPER.calculateRequestPrice(_callbackGasLimit),\\n      abi.encode(_callbackGasLimit, _requestConfirmations, _numWords)\\n    );\\n    return VRF_V2_WRAPPER.lastRequestId();\\n  }\\n\\n  /**\\n   * @notice fulfillRandomWords handles the VRF V2 wrapper response. The consuming contract must\\n   * @notice implement it.\\n   *\\n   * @param _requestId is the VRF V2 request ID.\\n   * @param _randomWords is the randomness result.\\n   */\\n  function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal virtual;\\n\\n  function rawFulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) external {\\n    require(msg.sender == address(VRF_V2_WRAPPER), \\\"only VRF V2 wrapper can fulfill\\\");\\n    fulfillRandomWords(_requestId, _randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x892f17652e5de9d5e0b5e9424a9b3f2a69d3e50070ba1387f2292aea8190d3bd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BtcEligibleUsersList.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract BtcEligibleUsersList is Ownable{\\n    address[] public eligibleUsersList;\\n\\n    constructor(address[] memory _eligibleUsersList){\\n        eligibleUsersList = _eligibleUsersList;\\n        _transferOwnership(0xBd2413135f3aab57195945A046cCA4e4bacD5a5b);\\n    }\\n\\n    // only owner function to add users to eligible list\\n    function addEligibleUsers(address[] calldata _eligibleUsers) external onlyOwner {\\n        for (uint256 i = 0; i < _eligibleUsers.length; i++) {\\n            eligibleUsersList.push(_eligibleUsers[i]);\\n        }\\n    }\\n\\n    /// only owner function to remove users from eligible list\\n    function removeEligibleUsers(address[] calldata _eligibleUsers) external onlyOwner {\\n        for (uint256 i = 0; i < _eligibleUsers.length; i++) {\\n            for (uint256 j = 0; j < eligibleUsersList.length; j++) {\\n                if (eligibleUsersList[j] == _eligibleUsers[i]) {\\n                    eligibleUsersList[j] = eligibleUsersList[eligibleUsersList.length - 1];\\n                    eligibleUsersList.pop();\\n                }\\n            }\\n        }\\n    }\\n\\n    // only owner function for replacing eligible users list\\n    function replaceEligibleUsersList(address[] calldata _eligibleUsersList) external onlyOwner {\\n        eligibleUsersList = _eligibleUsersList;\\n    }\\n\\n    // function for getting the number of eligible users\\n    function getEligibleUsersCount() external view returns (uint256) {\\n        return eligibleUsersList.length;\\n    }\\n\\n    // function for getting range of eligible users\\n    function getEligibleUsers(uint256 _start, uint256 _end) external view returns (address[] memory) {\\n        require(_start < _end, \\\"Invalid range\\\");\\n        require(_end <= eligibleUsersList.length, \\\"Invalid range\\\");\\n        address[] memory users = new address[](_end - _start);\\n        for (uint256 i = _start; i < _end; i++) {\\n            users[i - _start] = eligibleUsersList[i];\\n        }\\n        return users;\\n    }\\n}\",\"keccak256\":\"0xe359688e81ed96f04fff8292209b46e0bcb5b2878da49ba1ba37dcf0b37349ff\",\"license\":\"UNLICENSED\"},\"contracts/RandomTokenRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.17;\\n\\nimport {ConfirmedOwner} from \\\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\\\";\\nimport {VRFV2WrapperConsumerBase} from \\\"@chainlink/contracts/src/v0.8/vrf/VRFV2WrapperConsumerBase.sol\\\";\\nimport {LinkTokenInterface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BtcEligibleUsersList.sol\\\";\\n\\n\\ncontract RandomTokenRewarder is VRFV2WrapperConsumerBase, ConfirmedOwner {\\n    event RequestSent(uint256 requestId, uint32 numWords);\\n\\n    // event for transferring reward to winner\\n    event RewardTransferred(address indexed winner, address indexed rewardToken, uint256 amount, uint256 blockNumber);\\n\\n    // Depends on the number of requested values that you want sent to the\\n    // fulfillRandomWords() function. Test and adjust\\n    // this limit based on the network that you select, the size of the request,\\n    // and the processing of the callback request in the fulfillRandomWords()\\n    // function.\\n    uint32 callbackGasLimit = 1000000;\\n\\n    // The default is 3, but you can set this higher.\\n    uint16 requestConfirmations = 3;\\n\\n    // For this example, retrieve 2 random values in one request.\\n    // Cannot exceed VRFV2Wrapper.getConfig().maxNumWords.\\n    uint32 numWords = 1;\\n    address public rewardToken = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\\n    BtcEligibleUsersList public btcEligibleUsersList;\\n\\n    function setRewardToken(address _rewardToken) external onlyOwner {\\n        rewardToken = _rewardToken;\\n    }\\n\\n    // ERC20 withdraw owner only\\n    function withdrawERC20(address _token, address _to, uint256 _amount) external onlyOwner {\\n        IERC20(_token).transfer(_to, _amount);\\n    }\\n\\n    // Address LINK\\n    address public linkAddress = 0x5947BB275c521040051D82396192181b413227A3;\\n    // Address WRAPPER\\n    address public wrapperAddress = 0x721DFbc5Cfe53d32ab00A9bdFa605d3b8E1f3f42;\\n\\n    constructor(address _btcEligibleUsersList)\\n    ConfirmedOwner(msg.sender)\\n    VRFV2WrapperConsumerBase(linkAddress, wrapperAddress)\\n    {\\n        btcEligibleUsersList = BtcEligibleUsersList(_btcEligibleUsersList);\\n    }\\n\\n    function requestRewardDistributionWithRandomWords()\\n    external\\n    onlyOwner\\n    returns (uint256 requestId)\\n    {\\n        requestId = requestRandomness(\\n            callbackGasLimit,\\n            requestConfirmations,\\n            numWords\\n        );\\n        emit RequestSent(requestId, numWords);\\n        return requestId;\\n    }\\n\\n\\n    function fulfillRandomWords(\\n        uint256 _requestId,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint256 randomWord = _randomWords[0];\\n\\n        uint256 primeAccountCount = btcEligibleUsersList.getEligibleUsersCount();\\n        address primeAccountAddress = btcEligibleUsersList.eligibleUsersList(randomWord % primeAccountCount);\\n\\n        uint256 rewardBalance = IERC20(rewardToken).balanceOf(address(this));\\n        IERC20(rewardToken).transfer(primeAccountAddress, rewardBalance);\\n        emit RewardTransferred(primeAccountAddress, rewardToken, rewardBalance, block.number);\\n    }\\n}\\n\\n\",\"keccak256\":\"0xd9b2f59c41a0bd59474dcce3cf12e488d0859d5ee64bae0a4c1fe6fe6a4e30d9\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60c0604052600180546504000c003d0960a61b600160a01b600160f01b0319909116179055600280546001600160a01b031990811673b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e17909155600480548216735947bb275c521040051d82396192181b413227a31790556005805490911673721dfbc5cfe53d32ab00a9bdfa605d3b8e1f3f4217905534801561009657600080fd5b50604051610e61380380610e618339810160408190526100b591610225565b6004546005546001600160a01b039182166080521660a05233806000816101235760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600080546001600160a01b0319166001600160a01b0384811691909117909155811615610153576101538161017c565b5050600380546001600160a01b0319166001600160a01b03939093169290921790915550610255565b336001600160a01b038216036101d45760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640161011a565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b60006020828403121561023757600080fd5b81516001600160a01b038116811461024e57600080fd5b9392505050565b60805160a051610bd961028860003960008181610188015281816106f401526107fd015260006106ca0152610bd96000f3fe608060405234801561001057600080fd5b50600436106100995760003560e01c80631fe543e31461009e578063235cea98146100b35780633d82abd9146100dc57806344004cc1146100ef57806379ba5097146101025780637df8b8021461010a5780638aee81271461011d5780638da5cb5b14610130578063e4be1f2014610141578063f2fde38b14610157578063f7c618c11461016a575b600080fd5b6100b16100ac36600461093e565b61017d565b005b6004546100c6906001600160a01b031681565b6040516100d39190610a07565b60405180910390f35b6003546100c6906001600160a01b031681565b6100b16100fd366004610a30565b610208565b6100b1610287565b6005546100c6906001600160a01b031681565b6100b161012b366004610a71565b610331565b6000546001600160a01b03166100c6565b61014961035b565b6040519081526020016100d3565b6100b1610165366004610a71565b6103e3565b6002546100c6906001600160a01b031681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fa5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c0060448201526064015b60405180910390fd5b61020482826103f7565b5050565b61021061064f565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061023e9085908590600401610a95565b6020604051808303816000875af115801561025d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102819190610aae565b50505050565b6001546001600160a01b031633146102da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016101f1565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61033961064f565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061036561064f565b6001546103959063ffffffff600160a01b820481169161ffff600160c01b82041691600160d01b909104166106a4565b60015460408051838152600160d01b90920463ffffffff1660208301529192507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a190565b6103eb61064f565b6103f481610885565b50565b60008160008151811061040c5761040c610ad0565b602002602001015190506000600360009054906101000a90046001600160a01b03166001600160a01b0316639d2ef1696040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190610ae6565b6003549091506000906001600160a01b03166381c2afb46104b08486610aff565b6040518263ffffffff1660e01b81526004016104ce91815260200190565b602060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190610b21565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610545903090600401610a07565b602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190610ae6565b60025460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906105b99085908590600401610a95565b6020604051808303816000875af11580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc9190610aae565b50600254604080518381524360208201526001600160a01b03928316928516917f94b38fc2f9c89289a2069bfd540ed939c23a6d93b78d39879d4a92d263a1c68e910160405180910390a3505050505050565b6000546001600160a01b031633146106a25760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016101f1565b565b6040516310c1b4d560e21b815263ffffffff841660048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634000aea0917f00000000000000000000000000000000000000000000000000000000000000009190821690634306d35490602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610ae6565b6040805163ffffffff808b16602083015261ffff8a169282019290925290871660608201526080016040516020818303038152906040526040518463ffffffff1660e01b81526004016107b793929190610b3e565b6020604051808303816000875af11580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190610aae565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610ae6565b949350505050565b336001600160a01b038216036108d75760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016101f1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561095157600080fd5b823591506020808401356001600160401b038082111561097057600080fd5b818601915086601f83011261098457600080fd5b81358181111561099657610996610928565b8060051b604051601f19603f830116810181811085821117156109bb576109bb610928565b6040529182528482019250838101850191898311156109d957600080fd5b938501935b828510156109f7578435845293850193928501926109de565b8096505050505050509250929050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146103f457600080fd5b600080600060608486031215610a4557600080fd5b8335610a5081610a1b565b92506020840135610a6081610a1b565b929592945050506040919091013590565b600060208284031215610a8357600080fd5b8135610a8e81610a1b565b9392505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215610ac057600080fd5b81518015158114610a8e57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610af857600080fd5b5051919050565b600082610b1c57634e487b7160e01b600052601260045260246000fd5b500690565b600060208284031215610b3357600080fd5b8151610a8e81610a1b565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b81811015610b8057858101830151858201608001528201610b64565b506000608082860101526080601f19601f8301168501019250505094935050505056fea26469706673582212205d11192dae6f4e04097b2eb0a412b117f734e129cfe9afe2e763ffb98286700a64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100995760003560e01c80631fe543e31461009e578063235cea98146100b35780633d82abd9146100dc57806344004cc1146100ef57806379ba5097146101025780637df8b8021461010a5780638aee81271461011d5780638da5cb5b14610130578063e4be1f2014610141578063f2fde38b14610157578063f7c618c11461016a575b600080fd5b6100b16100ac36600461093e565b61017d565b005b6004546100c6906001600160a01b031681565b6040516100d39190610a07565b60405180910390f35b6003546100c6906001600160a01b031681565b6100b16100fd366004610a30565b610208565b6100b1610287565b6005546100c6906001600160a01b031681565b6100b161012b366004610a71565b610331565b6000546001600160a01b03166100c6565b61014961035b565b6040519081526020016100d3565b6100b1610165366004610a71565b6103e3565b6002546100c6906001600160a01b031681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146101fa5760405162461bcd60e51b815260206004820152601f60248201527f6f6e6c792056524620563220777261707065722063616e2066756c66696c6c0060448201526064015b60405180910390fd5b61020482826103f7565b5050565b61021061064f565b60405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb9061023e9085908590600401610a95565b6020604051808303816000875af115801561025d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102819190610aae565b50505050565b6001546001600160a01b031633146102da5760405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b60448201526064016101f1565b60008054336001600160a01b0319808316821784556001805490911690556040516001600160a01b0390921692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a350565b61033961064f565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600061036561064f565b6001546103959063ffffffff600160a01b820481169161ffff600160c01b82041691600160d01b909104166106a4565b60015460408051838152600160d01b90920463ffffffff1660208301529192507fcc58b13ad3eab50626c6a6300b1d139cd6ebb1688a7cced9461c2f7e762665ee910160405180910390a190565b6103eb61064f565b6103f481610885565b50565b60008160008151811061040c5761040c610ad0565b602002602001015190506000600360009054906101000a90046001600160a01b03166001600160a01b0316639d2ef1696040518163ffffffff1660e01b8152600401602060405180830381865afa15801561046b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048f9190610ae6565b6003549091506000906001600160a01b03166381c2afb46104b08486610aff565b6040518263ffffffff1660e01b81526004016104ce91815260200190565b602060405180830381865afa1580156104eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050f9190610b21565b6002546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190610545903090600401610a07565b602060405180830381865afa158015610562573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105869190610ae6565b60025460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906105b99085908590600401610a95565b6020604051808303816000875af11580156105d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fc9190610aae565b50600254604080518381524360208201526001600160a01b03928316928516917f94b38fc2f9c89289a2069bfd540ed939c23a6d93b78d39879d4a92d263a1c68e910160405180910390a3505050505050565b6000546001600160a01b031633146106a25760405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b60448201526064016101f1565b565b6040516310c1b4d560e21b815263ffffffff841660048201526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634000aea0917f00000000000000000000000000000000000000000000000000000000000000009190821690634306d35490602401602060405180830381865afa15801561073e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107629190610ae6565b6040805163ffffffff808b16602083015261ffff8a169282019290925290871660608201526080016040516020818303038152906040526040518463ffffffff1660e01b81526004016107b793929190610b3e565b6020604051808303816000875af11580156107d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107fa9190610aae565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc2a88c36040518163ffffffff1660e01b8152600401602060405180830381865afa158015610859573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087d9190610ae6565b949350505050565b336001600160a01b038216036108d75760405162461bcd60e51b815260206004820152601760248201527621b0b73737ba103a3930b739b332b9103a379039b2b63360491b60448201526064016101f1565b600180546001600160a01b0319166001600160a01b0383811691821790925560008054604051929316917fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae12789190a350565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561095157600080fd5b823591506020808401356001600160401b038082111561097057600080fd5b818601915086601f83011261098457600080fd5b81358181111561099657610996610928565b8060051b604051601f19603f830116810181811085821117156109bb576109bb610928565b6040529182528482019250838101850191898311156109d957600080fd5b938501935b828510156109f7578435845293850193928501926109de565b8096505050505050509250929050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146103f457600080fd5b600080600060608486031215610a4557600080fd5b8335610a5081610a1b565b92506020840135610a6081610a1b565b929592945050506040919091013590565b600060208284031215610a8357600080fd5b8135610a8e81610a1b565b9392505050565b6001600160a01b03929092168252602082015260400190565b600060208284031215610ac057600080fd5b81518015158114610a8e57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060208284031215610af857600080fd5b5051919050565b600082610b1c57634e487b7160e01b600052601260045260246000fd5b500690565b600060208284031215610b3357600080fd5b8151610a8e81610a1b565b60018060a01b038416815260006020848184015260606040840152835180606085015260005b81811015610b8057858101830151858201608001528201610b64565b506000608082860101526080601f19601f8301168501019250505094935050505056fea26469706673582212205d11192dae6f4e04097b2eb0a412b117f734e129cfe9afe2e763ffb98286700a64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 54,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "s_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 56,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 868,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "callbackGasLimit",
        "offset": 20,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 871,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "requestConfirmations",
        "offset": 24,
        "slot": "1",
        "type": "t_uint16"
      },
      {
        "astId": 874,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "numWords",
        "offset": 26,
        "slot": "1",
        "type": "t_uint32"
      },
      {
        "astId": 877,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "rewardToken",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 880,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "btcEligibleUsersList",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(BtcEligibleUsersList)835"
      },
      {
        "astId": 915,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "linkAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 918,
        "contract": "contracts/RandomTokenRewarder.sol:RandomTokenRewarder",
        "label": "wrapperAddress",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BtcEligibleUsersList)835": {
        "encoding": "inplace",
        "label": "contract BtcEligibleUsersList",
        "numberOfBytes": "20"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}