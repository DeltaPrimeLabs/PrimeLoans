{
  "address": "0x912751Febb68fE9bC2b4dBe7042274fD581b8865",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CanNotPickMedianOfEmptyArray",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "GetDataServiceIdNotImplemented",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "PriceSymbolPositionMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampFromTooLongFuture",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blockTimestamp",
          "type": "uint256"
        }
      ],
      "name": "TimestampIsTooOld",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Uint256x256Math__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Uint256x256Math__MulShiftOverflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "aggregateValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signerAddress",
          "type": "address"
        }
      ],
      "name": "getAuthorisedSignerIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDataServiceId",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHealthMeter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedPositionsPrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct HealthMeterFacetProd.AssetPrice[]",
          "name": "result",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniqueSignersThreshold",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedTimestampMilliseconds",
          "type": "uint256"
        }
      ],
      "name": "validateTimestamp",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4fa4a0cf43ffe3bb6606ea9360d32d276fe04d17a64ab0cfd27292680d3d5113",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x912751Febb68fE9bC2b4dBe7042274fD581b8865",
    "transactionIndex": 0,
    "gasUsed": "2881145",
    "logsBloom": "0x
    "blockHash": "0x9811e9bdd4a143e9e79e772ccd99082b1c8e00052e310fe539958fea83472349",
    "transactionHash": "0x4fa4a0cf43ffe3bb6606ea9360d32d276fe04d17a64ab0cfd27292680d3d5113",
    "logs": [],
    "blockNumber": 42812908,
    "cumulativeGasUsed": "2881145",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "926648424d0d5d1436089b68a5df80c2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CanNotPickMedianOfEmptyArray\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GetDataServiceIdNotImplemented\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PriceSymbolPositionMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampFromTooLongFuture\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockTimestamp\",\"type\":\"uint256\"}],\"name\":\"TimestampIsTooOld\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Uint256x256Math__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Uint256x256Math__MulShiftOverflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"aggregateValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signerAddress\",\"type\":\"address\"}],\"name\":\"getAuthorisedSignerIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDataServiceId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHealthMeter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedPositionsPrices\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct HealthMeterFacetProd.AssetPrice[]\",\"name\":\"result\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniqueSignersThreshold\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedTimestampMilliseconds\",\"type\":\"uint256\"}],\"name\":\"validateTimestamp\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"aggregateValues(uint256[])\":{\"details\":\"This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value\",\"params\":{\"values\":\"An array of uint256 values from different signers\"},\"returns\":{\"_0\":\"Result of the aggregation in the form of a single number\"}},\"getDataServiceId()\":{\"details\":\"This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\",\"returns\":{\"_0\":\"dataServiceId being consumed by contract\"}},\"getHealthMeter()\":{\"details\":\"This function uses the redstone-evm-connector\"},\"getUniqueSignersThreshold()\":{\"details\":\"This function should be overridden by the child consumer contract.\",\"returns\":{\"_0\":\"The minimum required value of unique authorised signers\"}},\"validateTimestamp(uint256)\":{\"details\":\"This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid\",\"params\":{\"receivedTimestampMilliseconds\":\"Timestamp extracted from calldata\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getHealthMeter()\":{\"notice\":\"Returns current health meter (0% - 100%) associated with the loan\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/HealthMeterFacetProd.sol\":\"HealthMeterFacetProd\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9f4357008a8f7d8c8bf5d48902e789637538d8c016be5766610901b4bba81514\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x7a381362d355b7c2eff8cf9a2b0e0836d7b7c950b32f0fb65f1e4fc43c0c7379\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0x82ab78ed59f4a811f5ab5c32064099235d753f98df42c087476ddabbf0348f21\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  error GetDataServiceIdNotImplemented();\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return dataServiceId which DataServiceWrapper will use if not provided explicitly .\\n   * If not overridden, value will always have to be provided explicitly in DataServiceWrapper.\\n   * @return dataServiceId being consumed by contract\\n   */\\n  function getDataServiceId() public view virtual returns (string memory) {\\n    revert GetDataServiceIdNotImplemented();\\n  }\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receivedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receivedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overridden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overridden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of authorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of signer bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS; //DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x9f67e176ef49bc988486de896bddce913dc0679b6f3f2cf9fd9803e683927d42\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < uniqueDataFeedIdsCount; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0xe8e70ed8bb3efc527dccaf5919587c7ff3980836256d7d8db8f632721a3cf956\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n\\n    if (block.timestamp < receivedTimestampSeconds) {\\n      if ((receivedTimestampSeconds - block.timestamp) > DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) {\\n        revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n      }\\n    } else if ((block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0xe39ee1618d15944d6f44918f02f71d0d604fb678dbdbf36ca1eeecc86858ff25\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getDataServiceId() public view virtual override returns (string memory) {\\n    return \\\"redstone-avalanche-prod\\\";\\n  }\\n\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 3;\\n  }\\n\\n  function getAuthorisedSignerIndex(\\n    address signerAddress\\n  ) public view virtual override returns (uint8) {\\n    if (signerAddress == 0x1eA62d73EdF8AC05DfceA1A34b9796E937a29EfF) {\\n      return 0;\\n    } else if (signerAddress == 0x2c59617248994D12816EE1Fa77CE0a64eEB456BF) {\\n      return 1;\\n    } else if (signerAddress == 0x12470f7aBA85c8b81D63137DD5925D6EE114952b) {\\n      return 2;\\n    } else if (signerAddress == 0x109B4a318A4F5ddcbCA6349B45f881B4137deaFB) {\\n      return 3;\\n    } else if (signerAddress == 0x83cbA8c619fb629b81A65C2e67fE15cf3E3C9747) {\\n      return 4;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf4973e3cd13becff144920e24be265293cbe6674bce315b060472134f67cdbfe\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 6094467959b5f026a0b2395f84a97536afb77aab;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\nimport \\\"./VestingDistributor.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    VestingDistributor public vestingDistributor;\\n\\n    uint8 internal _decimals;\\n\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        _decimals = IERC20Metadata(tokenAddress_).decimals();\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setVestingDistributor(address _distributor) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(_distributor) && _distributor != address(0)) revert NotAContract(_distributor);\\n        vestingDistributor = VestingDistributor(_distributor);\\n\\n        emit VestingDistributorChanged(_distributor, block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override nonReentrant returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        address account = msg.sender;\\n        _accumulateDepositInterest(account);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, account);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(account, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override nonReentrant returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(sender);\\n        if(amount > transferrableAmount) revert TransferAmountExceedsBalance(amount, transferrableAmount);\\n\\n        _updateWithdrawn(sender, amount, lockedAmount);\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual {\\n        depositOnBehalf(_amount, msg.sender);\\n    }\\n\\n    /**\\n     * Deposits the amount on behalf of `_of` user.\\n     * It updates `_of` user deposited balance, total deposited and rates\\n     **/\\n    function depositOnBehalf(uint256 _amount, address _of) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n        require(_of != address(0), \\\"Address zero\\\");\\n        require(_of != address(this), \\\"Cannot deposit on behalf of pool\\\");\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(_of);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(_of, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, _of);\\n        }\\n\\n        emit DepositOnBehalfOf(msg.sender, _of, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        _accumulateDepositInterest(msg.sender);\\n        _amount = Math.min(_amount, _deposited[msg.sender]);\\n\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function name() public virtual pure returns(string memory _name){\\n        _name = \\\"\\\";\\n    }\\n\\n    function symbol() public virtual pure returns(string memory _symbol){\\n        _symbol = \\\"\\\";\\n    }\\n\\n    function decimals() public virtual view returns(uint8){\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\n        return 0.925e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns full pool status\\n     */\\n    function getFullPoolStatus() public view returns (uint256[5] memory) {\\n        return [\\n            totalSupply(),\\n            getDepositRate(),\\n            getBorrowingRate(),\\n            totalBorrowed(),\\n            getMaxPoolUtilisationForBorrowing()\\n        ];\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n        (uint256 lockedAmount, uint256 transferrableAmount) = _getAmounts(account);\\n        if(amount > transferrableAmount) revert BurnAmountExceedsAvailableForUser();\\n\\n        _updateWithdrawn(account, amount, lockedAmount);\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _getAmounts(address account) internal view returns (uint256 lockedAmount, uint256 transferrableAmount) {\\n        if (address(vestingDistributor) != address(0)) {\\n            lockedAmount = vestingDistributor.locked(account);\\n            if (lockedAmount > 0) {\\n                transferrableAmount = _deposited[account] - (lockedAmount - vestingDistributor.availableToWithdraw(account));\\n            } else {\\n                transferrableAmount = _deposited[account];\\n            }\\n        } else {\\n            transferrableAmount = _deposited[account];\\n        }\\n    }\\n\\n    function _updateWithdrawn(address account, uint256 amount, uint256 lockedAmount) internal {\\n        uint256 availableUnvested = _deposited[account] - lockedAmount;\\n        if (amount > availableUnvested && address(vestingDistributor) != address(0)) {\\n            vestingDistributor.updateWithdrawn(account, amount - availableUnvested);\\n        }\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user deposits funds on behalf of other user\\n     * @param user the address performing the deposit\\n     * @param _of the address on behalf of which the deposit is being performed\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event DepositOnBehalfOf(address indexed user, address indexed _of, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing vesting distributor\\n    * @param distributor an address of the newly set distributor\\n    * @param timestamp of the distributor change\\n    **/\\n    event VestingDistributorChanged(address indexed distributor, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // ERC20: burn amount exceeds current amount available (including vesting)\\n    error BurnAmountExceedsAvailableForUser();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x348ac6028aef2f5585fad2557c0b9a7f8819db376951f608fc50f3d500c3f8e1\",\"license\":\"BUSL-1.1\"},\"contracts/VestingDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 9f1e1bba11316303810f35a4440e20bc5ad0ef86;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title VestingDistributor\\n * @dev Contract distributing pool's spread among vesting participants.\\n */\\ncontract VestingDistributor {\\n\\n    Pool immutable pool;\\n    IERC20Metadata immutable poolToken;\\n    address keeper;\\n    address pendingKeeper;\\n\\n    uint256 totalLockedMultiplied;\\n    address[] public participants;\\n    mapping(address => uint256) public locked;\\n    mapping(address => uint256) public withdrawn;\\n    mapping(address => uint256) public unvestingTime;\\n    mapping(address => uint256) public unlockTimestamp;\\n    mapping(address => uint256) public multiplier;\\n    mapping(uint256 => uint256) rewardAmount;\\n    mapping(uint256 => mapping(address => bool)) rewardDistributed;\\n    mapping(uint256 => uint256) numRewardDistributed;\\n\\n    uint256 lastUpdated;\\n    uint256 updateInterval = 6 hours;\\n\\n    uint256 public constant ONE_DAY = 24 * 3600; // 24 hours * 3600 seconds\\n    uint256 public constant MIN_VESTING_TIME = ONE_DAY; // 1 day * 24 hours * 3600 seconds\\n    uint256 public constant MAX_VESTING_TIME = 30 * ONE_DAY; // 30 days * 24 hours * 3600 seconds\\n\\n    modifier onlyPool() {\\n        require(msg.sender == address(pool), \\\"Unauthorized: onlyPool\\\");\\n        _;\\n    }\\n\\n    modifier onlyKeeper() {\\n        require(msg.sender == keeper, \\\"Unauthorized: onlyKeeper\\\");\\n        _;\\n    }\\n\\n    modifier onlyPendingKeeper() {\\n        require(msg.sender == pendingKeeper, \\\"Unauthorized: onlyPendingKeeper\\\");\\n        _;\\n    }\\n\\n    constructor(address poolAddress, address keeperAddress) {\\n        pool = Pool(poolAddress);\\n        poolToken = IERC20Metadata(pool.tokenAddress());\\n        keeper = keeperAddress;\\n        lastUpdated = block.timestamp;\\n    }\\n\\n    function transferKeeper(address keeperAddress) external onlyKeeper {\\n        pendingKeeper = keeperAddress;\\n    }\\n\\n    function acceptKeeper() external onlyPendingKeeper {\\n        keeper = pendingKeeper;\\n        pendingKeeper = address(0);\\n    }\\n\\n    /**\\n     * Add vesting participant (msg.sender)\\n     **/\\n    function startVesting(uint256 amount, uint256 time) public {\\n        if (time < MIN_VESTING_TIME || time > MAX_VESTING_TIME) revert InvalidVestingTime();\\n        if (pool.balanceOf(msg.sender) < amount) revert InsufficientPoolBalance();\\n        if (locked[msg.sender] > 0 || unvestingTime[msg.sender] > 0) revert AlreadyLocked();\\n\\n        participants.push(msg.sender);\\n        locked[msg.sender] = amount;\\n        unvestingTime[msg.sender] = time;\\n        uint256 _multiplier = getMultiplier(time);\\n        multiplier[msg.sender] = _multiplier;\\n\\n        totalLockedMultiplied += amount * _multiplier / 1e18;\\n    }\\n\\n    /**\\n     * Increase vesting of msg.sender\\n     **/\\n    function increaseVesting(uint256 amount) public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n        if (pool.balanceOf(msg.sender) < locked[msg.sender] + amount) revert InsufficientPoolBalance();\\n        if (unlockTimestamp[msg.sender] > 0) revert TooLate();\\n\\n        locked[msg.sender] += amount;\\n\\n        totalLockedMultiplied += amount * multiplier[msg.sender] / 1e18;\\n    }\\n\\n    /**\\n     * Unlock funds - start of unvesting\\n     **/\\n    function unlock() public {\\n        if (locked[msg.sender] == 0 || unvestingTime[msg.sender] == 0) revert UserNotLocked();\\n\\n        unlockTimestamp[msg.sender] = block.timestamp;\\n    }\\n\\n    /**\\n     * Check how much user can withdraw\\n     **/\\n    function availableToWithdraw(address account) public view returns (uint256) {\\n        if (locked[account] == 0 || unvestingTime[account] == 0) revert UserNotLocked();\\n        if (unlockTimestamp[account] == 0) revert UserLocked();\\n\\n        uint256 timeFromUnlock = block.timestamp - unlockTimestamp[account];\\n        if (timeFromUnlock > unvestingTime[account]) timeFromUnlock = unvestingTime[account];\\n        uint256 initialUnlock = ONE_DAY * locked[account] / (unvestingTime[account] + ONE_DAY); // 1D / vesting days * locked amount\\n\\n        return initialUnlock + timeFromUnlock * (locked[account] - initialUnlock) / unvestingTime[account];\\n    }\\n\\n    /**\\n     * Gets pool's spread and distributes among vesting participants.\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    //TODO: run periodically by bots\\n    function distributeRewards(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        if (block.timestamp < lastUpdated + updateInterval) revert DistributeTooEarly();\\n\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n\\n        if (rewardAmount[lastUpdated] == 0) {\\n            rewardAmount[lastUpdated] = pool.balanceOf(address(this));\\n        }\\n        uint256 rewards = rewardAmount[lastUpdated];\\n\\n        for (uint256 i = fromIndex; i <= toIndex; i++) {\\n            address participant = participants[i];\\n            if (rewardDistributed[lastUpdated][participant]) {\\n                continue;\\n            }\\n\\n            //TODO: right now we distribute rewards even when someone start withdrawing. The rewards should depend on the amount which is still locked.\\n            uint256 participantReward = rewards * (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18 / totalLockedMultiplied;\\n\\n            pool.transfer(participant, participantReward);\\n\\n            rewardDistributed[lastUpdated][participant] = true;\\n            ++numRewardDistributed[lastUpdated];\\n            if (numRewardDistributed[lastUpdated] == participants.length) {\\n                lastUpdated = block.timestamp;\\n            }\\n        }\\n    }\\n\\n    //TODO: run periodically by bots\\n    function updateParticipants(uint256 fromIndex, uint256 toIndex) public onlyKeeper {\\n        (fromIndex, toIndex) = fromIndex < toIndex ? (fromIndex, toIndex) : (toIndex, fromIndex);\\n        toIndex = toIndex < participants.length ? toIndex : participants.length - 1;\\n        for (uint256 i = fromIndex; i <= toIndex;) {\\n            address participant = participants[i];\\n            if (unlockTimestamp[participant] > 0 && (block.timestamp - unlockTimestamp[participant]) > unvestingTime[participant]) {\\n                totalLockedMultiplied -= (locked[participant] - withdrawn[participant]) * multiplier[participant] / 1e18;\\n\\n                unvestingTime[participant] = 0;\\n                locked[participant] = 0;\\n                unlockTimestamp[participant] = 0;\\n                withdrawn[participant] = 0;\\n                multiplier[participant] = 0;\\n\\n                participants[i] = participants[participants.length - 1];\\n                participants.pop();\\n                --toIndex;\\n            } else {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateWithdrawn(address account, uint256 amount) public onlyPool {\\n        withdrawn[account] += amount;\\n        if (withdrawn[account] > locked[account]) {\\n            revert WithdrawMoreThanLocked();\\n        }\\n        totalLockedMultiplied -= amount * multiplier[account] / 1e18;\\n    }\\n\\n    function getMultiplier(uint256 time) public pure returns (uint256){\\n        if (time >= 30 * ONE_DAY) return 2e18; // min. 30 days\\n        if (time >= 29 * ONE_DAY) return 1.99e18; // min. 29 days\\n        if (time >= 28 * ONE_DAY) return 1.98e18; // min. 28 days\\n        if (time >= 27 * ONE_DAY) return 1.97e18; // min. 27 days\\n        if (time >= 26 * ONE_DAY) return 1.96e18; // min. 26 days\\n        if (time >= 25 * ONE_DAY) return 1.948e18; // min. 25 days\\n        if (time >= 24 * ONE_DAY) return 1.936e18; // min. 24 days\\n        if (time >= 23 * ONE_DAY) return 1.924e18; // min. 23 days\\n        if (time >= 22 * ONE_DAY) return 1.912e18; // min. 22 days\\n        if (time >= 21 * ONE_DAY) return 1.9e18; // min. 21 days\\n        if (time >= 20 * ONE_DAY) return 1.885e18; // min. 20 days\\n        if (time >= 19 * ONE_DAY) return 1.871e18; // min. 19 days\\n        if (time >= 18 * ONE_DAY) return 1.856e18; // min. 18 days\\n        if (time >= 17 * ONE_DAY) return 1.841e18; // min. 17 days\\n        if (time >= 16 * ONE_DAY) return 1.824e18; // min. 16 days\\n        if (time >= 15 * ONE_DAY) return 1.806e18; // min. 15 days\\n        if (time >= 14 * ONE_DAY) return 1.788e18; // min. 14 days\\n        if (time >= 13 * ONE_DAY) return 1.768e18; // min. 13 days\\n        if (time >= 12 * ONE_DAY) return 1.746e18; // min. 12 days\\n        if (time >= 11 * ONE_DAY) return 1.723e18; // min. 11 days\\n        if (time >= 10 * ONE_DAY) return 1.698e18; // min. 10 days\\n        if (time >= 9 * ONE_DAY) return 1.67e18; // min. 9 days\\n        if (time >= 8 * ONE_DAY) return 1.64e18; // min. 8 days\\n        if (time >= 7 * ONE_DAY) return 1.605e18; // min. 7 days\\n        if (time >= 6 * ONE_DAY) return 1.566e18; // min. 6 days\\n        if (time >= 5 * ONE_DAY) return 1.521e18; // min. 5 days\\n        if (time >= 4 * ONE_DAY) return 1.468e18; // min. 4 days\\n        if (time >= 3 * ONE_DAY) return 1.4e18; // min. 3 days\\n        if (time >= 2 * ONE_DAY) return 1.32e18; // min. 2 days\\n        if (time >= 1 * ONE_DAY) return 1.2e18; // min. 1 day\\n\\n        return 1e18;\\n    }\\n\\n\\n    // Trying to distribute before the update interval has been reached\\n    error DistributeTooEarly();\\n\\n    // Already participates in vesting\\n    error AlreadyLocked();\\n\\n    // Vesting time is out of range\\n    error InvalidVestingTime();\\n\\n    // Insufficient user balance of pool's tokens\\n    error InsufficientPoolBalance();\\n\\n    // User not locked\\n    error UserNotLocked();\\n\\n    // User funds are locked\\n    error UserLocked();\\n\\n    // Too late\\n    error TooLate();\\n\\n    // Withdraw amount is more than locked\\n    error WithdrawMoreThanLocked();\\n}\",\"keccak256\":\"0xe72508cecacd8c0458a6819818cd6c36aff2d993a83a725d4ef382023c7f8e63\",\"license\":\"BUSL-1.1\"},\"contracts/facets/HealthMeterFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 7af66bca167ff1e5a6e058744c733e0b9fe8273c;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\nimport \\\"../interfaces/ITokenManager.sol\\\";\\nimport \\\"../interfaces/facets/avalanche/ITraderJoeV2Facet.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\nimport {Uint256x256Math} from \\\"../lib/joe-v2/math/Uint256x256Math.sol\\\";\\nimport {PriceHelper} from \\\"../lib/joe-v2/PriceHelper.sol\\\";\\nimport \\\"../Pool.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract HealthMeterFacetProd is AvalancheDataServiceConsumerBase {\\n    using PriceHelper for uint256;\\n    using Uint256x256Math for uint256;\\n\\n    struct AssetPrice {\\n        bytes32 asset;\\n        uint256 price;\\n    }\\n\\n    struct PriceInfo {\\n        address tokenX;\\n        address tokenY;\\n        uint256 priceX;\\n        uint256 priceY;\\n    }\\n\\n    function _getTotalTraderJoeV2Weighted() internal view returns (uint256) {\\n        uint256 total;\\n\\n        ITraderJoeV2Facet.TraderJoeV2Bin[] memory ownedTraderJoeV2Bins = DiamondStorageLib.getTjV2OwnedBinsView();\\n\\n        PriceInfo memory priceInfo;\\n\\n        if (ownedTraderJoeV2Bins.length > 0) {\\n            for (uint256 i; i < ownedTraderJoeV2Bins.length; i++) {\\n                ITraderJoeV2Facet.TraderJoeV2Bin memory binInfo = ownedTraderJoeV2Bins[i];\\n\\n                uint256 price;\\n                uint256 liquidity;\\n\\n                {\\n                    address tokenXAddress = address(binInfo.pair.getTokenX());\\n                    address tokenYAddress = address(binInfo.pair.getTokenY());\\n\\n                    if (priceInfo.tokenX != tokenXAddress || priceInfo.tokenY != tokenYAddress) {\\n                        bytes32[] memory symbols = new bytes32[](2);\\n\\n\\n                        symbols[0] = DeploymentConstants.getTokenManager().tokenAddressToSymbol(tokenXAddress);\\n                        symbols[1] = DeploymentConstants.getTokenManager().tokenAddressToSymbol(tokenYAddress);\\n\\n                        uint256[] memory prices = getOracleNumericValuesFromTxMsg(symbols);\\n                        priceInfo = PriceInfo(tokenXAddress, tokenYAddress, prices[0], prices[1]);\\n                    }\\n                }\\n\\n                {\\n                    (uint128 binReserveX, uint128 binReserveY) = binInfo.pair.getBin(binInfo.id);\\n\\n                    price = PriceHelper.convert128x128PriceToDecimal(binInfo.pair.getPriceFromId(binInfo.id)); // how is it denominated (what precision)?\\n\\n                    liquidity = price * binReserveX / 10 ** 18 + binReserveY;\\n                }\\n\\n\\n                {\\n                    uint256 debtCoverageX = DeploymentConstants.getTokenManager().debtCoverage(address(binInfo.pair.getTokenX()));\\n                    uint256 debtCoverageY = DeploymentConstants.getTokenManager().debtCoverage(address(binInfo.pair.getTokenY()));\\n\\n                    total = total +\\n                                                        Math.min(\\n                                            price > 10 ** 24 ?\\n                                                debtCoverageX * liquidity / (price / 10 ** 18) / 10 ** IERC20Metadata(address(binInfo.pair.getTokenX())).decimals() * priceInfo.priceX / 10 ** 8\\n                                                :\\n                                                debtCoverageX * liquidity / price * 10 ** 18 / 10 ** IERC20Metadata(address(binInfo.pair.getTokenX())).decimals() * priceInfo.priceX / 10 ** 8,\\n                                            debtCoverageY * liquidity / 10 ** (IERC20Metadata(address(binInfo.pair.getTokenY())).decimals()) * priceInfo.priceY / 10 ** 8\\n                                        )\\n                                        .mulDivRoundDown(binInfo.pair.balanceOf(address(this), binInfo.id), 1e18)\\n                                .mulDivRoundDown(1e18, binInfo.pair.totalSupply(binInfo.id));\\n                }\\n            }\\n\\n            return total;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\n    **/\\n    function _getDebtAssets() internal view returns (bytes32[] memory result) {\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        result = tokenManager.getAllPoolAssets();\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function _getOwnedAssetsWithNativePrices() internal view returns (AssetPrice[] memory result) {\\n        bytes32[] memory assetsEnriched = _getOwnedAssetsWithNative();\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\n\\n        result = new AssetPrice[](assetsEnriched.length);\\n\\n        for (uint i; i < assetsEnriched.length; i++) {\\n            result[i] = AssetPrice({\\n                asset: assetsEnriched[i],\\n                price: prices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns list of owned assets that always included NativeToken at index 0\\n    **/\\n    function _getOwnedAssetsWithNative() internal view returns (bytes32[] memory){\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n\\n        // If account already owns the native token the use ownedAssets.length; Otherwise add one element to account for additional native token.\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\n        bytes32[] memory assetsWithNative = new bytes32[](numberOfAssets);\\n\\n        uint256 lastUsedIndex;\\n        assetsWithNative[0] = nativeTokenSymbol; // First asset = NativeToken\\n\\n        for (uint i = 0; i < ownedAssets.length; i++) {\\n            if (ownedAssets[i] != nativeTokenSymbol) {\\n                lastUsedIndex += 1;\\n                assetsWithNative[lastUsedIndex] = ownedAssets[i];\\n            }\\n        }\\n        return assetsWithNative;\\n    }\\n\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\n        for(uint256 i=0; i<positions.length; i++) {\\n            symbols[i] = positions[i].symbol;\\n        }\\n\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\n\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: symbols[i],\\n                price: stakedPositionsPrices[i]\\n            });\\n        }\\n    }\\n\\n    function _getTWVStakedPositions() internal view returns (uint256) {\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 weightedValueOfStaked;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if(stakedPositionsPrices[i].asset != positions[i].symbol){\\n                revert PriceSymbolPositionMismatch();\\n            }\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * balance * tokenManager.debtCoverageStaked(positions[i].identifier) / (10 ** token.decimals() * 10**8);\\n            }\\n\\n\\n        }\\n        return weightedValueOfStaked;\\n    }\\n\\n    /**\\n     * Returns current health meter (0% - 100%) associated with the loan\\n     * @dev This function uses the redstone-evm-connector\\n     */\\n    function getHealthMeter() public view returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = _getOwnedAssetsWithNativePrices();\\n\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n        ITokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        uint256 weightedCollateral;\\n        uint256 weightedCollateralPlus = ownedAssetsPrices[0].price * address(this).balance * tokenManager.debtCoverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\n        uint256 weightedCollateralMinus = 0;\\n        uint256 weightedBorrowed = 0;\\n        uint256 borrowed = 0;\\n\\n        weightedCollateralPlus += _getTotalTraderJoeV2Weighted();\\n        weightedCollateralPlus += _getTWVStakedPositions();\\n\\n        for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n            uint256 _balance = token.balanceOf(address(this));\\n\\n            Pool pool;\\n            try tokenManager.getPoolAddress(ownedAssetsPrices[i].asset) returns (address poolAddress) {\\n                pool = Pool(poolAddress);\\n            } catch {\\n                weightedCollateralPlus = weightedCollateralPlus + (ownedAssetsPrices[i].price * _balance * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n                continue;\\n            }\\n            uint256 _borrowed = pool.getBorrowed(address(this));\\n            if (_balance > _borrowed) {\\n                weightedCollateralPlus = weightedCollateralPlus + (ownedAssetsPrices[i].price * (_balance - _borrowed) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n            } else {\\n                weightedCollateralMinus = weightedCollateralMinus + (ownedAssetsPrices[i].price * (_borrowed - _balance) * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n            }\\n            weightedBorrowed = weightedBorrowed + (ownedAssetsPrices[i].price * _borrowed * tokenManager.debtCoverage(address(token)) / (10 ** token.decimals() * 1e8));\\n            borrowed = borrowed + (ownedAssetsPrices[i].price * _borrowed * 1e10 / (10 ** token.decimals()));\\n        }\\n        if (weightedCollateralPlus > weightedCollateralMinus) {\\n            weightedCollateral = weightedCollateralPlus - weightedCollateralMinus;\\n        }\\n\\n        uint256 multiplier = 100 * 1e18; // 18 decimal points\\n\\n        if (borrowed == 0) return multiplier;\\n\\n        if (weightedCollateral > 0 && weightedCollateral + weightedBorrowed > borrowed) {\\n            return (weightedCollateral + weightedBorrowed - borrowed) * multiplier / weightedCollateral;\\n        }\\n\\n        return 0;\\n    }\\n\\n    // ERRORS\\n    error PriceSymbolPositionMismatch();\\n}\\n\",\"keccak256\":\"0x529a6369a8beb1042c9a324445e04311d676c29019c1a2f031e018ce7887b246\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        // Asset is either the token (symbol) address being staked or the address of the PTP LP token in case where a pool for that token (symbol) already exists within the VectorFinance\\n        address asset;\\n        bytes32 symbol;\\n        bytes32 identifier;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0x10a1d6e52d762a40d3a632aaf2807daf64e5fdc66047c5eec6f451ad4c760532\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ITokenManager.sol\":{\"content\":\"interface ITokenManager {\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 debtCoverage;\\n    }\\n\\n    function activateToken ( address token ) external;\\n    function addPoolAssets ( poolAsset[] memory poolAssets ) external;\\n    function addTokenAssets ( Asset[] memory tokenAssets ) external;\\n    function deactivateToken ( address token ) external;\\n    function debtCoverage ( address ) external view returns ( uint256 );\\n    function debtCoverageStaked ( bytes32 ) external view returns ( uint256 );\\n    function getAllPoolAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAllTokenAssets (  ) external view returns ( bytes32[] memory result );\\n    function getAssetAddress ( bytes32 _asset, bool allowInactive ) external view returns ( address );\\n    function getPoolAddress ( bytes32 _asset ) external view returns ( address );\\n    function getSupportedTokensAddresses (  ) external view returns ( address[] memory);\\n    function initialize ( Asset[] memory tokenAssets, poolAsset[] memory poolAssets ) external;\\n    function increaseProtocolExposure ( bytes32 assetIdentifier, uint256 exposureIncrease ) external;\\n    function decreaseProtocolExposure(bytes32 assetIdentifier, uint256 exposureDecrease) external;\\n    function isTokenAssetActive ( address token ) external view returns ( bool );\\n    function owner (  ) external view returns ( address );\\n    function removePoolAssets ( bytes32[] memory _poolAssets ) external;\\n    function removeTokenAssets ( bytes32[] memory _tokenAssets ) external;\\n    function renounceOwnership (  ) external;\\n    function setDebtCoverage ( address token, uint256 coverage ) external;\\n    function setDebtCoverageStaked ( bytes32 stakedAsset, uint256 coverage ) external;\\n    function supportedTokensList ( uint256 ) external view returns ( address );\\n    function tokenAddressToSymbol ( address ) external view returns ( bytes32 );\\n    function tokenToStatus ( address ) external view returns ( uint256 );\\n    function transferOwnership ( address newOwner ) external;\\n    function increasePendingExposure ( bytes32 , address, uint256 ) external;\\n    function setPendingExposureToZero ( bytes32, address ) external;\\n}\",\"keccak256\":\"0x90b06911b212a857f906bf8904eed90f89fa821541c81cec85d3f6ad52e99120\"},\"contracts/interfaces/facets/avalanche/ITraderJoeV2Facet.sol\":{\"content\":\"pragma solidity ^0.8.17;\\n\\nimport \\\"../../joe-v2/ILBRouter.sol\\\";\\n\\ninterface ITraderJoeV2Facet {\\n\\n    struct TraderJoeV2Bin {\\n        ILBPair pair;\\n        uint24 id;\\n    }\\n\\n    struct RemoveLiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint16 binStep;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256[] ids;\\n        uint256[] amounts;\\n        uint256 deadline;\\n    }\\n\\n    function fundLiquidityTraderJoeV2(ILBPair pair, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    function withdrawLiquidityTraderJoeV2(ILBPair pair, uint256[] memory ids, uint256[] memory amounts) external;\\n\\n    function addLiquidityTraderJoeV2(ILBRouter.LiquidityParameters memory liquidityParameters) external;\\n\\n    function removeLiquidityTraderJoeV2(RemoveLiquidityParameters memory parameters) external;\\n\\n    function getOwnedTraderJoeV2Bins() external view returns (TraderJoeV2Bin[] memory result);\\n\\n}\\n\",\"keccak256\":\"0x33d922cfb95b24e840904cd09a606dd5b427d1be5217704ac7899e0c3b27b15a\"},\"contracts/interfaces/joe-v2/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xd1f116ee8133101c2c07112dfe871fabdcb182f9b84468765b58a5136d661ba6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/joe-v2/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x611e9da56c7f56456a2fae4aa4d4d74c266e1e9b4228509fe5eb0a2a1f1e349a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0595b40912fd6ba4c3ea7d6739e467b4381c9d6cc85218c5bd3536c9fb4ecc2b\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\",\"keccak256\":\"0xa8b0bc670a63176a8573d2afbc365955c3b212f2bed0d4b28021fe6cb3131915\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\",\"keccak256\":\"0x50691b25afe50c5f24b7dc4d89e15872c1ff833962503ee3985616025d715f25\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x6dd45a103c84d545155f1d1010c0b0cfe4e9e4097ab7c50a8498756e46f2c80a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x7910e19e35a01a163a9f8c4040dc19e1663c4d562a22a1181d25610ebc5295a1\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0xea919172ab21c9642383edcad886c93b21953b5811b83acb7227aa9df91c92bf\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 100e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 100e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0xe9fa3e531acbc8c43d230061bce4155a7699951d48d6512f232148e1dbe59082\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xecbc396e150ad6643d5749ed99402dfeb19fc3a5cd0536467755b49dcf795e3f\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IWNATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x60ffbeb68bc35b80c5a8046854ac095c73cdffbe0f293091f69f0adaf31543e3\",\"license\":\"MIT\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\nimport \\\"../interfaces/facets/avalanche/ITraderJoeV2Facet.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant LIQUIDATION_STORAGE_POSITION = keccak256(\\\"diamond.standard.liquidation.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n    bytes32 constant OWNED_TRADERJOE_V2_BINS_POSITION = keccak256(\\\"diamond.standard.traderjoe_v2_bins_1685370112\\\");\\n    //TODO: maybe we should keep here a tuple[tokenId, factory] to account for multiple Uniswap V3 deployments\\n    bytes32 constant OWNED_UNISWAP_V3_TOKEN_IDS_POSITION = keccak256(\\\"diamond.standard.uniswap_v3_token_ids_1685370112\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // Used to select methods that can be executed even when Diamond is paused\\n        mapping(bytes4 => bool) canBeExecutedWhenPaused;\\n\\n        bool _initialized;\\n        bool _active;\\n\\n        uint256 _lastBorrowTimestamp;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // PauseAdmin has the power to pause/unpause the contract without the timelock delay in case of a critical bug/exploit\\n        address pauseAdmin;\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Proposed pauseAdmin of the contract\\n        address proposedPauseAdmin;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n\\n        // Timestamp since which the account is frozen\\n        // 0 means an account that is not frozen. Any other value means that the account is frozen\\n        uint256 frozenSince;\\n    }\\n\\n    struct TraderJoeV2Storage {\\n        // TJ v2 bins of the contract\\n        ITraderJoeV2Facet.TraderJoeV2Bin[] ownedTjV2Bins;\\n    }\\n\\n    struct UniswapV3Storage {\\n        // UniswapV3 token IDs of the contract\\n        uint256[] ownedUniswapV3TokenIds;\\n    }\\n\\n    struct LiquidationStorage {\\n        // Mapping controlling addresses that can execute the liquidation methods\\n        mapping(address=>bool) canLiquidate;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function traderJoeV2Storage() internal pure returns (TraderJoeV2Storage storage tjv2s) {\\n        bytes32 position = OWNED_TRADERJOE_V2_BINS_POSITION;\\n        assembly {\\n            tjv2s.slot := position\\n        }\\n    }\\n\\n    function uniswapV3Storage() internal pure returns (UniswapV3Storage storage uv3s) {\\n        bytes32 position = OWNED_UNISWAP_V3_TOKEN_IDS_POSITION;\\n        assembly {\\n            uv3s.slot := position\\n        }\\n    }\\n\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function liquidationStorage() internal pure returns (LiquidationStorage storage ls) {\\n        bytes32 position = LIQUIDATION_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    event PauseAdminOwnershipTransferred(address indexed previousPauseAdmin, address indexed newPauseAdmin);\\n\\n    event AccountFrozen(address indexed freezeToken, uint256 timestamp);\\n\\n    event AccountUnfrozen(address indexed keeper, uint256 timestamp);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function freezeAccount(address freezeToken) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        require(sls.frozenSince == 0, \\\"Account is already frozen\\\");\\n        sls.frozenSince = block.timestamp;\\n        emit AccountFrozen(freezeToken, block.timestamp);\\n    }\\n\\n    function isAccountFrozen() internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.frozenSince != 0;\\n    }\\n\\n    function unfreezeAccount(address keeperAddress) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        require(sls.frozenSince != 0, \\\"Account is not frozen\\\");\\n        sls.frozenSince = 0;\\n        emit AccountUnfrozen(keeperAddress, block.timestamp);\\n    }\\n\\n    function getTjV2OwnedBins() internal returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\\n        bins = tjv2s.ownedTjV2Bins;\\n    }\\n\\n    function getTjV2OwnedBinsView() internal view returns(ITraderJoeV2Facet.TraderJoeV2Bin[] storage bins){\\n        TraderJoeV2Storage storage tjv2s = traderJoeV2Storage();\\n        bins = tjv2s.ownedTjV2Bins;\\n    }\\n\\n    function getUV3OwnedTokenIds() internal returns(uint256[] storage tokenIds){\\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\\n    }\\n\\n    function getUV3OwnedTokenIdsView() internal view returns(uint256[] storage tokenIds){\\n        UniswapV3Storage storage uv3s = uniswapV3Storage();\\n        tokenIds = uv3s.ownedUniswapV3TokenIds;\\n    }\\n\\n    function setContractPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousPauseAdmin = sls.pauseAdmin;\\n        sls.pauseAdmin = _newPauseAdmin;\\n        emit PauseAdminOwnershipTransferred(previousPauseAdmin, _newPauseAdmin);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function pauseAdmin() internal view returns (address pauseAdmin) {\\n        pauseAdmin = smartLoanStorage().pauseAdmin;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function setProposedPauseAdmin(address _newPauseAdmin) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedPauseAdmin = _newPauseAdmin;\\n    }\\n\\n    function getPausedMethodExemption(bytes4 _methodSig) internal view returns (bool) {\\n        DiamondStorage storage ds = diamondStorage();\\n        return ds.canBeExecutedWhenPaused[_methodSig];\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function proposedPauseAdmin() internal view returns (address proposedPauseAdmin) {\\n        proposedPauseAdmin = smartLoanStorage().proposedPauseAdmin;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == position.identifier) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes32 identifier) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].identifier == identifier) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n        emit OwnedAssetAdded(_symbol, block.timestamp);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n\\n        emit OwnedAssetAdded(_symbol, block.timestamp);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    function enforceIsPauseAdmin() internal view {\\n        require(msg.sender == smartLoanStorage().pauseAdmin, \\\"DiamondStorageLib: Must be contract pauseAdmin\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n\\n    event OwnedAssetAdded(bytes32 indexed asset, uint256 timestamp);\\n\\n    event OwnedAssetRemoved(bytes32 indexed asset, uint256 timestamp);\\n}\",\"keccak256\":\"0x049bcbb4c8f7015000e47e982bbd899d43c118920949ab180ee73b3516a0bb0f\",\"license\":\"MIT\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../interfaces/ITokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x2916B3bf7C35bd21e63D01C93C62FB0d4994e56D;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x3Ea9D480295A73fd2aF95b4D96c2afF88b21B03D;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xF3978209B7cfF2b90100C6F87CEC77dE928Ed58e;\\n\\n    address private constant _ADDRESS_PROVIDER = address(0);\\n\\n    address private constant _FEES_TREASURY_ADDREESS = 0x18C244c62372dF1b933CD455769f9B4DdB820F0C;\\n\\n    address private constant _STABILITY_POOL_ADDREESS = 0x8Ac151296Ae72a8AeE01ECB33cd8Ad9842F2704f;\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (ITokenManager) {\\n        return ITokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    function getAddressProvider() internal pure returns (address) {\\n        return _ADDRESS_PROVIDER;\\n    }\\n\\n    function getTreasuryAddress() internal pure returns (address) {\\n        return _FEES_TREASURY_ADDREESS;\\n    }\\n\\n    function getStabilityPoolAddress() internal pure returns (address) {\\n        return _STABILITY_POOL_ADDREESS;\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0xde72ded226bcf1f66dc2c64f35047e89f35693da26c388addb804168232f8fae\",\"license\":\"BUSL-1.1\"},\"contracts/lib/joe-v2/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Constants Library\\n * @author Trader Joe\\n * @notice Set of constants for Liquidity Book contracts\\n */\\nlibrary Constants {\\n    uint8 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant SQUARED_PRECISION = PRECISION * PRECISION;\\n\\n    uint256 internal constant MAX_FEE = 0.1e18; // 10%\\n    uint256 internal constant MAX_PROTOCOL_SHARE = 2_500; // 25% of the fee\\n\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"LBPair.onFlashLoan\\\");\\n}\\n\",\"keccak256\":\"0xa972f7798c31cc2dc4eb2c0749ea3f7972574c2bcea85fbe41dae40f99ff266d\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/PriceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Uint128x128Math} from \\\"./math/Uint128x128Math.sol\\\";\\nimport {Uint256x256Math} from \\\"./math/Uint256x256Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Price Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to calculate prices\\n */\\nlibrary PriceHelper {\\n    using Uint128x128Math for uint256;\\n    using Uint256x256Math for uint256;\\n    using SafeCast for uint256;\\n\\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\\n\\n    /**\\n     * @dev Calculates the price from the id and the bin step\\n     * @param id The id\\n     * @param binStep The bin step\\n     * @return price The price as a 128.128-binary fixed-point number\\n     */\\n    function getPriceFromId(uint24 id, uint16 binStep) internal pure returns (uint256 price) {\\n        uint256 base = getBase(binStep);\\n        int256 exponent = getExponent(id);\\n\\n        price = base.pow(exponent);\\n    }\\n\\n    /**\\n     * @dev Calculates the id from the price and the bin step\\n     * @param price The price as a 128.128-binary fixed-point number\\n     * @param binStep The bin step\\n     * @return id The id\\n     */\\n    function getIdFromPrice(uint256 price, uint16 binStep) internal pure returns (uint24 id) {\\n        uint256 base = getBase(binStep);\\n        int256 realId = price.log2() / base.log2();\\n\\n        unchecked {\\n            id = uint256(REAL_ID_SHIFT + realId).safe24();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the base from the bin step, which is `1 + binStep / BASIS_POINT_MAX`\\n     * @param binStep The bin step\\n     * @return base The base\\n     */\\n    function getBase(uint16 binStep) internal pure returns (uint256) {\\n        unchecked {\\n            return Constants.SCALE + (uint256(binStep) << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exponent from the id, which is `id - REAL_ID_SHIFT`\\n     * @param id The id\\n     * @return exponent The exponent\\n     */\\n    function getExponent(uint24 id) internal pure returns (int256) {\\n        unchecked {\\n            return int256(uint256(id)) - REAL_ID_SHIFT;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a price with 18 decimals to a 128.128-binary fixed-point number\\n     * @param price The price with 18 decimals\\n     * @return price128x128 The 128.128-binary fixed-point number\\n     */\\n    function convertDecimalPriceTo128x128(uint256 price) internal pure returns (uint256) {\\n        return price.shiftDivRoundDown(Constants.SCALE_OFFSET, Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @dev Converts a 128.128-binary fixed-point number to a price with 18 decimals\\n     * @param price128x128 The 128.128-binary fixed-point number\\n     * @return price The price with 18 decimals\\n     */\\n    function convert128x128PriceToDecimal(uint256 price128x128) internal pure returns (uint256) {\\n        return price128x128.mulShiftRoundDown(Constants.PRECISION, Constants.SCALE_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xe660c07d0812609a65bcdccc1d7212116e8075c3a86cf9b15ead3639b0f9fdb7\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Bit Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for bit calculations\\n */\\nlibrary BitMath {\\n    /**\\n     * @dev Returns the index of the closest bit on the right of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the right of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            uint256 shift = 255 - bit;\\n            x <<= shift;\\n\\n            // can't overflow as it's non-zero and we shifted it by `_shift`\\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - shift;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the closest bit on the left of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the left of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            x >>= bit;\\n\\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the most significant bit of x\\n     * This function returns 0 if x is 0\\n     * @param x The value as a uint256\\n     * @return msb The index of the most significant bit of x\\n     */\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\\n        assembly {\\n            if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                x := shr(128, x)\\n                msb := 128\\n            }\\n            if gt(x, 0xffffffffffffffff) {\\n                x := shr(64, x)\\n                msb := add(msb, 64)\\n            }\\n            if gt(x, 0xffffffff) {\\n                x := shr(32, x)\\n                msb := add(msb, 32)\\n            }\\n            if gt(x, 0xffff) {\\n                x := shr(16, x)\\n                msb := add(msb, 16)\\n            }\\n            if gt(x, 0xff) {\\n                x := shr(8, x)\\n                msb := add(msb, 8)\\n            }\\n            if gt(x, 0xf) {\\n                x := shr(4, x)\\n                msb := add(msb, 4)\\n            }\\n            if gt(x, 0x3) {\\n                x := shr(2, x)\\n                msb := add(msb, 2)\\n            }\\n            if gt(x, 0x1) { msb := add(msb, 1) }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the least significant bit of x\\n     * This function returns 255 if x is 0\\n     * @param x The value as a uint256\\n     * @return lsb The index of the least significant bit of x\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\\n        assembly {\\n            let sx := shl(128, x)\\n            if iszero(iszero(sx)) {\\n                lsb := 128\\n                x := sx\\n            }\\n            sx := shl(64, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 64)\\n            }\\n            sx := shl(32, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 32)\\n            }\\n            sx := shl(16, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 16)\\n            }\\n            sx := shl(8, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 8)\\n            }\\n            sx := shl(4, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 4)\\n            }\\n            sx := shl(2, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 2)\\n            }\\n            if iszero(iszero(shl(1, x))) { lsb := add(lsb, 1) }\\n\\n            lsb := sub(255, lsb)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b359776521706ae1291cbf8707919aaa5cb78d59b9dfbe5393322c393250b1f\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Safe Cast Library\\n * @author Trader Joe\\n * @notice This library contains functions to safely cast uint256 to different uint types.\\n */\\nlibrary SafeCast {\\n    error SafeCast__Exceeds248Bits();\\n    error SafeCast__Exceeds240Bits();\\n    error SafeCast__Exceeds232Bits();\\n    error SafeCast__Exceeds224Bits();\\n    error SafeCast__Exceeds216Bits();\\n    error SafeCast__Exceeds208Bits();\\n    error SafeCast__Exceeds200Bits();\\n    error SafeCast__Exceeds192Bits();\\n    error SafeCast__Exceeds184Bits();\\n    error SafeCast__Exceeds176Bits();\\n    error SafeCast__Exceeds168Bits();\\n    error SafeCast__Exceeds160Bits();\\n    error SafeCast__Exceeds152Bits();\\n    error SafeCast__Exceeds144Bits();\\n    error SafeCast__Exceeds136Bits();\\n    error SafeCast__Exceeds128Bits();\\n    error SafeCast__Exceeds120Bits();\\n    error SafeCast__Exceeds112Bits();\\n    error SafeCast__Exceeds104Bits();\\n    error SafeCast__Exceeds96Bits();\\n    error SafeCast__Exceeds88Bits();\\n    error SafeCast__Exceeds80Bits();\\n    error SafeCast__Exceeds72Bits();\\n    error SafeCast__Exceeds64Bits();\\n    error SafeCast__Exceeds56Bits();\\n    error SafeCast__Exceeds48Bits();\\n    error SafeCast__Exceeds40Bits();\\n    error SafeCast__Exceeds32Bits();\\n    error SafeCast__Exceeds24Bits();\\n    error SafeCast__Exceeds16Bits();\\n    error SafeCast__Exceeds8Bits();\\n\\n    /**\\n     * @dev Returns x on uint248 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint248\\n     */\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint240 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint240\\n     */\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint232 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint232\\n     */\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint224 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint224\\n     */\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint216 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint216\\n     */\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint208 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint208\\n     */\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint200 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint200\\n     */\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint192 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint192\\n     */\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint184 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint184\\n     */\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint176 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint176\\n     */\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint168 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint168\\n     */\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint160 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint160\\n     */\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint152 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint152\\n     */\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint144 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint144\\n     */\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint136 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint136\\n     */\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint128 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint128\\n     */\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint120 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint120\\n     */\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint112 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint112\\n     */\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint104 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint104\\n     */\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint96 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint96\\n     */\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint88 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint88\\n     */\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint80 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint80\\n     */\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint72 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint72\\n     */\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint64 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint64\\n     */\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint56 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint56\\n     */\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint48 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint48\\n     */\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint40 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint40\\n     */\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint32 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint32\\n     */\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint24 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint24\\n     */\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint16 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint16\\n     */\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint8 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint8\\n     */\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits();\\n    }\\n}\\n\",\"keccak256\":\"0x3e22926e8f7d352568f01a896860c83b3ab35b47a0ed9a0f2e780a82aa52f4a8\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/Uint128x128Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/**\\n * @title Liquidity Book Uint128x128 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for power and log calculations\\n */\\nlibrary Uint128x128Math {\\n    using BitMath for uint256;\\n\\n    error Uint128x128Math__LogUnderflow();\\n    error Uint128x128Math__PowUnderflow(uint256 x, int256 y);\\n\\n    uint256 constant LOG_SCALE_OFFSET = 127;\\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\\n\\n    /**\\n     * @notice Calculates the binary logarithm of x.\\n     * @dev Based on the iterative approximation algorithm.\\n     * https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n     * Requirements:\\n     * - x must be greater than zero.\\n     * Caveats:\\n     * - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\\n     * Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\\n     * @return result The binary logarithm as a signed 128.128-binary fixed-point number.\\n     */\\n    function log2(uint256 x) internal pure returns (int256 result) {\\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\\n        // can use the regular multiplication\\n\\n        if (x == 1) return -128;\\n        if (x == 0) revert Uint128x128Math__LogUnderflow();\\n\\n        x >>= 1;\\n\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= LOG_SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas\\n                x = LOG_SCALE_SQUARED / x;\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\\n\\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\\n            result = int256(n) << LOG_SCALE_OFFSET;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y != LOG_SCALE) {\\n                // Calculate the fractional part via the iterative approximation.\\n                // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\\n                    y = (y * y) >> LOG_SCALE_OFFSET;\\n\\n                    // Is y^2 > 2 and so in the range [2,4)?\\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\\n                        // Add the 2^(-m) factor to the logarithm.\\n                        result += delta;\\n\\n                        // Corresponds to z/2 on Wikipedia.\\n                        y >>= 1;\\n                    }\\n                }\\n            }\\n            // Convert x back to unsigned 128.128-binary fixed-point number\\n            result = (result * sign) << 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\\n     * At the end of the operations, we invert the result if needed.\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\\n     * @param y A relative number without any decimals, needs to be between ]2^21; 2^21[\\n     */\\n    function pow(uint256 x, int256 y) internal pure returns (uint256 result) {\\n        bool invert;\\n        uint256 absY;\\n\\n        if (y == 0) return Constants.SCALE;\\n\\n        assembly {\\n            absY := y\\n            if slt(absY, 0) {\\n                absY := sub(0, absY)\\n                invert := iszero(invert)\\n            }\\n        }\\n\\n        if (absY < 0x100000) {\\n            result = Constants.SCALE;\\n            assembly {\\n                let squared := x\\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                    squared := div(not(0), squared)\\n                    invert := iszero(invert)\\n                }\\n\\n                if and(absY, 0x1) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x100) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x200) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x400) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x800) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x1000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80000) { result := shr(128, mul(result, squared)) }\\n            }\\n        }\\n\\n        // revert if y is too big or if x^y underflowed\\n        if (result == 0) revert Uint128x128Math__PowUnderflow(x, y);\\n\\n        return invert ? type(uint256).max / result : result;\\n    }\\n}\\n\",\"keccak256\":\"0x4c91310af429799ae2585dbdbf8ee3cce5a4ca4e9b64ca86fb560c516a37e503\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/Uint256x256Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Uint256x256 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for full precision calculations\\n */\\nlibrary Uint256x256Math {\\n    error Uint256x256Math__MulShiftOverflow();\\n    error Uint256x256Math__MulDivOverflow();\\n\\n    /**\\n     * @notice Calculates floor(x*y/denominator) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x*y/denominator) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDivRoundDown(x, y, denominator);\\n        if (mulmod(x, y, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        if (prod0 != 0) result = prod0 >> offset;\\n        if (prod1 != 0) {\\n            // Make sure the result is less than 2^256.\\n            if (prod1 >= 1 << offset) revert Uint256x256Math__MulShiftOverflow();\\n\\n            unchecked {\\n                result += prod1 << (256 - offset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        result = mulShiftRoundDown(x, y, offset);\\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x << offset / y) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n\\n        prod0 = x << offset; // Least significant 256 bits of the product\\n        unchecked {\\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\\n        }\\n\\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x << offset / y) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        result = shiftDivRoundDown(x, offset, denominator);\\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y` as 2 uint256\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @return prod0 The least significant 256 bits of the product\\n     * @return prod1 The most significant 256 bits of the product\\n     */\\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @param prod0 The least significant 256 bits of the product\\n     * @param prod1 The most significant 256 bits of the product\\n     * @return result The result as an uint256\\n     */\\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\\n        private\\n        pure\\n        returns (uint256 result)\\n    {\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n        } else {\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\\n            // See https://cs.stackexchange.com/q/138556/92363\\n            unchecked {\\n                // Does not overflow because the denominator cannot be zero at this stage in the function\\n                uint256 lpotdod = denominator & (~denominator + 1);\\n                assembly {\\n                    // Divide denominator by lpotdod.\\n                    denominator := div(denominator, lpotdod)\\n\\n                    // Divide [prod1 prod0] by lpotdod.\\n                    prod0 := div(prod0, lpotdod)\\n\\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n                }\\n\\n                // Shift in bits from prod1 into prod0\\n                prod0 |= prod1 * lpotdod;\\n\\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n                // four bits. That is, denominator * inv = 1 mod 2^4\\n                uint256 inverse = (3 * denominator) ^ 2;\\n\\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n                // in modular arithmetic, doubling the correct bits in each step\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n                // is no longer required.\\n                result = prod0 * inverse;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc64def193c023b145bdf76277c55ebc1af51649c0f7abc38df66755a1a61ed9d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613325806100206000396000f3fe608060405234801561001057600080fd5b50600436106100785760003560e01c80633ce142f51461007d57806355a547d5146100a75780638be3471a146100bd5780639104c640146100d2578063b24ebfcc146100da578063c274583a146100ed578063f50b2efe14610126578063f90c49241461013b575b600080fd5b61009061008b366004612ec6565b610142565b60405160ff90911681526020015b60405180910390f35b6100af610249565b60405190815260200161009e565b6100c5610361565b60405161009e9190612ee3565b6100af610504565b6100af6100e8366004612f48565b610eeb565b60408051808201825260178152761c99591cdd1bdb994b585d985b185b98da194b5c1c9bd9604a1b6020820152905161009e919061301d565b610139610134366004613050565b610efc565b005b6003610090565b60006001600160a01b038216731ea62d73edf8ac05dfcea1a34b9796e937a29eff0361017057506000919050565b6001600160a01b038216732c59617248994d12816ee1fa77ce0a64eeb456bf0361019c57506001919050565b6001600160a01b0382167312470f7aba85c8b81d63137dd5925d6ee114952b036101c857506002919050565b6001600160a01b03821673109b4a318a4f5ddcbca6349b45f881b4137deafb036101f457506003919050565b6001600160a01b0382167383cba8c619fb629b81a65c2e67fe15cf3e3c97470361022057506004919050565b816040516303b1166f60e61b815260040161023b9190613069565b60405180910390fd5b919050565b600080610254610f08565b9050600061026182610fb6565b61ffff1690508060000361028857604051632154bfcf60e21b815260040160405180910390fd5b610293600283613093565b915060005b8181101561035b5760006102ab84610ff0565b90506000806102bb606887613093565b905060006102c982366130a6565b9050803592508265ffffffffffff166000036102f857604051630336dc9d60e41b815260040160405180910390fd5b87600003610310578265ffffffffffff169750610338565b878365ffffffffffff16146103385760405163d9d1f46560e01b815260040160405180910390fd5b6103428488613093565b9650505050508080610353906130b9565b915050610298565b50505090565b6060600061036d61102c565b80549091506000906001600160401b0381111561038c5761038c612f32565b6040519080825280602002602001820160405280156103b5578160200160208202803683370190505b50905060005b8254811015610417578281815481106103d6576103d66130d2565b9060005260206000209060040201600101548282815181106103fa576103fa6130d2565b60209081029190910101528061040f816130b9565b9150506103bb565b5060006104238261103e565b905080516001600160401b0381111561043e5761043e612f32565b60405190808252806020026020018201604052801561047757816020015b610464612e9a565b81526020019060019003908161045c5790505b50935060005b81518110156104fd5760405180604001604052808483815181106104a3576104a36130d2565b602002602001015181526020018383815181106104c2576104c26130d2565b60200260200101518152508582815181106104df576104df6130d2565b602002602001018190525080806104f5906130b9565b91505061047d565b5050505090565b60008061050f61126b565b9050600061051b61135e565b90506000610527611369565b6040516325eb876f60e01b8152600481018490526001602482015290915060009081906a52b7d2dcc80cd2e4000000906001600160a01b03851690636953c06c9082906325eb876f90604401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b491906130e8565b6040518263ffffffff1660e01b81526004016105d09190613069565b602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190613105565b4787600081518110610625576106256130d2565b60200260200101516020015161063b919061311e565b610645919061311e565b61064f919061314b565b9050600080600061065e611381565b6106689085613093565b9350610672611eea565b61067c9085613093565b935060005b8851811015610e4f576000876001600160a01b03166325eb876f8b84815181106106ad576106ad6130d2565b6020908102919091010151516040516001600160e01b031960e084901b168152600481019190915260016024820152604401602060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072091906130e8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016107509190613069565b602060405180830381865afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190613105565b90506000896001600160a01b0316630edc25b68d86815181106107b6576107b66130d2565b6020026020010151600001516040518263ffffffff1660e01b81526004016107e091815260200190565b602060405180830381865afa925050508015610819575060408051601f3d908101601f19168201909252610816918101906130e8565b60015b61095657826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f919061315f565b61088a90600a613266565b610898906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038c1690636953c06c906108c4908790600401613069565b602060405180830381865afa1580156108e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109059190613105565b838e8781518110610918576109186130d2565b60200260200101516020015161092e919061311e565b610938919061311e565b610942919061314b565b61094c9089613093565b9750505050610e3d565b90506040516330088b1f60e11b81526000906001600160a01b03831690636011163e90610987903090600401613069565b602060405180830381865afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c89190613105565b905080831115610b1157836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a34919061315f565b610a3f90600a613266565b610a4d906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038d1690636953c06c90610a79908890600401613069565b602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190613105565b610ac483866130a6565b8f8881518110610ad657610ad66130d2565b602002602001015160200151610aec919061311e565b610af6919061311e565b610b00919061314b565b610b0a908a613093565b9850610c4c565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b73919061315f565b610b7e90600a613266565b610b8c906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038d1690636953c06c90610bb8908890600401613069565b602060405180830381865afa158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf99190613105565b610c0385846130a6565b8f8881518110610c1557610c156130d2565b602002602001015160200151610c2b919061311e565b610c35919061311e565b610c3f919061314b565b610c499089613093565b97505b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae919061315f565b610cb990600a613266565b610cc7906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038d1690636953c06c90610cf3908890600401613069565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190613105565b828f8881518110610d4757610d476130d2565b602002602001015160200151610d5d919061311e565b610d67919061311e565b610d71919061314b565b610d7b9088613093565b9650836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf919061315f565b610dea90600a613266565b818e8781518110610dfd57610dfd6130d2565b602002602001015160200151610e13919061311e565b610e22906402540be40061311e565b610e2c919061314b565b610e369087613093565b9550505050505b80610e47816130b9565b915050610681565b5082841115610e6557610e6283856130a6565b94505b68056bc75e2d631000006000829003610e85579998505050505050505050565b600086118015610e9d575081610e9b8488613093565b115b15610edb57858183610eaf8684613093565b610eb991906130a6565b610ec3919061311e565b610ecd919061314b565b995050505050505050505090565b6000995050505050505050505090565b6000610ef682612268565b92915050565b610f0581612273565b50565b60006602ed57011e0000601f1936013581161480610f39576040516373bb264f60e11b815260040160405180910390fd5b60003660291115610f5d57604051632bcb7bc560e11b815260040160405180910390fd5b5060281936013560006009610f78600362ffffff8516613093565b610f829190613093565b905036610f90600283613093565b1115610faf5760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080610fc4602084613093565b905036811115610fe757604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b6000806000610ffe846122f7565b9092509050604e611010826020613093565b61101a908461311e565b6110249190613093565b949350505050565b600061103661234e565b600701905090565b6060600082516001600160401b0381111561105b5761105b612f32565b604051908082528060200260200182016040528015611084578160200160208202803683370190505b509050600080805b8551811015611155576000925060005b828110156110f8578682815181106110b6576110b66130d2565b60200260200101518582815181106110d0576110d06130d2565b6020026020010151036110e657600193506110f8565b806110f0816130b9565b91505061109c565b508261114357858181518110611110576111106130d2565b602002602001015184838151811061112a5761112a6130d2565b60209081029190910101528161113f816130b9565b9250505b8061114d816130b9565b91505061108c565b50808352600061116484612372565b9050600086516001600160401b0381111561118157611181612f32565b6040519080825280602002602001820160405280156111aa578160200160208202803683370190505b50905060005b87518110156112605760005b865181101561124d578681815181106111d7576111d76130d2565b60200260200101518983815181106111f1576111f16130d2565b60200260200101510361123b57838181518110611210576112106130d2565b602002602001015183838151811061122a5761122a6130d2565b60200260200101818152505061124d565b80611245816130b9565b9150506111bc565b5080611258816130b9565b9150506111b0565b509695505050505050565b6060600061127761237d565b9050600061128482612372565b905081516001600160401b0381111561129f5761129f612f32565b6040519080825280602002602001820160405280156112d857816020015b6112c5612e9a565b8152602001906001900390816112bd5790505b50925060005b825181101561035b576040518060400160405280848381518110611304576113046130d2565b60200260200101518152602001838381518110611323576113236130d2565b6020026020010151815250848281518110611340576113406130d2565b60200260200101819052508080611356906130b9565b9150506112de565b63082ac82b60e31b90565b73f3978209b7cff2b90100c6f87cec77de928ed58e90565b600080600061138e6124b4565b805480602002602001604051908101604052809291908181526020016000905b828210156113f957600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900462ffffff16818301528252600190920191016113ae565b50505050905061143c604051806080016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b815115611ee05760005b8251811015611ed7576000838281518110611463576114636130d2565b60200260200101519050600080600083600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d891906130e8565b9050600084600001516001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154291906130e8565b9050816001600160a01b031687600001516001600160a01b031614158061157f5750806001600160a01b031687602001516001600160a01b031614155b15611744576040805160028082526060820183526000926020830190803683370190505090506115ad611369565b6001600160a01b031663f823f1e0846040518263ffffffff1660e01b81526004016115d89190613069565b602060405180830381865afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190613105565b8160008151811061162c5761162c6130d2565b602002602001018181525050611640611369565b6001600160a01b031663f823f1e0836040518263ffffffff1660e01b815260040161166b9190613069565b602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190613105565b816001815181106116bf576116bf6130d2565b60200260200101818152505060006116d682612372565b90506040518060800160405280856001600160a01b03168152602001846001600160a01b0316815260200182600081518110611714576117146130d2565b6020026020010151815260200182600181518110611734576117346130d2565b6020026020010151815250985050505b505082516020840151604051630157d2d160e31b815262ffffff909116600482015260009182916001600160a01b0390911690630abe9688906024016040805180830381865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c0919061328c565b86516020880151604051634c7cffbd60e01b815262ffffff9091166004820152929450909250611845916001600160a01b0390911690634c7cffbd90602401602060405180830381865afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118409190613105565b6124dd565b9350806001600160801b0316670de0b6b3a7640000836001600160801b03168661186f919061311e565b611879919061314b565b6118839190613093565b925050506000611891611369565b6001600160a01b0316636953c06c85600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190591906130e8565b6040518263ffffffff1660e01b81526004016119219190613069565b602060405180830381865afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190613105565b9050600061196e611369565b6001600160a01b0316636953c06c86600001516001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e291906130e8565b6040518263ffffffff1660e01b81526004016119fe9190613069565b602060405180830381865afa158015611a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3f9190613105565b8551602087015160405163bd85b03960e01b815262ffffff9091166004820152919250611eb391670de0b6b3a7640000916001600160a01b03169063bd85b03990602401602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190613105565b87516020890151604051627eeac760e11b815230600482015262ffffff9091166024820152611eac916001600160a01b03169062fdd58e90604401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190613105565b670de0b6b3a7640000611eac69d3c21bcecceda10000008b11611c83576305f5e1008e604001518d600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd91906130e8565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2e919061315f565b611c3990600a613266565b8d611c448e8e61311e565b611c4e919061314b565b611c6090670de0b6b3a764000061311e565b611c6a919061314b565b611c74919061311e565b611c7e919061314b565b611da3565b6305f5e1008e604001518d600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf391906130e8565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d54919061315f565b611d5f90600a613266565b611d71670de0b6b3a76400008f61314b565b611d7b8e8e61311e565b611d85919061314b565b611d8f919061314b565b611d99919061311e565b611da3919061314b565b6305f5e1008f606001518e600001516001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1391906130e8565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e74919061315f565b611e7f90600a613266565b611e898e8d61311e565b611e93919061314b565b611e9d919061311e565b611ea7919061314b565b6124f3565b9190612509565b611ebd908a613093565b985050505050508080611ecf906130b9565b915050611446565b50919392505050565b6000935050505090565b600080611ef5610361565b90506000611f01611369565b90506000611f0d61102c565b90506000805b825481101561225f57828181548110611f2e57611f2e6130d2565b906000526020600020906004020160010154858281518110611f5257611f526130d2565b60200260200101516000015114611f7c57604051631132068d60e31b815260040160405180910390fd5b600080306001600160a01b0316858481548110611f9b57611f9b6130d2565b60009182526020918290206004918202016003015460408051928352602483018152928201805160e09290921b6001600160e01b0319166001600160e01b039092169190911790529051611fef91906132bf565b600060405180830381855afa9150503d806000811461202a576040519150601f19603f3d011682016040523d82523d6000602084013e61202f565b606091505b5091509150811561224a576000818060200190518101906120509190613105565b9050600061205c611369565b6001600160a01b03166325eb876f8a878151811061207c5761207c6130d2565b6020908102919091010151516040516001600160e01b031960e084901b168152600481019190915260016024820152604401602060405180830381865afa1580156120cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ef91906130e8565b9050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612153919061315f565b61215e90600a613266565b61216c906305f5e10061311e565b886001600160a01b0316633f8ef5c889888154811061218d5761218d6130d2565b9060005260206000209060040201600201546040518263ffffffff1660e01b81526004016121bd91815260200190565b602060405180830381865afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190613105565b838b8881518110612211576122116130d2565b602002602001015160200151612227919061311e565b612231919061311e565b61223b919061314b565b6122459087613093565b955050505b50508080612257906130b9565b915050611f13565b50949350505050565b6000610ef682612533565b60006122816103e88361314b565b9050804210156122c357603c61229742836130a6565b11156122bf5760405163b6b0916d60e01b81526004810182905242602482015260440161023b565b5050565b60b46122cf82426130a6565b11156122bf57604051630321d0b560e01b81526004810182905242602482015260440161023b565b600080808080612308604187613093565b9050600061232161231a602084613093565b36906125fe565b8035945090506123328160036125fe565b62ffffff9490941697933563ffffffff16965092945050505050565b7f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90565b6060610ef68261260a565b606060006123896127cc565b9050600061239561135e565b905060006123a28261282e565b6123b85782516123b3906001613093565b6123bb565b82515b90506000816001600160401b038111156123d7576123d7612f32565b604051908082528060200260200182016040528015612400578160200160208202803683370190505b50905060008382600081518110612419576124196130d2565b60200260200101818152505060005b85518110156124a95784868281518110612444576124446130d2565b6020026020010151146124975761245c600183613093565b9150858181518110612470576124706130d2565b602002602001015183838151811061248a5761248a6130d2565b6020026020010181815250505b806124a1816130b9565b915050612428565b509095945050505050565b6000807fec548c64bcf9d557a690fde0c6b4431edcdb8662fd4787104fa8658b4664cc61610ef6565b6000610ef682670de0b6b3a76400006080612848565b60008183106125025781610faf565b5090919050565b600080600061251886866128b6565b9150915061252986868685856128d5565b9695505050505050565b6000815160000361255757604051639e198af960e01b815260040160405180910390fd5b61256082612985565b600060028351612570919061314b565b90506002835161258091906132db565b6000036125dc5760006125cf846125986001856130a6565b815181106125a8576125a86130d2565b60200260200101518584815181106125c2576125c26130d2565b60200260200101516129d3565b905061102460028261314b565b8281815181106125ee576125ee6130d2565b6020026020010151915050919050565b6000610faf82846130a6565b6060600082516001600160401b0381111561262757612627612f32565b604051908082528060200260200182016040528015612650578160200160208202803683370190505b509050600083516001600160401b0381111561266e5761266e612f32565b604051908082528060200260200182016040528015612697578160200160208202803683370190505b509050600084516001600160401b038111156126b5576126b5612f32565b6040519080825280602002602001820160405280156126e857816020015b60608152602001906001900390816126d35790505b50905060005b85518110156127465760408051600380825260808201909252906020820160608036833701905050828281518110612728576127286130d2565b6020026020010181905250808061273e906130b9565b9150506126ee565b506000612751610f08565b9050600061275e82610fb6565b61ffff16905061276f600283613093565b60405190925060005b828110156127b557600061278f8a898989896129df565b905061279b8186613093565b9450826040525080806127ad906130b9565b915050612778565b506127c08487612c78565b98975050505050505050565b606060006127d861234e565b6004810180546040805160208084028201810190925282815293945083018282801561282357602002820191906000526020600020905b81548152602001906001019080831161280f575b505050505091505090565b60008061283961234e565b9050610faf6004820184612d90565b600080600061285786866128b6565b915091508160001461286d578360ff1682901c92505b80156128ad57600160ff85161b811061289957604051638e471a8960e01b815260040160405180910390fd5b8360ff166101000361ffff1681901b830192505b50509392505050565b6000806000198385098385029250828110838203039150509250929050565b6000816000036128f6578383816128ee576128ee613135565b04905061297c565b838210612916576040516313eae71560e01b815260040160405180910390fd5b60008486880960018619810187169687900496600081900381900490910186831190950394850291909503949094049390931792505060026003840281188085028203028085028203028085028203028085028203028085028203028085029091030282025b95945050505050565b8051602082016020820281019150805b828110156129cd57815b818110156129c45781518151808210156129ba578084528183525b505060200161299f565b50602001612995565b50505050565b6000610faf8284613093565b6000806000806129ee856122f7565b909250905060008080606081600d612a11612a0a602089613093565b8990612db7565b612a1b9190613093565b90506000612a2d61231a60688d613093565b90506000612a4a83612a4060418f613093565b61231a9190613093565b9050612a568382612a69565b9350826020850120945081359650612a8d565b60408051838152602081850181019092526000910183838237601f19019392505050565b612a9e8765ffffffffffff16610efc565b612ab285612aad60418f613093565b612dc3565b9550612abd86610142565b60ff1699505050505050505060008060005b84811015612c4557612ae2888583612e3b565b909350915060005b8c51811015612c32578c8181518110612b0557612b056130d2565b60200260200101518403612c205760008b8281518110612b2757612b276130d2565b60200260200101519050612b4081896001901b16151590565b158015612b695750600360ff168d8381518110612b5f57612b5f6130d2565b6020026020010151105b15612c1a578c8281518110612b8057612b806130d2565b602002602001018051809190612b95906130b9565b81525050838b8381518110612bac57612bac6130d2565b602002602001015160018f8581518110612bc857612bc86130d2565b6020026020010151612bda91906130a6565b81518110612bea57612bea6130d2565b60209081029190910101526001881b81178c8381518110612c0d57612c0d6130d2565b6020026020010181815250505b50612c32565b80612c2a816130b9565b915050612aea565b5080612c3d816130b9565b915050612acf565b50505081602082612c569190613093565b612c60919061311e565b612c6b90604e613093565b9998505050505050505050565b6060600083516001600160401b03811115612c9557612c95612f32565b604051908082528060200260200182016040528015612cbe578160200160208202803683370190505b509050600360005b8551811015612d865781858281518110612ce257612ce26130d2565b60200260200101511015612d2f57848181518110612d0257612d026130d2565b602002602001015182604051632b13aef560e01b815260040161023b929190918252602082015260400190565b6000612d53878381518110612d4657612d466130d2565b6020026020010151610eeb565b905080848381518110612d6857612d686130d2565b60209081029190910101525080612d7e816130b9565b915050612cc6565b5090949350505050565b6000610faf83836000818152600183016020526040812054610faf90849084908490151584565b6000610faf828461311e565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015612e26573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080612e4a604e87613093565b90506000612e77612e70612e5f602089613093565b612e6a886001613093565b90612db7565b83906129d3565b90506000612e8536836125fe565b80359960209091013598509650505050505050565b604080518082019091526000808252602082015290565b6001600160a01b0381168114610f0557600080fd5b600060208284031215612ed857600080fd5b8135610faf81612eb1565b602080825282518282018190526000919060409081850190868401855b82811015612f2557815180518552860151868501529284019290850190600101612f00565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612f5b57600080fd5b82356001600160401b0380821115612f7257600080fd5b818501915085601f830112612f8657600080fd5b813581811115612f9857612f98612f32565b8060051b604051601f19603f83011681018181108582111715612fbd57612fbd612f32565b604052918252848201925083810185019188831115612fdb57600080fd5b938501935b828510156127c057843584529385019392850192612fe0565b60005b83811015613014578181015183820152602001612ffc565b50506000910152565b602081526000825180602084015261303c816040850160208701612ff9565b601f01601f19169190910160400192915050565b60006020828403121561306257600080fd5b5035919050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ef657610ef661307d565b81810381811115610ef657610ef661307d565b6000600182016130cb576130cb61307d565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156130fa57600080fd5b8151610faf81612eb1565b60006020828403121561311757600080fd5b5051919050565b8082028115828204841417610ef657610ef661307d565b634e487b7160e01b600052601260045260246000fd5b60008261315a5761315a613135565b500490565b60006020828403121561317157600080fd5b815160ff81168114610faf57600080fd5b600181815b808511156131bd5781600019048211156131a3576131a361307d565b808516156131b057918102915b93841c9390800290613187565b509250929050565b6000826131d457506001610ef6565b816131e157506000610ef6565b81600181146131f757600281146132015761321d565b6001915050610ef6565b60ff8411156132125761321261307d565b50506001821b610ef6565b5060208310610133831016604e8410600b8410161715613240575081810a610ef6565b61324a8383613182565b806000190482111561325e5761325e61307d565b029392505050565b6000610faf60ff8416836131c5565b80516001600160801b038116811461024457600080fd5b6000806040838503121561329f57600080fd5b6132a883613275565b91506132b660208401613275565b90509250929050565b600082516132d1818460208701612ff9565b9190910192915050565b6000826132ea576132ea613135565b50069056fea26469706673582212207036b0494d010f56fa23726a8921bab1d61ea8bd0ee501b55740fd32553f2ac464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100785760003560e01c80633ce142f51461007d57806355a547d5146100a75780638be3471a146100bd5780639104c640146100d2578063b24ebfcc146100da578063c274583a146100ed578063f50b2efe14610126578063f90c49241461013b575b600080fd5b61009061008b366004612ec6565b610142565b60405160ff90911681526020015b60405180910390f35b6100af610249565b60405190815260200161009e565b6100c5610361565b60405161009e9190612ee3565b6100af610504565b6100af6100e8366004612f48565b610eeb565b60408051808201825260178152761c99591cdd1bdb994b585d985b185b98da194b5c1c9bd9604a1b6020820152905161009e919061301d565b610139610134366004613050565b610efc565b005b6003610090565b60006001600160a01b038216731ea62d73edf8ac05dfcea1a34b9796e937a29eff0361017057506000919050565b6001600160a01b038216732c59617248994d12816ee1fa77ce0a64eeb456bf0361019c57506001919050565b6001600160a01b0382167312470f7aba85c8b81d63137dd5925d6ee114952b036101c857506002919050565b6001600160a01b03821673109b4a318a4f5ddcbca6349b45f881b4137deafb036101f457506003919050565b6001600160a01b0382167383cba8c619fb629b81a65c2e67fe15cf3e3c97470361022057506004919050565b816040516303b1166f60e61b815260040161023b9190613069565b60405180910390fd5b919050565b600080610254610f08565b9050600061026182610fb6565b61ffff1690508060000361028857604051632154bfcf60e21b815260040160405180910390fd5b610293600283613093565b915060005b8181101561035b5760006102ab84610ff0565b90506000806102bb606887613093565b905060006102c982366130a6565b9050803592508265ffffffffffff166000036102f857604051630336dc9d60e41b815260040160405180910390fd5b87600003610310578265ffffffffffff169750610338565b878365ffffffffffff16146103385760405163d9d1f46560e01b815260040160405180910390fd5b6103428488613093565b9650505050508080610353906130b9565b915050610298565b50505090565b6060600061036d61102c565b80549091506000906001600160401b0381111561038c5761038c612f32565b6040519080825280602002602001820160405280156103b5578160200160208202803683370190505b50905060005b8254811015610417578281815481106103d6576103d66130d2565b9060005260206000209060040201600101548282815181106103fa576103fa6130d2565b60209081029190910101528061040f816130b9565b9150506103bb565b5060006104238261103e565b905080516001600160401b0381111561043e5761043e612f32565b60405190808252806020026020018201604052801561047757816020015b610464612e9a565b81526020019060019003908161045c5790505b50935060005b81518110156104fd5760405180604001604052808483815181106104a3576104a36130d2565b602002602001015181526020018383815181106104c2576104c26130d2565b60200260200101518152508582815181106104df576104df6130d2565b602002602001018190525080806104f5906130b9565b91505061047d565b5050505090565b60008061050f61126b565b9050600061051b61135e565b90506000610527611369565b6040516325eb876f60e01b8152600481018490526001602482015290915060009081906a52b7d2dcc80cd2e4000000906001600160a01b03851690636953c06c9082906325eb876f90604401602060405180830381865afa158015610590573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b491906130e8565b6040518263ffffffff1660e01b81526004016105d09190613069565b602060405180830381865afa1580156105ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106119190613105565b4787600081518110610625576106256130d2565b60200260200101516020015161063b919061311e565b610645919061311e565b61064f919061314b565b9050600080600061065e611381565b6106689085613093565b9350610672611eea565b61067c9085613093565b935060005b8851811015610e4f576000876001600160a01b03166325eb876f8b84815181106106ad576106ad6130d2565b6020908102919091010151516040516001600160e01b031960e084901b168152600481019190915260016024820152604401602060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072091906130e8565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016107509190613069565b602060405180830381865afa15801561076d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107919190613105565b90506000896001600160a01b0316630edc25b68d86815181106107b6576107b66130d2565b6020026020010151600001516040518263ffffffff1660e01b81526004016107e091815260200190565b602060405180830381865afa925050508015610819575060408051601f3d908101601f19168201909252610816918101906130e8565b60015b61095657826001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087f919061315f565b61088a90600a613266565b610898906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038c1690636953c06c906108c4908790600401613069565b602060405180830381865afa1580156108e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109059190613105565b838e8781518110610918576109186130d2565b60200260200101516020015161092e919061311e565b610938919061311e565b610942919061314b565b61094c9089613093565b9750505050610e3d565b90506040516330088b1f60e11b81526000906001600160a01b03831690636011163e90610987903090600401613069565b602060405180830381865afa1580156109a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c89190613105565b905080831115610b1157836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a34919061315f565b610a3f90600a613266565b610a4d906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038d1690636953c06c90610a79908890600401613069565b602060405180830381865afa158015610a96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aba9190613105565b610ac483866130a6565b8f8881518110610ad657610ad66130d2565b602002602001015160200151610aec919061311e565b610af6919061311e565b610b00919061314b565b610b0a908a613093565b9850610c4c565b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b73919061315f565b610b7e90600a613266565b610b8c906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038d1690636953c06c90610bb8908890600401613069565b602060405180830381865afa158015610bd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bf99190613105565b610c0385846130a6565b8f8881518110610c1557610c156130d2565b602002602001015160200151610c2b919061311e565b610c35919061311e565b610c3f919061314b565b610c499089613093565b97505b836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cae919061315f565b610cb990600a613266565b610cc7906305f5e10061311e565b604051631a54f01b60e21b81526001600160a01b038d1690636953c06c90610cf3908890600401613069565b602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d349190613105565b828f8881518110610d4757610d476130d2565b602002602001015160200151610d5d919061311e565b610d67919061311e565b610d71919061314b565b610d7b9088613093565b9650836001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610dbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ddf919061315f565b610dea90600a613266565b818e8781518110610dfd57610dfd6130d2565b602002602001015160200151610e13919061311e565b610e22906402540be40061311e565b610e2c919061314b565b610e369087613093565b9550505050505b80610e47816130b9565b915050610681565b5082841115610e6557610e6283856130a6565b94505b68056bc75e2d631000006000829003610e85579998505050505050505050565b600086118015610e9d575081610e9b8488613093565b115b15610edb57858183610eaf8684613093565b610eb991906130a6565b610ec3919061311e565b610ecd919061314b565b995050505050505050505090565b6000995050505050505050505090565b6000610ef682612268565b92915050565b610f0581612273565b50565b60006602ed57011e0000601f1936013581161480610f39576040516373bb264f60e11b815260040160405180910390fd5b60003660291115610f5d57604051632bcb7bc560e11b815260040160405180910390fd5b5060281936013560006009610f78600362ffffff8516613093565b610f829190613093565b905036610f90600283613093565b1115610faf5760405163c30a7bd760e01b815260040160405180910390fd5b9392505050565b600080610fc4602084613093565b905036811115610fe757604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b6000806000610ffe846122f7565b9092509050604e611010826020613093565b61101a908461311e565b6110249190613093565b949350505050565b600061103661234e565b600701905090565b6060600082516001600160401b0381111561105b5761105b612f32565b604051908082528060200260200182016040528015611084578160200160208202803683370190505b509050600080805b8551811015611155576000925060005b828110156110f8578682815181106110b6576110b66130d2565b60200260200101518582815181106110d0576110d06130d2565b6020026020010151036110e657600193506110f8565b806110f0816130b9565b91505061109c565b508261114357858181518110611110576111106130d2565b602002602001015184838151811061112a5761112a6130d2565b60209081029190910101528161113f816130b9565b9250505b8061114d816130b9565b91505061108c565b50808352600061116484612372565b9050600086516001600160401b0381111561118157611181612f32565b6040519080825280602002602001820160405280156111aa578160200160208202803683370190505b50905060005b87518110156112605760005b865181101561124d578681815181106111d7576111d76130d2565b60200260200101518983815181106111f1576111f16130d2565b60200260200101510361123b57838181518110611210576112106130d2565b602002602001015183838151811061122a5761122a6130d2565b60200260200101818152505061124d565b80611245816130b9565b9150506111bc565b5080611258816130b9565b9150506111b0565b509695505050505050565b6060600061127761237d565b9050600061128482612372565b905081516001600160401b0381111561129f5761129f612f32565b6040519080825280602002602001820160405280156112d857816020015b6112c5612e9a565b8152602001906001900390816112bd5790505b50925060005b825181101561035b576040518060400160405280848381518110611304576113046130d2565b60200260200101518152602001838381518110611323576113236130d2565b6020026020010151815250848281518110611340576113406130d2565b60200260200101819052508080611356906130b9565b9150506112de565b63082ac82b60e31b90565b73f3978209b7cff2b90100c6f87cec77de928ed58e90565b600080600061138e6124b4565b805480602002602001604051908101604052809291908181526020016000905b828210156113f957600084815260209081902060408051808201909152908401546001600160a01b0381168252600160a01b900462ffffff16818301528252600190920191016113ae565b50505050905061143c604051806080016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160008152602001600081525090565b815115611ee05760005b8251811015611ed7576000838281518110611463576114636130d2565b60200260200101519050600080600083600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d891906130e8565b9050600084600001516001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561151e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154291906130e8565b9050816001600160a01b031687600001516001600160a01b031614158061157f5750806001600160a01b031687602001516001600160a01b031614155b15611744576040805160028082526060820183526000926020830190803683370190505090506115ad611369565b6001600160a01b031663f823f1e0846040518263ffffffff1660e01b81526004016115d89190613069565b602060405180830381865afa1580156115f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116199190613105565b8160008151811061162c5761162c6130d2565b602002602001018181525050611640611369565b6001600160a01b031663f823f1e0836040518263ffffffff1660e01b815260040161166b9190613069565b602060405180830381865afa158015611688573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116ac9190613105565b816001815181106116bf576116bf6130d2565b60200260200101818152505060006116d682612372565b90506040518060800160405280856001600160a01b03168152602001846001600160a01b0316815260200182600081518110611714576117146130d2565b6020026020010151815260200182600181518110611734576117346130d2565b6020026020010151815250985050505b505082516020840151604051630157d2d160e31b815262ffffff909116600482015260009182916001600160a01b0390911690630abe9688906024016040805180830381865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c0919061328c565b86516020880151604051634c7cffbd60e01b815262ffffff9091166004820152929450909250611845916001600160a01b0390911690634c7cffbd90602401602060405180830381865afa15801561181c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118409190613105565b6124dd565b9350806001600160801b0316670de0b6b3a7640000836001600160801b03168661186f919061311e565b611879919061314b565b6118839190613093565b925050506000611891611369565b6001600160a01b0316636953c06c85600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190591906130e8565b6040518263ffffffff1660e01b81526004016119219190613069565b602060405180830381865afa15801561193e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119629190613105565b9050600061196e611369565b6001600160a01b0316636953c06c86600001516001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119e291906130e8565b6040518263ffffffff1660e01b81526004016119fe9190613069565b602060405180830381865afa158015611a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3f9190613105565b8551602087015160405163bd85b03960e01b815262ffffff9091166004820152919250611eb391670de0b6b3a7640000916001600160a01b03169063bd85b03990602401602060405180830381865afa158015611aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac49190613105565b87516020890151604051627eeac760e11b815230600482015262ffffff9091166024820152611eac916001600160a01b03169062fdd58e90604401602060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b409190613105565b670de0b6b3a7640000611eac69d3c21bcecceda10000008b11611c83576305f5e1008e604001518d600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ba9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bcd91906130e8565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2e919061315f565b611c3990600a613266565b8d611c448e8e61311e565b611c4e919061314b565b611c6090670de0b6b3a764000061311e565b611c6a919061314b565b611c74919061311e565b611c7e919061314b565b611da3565b6305f5e1008e604001518d600001516001600160a01b03166305e8746d6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf391906130e8565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d54919061315f565b611d5f90600a613266565b611d71670de0b6b3a76400008f61314b565b611d7b8e8e61311e565b611d85919061314b565b611d8f919061314b565b611d99919061311e565b611da3919061314b565b6305f5e1008f606001518e600001516001600160a01b031663da10610c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611def573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1391906130e8565b6001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e74919061315f565b611e7f90600a613266565b611e898e8d61311e565b611e93919061314b565b611e9d919061311e565b611ea7919061314b565b6124f3565b9190612509565b611ebd908a613093565b985050505050508080611ecf906130b9565b915050611446565b50919392505050565b6000935050505090565b600080611ef5610361565b90506000611f01611369565b90506000611f0d61102c565b90506000805b825481101561225f57828181548110611f2e57611f2e6130d2565b906000526020600020906004020160010154858281518110611f5257611f526130d2565b60200260200101516000015114611f7c57604051631132068d60e31b815260040160405180910390fd5b600080306001600160a01b0316858481548110611f9b57611f9b6130d2565b60009182526020918290206004918202016003015460408051928352602483018152928201805160e09290921b6001600160e01b0319166001600160e01b039092169190911790529051611fef91906132bf565b600060405180830381855afa9150503d806000811461202a576040519150601f19603f3d011682016040523d82523d6000602084013e61202f565b606091505b5091509150811561224a576000818060200190518101906120509190613105565b9050600061205c611369565b6001600160a01b03166325eb876f8a878151811061207c5761207c6130d2565b6020908102919091010151516040516001600160e01b031960e084901b168152600481019190915260016024820152604401602060405180830381865afa1580156120cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ef91906130e8565b9050806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612153919061315f565b61215e90600a613266565b61216c906305f5e10061311e565b886001600160a01b0316633f8ef5c889888154811061218d5761218d6130d2565b9060005260206000209060040201600201546040518263ffffffff1660e01b81526004016121bd91815260200190565b602060405180830381865afa1580156121da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121fe9190613105565b838b8881518110612211576122116130d2565b602002602001015160200151612227919061311e565b612231919061311e565b61223b919061314b565b6122459087613093565b955050505b50508080612257906130b9565b915050611f13565b50949350505050565b6000610ef682612533565b60006122816103e88361314b565b9050804210156122c357603c61229742836130a6565b11156122bf5760405163b6b0916d60e01b81526004810182905242602482015260440161023b565b5050565b60b46122cf82426130a6565b11156122bf57604051630321d0b560e01b81526004810182905242602482015260440161023b565b600080808080612308604187613093565b9050600061232161231a602084613093565b36906125fe565b8035945090506123328160036125fe565b62ffffff9490941697933563ffffffff16965092945050505050565b7f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90565b6060610ef68261260a565b606060006123896127cc565b9050600061239561135e565b905060006123a28261282e565b6123b85782516123b3906001613093565b6123bb565b82515b90506000816001600160401b038111156123d7576123d7612f32565b604051908082528060200260200182016040528015612400578160200160208202803683370190505b50905060008382600081518110612419576124196130d2565b60200260200101818152505060005b85518110156124a95784868281518110612444576124446130d2565b6020026020010151146124975761245c600183613093565b9150858181518110612470576124706130d2565b602002602001015183838151811061248a5761248a6130d2565b6020026020010181815250505b806124a1816130b9565b915050612428565b509095945050505050565b6000807fec548c64bcf9d557a690fde0c6b4431edcdb8662fd4787104fa8658b4664cc61610ef6565b6000610ef682670de0b6b3a76400006080612848565b60008183106125025781610faf565b5090919050565b600080600061251886866128b6565b9150915061252986868685856128d5565b9695505050505050565b6000815160000361255757604051639e198af960e01b815260040160405180910390fd5b61256082612985565b600060028351612570919061314b565b90506002835161258091906132db565b6000036125dc5760006125cf846125986001856130a6565b815181106125a8576125a86130d2565b60200260200101518584815181106125c2576125c26130d2565b60200260200101516129d3565b905061102460028261314b565b8281815181106125ee576125ee6130d2565b6020026020010151915050919050565b6000610faf82846130a6565b6060600082516001600160401b0381111561262757612627612f32565b604051908082528060200260200182016040528015612650578160200160208202803683370190505b509050600083516001600160401b0381111561266e5761266e612f32565b604051908082528060200260200182016040528015612697578160200160208202803683370190505b509050600084516001600160401b038111156126b5576126b5612f32565b6040519080825280602002602001820160405280156126e857816020015b60608152602001906001900390816126d35790505b50905060005b85518110156127465760408051600380825260808201909252906020820160608036833701905050828281518110612728576127286130d2565b6020026020010181905250808061273e906130b9565b9150506126ee565b506000612751610f08565b9050600061275e82610fb6565b61ffff16905061276f600283613093565b60405190925060005b828110156127b557600061278f8a898989896129df565b905061279b8186613093565b9450826040525080806127ad906130b9565b915050612778565b506127c08487612c78565b98975050505050505050565b606060006127d861234e565b6004810180546040805160208084028201810190925282815293945083018282801561282357602002820191906000526020600020905b81548152602001906001019080831161280f575b505050505091505090565b60008061283961234e565b9050610faf6004820184612d90565b600080600061285786866128b6565b915091508160001461286d578360ff1682901c92505b80156128ad57600160ff85161b811061289957604051638e471a8960e01b815260040160405180910390fd5b8360ff166101000361ffff1681901b830192505b50509392505050565b6000806000198385098385029250828110838203039150509250929050565b6000816000036128f6578383816128ee576128ee613135565b04905061297c565b838210612916576040516313eae71560e01b815260040160405180910390fd5b60008486880960018619810187169687900496600081900381900490910186831190950394850291909503949094049390931792505060026003840281188085028203028085028203028085028203028085028203028085028203028085029091030282025b95945050505050565b8051602082016020820281019150805b828110156129cd57815b818110156129c45781518151808210156129ba578084528183525b505060200161299f565b50602001612995565b50505050565b6000610faf8284613093565b6000806000806129ee856122f7565b909250905060008080606081600d612a11612a0a602089613093565b8990612db7565b612a1b9190613093565b90506000612a2d61231a60688d613093565b90506000612a4a83612a4060418f613093565b61231a9190613093565b9050612a568382612a69565b9350826020850120945081359650612a8d565b60408051838152602081850181019092526000910183838237601f19019392505050565b612a9e8765ffffffffffff16610efc565b612ab285612aad60418f613093565b612dc3565b9550612abd86610142565b60ff1699505050505050505060008060005b84811015612c4557612ae2888583612e3b565b909350915060005b8c51811015612c32578c8181518110612b0557612b056130d2565b60200260200101518403612c205760008b8281518110612b2757612b276130d2565b60200260200101519050612b4081896001901b16151590565b158015612b695750600360ff168d8381518110612b5f57612b5f6130d2565b6020026020010151105b15612c1a578c8281518110612b8057612b806130d2565b602002602001018051809190612b95906130b9565b81525050838b8381518110612bac57612bac6130d2565b602002602001015160018f8581518110612bc857612bc86130d2565b6020026020010151612bda91906130a6565b81518110612bea57612bea6130d2565b60209081029190910101526001881b81178c8381518110612c0d57612c0d6130d2565b6020026020010181815250505b50612c32565b80612c2a816130b9565b915050612aea565b5080612c3d816130b9565b915050612acf565b50505081602082612c569190613093565b612c60919061311e565b612c6b90604e613093565b9998505050505050505050565b6060600083516001600160401b03811115612c9557612c95612f32565b604051908082528060200260200182016040528015612cbe578160200160208202803683370190505b509050600360005b8551811015612d865781858281518110612ce257612ce26130d2565b60200260200101511015612d2f57848181518110612d0257612d026130d2565b602002602001015182604051632b13aef560e01b815260040161023b929190918252602082015260400190565b6000612d53878381518110612d4657612d466130d2565b6020026020010151610eeb565b905080848381518110612d6857612d686130d2565b60209081029190910101525080612d7e816130b9565b915050612cc6565b5090949350505050565b6000610faf83836000818152600183016020526040812054610faf90849084908490151584565b6000610faf828461311e565b60408051600080825260208083018085528690523685900380850135831a948401859052803560608501819052910135608084018190529193909260019060a0016020604051602081039080840390855afa158015612e26573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b60008080612e4a604e87613093565b90506000612e77612e70612e5f602089613093565b612e6a886001613093565b90612db7565b83906129d3565b90506000612e8536836125fe565b80359960209091013598509650505050505050565b604080518082019091526000808252602082015290565b6001600160a01b0381168114610f0557600080fd5b600060208284031215612ed857600080fd5b8135610faf81612eb1565b602080825282518282018190526000919060409081850190868401855b82811015612f2557815180518552860151868501529284019290850190600101612f00565b5091979650505050505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215612f5b57600080fd5b82356001600160401b0380821115612f7257600080fd5b818501915085601f830112612f8657600080fd5b813581811115612f9857612f98612f32565b8060051b604051601f19603f83011681018181108582111715612fbd57612fbd612f32565b604052918252848201925083810185019188831115612fdb57600080fd5b938501935b828510156127c057843584529385019392850192612fe0565b60005b83811015613014578181015183820152602001612ffc565b50506000910152565b602081526000825180602084015261303c816040850160208701612ff9565b601f01601f19169190910160400192915050565b60006020828403121561306257600080fd5b5035919050565b6001600160a01b0391909116815260200190565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ef657610ef661307d565b81810381811115610ef657610ef661307d565b6000600182016130cb576130cb61307d565b5060010190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156130fa57600080fd5b8151610faf81612eb1565b60006020828403121561311757600080fd5b5051919050565b8082028115828204841417610ef657610ef661307d565b634e487b7160e01b600052601260045260246000fd5b60008261315a5761315a613135565b500490565b60006020828403121561317157600080fd5b815160ff81168114610faf57600080fd5b600181815b808511156131bd5781600019048211156131a3576131a361307d565b808516156131b057918102915b93841c9390800290613187565b509250929050565b6000826131d457506001610ef6565b816131e157506000610ef6565b81600181146131f757600281146132015761321d565b6001915050610ef6565b60ff8411156132125761321261307d565b50506001821b610ef6565b5060208310610133831016604e8410600b8410161715613240575081810a610ef6565b61324a8383613182565b806000190482111561325e5761325e61307d565b029392505050565b6000610faf60ff8416836131c5565b80516001600160801b038116811461024457600080fd5b6000806040838503121561329f57600080fd5b6132a883613275565b91506132b660208401613275565b90509250929050565b600082516132d1818460208701612ff9565b9190910192915050565b6000826132ea576132ea613135565b50069056fea26469706673582212207036b0494d010f56fa23726a8921bab1d61ea8bd0ee501b55740fd32553f2ac464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "aggregateValues(uint256[])": {
        "details": "This function may be overridden by the child consumer contract. It should aggregate values from different signers to a single uint value. By default, it calculates the median value",
        "params": {
          "values": "An array of uint256 values from different signers"
        },
        "returns": {
          "_0": "Result of the aggregation in the form of a single number"
        }
      },
      "getDataServiceId()": {
        "details": "This function must be implemented by the child consumer contract. It should return dataServiceId which DataServiceWrapper will use if not provided explicitly . If not overridden, value will always have to be provided explicitly in DataServiceWrapper.",
        "returns": {
          "_0": "dataServiceId being consumed by contract"
        }
      },
      "getHealthMeter()": {
        "details": "This function uses the redstone-evm-connector"
      },
      "getUniqueSignersThreshold()": {
        "details": "This function should be overridden by the child consumer contract.",
        "returns": {
          "_0": "The minimum required value of unique authorised signers"
        }
      },
      "validateTimestamp(uint256)": {
        "details": "This function may be overridden by the child consumer contract. It should validate the timestamp against the current time (block.timestamp) It should revert with a helpful message if the timestamp is not valid",
        "params": {
          "receivedTimestampMilliseconds": "Timestamp extracted from calldata"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getHealthMeter()": {
        "notice": "Returns current health meter (0% - 100%) associated with the loan"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}