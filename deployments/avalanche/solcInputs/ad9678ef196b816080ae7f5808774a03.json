{
  "language": "Solidity",
  "sources": {
    "contracts/deployment/avalanche/UsdcPool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: 4d6d9c0d5e21f750ac185d7cd4bd1948ac672029;\r\npragma solidity 0.8.17;\r\n\r\nimport \"../../Pool.sol\";\r\n\r\n\r\n/**\r\n * @title UsdcPool\r\n * @dev Contract allowing user to deposit to and borrow USDC from a dedicated user account\r\n */\r\ncontract UsdcPool is Pool {\r\n}"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: 5bae95ca244e96444fe80078195944f6637e72d8;\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\r\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\r\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\r\nimport \"./interfaces/IIndex.sol\";\r\nimport \"./interfaces/IRatesCalculator.sol\";\r\nimport \"./interfaces/IBorrowersRegistry.sol\";\r\nimport \"./interfaces/IPoolRewarder.sol\";\r\n\r\n\r\n/**\r\n * @title Pool\r\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\r\n * Depositors are rewarded with the interest rates collected from borrowers.\r\n * The interest rates calculation is delegated to an external calculator contract.\r\n */\r\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\r\n    using TransferHelper for address payable;\r\n\r\n    uint256 public totalSupplyCap;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowed;\r\n    mapping(address => uint256) internal _deposited;\r\n\r\n    mapping(address => uint256) public borrowed;\r\n\r\n    IRatesCalculator public ratesCalculator;\r\n    IBorrowersRegistry public borrowersRegistry;\r\n    IPoolRewarder public poolRewarder;\r\n\r\n    IIndex public depositIndex;\r\n    IIndex public borrowIndex;\r\n\r\n    address payable public tokenAddress;\r\n\r\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\r\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\r\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\r\n            && AddressUpgradeable.isContract(address(depositIndex_))\r\n            && AddressUpgradeable.isContract(address(borrowIndex_))\r\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \"Wrong init arguments\");\r\n\r\n        borrowersRegistry = borrowersRegistry_;\r\n        ratesCalculator = ratesCalculator_;\r\n        depositIndex = depositIndex_;\r\n        borrowIndex = borrowIndex_;\r\n        poolRewarder = poolRewarder_;\r\n        tokenAddress = tokenAddress_;\r\n        totalSupplyCap = _totalSupplyCap;\r\n\r\n        __Ownable_init();\r\n        __ReentrancyGuard_init();\r\n        _updateRates();\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n\r\n    /**\r\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\r\n     * Only the owner of the Contract can execute this function.\r\n     * @dev _newTotalSupplyCap new deposit cap\r\n    **/\r\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\r\n        totalSupplyCap = _newTotalSupplyCap;\r\n    }\r\n\r\n    /**\r\n     * Sets the new Pool Rewarder.\r\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\r\n     * Only the owner of the Contract can execute this function.\r\n     * @dev _poolRewarder the address of PoolRewarder\r\n    **/\r\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\r\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\r\n        poolRewarder = _poolRewarder;\r\n\r\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Sets the new rate calculator.\r\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\r\n     * Only the owner of the Contract can execute this function.\r\n     * @dev ratesCalculator the address of rates calculator\r\n     **/\r\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\r\n        // setting address(0) ratesCalculator_ freezes the pool\r\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\r\n        ratesCalculator = ratesCalculator_;\r\n        if (address(ratesCalculator_) != address(0)) {\r\n            _updateRates();\r\n        }\r\n\r\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Sets the new borrowers registry contract.\r\n     * The borrowers registry decides if an account can borrow funds.\r\n     * Only the owner of the Contract can execute this function.\r\n     * @dev borrowersRegistry the address of borrowers registry\r\n     **/\r\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\r\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\r\n\r\n        borrowersRegistry = borrowersRegistry_;\r\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\r\n    }\r\n\r\n    /* ========== MUTATIVE FUNCTIONS ========== */\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        if(recipient == address(0)) revert TransferToZeroAddress();\r\n\r\n        if(recipient == address(this)) revert TransferToPoolAddress();\r\n\r\n        _accumulateDepositInterest(msg.sender);\r\n\r\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\r\n\r\n        // (this is verified in \"require\" above)\r\n        unchecked {\r\n            _deposited[msg.sender] -= amount;\r\n        }\r\n\r\n        _accumulateDepositInterest(recipient);\r\n        _deposited[recipient] += amount;\r\n\r\n        // Handle rewards\r\n        if(address(poolRewarder) != address(0) && amount != 0){\r\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\r\n            if(unstaked > 0) {\r\n                poolRewarder.stakeFor(unstaked, recipient);\r\n            }\r\n        }\r\n\r\n        emit Transfer(msg.sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) external view override returns (uint256) {\r\n        return _allowed[owner][spender];\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\r\n        if(spender == address(0)) revert SpenderZeroAddress();\r\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\r\n        _allowed[msg.sender][spender] = newAllowance;\r\n\r\n        emit Approval(msg.sender, spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\r\n        if(spender == address(0)) revert SpenderZeroAddress();\r\n        uint256 currentAllowance = _allowed[msg.sender][spender];\r\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\r\n\r\n        uint256 newAllowance = currentAllowance - subtractedValue;\r\n        _allowed[msg.sender][spender] = newAllowance;\r\n\r\n        emit Approval(msg.sender, spender, newAllowance);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external override returns (bool) {\r\n        if(spender == address(0)) revert SpenderZeroAddress();\r\n        _allowed[msg.sender][spender] = amount;\r\n\r\n        emit Approval(msg.sender, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\r\n\r\n        if(recipient == address(0)) revert TransferToZeroAddress();\r\n\r\n        if(recipient == address(this)) revert TransferToPoolAddress();\r\n\r\n        _accumulateDepositInterest(sender);\r\n\r\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\r\n\r\n\r\n        _deposited[sender] -= amount;\r\n        _allowed[sender][msg.sender] -= amount;\r\n\r\n        _accumulateDepositInterest(recipient);\r\n        _deposited[recipient] += amount;\r\n\r\n        // Handle rewards\r\n        if(address(poolRewarder) != address(0) && amount != 0){\r\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\r\n            if(unstaked > 0) {\r\n                poolRewarder.stakeFor(unstaked, recipient);\r\n            }\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Deposits the amount\r\n     * It updates user deposited balance, total deposited and rates\r\n     **/\r\n    function deposit(uint256 _amount) public virtual nonReentrant {\r\n        if(_amount == 0) revert ZeroDepositAmount();\r\n\r\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\r\n\r\n        _accumulateDepositInterest(msg.sender);\r\n\r\n        if(totalSupplyCap != 0){\r\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\r\n        }\r\n\r\n        _transferToPool(msg.sender, _amount);\r\n\r\n        _mint(msg.sender, _amount);\r\n        _deposited[address(this)] += _amount;\r\n        _updateRates();\r\n\r\n        if (address(poolRewarder) != address(0)) {\r\n            poolRewarder.stakeFor(_amount, msg.sender);\r\n        }\r\n\r\n        emit Deposit(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    function _transferToPool(address from, uint256 amount) internal virtual {\r\n        tokenAddress.safeTransferFrom(from, address(this), amount);\r\n    }\r\n\r\n    function _transferFromPool(address to, uint256 amount) internal virtual {\r\n        tokenAddress.safeTransfer(to, amount);\r\n    }\r\n\r\n    /**\r\n     * Withdraws selected amount from the user deposits\r\n     * @dev _amount the amount to be withdrawn\r\n     **/\r\n    function withdraw(uint256 _amount) external nonReentrant {\r\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\r\n\r\n        _accumulateDepositInterest(msg.sender);\r\n\r\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\r\n        // verified in \"require\" above\r\n        unchecked {\r\n            _deposited[address(this)] -= _amount;\r\n        }\r\n        _burn(msg.sender, _amount);\r\n\r\n        _transferFromPool(msg.sender, _amount);\r\n\r\n        _updateRates();\r\n\r\n        if (address(poolRewarder) != address(0)) {\r\n            poolRewarder.withdrawFor(_amount, msg.sender);\r\n        }\r\n\r\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Borrows the specified amount\r\n     * It updates user borrowed balance, total borrowed amount and rates\r\n     * @dev _amount the amount to be borrowed\r\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\r\n     **/\r\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\r\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\r\n\r\n        _accumulateBorrowingInterest(msg.sender);\r\n\r\n        borrowed[msg.sender] += _amount;\r\n        borrowed[address(this)] += _amount;\r\n\r\n        _transferFromPool(msg.sender, _amount);\r\n\r\n        _updateRates();\r\n\r\n        emit Borrowing(msg.sender, _amount, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * Repays the amount\r\n     * It updates user borrowed balance, total borrowed amount and rates\r\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\r\n     **/\r\n    function repay(uint256 amount) external nonReentrant {\r\n        _accumulateBorrowingInterest(msg.sender);\r\n\r\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\r\n        _transferToPool(msg.sender, amount);\r\n\r\n        borrowed[msg.sender] -= amount;\r\n        borrowed[address(this)] -= amount;\r\n\r\n        _updateRates();\r\n\r\n        emit Repayment(msg.sender, amount, block.timestamp);\r\n    }\r\n\r\n    /* =========\r\n\r\n\r\n    /**\r\n     * Returns the current borrowed amount for the given user\r\n     * The value includes the interest rates owned at the current moment\r\n     * @dev _user the address of queried borrower\r\n    **/\r\n    function getBorrowed(address _user) public view returns (uint256) {\r\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return balanceOf(address(this));\r\n    }\r\n\r\n    function totalBorrowed() public view returns (uint256) {\r\n        return getBorrowed(address(this));\r\n    }\r\n\r\n\r\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\r\n    function getRewards() external {\r\n        poolRewarder.getRewardsFor(msg.sender);\r\n    }\r\n\r\n    // Returns number of pending rewards for msg.sender\r\n    function checkRewards() external view returns (uint256) {\r\n        return poolRewarder.earned(msg.sender);\r\n    }\r\n\r\n    // Returns max. acceptable pool utilisation after borrow action\r\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\r\n        return 0.9e18;\r\n    }\r\n\r\n    /**\r\n     * Returns the current deposited amount for the given user\r\n     * The value includes the interest rates earned at the current moment\r\n     * @dev _user the address of queried depositor\r\n     **/\r\n    function balanceOf(address user) public view override returns (uint256) {\r\n        return depositIndex.getIndexedValue(_deposited[user], user);\r\n    }\r\n\r\n    /**\r\n     * Returns the current interest rate for deposits\r\n     **/\r\n    function getDepositRate() public view returns (uint256) {\r\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\r\n    }\r\n\r\n    /**\r\n     * Returns the current interest rate for borrowings\r\n     **/\r\n    function getBorrowingRate() public view returns (uint256) {\r\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\r\n    }\r\n\r\n    /**\r\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\r\n     **/\r\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\r\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\r\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\r\n\r\n        if(amount > balance) revert InsufficientPoolFunds();\r\n        if(surplus < amount) revert InsufficientSurplus();\r\n\r\n        _transferFromPool(account, amount);\r\n    }\r\n\r\n    /* ========== INTERNAL FUNCTIONS ========== */\r\n\r\n    function _mint(address to, uint256 amount) internal {\r\n        if(to == address(0)) revert MintToAddressZero();\r\n\r\n        _deposited[to] += amount;\r\n\r\n        emit Transfer(address(0), to, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal {\r\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\r\n\r\n        // verified in \"require\" above\r\n        unchecked {\r\n            _deposited[account] -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    function _updateRates() internal {\r\n        uint256 _totalBorrowed = totalBorrowed();\r\n        uint256 _totalSupply = totalSupply();\r\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\r\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\r\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\r\n    }\r\n\r\n    function _accumulateDepositInterest(address user) internal {\r\n        uint256 interest = balanceOf(user) - _deposited[user];\r\n\r\n        _mint(user, interest);\r\n        _deposited[address(this)] = balanceOf(address(this));\r\n\r\n        emit InterestCollected(user, interest, block.timestamp);\r\n\r\n        depositIndex.updateUser(user);\r\n        depositIndex.updateUser(address(this));\r\n    }\r\n\r\n    function _accumulateBorrowingInterest(address user) internal {\r\n        borrowed[user] = getBorrowed(user);\r\n        borrowed[address(this)] = getBorrowed(address(this));\r\n\r\n        borrowIndex.updateUser(user);\r\n        borrowIndex.updateUser(address(this));\r\n    }\r\n\r\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\r\n\r\n    function renounceOwnership() public virtual override {}\r\n\r\n    /* ========== MODIFIERS ========== */\r\n\r\n    modifier canBorrow() {\r\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\r\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\r\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\r\n        _;\r\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\r\n    }\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    /**\r\n     * @dev emitted after the user deposits funds\r\n     * @param user the address performing the deposit\r\n     * @param value the amount deposited\r\n     * @param timestamp of the deposit\r\n     **/\r\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\r\n\r\n    /**\r\n     * @dev emitted after the user withdraws funds\r\n     * @param user the address performing the withdrawal\r\n     * @param value the amount withdrawn\r\n     * @param timestamp of the withdrawal\r\n     **/\r\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\r\n\r\n    /**\r\n     * @dev emitted after the user borrows funds\r\n     * @param user the address that borrows\r\n     * @param value the amount borrowed\r\n     * @param timestamp time of the borrowing\r\n     **/\r\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\r\n\r\n    /**\r\n     * @dev emitted after the user repays debt\r\n     * @param user the address that repays debt\r\n     * @param value the amount repaid\r\n     * @param timestamp of the repayment\r\n     **/\r\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\r\n\r\n    /**\r\n     * @dev emitted after accumulating deposit interest\r\n     * @param user the address that the deposit interest is accumulated for\r\n     * @param value the amount that interest is calculated from\r\n     * @param timestamp of the interest accumulation\r\n     **/\r\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\r\n\r\n    /**\r\n    * @dev emitted after changing borrowers registry\r\n    * @param registry an address of the newly set borrowers registry\r\n    * @param timestamp of the borrowers registry change\r\n    **/\r\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\r\n\r\n    /**\r\n    * @dev emitted after changing rates calculator\r\n    * @param calculator an address of the newly set rates calculator\r\n    * @param timestamp of the borrowers registry change\r\n    **/\r\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\r\n\r\n    /**\r\n    * @dev emitted after changing pool rewarder\r\n    * @param poolRewarder an address of the newly set pool rewarder\r\n    * @param timestamp of the pool rewarder change\r\n    **/\r\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\r\n\r\n    /* ========== ERRORS ========== */\r\n\r\n    // Only authorized accounts may borrow\r\n    error NotAuthorizedToBorrow();\r\n\r\n    // Borrowers registry is not configured\r\n    error BorrowersRegistryNotConfigured();\r\n\r\n    // Pool is frozen\r\n    error PoolFrozen();\r\n\r\n    // Not enough funds in the pool.\r\n    error InsufficientPoolFunds();\r\n\r\n    // Insufficient pool surplus to cover the requested recover amount\r\n    error InsufficientSurplus();\r\n\r\n    // Address (`target`) must be a contract\r\n    // @param target target address that must be a contract\r\n    error NotAContract(address target);\r\n\r\n    //  ERC20: Spender cannot be a zero address\r\n    error SpenderZeroAddress();\r\n\r\n    //  ERC20: cannot transfer to the zero address\r\n    error TransferToZeroAddress();\r\n\r\n    //  ERC20: cannot transfer to the pool address\r\n    error TransferToPoolAddress();\r\n\r\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\r\n    /// @param amount transfer amount\r\n    /// @param balance available balance\r\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\r\n\r\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\r\n    /// @param requested requested transfer amount\r\n    /// @param allowance current allowance\r\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\r\n\r\n    //  This deposit operation would result in a breach of the totalSupplyCap\r\n    error TotalSupplyCapBreached();\r\n\r\n    // The deposit amount must be > 0\r\n    error ZeroDepositAmount();\r\n\r\n    // ERC20: cannot mint to the zero address\r\n    error MintToAddressZero();\r\n\r\n    // ERC20: burn amount exceeds current pool indexed balance\r\n    error BurnAmountExceedsBalance();\r\n\r\n    // Trying to repay more than was borrowed\r\n    error RepayingMoreThanWasBorrowed();\r\n\r\n    // getMaxPoolUtilisationForBorrowing was breached\r\n    error MaxPoolUtilisationBreached();\r\n}"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/interfaces/IIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\r\npragma solidity 0.8.17;\r\n\r\ninterface IIndex {\r\n\r\n    function setRate(uint256 _rate) external;\r\n\r\n    function updateUser(address user) external;\r\n\r\n    function getIndex() external view returns (uint256);\r\n\r\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\r\n\r\n}\r\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: ;\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IRatesCalculator\r\n * @dev Interface defining base method for contracts implementing interest rates calculation.\r\n * The calculated value could be based on the relation between funds borrowed and deposited.\r\n */\r\ninterface IRatesCalculator {\r\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\r\n\r\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\r\n}\r\n"
    },
    "contracts/interfaces/IBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: ;\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IBorrowersRegistry\r\n * Keeps a registry of created trading accounts to verify their borrowing rights\r\n */\r\ninterface IBorrowersRegistry {\r\n    function canBorrow(address _account) external view returns (bool);\r\n\r\n    function getLoanForOwner(address _owner) external view returns (address);\r\n\r\n    function getOwnerOfLoan(address _loan) external view returns (address);\r\n}\r\n"
    },
    "contracts/interfaces/IPoolRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: ;\r\npragma solidity ^0.8.17;\r\n\r\ninterface IPoolRewarder {\r\n\r\n    function stakeFor(uint _amount, address _stakeFor) external;\r\n\r\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\r\n\r\n    function getRewardsFor(address _user) external;\r\n\r\n    function earned(address _account) external view returns (uint);\r\n\r\n    function balanceOf(address _account) external view returns (uint);\r\n}\r\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/deployment/avalanche/UsdcPoolFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: 8c36e18a206b9e6649c00da51c54b92171ce3413;\r\npragma solidity 0.8.17;\r\n\r\nimport \"./UsdcPool.sol\";\r\n\r\n\r\n/**\r\n * @title PoolFactory\r\n * @dev Contract factory allowing anyone to deploy a pool contract\r\n */\r\ncontract UsdcPoolFactory {\r\n    function deployPool() public {\r\n        UsdcPool pool = new UsdcPool();\r\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev emitted after pool is deployed by any user\r\n     * @param user the address initiating the deployment\r\n     * @param poolAddress of deployed pool\r\n     * @param timestamp of the deployment\r\n     **/\r\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}