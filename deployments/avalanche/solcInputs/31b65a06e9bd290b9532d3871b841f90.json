{
  "language": "Solidity",
  "sources": {
    "contracts/deployment/avalanche/UsdcVariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: 01a6c6606673961fa6183b54b8b35220d47e99fc;\r\npragma solidity 0.8.17;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"../../interfaces/IRatesCalculator.sol\";\r\n\r\n/**\r\n * @title UsdcVariableUtilisationRatesCalculator\r\n * @dev Contract which calculates the interest rates based on pool utilisation.\r\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\r\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\r\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\r\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\r\n **/\r\ncontract UsdcVariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\r\n    uint256 public constant SLOPE_1 = 0.166666666666667e18;\r\n    uint256 public constant OFFSET_1 = 0;\r\n\r\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\r\n\r\n    uint256 public constant SLOPE_2 = 0.4e18;\r\n    //negative, hence minus in calculations\r\n    uint256 public constant OFFSET_2 = 0.14e18;\r\n\r\n    uint256 public constant BREAKPOINT_2 = 0.85e18;\r\n\r\n    uint256 public constant SLOPE_3 = 2e18;\r\n    //negative, hence minus in calculations\r\n    uint256 public constant OFFSET_3 = 1.5e18;\r\n\r\n    // BREAKPOINT must be lower than 1e18\r\n    uint256 public constant BREAKPOINT_3 = 0.9e18;\r\n\r\n    uint256 public constant SLOPE_4 = 6e18;\r\n    //negative, hence minus in calculations\r\n    uint256 public constant OFFSET_4 = 5.1e18;\r\n\r\n    uint256 public constant MAX_RATE = 0.9e18;\r\n\r\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\r\n    //profit generation\r\n    uint256 public spread = 1e12;\r\n\r\n    /* ========== VIEW FUNCTIONS ========== */\r\n\r\n    /**\r\n     * Returns the pool utilisation, which is a ratio between loans and deposits\r\n     * utilisation = value_of_loans / value_of_deposits\r\n     * @dev _totalLoans total value of loans\r\n     * @dev _totalDeposits total value of deposits\r\n     **/\r\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\r\n        if (_totalDeposits == 0) return 0;\r\n\r\n        return (_totalLoans * 1e18) / _totalDeposits;\r\n    }\r\n\r\n    /**\r\n     * Returns the current deposit rate\r\n     * The value is based on the current borrowing rate and satisfies the invariant:\r\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\r\n     * @dev _totalLoans total value of loans\r\n     * @dev _totalDeposits total value of deposits\r\n     **/\r\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\r\n        if (_totalDeposits == 0) return 0;\r\n\r\n        if (_totalLoans >= _totalDeposits) {\r\n            return MAX_RATE * (1e18 - spread) / 1e18;\r\n        } else {\r\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\r\n            return rate;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the current borrowing rate\r\n     * The value is based on the pool utilisation according to the piecewise linear formula:\r\n     * 1) for pool utilisation lower than or equal to breakpoint:\r\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\r\n     * 2) for pool utilisation greater than breakpoint:\r\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\r\n     * @dev _totalLoans total value of loans\r\n     * @dev _totalDeposits total value of deposits\r\n     **/\r\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\r\n        if (totalDeposits == 0) return OFFSET_1;\r\n\r\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\r\n\r\n        if (poolUtilisation >= 1e18) {\r\n            return MAX_RATE;\r\n        } else if (poolUtilisation <= BREAKPOINT_1) {\r\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\r\n        } else if (poolUtilisation <= BREAKPOINT_2) {\r\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\r\n        } else if (poolUtilisation <= BREAKPOINT_3) {\r\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\r\n        } else {\r\n            // full formula derived from piecewise linear function calculation except for SLOPE_2/3/4 subtraction (separated for\r\n            // unsigned integer safety check)\r\n            return (poolUtilisation * SLOPE_4) / 1e18 - OFFSET_4;\r\n        }\r\n    }\r\n\r\n    /* ========== SETTERS ========== */\r\n    /**\r\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\r\n     * @param _spread spread defined by user\r\n     **/\r\n    function setSpread(uint256 _spread) external onlyOwner {\r\n        require(_spread < 1e18, \"Spread must be smaller than 1e18\");\r\n        spread = _spread;\r\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\r\n    }\r\n\r\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\r\n\r\n    function renounceOwnership() public virtual override {}\r\n\r\n    /* ========== EVENTS ========== */\r\n\r\n    /**\r\n     * @dev emitted after changing the spread\r\n     * @param performer an address of wallet setting a new spread\r\n     * @param newSpread new spread\r\n     * @param timestamp time of a spread change\r\n     **/\r\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\r\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\r\n// Last deployed from commit: ;\r\npragma solidity 0.8.17;\r\n\r\n/**\r\n * @title IRatesCalculator\r\n * @dev Interface defining base method for contracts implementing interest rates calculation.\r\n * The calculated value could be based on the relation between funds borrowed and deposited.\r\n */\r\ninterface IRatesCalculator {\r\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\r\n\r\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\r\n}\r\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}