{
  "address": "0xEa7CabC408Bb6B348089CfE15EeEfE4b889b2fD9",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x21d0aa8f7a651926cee09f3a1f3173833f15a067f0aa4751f1d29e7a3f3cca79",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xEa7CabC408Bb6B348089CfE15EeEfE4b889b2fD9",
    "transactionIndex": 0,
    "gasUsed": "4671853",
    "logsBloom": "0x
    "blockHash": "0xd3c912404a9f7e428ba09211b4db83fcaa155e3a3230c6d1345ea4be05fca627",
    "transactionHash": "0x21d0aa8f7a651926cee09f3a1f3173833f15a067f0aa4751f1d29e7a3f3cca79",
    "logs": [],
    "blockNumber": 26465457,
    "cumulativeGasUsed": "4671853",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "be50bdeb110a85e15ae9d94a1f89a9fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a pool contract\",\"events\":{\"PoolDeployed(address,address,uint256)\":{\"details\":\"emitted after pool is deployed by any user\",\"params\":{\"poolAddress\":\"of deployed pool\",\"timestamp\":\"of the deployment*\",\"user\":\"the address initiating the deployment\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"PoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/BtcPoolFactory.sol\":\"BtcPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a / b + (a % b == 0 ? 0 : 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc995bddbca1ae19788db9f8b61e63385edd3fddf89693b612d5abd1a275974d2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public totalSupplyCap;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_, uint256 _totalSupplyCap) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n        totalSupplyCap = _totalSupplyCap;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets new totalSupplyCap limiting how much in total can be deposited to the Pool.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _newTotalSupplyCap new deposit cap\\n    **/\\n    function setTotalSupplyCap(uint256 _newTotalSupplyCap) external onlyOwner {\\n        totalSupplyCap = _newTotalSupplyCap;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(_poolRewarder)) && address(_poolRewarder) != address(0)) revert NotAContract(address(poolRewarder));\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        if(!AddressUpgradeable.isContract(address(ratesCalculator_)) && address(ratesCalculator_) != address(0)) revert NotAContract(address(ratesCalculator_));\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        if(!AddressUpgradeable.isContract(address(borrowersRegistry_))) revert NotAContract(address(borrowersRegistry_));\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_deposited[msg.sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[msg.sender]);\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, msg.sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        uint256 currentAllowance = _allowed[msg.sender][spender];\\n        if(currentAllowance < subtractedValue) revert InsufficientAllowance(subtractedValue, currentAllowance);\\n\\n        uint256 newAllowance = currentAllowance - subtractedValue;\\n        _allowed[msg.sender][spender] = newAllowance;\\n\\n        emit Approval(msg.sender, spender, newAllowance);\\n        return true;\\n    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        if(spender == address(0)) revert SpenderZeroAddress();\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        if(_allowed[sender][msg.sender] < amount) revert InsufficientAllowance(amount, _allowed[sender][msg.sender]);\\n\\n        if(recipient == address(0)) revert TransferToZeroAddress();\\n\\n        if(recipient == address(this)) revert TransferToPoolAddress();\\n\\n        _accumulateDepositInterest(sender);\\n\\n        if(_deposited[sender] < amount) revert TransferAmountExceedsBalance(amount, _deposited[sender]);\\n\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        // Handle rewards\\n        if(address(poolRewarder) != address(0) && amount != 0){\\n            uint256 unstaked = poolRewarder.withdrawFor(amount, sender);\\n            if(unstaked > 0) {\\n                poolRewarder.stakeFor(unstaked, recipient);\\n            }\\n        }\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        if(_amount == 0) revert ZeroDepositAmount();\\n\\n        _amount = Math.min(_amount, IERC20(tokenAddress).balanceOf(msg.sender));\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(totalSupplyCap != 0){\\n            if(_deposited[address(this)] + _amount > totalSupplyCap) revert TotalSupplyCapBreached();\\n        }\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        if(_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        if(_amount > _deposited[address(this)]) revert BurnAmountExceedsBalance();\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[address(this)] -= _amount;\\n        }\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        if (_amount > IERC20(tokenAddress).balanceOf(address(this))) revert InsufficientPoolFunds();\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        if(amount > borrowed[msg.sender]) revert RepayingMoreThanWasBorrowed();\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    // Returns max. acceptable pool utilisation after borrow action\\n    function getMaxPoolUtilisationForBorrowing() virtual public view returns (uint256) {\\n        return 0.9e18;\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        if(amount > balance) revert InsufficientPoolFunds();\\n        if(surplus < amount) revert InsufficientSurplus();\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        if(to == address(0)) revert MintToAddressZero();\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        if(amount > _deposited[account]) revert BurnAmountExceedsBalance();\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        if(address(ratesCalculator) == address(0)) revert PoolFrozen();\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        if(address(borrowersRegistry) == address(0)) revert BorrowersRegistryNotConfigured();\\n        if(!borrowersRegistry.canBorrow(msg.sender)) revert NotAuthorizedToBorrow();\\n        if(totalSupply() == 0) revert InsufficientPoolFunds();\\n        _;\\n        if((totalBorrowed() * 1e18) / totalSupply() > getMaxPoolUtilisationForBorrowing()) revert MaxPoolUtilisationBreached();\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n\\n    /* ========== ERRORS ========== */\\n\\n    // Only authorized accounts may borrow\\n    error NotAuthorizedToBorrow();\\n\\n    // Borrowers registry is not configured\\n    error BorrowersRegistryNotConfigured();\\n\\n    // Pool is frozen\\n    error PoolFrozen();\\n\\n    // Not enough funds in the pool.\\n    error InsufficientPoolFunds();\\n\\n    // Insufficient pool surplus to cover the requested recover amount\\n    error InsufficientSurplus();\\n\\n    // Address (`target`) must be a contract\\n    // @param target target address that must be a contract\\n    error NotAContract(address target);\\n\\n    //  ERC20: Spender cannot be a zero address\\n    error SpenderZeroAddress();\\n\\n    //  ERC20: cannot transfer to the zero address\\n    error TransferToZeroAddress();\\n\\n    //  ERC20: cannot transfer to the pool address\\n    error TransferToPoolAddress();\\n\\n    //  ERC20: transfer amount (`amount`) exceeds balance (`balance`)\\n    /// @param amount transfer amount\\n    /// @param balance available balance\\n    error TransferAmountExceedsBalance(uint256 amount, uint256 balance);\\n\\n    //  ERC20: requested transfer amount (`requested`) exceeds current allowance (`allowance`)\\n    /// @param requested requested transfer amount\\n    /// @param allowance current allowance\\n    error InsufficientAllowance(uint256 requested, uint256 allowance);\\n\\n    //  This deposit operation would result in a breach of the totalSupplyCap\\n    error TotalSupplyCapBreached();\\n\\n    // The deposit amount must be > 0\\n    error ZeroDepositAmount();\\n\\n    // ERC20: cannot mint to the zero address\\n    error MintToAddressZero();\\n\\n    // ERC20: burn amount exceeds current pool indexed balance\\n    error BurnAmountExceedsBalance();\\n\\n    // Trying to repay more than was borrowed\\n    error RepayingMoreThanWasBorrowed();\\n\\n    // getMaxPoolUtilisationForBorrowing was breached\\n    error MaxPoolUtilisationBreached();\\n}\",\"keccak256\":\"0x8cf685ee1453e8b1fdc5005c4f234df632b03452651f6cd0558d68c1f277d2c4\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/BtcPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../Pool.sol\\\";\\n\\n\\n/**\\n * @title BtcPool\\n * @dev Contract allowing user to deposit to and borrow BTC.b from a dedicated user account\\n */\\ncontract BtcPool is Pool {\\n    function getMaxPoolUtilisationForBorrowing() override public view returns (uint256) {\\n        return 0.9e18;\\n    }\\n}\",\"keccak256\":\"0x7485187416e8bacdcfabe32c7ca36b279b8c12eb97e78492e26c23eaa3978a03\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/BtcPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2f6b0fb53889a8741a3d7f78a2d5d05ad7a0c76d;\\npragma solidity 0.8.17;\\n\\nimport \\\"./BtcPool.sol\\\";\\n\\n\\n/**\\n * @title PoolFactory\\n * @dev Contract factory allowing anyone to deploy a pool contract\\n */\\ncontract BtcPoolFactory {\\n    function deployPool() public {\\n        BtcPool pool = new BtcPool();\\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\\n    }\\n\\n    /**\\n     * @dev emitted after pool is deployed by any user\\n     * @param user the address initiating the deployment\\n     * @param poolAddress of deployed pool\\n     * @param timestamp of the deployment\\n     **/\\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\\n}\",\"keccak256\":\"0xbc783244e84690393f5612bdaab170daa738d051237c059ec9c0ad2565e388c1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external returns (uint);\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function balanceOf(address _account) external view returns (uint);\\n}\\n\",\"keccak256\":\"0xf6ae92c67c618dfb6a80cbf153b2aa8e5d93b8cec6444dc7e0db4dce959fbefd\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506153e4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a4565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a26591883382426040516100999392919061010b565b60405180910390a150565b61526c8061014383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b82525050565b6000819050919050565b610105816100f2565b82525050565b600060608201905061012060008301866100e3565b61012d60208301856100e3565b61013a60408301846100fc565b94935050505056fe608060405234801561001057600080fd5b5061524c806100206000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c806370d4cea011610125578063b790634e116100ad578063dd62ed3e1161007c578063dd62ed3e14610619578063ee61bd6e14610649578063f2fde38b14610667578063f36b242514610683578063fc68f661146106a15761021c565b8063b790634e146105a3578063bb102aea146105c1578063c5ebeaec146105df578063d06dca89146105fb5761021c565b80639d76ea58116100f45780639d76ea58146104eb578063a457c2d714610509578063a9059cbb14610539578063aa5af0fd14610569578063b6b55f25146105875761021c565b806370d4cea014610489578063715018a6146104a55780637b898939146104af5780638da5cb5b146104cd5761021c565b80632e1a7d4d116101a85780634c19386c116101775780634c19386c146103cf5780636011163e146103ed57806361215aa81461041d5780636ca6d5d01461043b57806370a08231146104595761021c565b80632e1a7d4d1461034b57806331d05b1114610367578063371fd8e614610383578063395093511461039f5761021c565b80631457db34116101ef5780631457db34146102a75780631460e390146102c357806318160ddd146102df57806323b872dd146102fd5780632aeaa2911461032d5761021c565b80630572b0cc146102215780630790ef9a1461022b5780630941cb3d14610247578063095ea7b314610277575b600080fd5b6102296106bd565b005b6102456004803603810190610240919061452b565b61074c565b005b610261600480360381019061025c919061456b565b61096a565b60405161026e91906145a7565b60405180910390f35b610291600480360381019061028c91906145c2565b610982565b60405161029e919061461d565b60405180910390f35b6102c160048036038101906102bc9190614676565b610ad9565b005b6102dd60048036038101906102d8919061479b565b610c8e565b005b6102e7610fe1565b6040516102f491906145a7565b60405180910390f35b6103176004803603810190610312919061483d565b610ff1565b604051610324919061461d565b60405180910390f35b610335611627565b60405161034291906145a7565b60405180910390f35b61036560048036038101906103609190614890565b6116c9565b005b610381600480360381019061037c9190614890565b611a29565b005b61039d60048036038101906103989190614890565b611aaf565b005b6103b960048036038101906103b491906145c2565b611c97565b6040516103c6919061461d565b60405180910390f35b6103d7611e7b565b6040516103e491906145a7565b60405180910390f35b6104076004803603810190610402919061456b565b611e8b565b60405161041491906145a7565b60405180910390f35b610425611f71565b60405161043291906145a7565b60405180910390f35b610443611f81565b604051610450919061491c565b60405180910390f35b610473600480360381019061046e919061456b565b611fa7565b60405161048091906145a7565b60405180910390f35b6104a3600480360381019061049e9190614937565b61208d565b005b6104ad61225d565b005b6104b761225f565b6040516104c49190614985565b60405180910390f35b6104d5612285565b6040516104e291906149af565b60405180910390f35b6104f36122af565b60405161050091906149d9565b60405180910390f35b610523600480360381019061051e91906145c2565b6122d5565b604051610530919061461d565b60405180910390f35b610553600480360381019061054e91906145c2565b612506565b604051610560919061461d565b60405180910390f35b61057161295f565b60405161057e9190614985565b60405180910390f35b6105a1600480360381019061059c9190614890565b612985565b005b6105ab612d00565b6040516105b891906145a7565b60405180910390f35b6105c9612db3565b6040516105d691906145a7565b60405180910390f35b6105f960048036038101906105f49190614890565b612db9565b005b610603613205565b6040516106109190614a15565b60405180910390f35b610633600480360381019061062e9190614a30565b61322b565b60405161064091906145a7565b60405180910390f35b6106516132b2565b60405161065e9190614a91565b60405180910390f35b610681600480360381019061067c919061456b565b6132d8565b005b61068b6133cf565b60405161069891906145a7565b60405180910390f35b6106bb60048036038101906106b69190614aac565b613482565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b815260040161071891906149af565b600060405180830381600087803b15801561073257600080fd5b505af1158015610746573d6000803e3d6000fd5b50505050565b6107546135da565b73ffffffffffffffffffffffffffffffffffffffff16610772612285565b73ffffffffffffffffffffffffffffffffffffffff16146107c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107bf90614b36565b60405180910390fd5b60026065540361080d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080490614ba2565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161087291906149af565b602060405180830381865afa15801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190614bd7565b905060006108bf610fe1565b6108c7611e7b565b836108d29190614c33565b6108dc9190614c67565b905081841115610918576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83811015610952576040517f94290ab900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095c83856135e2565b505060016065819055505050565b609a6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109e9576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610ac791906145a7565b60405180910390a36001905092915050565b610ae16135da565b73ffffffffffffffffffffffffffffffffffffffff16610aff612285565b73ffffffffffffffffffffffffffffffffffffffff1614610b55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4c90614b36565b60405180910390fd5b610b5e81613633565b158015610b985750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b15610bfc57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517f8a8b41ec000000000000000000000000000000000000000000000000000000008152600401610bf391906149af565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610c8391906145a7565b60405180910390a250565b600060019054906101000a900460ff16610cb65760008054906101000a900460ff1615610cbf565b610cbe613656565b5b610cfe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf590614d0d565b60405180910390fd5b60008060019054906101000a900460ff161590508015610d4e576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610d5788613633565b8015610d685750610d6787613633565b5b8015610d795750610d7886613633565b5b8015610d8a5750610d8985613633565b5b8015610dd25750610d9a83613633565b80610dd15750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16145b5b610e11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0890614d79565b60405180910390fd5b86609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555087609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609781905550610fa6613667565b610fae6136c0565b610fb6613719565b8015610fd75760008060016101000a81548160ff0219169083151502179055505b5050505050505050565b6000610fec30611fa7565b905090565b600081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111325781609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f2a1b2dd8000000000000000000000000000000000000000000000000000000008152600401611129929190614d99565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611198576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111fd576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61120684613a11565b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112cb5781609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a0000000000000000000000000000000000000000000000000000000081526004016112c2929190614d99565b60405180910390fd5b81609960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461131a9190614c67565b9250508190555081609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ad9190614c67565b925050819055506113bd83613a11565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461140c9190614c33565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614158015611473575060008214155b156115b7576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84876040518363ffffffff1660e01b81526004016114d7929190614dc2565b6020604051808303816000875af11580156114f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151a9190614bd7565b905060008111156115b557609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b8152600401611582929190614dc2565b600060405180830381600087803b15801561159c57600080fd5b505af11580156115b0573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161161491906145a7565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b815260040161168391906149af565b602060405180830381865afa1580156116a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c49190614bd7565b905090565b60026065540361170e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170590614ba2565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161177191906149af565b602060405180830381865afa15801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b29190614bd7565b8111156117eb576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117f433613a11565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481111561186d576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506118c43382613c2c565b6118ce33826135e2565b6118d6613719565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146119ce57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b8152600401611989929190614dc2565b6020604051808303816000875af11580156119a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119cc9190614bd7565b505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051611a16929190614d99565b60405180910390a2600160658190555050565b611a316135da565b73ffffffffffffffffffffffffffffffffffffffff16611a4f612285565b73ffffffffffffffffffffffffffffffffffffffff1614611aa5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9c90614b36565b60405180910390fd5b8060978190555050565b600260655403611af4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aeb90614ba2565b60405180910390fd5b6002606581905550611b0533613d5c565b609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115611b7e576040517f1b95a86600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b883382613f11565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bd79190614c67565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611c2d9190614c67565b92505081905550611c3c613719565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d8242604051611c84929190614d99565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611cfe576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611d889190614c33565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611e6891906145a7565b60405180910390a3600191505092915050565b6000611e8630611e8b565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609a60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401611f29929190614dc2565b602060405180830381865afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a9190614bd7565b9050919050565b6000670c7d713b49da0000905090565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401612045929190614dc2565b602060405180830381865afa158015612062573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120869190614bd7565b9050919050565b6120956135da565b73ffffffffffffffffffffffffffffffffffffffff166120b3612285565b73ffffffffffffffffffffffffffffffffffffffff1614612109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210090614b36565b60405180910390fd5b61211281613633565b15801561214c5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b1561218e57806040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815260040161218591906149af565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461220c5761220b613719565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e01824260405161225291906145a7565b60405180910390a250565b565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361233c576040517f7acc038e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156124045782816040517f2a1b2dd80000000000000000000000000000000000000000000000000000000081526004016123fb929190614d99565b60405180910390fd5b600083826124129190614c67565b905080609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516124f291906145a7565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361256d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036125d2576040517fed728e5700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6125db33613a11565b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156126a05781609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517fa1a48f3a000000000000000000000000000000000000000000000000000000008152600401612697929190614d99565b60405180910390fd5b81609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506126f683613a11565b81609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546127459190614c33565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141580156127ac575060008214155b156128f0576000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc84336040518363ffffffff1660e01b8152600401612810929190614dc2565b6020604051808303816000875af115801561282f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128539190614bd7565b905060008111156128ee57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282866040518363ffffffff1660e01b81526004016128bb929190614dc2565b600060405180830381600087803b1580156128d557600080fd5b505af11580156128e9573d6000803e3d6000fd5b505050505b505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161294d91906145a7565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002606554036129ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c190614ba2565b60405180910390fd5b600260658190555060008103612a0c576040517f078e1d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612ab18160a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401612a6b91906149af565b602060405180830381865afa158015612a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aac9190614bd7565b613f64565b9050612abc33613a11565b600060975414612b4d5760975481609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612b149190614c33565b1115612b4c576040517f3f27d61700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b612b573382613f11565b612b613382613f7d565b80609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612bb09190614c33565b92505081905550612bbf613719565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614612ca557609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b8152600401612c72929190614dc2565b600060405180830381600087803b158015612c8c57600080fd5b505af1158015612ca0573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158242604051612ced929190614d99565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331612d48611e7b565b612d50610fe1565b6040518363ffffffff1660e01b8152600401612d6d929190614d99565b602060405180830381865afa158015612d8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dae9190614bd7565b905090565b60975481565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612e41576040517f700e36ac00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b8152600401612e9c91906149af565b602060405180830381865afa158015612eb9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612edd9190614e17565b612f13576040517feb05f53600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000612f1d610fe1565b03612f54576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260655403612f99576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f9090614ba2565b60405180910390fd5b600260658190555060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401612ffc91906149af565b602060405180830381865afa158015613019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061303d9190614bd7565b811115613076576040517f5b5724fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61307f33613d5c565b80609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546130ce9190614c33565b9250508190555080609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546131249190614c33565b9250508190555061313533826135e2565b61313d613719565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d58242604051613185929190614d99565b60405180910390a2600160658190555061319d611f71565b6131a5610fe1565b670de0b6b3a76400006131b6611e7b565b6131c09190614e44565b6131ca9190614eb5565b1115613202576040517fe5739c7e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6132e06135da565b73ffffffffffffffffffffffffffffffffffffffff166132fe612285565b73ffffffffffffffffffffffffffffffffffffffff1614613354576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334b90614b36565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036133c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133ba90614f58565b60405180910390fd5b6133cc816140a3565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec613417611e7b565b61341f610fe1565b6040518363ffffffff1660e01b815260040161343c929190614d99565b602060405180830381865afa158015613459573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347d9190614bd7565b905090565b61348a6135da565b73ffffffffffffffffffffffffffffffffffffffff166134a8612285565b73ffffffffffffffffffffffffffffffffffffffff16146134fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f590614b36565b60405180910390fd5b61350781613633565b61354857806040517f8a8b41ec00000000000000000000000000000000000000000000000000000000815260040161353f91906149af565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b920469426040516135cf91906145a7565b60405180910390a250565b600033905090565b61362f828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166141699092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600061366130613633565b15905090565b600060019054906101000a900460ff166136b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136ad90614fea565b60405180910390fd5b6136be61429f565b565b600060019054906101000a900460ff1661370f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161370690614fea565b60405180910390fd5b613717614300565b565b6000613723611e7b565b9050600061372f610fe1565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036137b9576040517ffd4851e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b8152600401613854929190614d99565b602060405180830381865afa158015613871573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138959190614bd7565b6040518263ffffffff1660e01b81526004016138b191906145a7565b600060405180830381600087803b1580156138cb57600080fd5b505af11580156138df573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b815260040161397e929190614d99565b602060405180830381865afa15801561399b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139bf9190614bd7565b6040518263ffffffff1660e01b81526004016139db91906145a7565b600060405180830381600087803b1580156139f557600080fd5b505af1158015613a09573d6000803e3d6000fd5b505050505050565b6000609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613a5c83611fa7565b613a669190614c67565b9050613a728282613f7d565b613a7b30611fa7565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618242604051613b06929190614d99565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b8152600401613b6991906149af565b600060405180830381600087803b158015613b8357600080fd5b505af1158015613b97573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401613bf691906149af565b600060405180830381600087803b158015613c1057600080fd5b505af1158015613c24573d6000803e3d6000fd5b505050505050565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054811115613ca5576040517f177466fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613d5091906145a7565b60405180910390a35050565b613d6581611e8b565b609a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613db130611e8b565b609a60003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b8152600401613e4f91906149af565b600060405180830381600087803b158015613e6957600080fd5b505af1158015613e7d573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401613edc91906149af565b600060405180830381600087803b158015613ef657600080fd5b505af1158015613f0a573d6000803e3d6000fd5b5050505050565b613f6082308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614359909392919063ffffffff16565b5050565b6000818310613f735781613f75565b825b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613fe3576040517f8db7f6da00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546140329190614c33565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161409791906145a7565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161419b92919061500a565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516141e991906150a4565b6000604051808303816000865af19150503d8060008114614226576040519150601f19603f3d011682016040523d82523d6000602084013e61422b565b606091505b509150915081801561425957506000815114806142585750808060200190518101906142579190614e17565b5b5b614298576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161428f9061512d565b60405180910390fd5b5050505050565b600060019054906101000a900460ff166142ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016142e590614fea565b60405180910390fd5b6142fe6142f96135da565b6140a3565b565b600060019054906101000a900460ff1661434f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161434690614fea565b60405180910390fd5b6001606581905550565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161438d9392919061514d565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516143db91906150a4565b6000604051808303816000865af19150503d8060008114614418576040519150601f19603f3d011682016040523d82523d6000602084013e61441d565b606091505b509150915081801561444b575060008151148061444a5750808060200190518101906144499190614e17565b5b5b61448a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401614481906151f6565b60405180910390fd5b505050505050565b600080fd5b6000819050919050565b6144aa81614497565b81146144b557600080fd5b50565b6000813590506144c7816144a1565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006144f8826144cd565b9050919050565b614508816144ed565b811461451357600080fd5b50565b600081359050614525816144ff565b92915050565b6000806040838503121561454257614541614492565b5b6000614550858286016144b8565b925050602061456185828601614516565b9150509250929050565b60006020828403121561458157614580614492565b5b600061458f84828501614516565b91505092915050565b6145a181614497565b82525050565b60006020820190506145bc6000830184614598565b92915050565b600080604083850312156145d9576145d8614492565b5b60006145e785828601614516565b92505060206145f8858286016144b8565b9150509250929050565b60008115159050919050565b61461781614602565b82525050565b6000602082019050614632600083018461460e565b92915050565b6000614643826144ed565b9050919050565b61465381614638565b811461465e57600080fd5b50565b6000813590506146708161464a565b92915050565b60006020828403121561468c5761468b614492565b5b600061469a84828501614661565b91505092915050565b60006146ae826144ed565b9050919050565b6146be816146a3565b81146146c957600080fd5b50565b6000813590506146db816146b5565b92915050565b60006146ec826144ed565b9050919050565b6146fc816146e1565b811461470757600080fd5b50565b600081359050614719816146f3565b92915050565b600061472a826144ed565b9050919050565b61473a8161471f565b811461474557600080fd5b50565b60008135905061475781614731565b92915050565b6000614768826144cd565b9050919050565b6147788161475d565b811461478357600080fd5b50565b6000813590506147958161476f565b92915050565b600080600080600080600060e0888a0312156147ba576147b9614492565b5b60006147c88a828b016146cc565b97505060206147d98a828b0161470a565b96505060406147ea8a828b01614748565b95505060606147fb8a828b01614748565b945050608061480c8a828b01614786565b93505060a061481d8a828b01614661565b92505060c061482e8a828b016144b8565b91505092959891949750929550565b60008060006060848603121561485657614855614492565b5b600061486486828701614516565b935050602061487586828701614516565b9250506040614886868287016144b8565b9150509250925092565b6000602082840312156148a6576148a5614492565b5b60006148b4848285016144b8565b91505092915050565b6000819050919050565b60006148e26148dd6148d8846144cd565b6148bd565b6144cd565b9050919050565b60006148f4826148c7565b9050919050565b6000614906826148e9565b9050919050565b614916816148fb565b82525050565b6000602082019050614931600083018461490d565b92915050565b60006020828403121561494d5761494c614492565b5b600061495b848285016146cc565b91505092915050565b600061496f826148e9565b9050919050565b61497f81614964565b82525050565b600060208201905061499a6000830184614976565b92915050565b6149a9816144ed565b82525050565b60006020820190506149c460008301846149a0565b92915050565b6149d38161475d565b82525050565b60006020820190506149ee60008301846149ca565b92915050565b60006149ff826148e9565b9050919050565b614a0f816149f4565b82525050565b6000602082019050614a2a6000830184614a06565b92915050565b60008060408385031215614a4757614a46614492565b5b6000614a5585828601614516565b9250506020614a6685828601614516565b9150509250929050565b6000614a7b826148e9565b9050919050565b614a8b81614a70565b82525050565b6000602082019050614aa66000830184614a82565b92915050565b600060208284031215614ac257614ac1614492565b5b6000614ad08482850161470a565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614b20602083614ad9565b9150614b2b82614aea565b602082019050919050565b60006020820190508181036000830152614b4f81614b13565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614b8c601f83614ad9565b9150614b9782614b56565b602082019050919050565b60006020820190508181036000830152614bbb81614b7f565b9050919050565b600081519050614bd1816144a1565b92915050565b600060208284031215614bed57614bec614492565b5b6000614bfb84828501614bc2565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614c3e82614497565b9150614c4983614497565b9250828201905080821115614c6157614c60614c04565b5b92915050565b6000614c7282614497565b9150614c7d83614497565b9250828203905081811115614c9557614c94614c04565b5b92915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614cf7602e83614ad9565b9150614d0282614c9b565b604082019050919050565b60006020820190508181036000830152614d2681614cea565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b6000614d63601483614ad9565b9150614d6e82614d2d565b602082019050919050565b60006020820190508181036000830152614d9281614d56565b9050919050565b6000604082019050614dae6000830185614598565b614dbb6020830184614598565b9392505050565b6000604082019050614dd76000830185614598565b614de460208301846149a0565b9392505050565b614df481614602565b8114614dff57600080fd5b50565b600081519050614e1181614deb565b92915050565b600060208284031215614e2d57614e2c614492565b5b6000614e3b84828501614e02565b91505092915050565b6000614e4f82614497565b9150614e5a83614497565b9250828202614e6881614497565b91508282048414831517614e7f57614e7e614c04565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614ec082614497565b9150614ecb83614497565b925082614edb57614eda614e86565b5b828204905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614f42602683614ad9565b9150614f4d82614ee6565b604082019050919050565b60006020820190508181036000830152614f7181614f35565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000614fd4602b83614ad9565b9150614fdf82614f78565b604082019050919050565b6000602082019050818103600083015261500381614fc7565b9050919050565b600060408201905061501f60008301856149a0565b61502c6020830184614598565b9392505050565b600081519050919050565b600081905092915050565b60005b8381101561506757808201518184015260208101905061504c565b60008484015250505050565b600061507e82615033565b615088818561503e565b9350615098818560208601615049565b80840191505092915050565b60006150b08284615073565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000615117602d83614ad9565b9150615122826150bb565b604082019050919050565b600060208201905081810360008301526151468161510a565b9050919050565b600060608201905061516260008301866149a0565b61516f60208301856149a0565b61517c6040830184614598565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b60006151e0603183614ad9565b91506151eb82615184565b604082019050919050565b6000602082019050818103600083015261520f816151d3565b905091905056fea264697066735822122033853eb35743d8f1671aeaf7613d524fef0109a5c8d36b7bafb9335511818c8964736f6c63430008110033a26469706673582212206409e3fd9cc88c88283da0caf4fd0d54b7f2ef7b9b2677276ead9d7ae7f697ce64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a pool contract",
    "events": {
      "PoolDeployed(address,address,uint256)": {
        "details": "emitted after pool is deployed by any user",
        "params": {
          "poolAddress": "of deployed pool",
          "timestamp": "of the deployment*",
          "user": "the address initiating the deployment"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "PoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}