{
  "address": "0xAC6b05c13A36f95Df9A8C635274498EF412312A4",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "BalanceIsLocked",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BinIdChanged",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampMustNotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DataPackageTimestampsMustBeEqual",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receivedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LengthMismatch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MaxLockTimeExceeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NegativeMint",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoPosition",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Overflow",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedstonePayloadMustHaveAtLeastOneDataPackage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeCast__Exceeds24Bits",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ShouldLock100Percent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SlippageTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Uint256x256Math__MulDivOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Uint256x256Math__MulShiftOverflow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "UserAlreadyHasPosition",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_LOCK_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseRewarder",
      "outputs": [
        {
          "internalType": "contract ILBHooksBaseRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "binInRange",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "containsOracleCalldata",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "activeIdDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isRebalance",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "swapSlippage",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "extractTimestampsAndAssertAllAreEqual",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extractedTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getFullyVestedLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fullyVestedBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLBPair",
      "outputs": [
        {
          "internalType": "contract ILBPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getLockedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPoolPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenX",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenY",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserValueInTokenY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "poolPrice",
          "type": "uint256"
        }
      ],
      "name": "getUserValueInTokenY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenX_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenY_",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "int256",
              "name": "deltaId",
              "type": "int256"
            },
            {
              "internalType": "uint64",
              "name": "distributionX",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "distributionY",
              "type": "uint64"
            }
          ],
          "internalType": "struct ISPrimeTraderJoe.DepositForm[]",
          "name": "depositForm_",
          "type": "tuple[]"
        },
        {
          "internalType": "contract IPositionManager",
          "name": "positionManager_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "traderJoeV2Router_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lbPair",
      "outputs": [
        {
          "internalType": "contract ILBPair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        }
      ],
      "name": "lockBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "locks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lockPeriod",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "unlockTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "activeIdDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idSlippage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "swapSlippage",
          "type": "uint256"
        }
      ],
      "name": "migrateLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "percentForLocks",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lockPeriods",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "amountX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "activeIdDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "idSlippage",
          "type": "uint256"
        }
      ],
      "name": "mintForUserAndLock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionManager",
      "outputs": [
        {
          "internalType": "contract IPositionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ILBHooksBaseRewarder",
          "name": "_baseRewarder",
          "type": "address"
        }
      ],
      "name": "setBaseRewarder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "setOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IVPrimeController",
          "name": "_vPrimeController",
          "type": "address"
        }
      ],
      "name": "setVPrimeControllerAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenX",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenXDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenY",
      "outputs": [
        {
          "internalType": "contract IERC20Metadata",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenYDecimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "traderJoeV2Router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vPrimeController",
      "outputs": [
        {
          "internalType": "contract IVPrimeController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7f7b35c69643aa4ac96872b854583aa1975b68da9ea7141c0e254951ec1bce7e",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xAC6b05c13A36f95Df9A8C635274498EF412312A4",
    "transactionIndex": 0,
    "gasUsed": "5373382",
    "logsBloom": "0x
    "blockHash": "0xb04ffd793684d99218f9530630faff44406e1921a0c688c159a02a3fa0b673eb",
    "transactionHash": "0x7f7b35c69643aa4ac96872b854583aa1975b68da9ea7141c0e254951ec1bce7e",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 48083593,
        "transactionHash": "0x7f7b35c69643aa4ac96872b854583aa1975b68da9ea7141c0e254951ec1bce7e",
        "address": "0xAC6b05c13A36f95Df9A8C635274498EF412312A4",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0xb04ffd793684d99218f9530630faff44406e1921a0c688c159a02a3fa0b673eb"
      }
    ],
    "blockNumber": 48083593,
    "cumulativeGasUsed": "5373382",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "10d4e74d87eeb484d783498829a79238",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BalanceIsLocked\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BinIdChanged\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DataPackageTimestampsMustBeEqual\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receivedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxLockTimeExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NegativeMint\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPosition\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Overflow\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedstonePayloadMustHaveAtLeastOneDataPackage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeCast__Exceeds24Bits\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ShouldLock100Percent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlippageTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Uint256x256Math__MulDivOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Uint256x256Math__MulShiftOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserAlreadyHasPosition\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseRewarder\",\"outputs\":[{\"internalType\":\"contract ILBHooksBaseRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"binInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"containsOracleCalldata\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"activeIdDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRebalance\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippage\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"extractTimestampsAndAssertAllAreEqual\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extractedTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getFullyVestedLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fullyVestedBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLBPair\",\"outputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLockedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenX\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenY\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserValueInTokenY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolPrice\",\"type\":\"uint256\"}],\"name\":\"getUserValueInTokenY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"deltaId\",\"type\":\"int256\"},{\"internalType\":\"uint64\",\"name\":\"distributionX\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"distributionY\",\"type\":\"uint64\"}],\"internalType\":\"struct ISPrimeTraderJoe.DepositForm[]\",\"name\":\"depositForm_\",\"type\":\"tuple[]\"},{\"internalType\":\"contract IPositionManager\",\"name\":\"positionManager_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"traderJoeV2Router_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lbPair\",\"outputs\":[{\"internalType\":\"contract ILBPair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"}],\"name\":\"lockBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"locks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"activeIdDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"swapSlippage\",\"type\":\"uint256\"}],\"name\":\"migrateLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"percentForLocks\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockPeriods\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"activeIdDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"idSlippage\",\"type\":\"uint256\"}],\"name\":\"mintForUserAndLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManager\",\"outputs\":[{\"internalType\":\"contract IPositionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ILBHooksBaseRewarder\",\"name\":\"_baseRewarder\",\"type\":\"address\"}],\"name\":\"setBaseRewarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IVPrimeController\",\"name\":\"_vPrimeController\",\"type\":\"address\"}],\"name\":\"setVPrimeControllerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenX\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenXDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenY\",\"outputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenYDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"traderJoeV2Router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vPrimeController\",\"outputs\":[{\"internalType\":\"contract IVPrimeController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"binInRange(address)\":{\"details\":\"Check if the active id is in the user position range\",\"params\":{\"user\":\"User Address.\"},\"returns\":{\"_0\":\"status bin status\"}},\"claim(address,uint256[])\":{\"details\":\"Claims the reward from TraderJoe v2.2 Base Reward Pool\",\"params\":{\"ids\":\"Bin Id list to claim.\",\"receiver\":\"User address that will receive the collected reward.\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256,uint256,uint256,uint256,bool,uint256)\":{\"details\":\"Users can use deposit function for depositing tokens to the specific bin.\",\"params\":{\"activeIdDesired\":\"The active id that user wants to add liquidity from\",\"amountX\":\"The amount of token X to deposit.\",\"amountY\":\"The amount of token Y to deposit.\",\"idSlippage\":\"The number of id that are allowed to slip\",\"isRebalance\":\"Rebalance the existing position with deposit.\",\"swapSlippage\":\"Slippage for the rebalance.\"}},\"getFullyVestedLockedBalance(address)\":{\"details\":\"Returns the fully vested locked balance for an account.Full business logic description can be found in Pool::getFullyVestedLockedBalance() docstring\",\"params\":{\"account\":\"The address of the account.\"},\"returns\":{\"fullyVestedBalance\":\"Fully vested locked balance\"}},\"getLockedBalance(address)\":{\"details\":\"Returns the total locked balance of an account.\",\"params\":{\"account\":\"The address of the account.\"},\"returns\":{\"_0\":\"The total locked balance of the account.\"}},\"getUserTokenId(address)\":{\"details\":\"Returns the token id for the user\",\"params\":{\"user\":\"The user address\"},\"returns\":{\"tokenId\":\"token id owned by the user\"}},\"getUserValueInTokenY(address)\":{\"details\":\"Returns the estimated USD value of the user position\",\"params\":{\"user\":\"User Address\"},\"returns\":{\"_0\":\"Total Value in tokenY amount for the user's position.\"}},\"getUserValueInTokenY(address,uint256)\":{\"details\":\"Returns the estimated USD value of the user position\",\"params\":{\"poolPrice\":\"Pool Price or oracle price for calculating proper token amount\",\"user\":\"User Address\"},\"returns\":{\"_0\":\"Total Value in tokenY amount for the user's position.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,string,(int256,uint64,uint64)[],address,address)\":{\"details\":\"initialize of the contract.\",\"params\":{\"depositForm_\":\"Pre-defined distributions and delta ids\",\"name_\":\"The name of the SPrime token. ex: PRIME-USDC LP\",\"positionManager_\":\"Position Manager contract for sPrime\",\"tokenX_\":\"The address of the token X.\",\"tokenY_\":\"The address of the token Y.\",\"traderJoeV2Router_\":\"Trader Joe V2 Router Address\"}},\"lockBalance(uint256,uint256)\":{\"details\":\"Locks a specified amount of balance for a specified lock period.\",\"params\":{\"amount\":\"The amount of balance to be locked.\",\"lockPeriod\":\"The duration for which the balance will be locked.\"}},\"migrateLiquidity(uint256[],uint256[],uint256,uint256,uint256)\":{\"details\":\"Users can use deposit function for depositing tokens to the specific bin.\",\"params\":{\"activeIdDesired\":\"The active id that user wants to add liquidity from\",\"amounts\":\"Minted LBT amount for each deposit id\",\"idSlippage\":\"The number of id that are allowed to slip\",\"ids\":\"Depoisit Ids from TraderJoe\",\"swapSlippage\":\"Slippage for the rebalance.\"}},\"mintForUserAndLock(address,uint256[],uint256[],uint256,uint256,uint256,uint256)\":{\"details\":\"Users can use deposit function for depositing tokens to the specific bin.\",\"params\":{\"activeIdDesired\":\"Desired bin id.\",\"amountX\":\"The amount of token X to deposit.\",\"amountY\":\"The amount of token Y to deposit.\",\"idSlippage\":\"Bin id slippage from the active id.\",\"lockPeriods\":\"Lock period to Lock for each amount\",\"percentForLocks\":\"sPrime amount % to lock\",\"user\":\"The active id that user wants to add liquidity from\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256)\":{\"details\":\"Users can use withdraw function for withdrawing their share.\",\"params\":{\"share\":\"Amount to withdraw\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getLBPair()\":{\"notice\":\"Public View Functions \"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/sPrime.sol\":\"SPrime\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\",\"keccak256\":\"0xd14a627157b9a411d2410713e5dd3a377e9064bd5c194a90748bbf27ea625784\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x605434219ebbe4653f703640f06969faa5a1d78f0bfef878e5ddbb1ca369ceeb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  error DataPackageTimestampMustNotBeZero();\\n  error DataPackageTimestampsMustBeEqual();\\n  error RedstonePayloadMustHaveAtLeastOneDataPackage();\\n\\n  function extractTimestampsAndAssertAllAreEqual() public pure returns (uint256 extractedTimestamp) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n\\n    if (dataPackagesCount == 0) {\\n      revert RedstonePayloadMustHaveAtLeastOneDataPackage();\\n    }\\n\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n\\n      // Extracting timestamp for the current data package\\n      uint48 dataPackageTimestamp; // uint48, because timestamp uses 6 bytes\\n      uint256 timestampNegativeOffset = (calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n      uint256 timestampOffset = msg.data.length - timestampNegativeOffset;\\n      assembly {\\n        dataPackageTimestamp := calldataload(timestampOffset)\\n      }\\n\\n      if (dataPackageTimestamp == 0) {\\n        revert DataPackageTimestampMustNotBeZero();\\n      }\\n\\n      if (extractedTimestamp == 0) {\\n        extractedTimestamp = dataPackageTimestamp;\\n      } else if (dataPackageTimestamp != extractedTimestamp) {\\n        revert DataPackageTimestampsMustBeEqual();\\n      }\\n\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) internal pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSIGNED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0x7a381362d355b7c2eff8cf9a2b0e0836d7b7c950b32f0fb65f1e4fc43c0c7379\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0xd4da1675371846ec37f8a37fbaff7f19a57bf1a8b0de392f66db36d13b1cf074\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSIGNED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receivedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0x82ab78ed59f4a811f5ab5c32064099235d753f98df42c087476ddabbf0348f21\",\"license\":\"BUSL-1.1\"},\"contracts/abstract/PendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"../interfaces/IPendingOwnableUpgradeable.sol\\\";\\n\\nabstract contract PendingOwnableUpgradeable is OwnableUpgradeable, IPendingOwnableUpgradeable {\\n    // keccak256(\\\"pending.owner.slot\\\") = 0x63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2\\n    bytes32 private constant _PENDING_OWNER_SLOT = 0x63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2;\\n\\n    event OwnershipTransferRequested(address indexed from, address indexed to);\\n\\n    function __PendingOwnable_init() internal onlyInitializing {\\n        __Ownable_init();\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual override(OwnableUpgradeable, IPendingOwnableUpgradeable) onlyOwner {\\n        require(newOwner != address(0), \\\"PendingOwnable: new owner is the zero address\\\");\\n        _setPendingOwner(newOwner);\\n        emit OwnershipTransferRequested(owner(), newOwner);\\n    }\\n\\n    function acceptOwnership() public virtual override {\\n        address pendingOwner = _getPendingOwner();\\n        require(msg.sender == pendingOwner, \\\"PendingOwnable: caller is not the pending owner\\\");\\n        _transferOwnership(pendingOwner);\\n        _setPendingOwner(address(0));\\n    }\\n\\n    function pendingOwner() public view virtual override returns (address) {\\n        return _getPendingOwner();\\n    }\\n\\n    function _getPendingOwner() internal view returns (address) {\\n        address pendingOwner;\\n        bytes32 slot = _PENDING_OWNER_SLOT;\\n        assembly {\\n            pendingOwner := sload(slot)\\n        }\\n        return pendingOwner;\\n    }\\n\\n    function _setPendingOwner(address newOwner) private {\\n        bytes32 slot = _PENDING_OWNER_SLOT;\\n        assembly {\\n            sstore(slot, newOwner)\\n        }\\n    }\\n}\",\"keccak256\":\"0xfde0a2746ea2b29b13049caf81c2cc11c27c316e48f3d2c4124c260a79b687de\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPendingOwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\ninterface IPendingOwnableUpgradeable {\\n    function transferOwnership(address newOwner) external;\\n    function acceptOwnership() external;\\n    function pendingOwner() external view returns (address);\\n}\",\"keccak256\":\"0xe22571fec2c0fe9c804d560317f59ffb7efbe1036d12a3fa1d67319450ba60df\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol';\\nimport \\\"./ISPrimeTraderJoe.sol\\\";\\n\\ninterface IPositionManager is IERC721Enumerable {\\n    // details about the position\\n    struct Position {\\n        // the liquidity of the position\\n        uint256 totalShare;\\n        uint256 centerId;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    struct DepositConfig {\\n        uint256[] depositIds;\\n        bytes32[] liquidityConfigs;\\n    }\\n\\n\\n    struct UpdateParams {\\n        uint256 tokenId;\\n        uint256 share;\\n        uint256[] liquidityAmounts;\\n        bool isAdd;\\n    }\\n\\n    struct MintParams {\\n        address recipient;\\n        uint256 totalShare;\\n        uint256 centerId;\\n        uint256[] liquidityMinted;\\n        bytes32[] liquidityConfigs;\\n        uint256[] depositIds;\\n    }\\n\\n    event SPrimeUpdated(ISPrimeTraderJoe prime);\\n\\n    // Mint new position NFT\\n    function mint(\\n        MintParams calldata params\\n    )\\n        external\\n        returns (\\n            uint256 tokenId\\n        );\\n\\n    // Burn position NFT\\n    function burn(\\n        uint256 tokenId\\n    )\\n        external;\\n\\n    function update(\\n        UpdateParams calldata params\\n    )\\n        external;\\n\\n    function forceTransfer(address from, address to, uint256 tokenId) external;\\n    function getDepositConfig(uint256 centerId) external view returns(DepositConfig memory);\\n    function getDepositConfigFromTokenId(uint256 tokenId) external view returns(DepositConfig memory);\\n    \\n    // Get position details\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            IERC20 token0,\\n            IERC20 token1,\\n            ILBPair pairAddr,\\n            uint256 totalShare,\\n            uint256 centerId,\\n            uint256[] memory liquidityMinted\\n        );\\n}\",\"keccak256\":\"0xeefc1bda708fe8363247eadbe3cf0fffdad193f69d5ffae4787c5e5dfc5f735c\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISPrime {\\n    /**\\n    * @dev Struct representing details of a locked amount.\\n    * @param lockPeriod The duration for which the amount is locked.\\n    * @param amount The amount that is locked.\\n    * @param unlockTime The timestamp when the locked amount will be able to released.\\n    */\\n    struct LockDetails {\\n        uint256 lockPeriod;\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    /**\\n    * @dev Users can use withdraw function for withdrawing their share.\\n    * @param shareWithdraw The amount of share to withdraw.\\n    */\\n    function withdraw(\\n        uint256 shareWithdraw\\n    ) external;\\n\\n    function getTokenX() external view returns(IERC20);\\n    function getTokenY() external view returns(IERC20);\\n    function getPoolPrice() external view returns(uint256);\\n    function getUserValueInTokenY(address user, uint256 poolPrice) external view returns (uint256);\\n    function getFullyVestedLockedBalance(address account) external view returns(uint256);\\n}\",\"keccak256\":\"0x44a6e69d8afec39db9947e2895d033ba82a1bd6ec1d6e3e48e31ff6326b26ad4\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ISPrimeTraderJoe.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ISPrime.sol\\\";\\nimport \\\"./joe-v2/ILBPair.sol\\\";\\n\\ninterface ISPrimeTraderJoe is ISPrime {\\n  struct DepositForm{\\n    int256 deltaId;\\n    uint64 distributionX;\\n    uint64 distributionY;\\n  }\\n\\n  /**\\n    * @dev Users can use deposit function for depositing tokens to the specific bin.\\n    * @param activeIdDesired The active id that user wants to add liquidity from\\n    * @param idSlippage The number of id that are allowed to slip\\n    * @param amountX The amount of token X to deposit.\\n    * @param amountY The amount of token Y to deposit.\\n    * @param isRebalance Rebalance the existing position with deposit.\\n    * @param swapSlippage Slippage for the rebalance.\\n    */\\n    function deposit(\\n        uint256 activeIdDesired,\\n        uint256 idSlippage,\\n        uint256 amountX,\\n        uint256 amountY,\\n        bool isRebalance,\\n        uint256 swapSlippage\\n    ) external;\\n    \\n  function getLBPair() external view returns(ILBPair);\\n}\\n\",\"keccak256\":\"0x3bb47d65d662c85334b8fa579c90847302a0821423e2b9ac5dfb39cd4ebc50e1\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IVPrimeController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface IVPrimeController {\\n    function updateVPrimeSnapshotsForAccounts(address[] memory accounts) external;\\n    function updateVPrimeSnapshot(address userAddress) external;\\n    function setUserNeedsUpdate(address userAddress) external;\\n}\",\"keccak256\":\"0x706f6a58b4041c0f7976cf08511e549ba179f243b09162acee29b46ec2baf657\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/joe-v2/IJoeFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.10;\\n\\n/// @title Joe V1 Factory Interface\\n/// @notice Interface to interact with Joe V1 Factory\\ninterface IJoeFactory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function migrator() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n\\n    function setMigrator(address) external;\\n}\\n\",\"keccak256\":\"0xd1f116ee8133101c2c07112dfe871fabdcb182f9b84468765b58a5136d661ba6\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/joe-v2/ILBFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/**\\n * @title Liquidity Book Factory Interface\\n * @author Trader Joe\\n * @notice Required interface of LBFactory contract\\n */\\ninterface ILBFactory is IPendingOwnable {\\n    error LBFactory__IdenticalAddresses(IERC20 token);\\n    error LBFactory__QuoteAssetNotWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__QuoteAssetAlreadyWhitelisted(IERC20 quoteAsset);\\n    error LBFactory__AddressZero();\\n    error LBFactory__LBPairAlreadyExists(IERC20 tokenX, IERC20 tokenY, uint256 _binStep);\\n    error LBFactory__LBPairDoesNotExist(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__LBPairNotCreated(IERC20 tokenX, IERC20 tokenY, uint256 binStep);\\n    error LBFactory__FlashLoanFeeAboveMax(uint256 fees, uint256 maxFees);\\n    error LBFactory__BinStepTooLow(uint256 binStep);\\n    error LBFactory__PresetIsLockedForUsers(address user, uint256 binStep);\\n    error LBFactory__LBPairIgnoredIsAlreadyInTheSameState();\\n    error LBFactory__BinStepHasNoPreset(uint256 binStep);\\n    error LBFactory__PresetOpenStateIsAlreadyInTheSameState();\\n    error LBFactory__SameFeeRecipient(address feeRecipient);\\n    error LBFactory__SameFlashLoanFee(uint256 flashLoanFee);\\n    error LBFactory__LBPairSafetyCheckFailed(address LBPairImplementation);\\n    error LBFactory__SameImplementation(address LBPairImplementation);\\n    error LBFactory__ImplementationNotSet();\\n\\n    /**\\n     * @dev Structure to store the LBPair information, such as:\\n     * binStep: The bin step of the LBPair\\n     * LBPair: The address of the LBPair\\n     * createdByOwner: Whether the pair was created by the owner of the factory\\n     * ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n     */\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event PresetOpenStateChanged(uint256 indexed binStep, bool indexed isOpen);\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function getMinBinStep() external pure returns (uint256);\\n\\n    function getFeeRecipient() external view returns (address);\\n\\n    function getMaxFlashLoanFee() external pure returns (uint256);\\n\\n    function getFlashLoanFee() external view returns (uint256);\\n\\n    function getLBPairImplementation() external view returns (address);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairAtIndex(uint256 id) external returns (ILBPair);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAssetAtIndex(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint256 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            bool isOpen\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getOpenBinSteps() external view returns (uint256[] memory openBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address lbPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint16 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        bool isOpen\\n    ) external;\\n\\n    function setPresetOpenState(uint16 binStep, bool isOpen) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBPair lbPair) external;\\n}\\n\",\"keccak256\":\"0x611e9da56c7f56456a2fae4aa4d4d74c266e1e9b4228509fe5eb0a2a1f1e349a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBFlashLoanCallback.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Liquidity Book Flashloan Callback Interface\\n/// @author Trader Joe\\n/// @notice Required interface to interact with LB flash loans\\ninterface ILBFlashLoanCallback {\\n    function LBFlashLoanCallback(\\n        address sender,\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0x0595b40912fd6ba4c3ea7d6739e467b4381c9d6cc85218c5bd3536c9fb4ecc2b\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBHooksBaseRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title LB Hooks Base Rewarder Interface\\n * @dev Interface for the LB Hooks Base Rewarder\\n */\\ninterface ILBHooksBaseRewarder {\\n    error LBHooksBaseRewarder__InvalidDeltaBins();\\n    error LBHooksBaseRewarder__Overflow();\\n    error LBHooksBaseRewarder__NativeTransferFailed();\\n    error LBHooksBaseRewarder__UnlinkedHooks();\\n    error LBHooksBaseRewarder__InvalidHooksParameters();\\n    error LBHooksBaseRewarder__ZeroBalance();\\n    error LBHooksBaseRewarder__LockedRewardToken();\\n    error LBHooksBaseRewarder__NotNativeRewarder();\\n    error LBHooksBaseRewarder__NotImplemented();\\n    error LBHooksBaseRewarder__UnauthorizedCaller();\\n    error LBHooksBaseRewarder__ExceedsMaxNumberOfBins();\\n\\n    event DeltaBinsSet(int24 deltaBinA, int24 deltaBinB);\\n    event Claim(address indexed user, uint256 amount);\\n\\n    struct Bin {\\n        uint256 accRewardsPerShareX64;\\n        mapping(address => uint256) userAccRewardsPerShareX64;\\n    }\\n\\n    function getRewardToken() external view returns (IERC20);\\n\\n    function getLBHooksManager() external view returns (address);\\n\\n    function isStopped() external view returns (bool);\\n\\n    function getRewardedRange() external view returns (uint256 binStart, uint256 binEnd);\\n\\n    function getPendingRewards(address user, uint256[] calldata ids) external view returns (uint256 pendingRewards);\\n\\n    function claim(address user, uint256[] calldata ids) external;\\n\\n    function setDeltaBins(int24 deltaBinA, int24 deltaBinB) external;\\n\\n    function sweep(IERC20 token, address to) external;\\n}\",\"keccak256\":\"0x8c09e3c311d939b891443524fc5ba7cb2b927dc35a5cb48fcc3606a1672346d8\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {IPendingOwnable} from \\\"./IPendingOwnable.sol\\\";\\n\\n/// @title Liquidity Book Factory Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBFactory contract\\ninterface ILBLegacyFactory is IPendingOwnable {\\n    /// @dev Structure to store the LBPair information, such as:\\n    /// - binStep: The bin step of the LBPair\\n    /// - LBPair: The address of the LBPair\\n    /// - createdByOwner: Whether the pair was created by the owner of the factory\\n    /// - ignoredForRouting: Whether the pair is ignored for routing or not. An ignored pair will not be explored during routes finding\\n    struct LBPairInformation {\\n        uint16 binStep;\\n        ILBLegacyPair LBPair;\\n        bool createdByOwner;\\n        bool ignoredForRouting;\\n    }\\n\\n    event LBPairCreated(\\n        IERC20 indexed tokenX, IERC20 indexed tokenY, uint256 indexed binStep, ILBLegacyPair LBPair, uint256 pid\\n    );\\n\\n    event FeeRecipientSet(address oldRecipient, address newRecipient);\\n\\n    event FlashLoanFeeSet(uint256 oldFlashLoanFee, uint256 newFlashLoanFee);\\n\\n    event FeeParametersSet(\\n        address indexed sender,\\n        ILBLegacyPair indexed LBPair,\\n        uint256 binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator\\n    );\\n\\n    event FactoryLockedStatusUpdated(bool unlocked);\\n\\n    event LBPairImplementationSet(address oldLBPairImplementation, address LBPairImplementation);\\n\\n    event LBPairIgnoredStateChanged(ILBLegacyPair indexed LBPair, bool ignored);\\n\\n    event PresetSet(\\n        uint256 indexed binStep,\\n        uint256 baseFactor,\\n        uint256 filterPeriod,\\n        uint256 decayPeriod,\\n        uint256 reductionFactor,\\n        uint256 variableFeeControl,\\n        uint256 protocolShare,\\n        uint256 maxVolatilityAccumulator,\\n        uint256 sampleLifetime\\n    );\\n\\n    event PresetRemoved(uint256 indexed binStep);\\n\\n    event QuoteAssetAdded(IERC20 indexed quoteAsset);\\n\\n    event QuoteAssetRemoved(IERC20 indexed quoteAsset);\\n\\n    function MAX_FEE() external pure returns (uint256);\\n\\n    function MIN_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_BIN_STEP() external pure returns (uint256);\\n\\n    function MAX_PROTOCOL_SHARE() external pure returns (uint256);\\n\\n    function LBPairImplementation() external view returns (address);\\n\\n    function getNumberOfQuoteAssets() external view returns (uint256);\\n\\n    function getQuoteAsset(uint256 index) external view returns (IERC20);\\n\\n    function isQuoteAsset(IERC20 token) external view returns (bool);\\n\\n    function feeRecipient() external view returns (address);\\n\\n    function flashLoanFee() external view returns (uint256);\\n\\n    function creationUnlocked() external view returns (bool);\\n\\n    function allLBPairs(uint256 id) external returns (ILBLegacyPair);\\n\\n    function getNumberOfLBPairs() external view returns (uint256);\\n\\n    function getLBPairInformation(IERC20 tokenX, IERC20 tokenY, uint256 binStep)\\n        external\\n        view\\n        returns (LBPairInformation memory);\\n\\n    function getPreset(uint16 binStep)\\n        external\\n        view\\n        returns (\\n            uint256 baseFactor,\\n            uint256 filterPeriod,\\n            uint256 decayPeriod,\\n            uint256 reductionFactor,\\n            uint256 variableFeeControl,\\n            uint256 protocolShare,\\n            uint256 maxAccumulator,\\n            uint256 sampleLifetime\\n        );\\n\\n    function getAllBinSteps() external view returns (uint256[] memory presetsBinStep);\\n\\n    function getAllLBPairs(IERC20 tokenX, IERC20 tokenY)\\n        external\\n        view\\n        returns (LBPairInformation[] memory LBPairsBinStep);\\n\\n    function setLBPairImplementation(address LBPairImplementation) external;\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function setLBPairIgnored(IERC20 tokenX, IERC20 tokenY, uint256 binStep, bool ignored) external;\\n\\n    function setPreset(\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint16 sampleLifetime\\n    ) external;\\n\\n    function removePreset(uint16 binStep) external;\\n\\n    function setFeesParametersOnPair(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function setFeeRecipient(address feeRecipient) external;\\n\\n    function setFlashLoanFee(uint256 flashLoanFee) external;\\n\\n    function setFactoryLockedState(bool locked) external;\\n\\n    function addQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function removeQuoteAsset(IERC20 quoteAsset) external;\\n\\n    function forceDecay(ILBLegacyPair LBPair) external;\\n}\\n\",\"keccak256\":\"0xa8b0bc670a63176a8573d2afbc365955c3b212f2bed0d4b28021fe6cb3131915\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBLegacyToken} from \\\"./ILBLegacyToken.sol\\\";\\n\\n/// @title Liquidity Book Pair V2 Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBPair contract\\ninterface ILBLegacyPair is ILBLegacyToken {\\n    /// @dev Structure to store the protocol fees:\\n    /// - binStep: The bin step\\n    /// - baseFactor: The base factor\\n    /// - filterPeriod: The filter period, where the fees stays constant\\n    /// - decayPeriod: The decay period, where the fees are halved\\n    /// - reductionFactor: The reduction factor, used to calculate the reduction of the accumulator\\n    /// - variableFeeControl: The variable fee control, used to control the variable fee, can be 0 to disable them\\n    /// - protocolShare: The share of fees sent to protocol\\n    /// - maxVolatilityAccumulated: The max value of volatility accumulated\\n    /// - volatilityAccumulated: The value of volatility accumulated\\n    /// - volatilityReference: The value of volatility reference\\n    /// - indexRef: The index reference\\n    /// - time: The last time the accumulator was called\\n    struct FeeParameters {\\n        // 144 lowest bits in slot\\n        uint16 binStep;\\n        uint16 baseFactor;\\n        uint16 filterPeriod;\\n        uint16 decayPeriod;\\n        uint16 reductionFactor;\\n        uint24 variableFeeControl;\\n        uint16 protocolShare;\\n        uint24 maxVolatilityAccumulated;\\n        // 112 highest bits in slot\\n        uint24 volatilityAccumulated;\\n        uint24 volatilityReference;\\n        uint24 indexRef;\\n        uint40 time;\\n    }\\n\\n    /// @dev Structure used during swaps to distributes the fees:\\n    /// - total: The total amount of fees\\n    /// - protocol: The amount of fees reserved for protocol\\n    struct FeesDistribution {\\n        uint128 total;\\n        uint128 protocol;\\n    }\\n\\n    /// @dev Structure to store the reserves of bins:\\n    /// - reserveX: The current reserve of tokenX of the bin\\n    /// - reserveY: The current reserve of tokenY of the bin\\n    struct Bin {\\n        uint112 reserveX;\\n        uint112 reserveY;\\n        uint256 accTokenXPerShare;\\n        uint256 accTokenYPerShare;\\n    }\\n\\n    /// @dev Structure to store the information of the pair such as:\\n    /// slot0:\\n    /// - activeId: The current id used for swaps, this is also linked with the price\\n    /// - reserveX: The sum of amounts of tokenX across all bins\\n    /// slot1:\\n    /// - reserveY: The sum of amounts of tokenY across all bins\\n    /// - oracleSampleLifetime: The lifetime of an oracle sample\\n    /// - oracleSize: The current size of the oracle, can be increase by users\\n    /// - oracleActiveSize: The current active size of the oracle, composed only from non empty data sample\\n    /// - oracleLastTimestamp: The current last timestamp at which a sample was added to the circular buffer\\n    /// - oracleId: The current id of the oracle\\n    /// slot2:\\n    /// - feesX: The current amount of fees to distribute in tokenX (total, protocol)\\n    /// slot3:\\n    /// - feesY: The current amount of fees to distribute in tokenY (total, protocol)\\n    struct PairInformation {\\n        uint24 activeId;\\n        uint136 reserveX;\\n        uint136 reserveY;\\n        uint16 oracleSampleLifetime;\\n        uint16 oracleSize;\\n        uint16 oracleActiveSize;\\n        uint40 oracleLastTimestamp;\\n        uint16 oracleId;\\n        FeesDistribution feesX;\\n        FeesDistribution feesY;\\n    }\\n\\n    /// @dev Structure to store the debts of users\\n    /// - debtX: The tokenX's debt\\n    /// - debtY: The tokenY's debt\\n    struct Debts {\\n        uint256 debtX;\\n        uint256 debtY;\\n    }\\n\\n    /// @dev Structure to store fees:\\n    /// - tokenX: The amount of fees of token X\\n    /// - tokenY: The amount of fees of token Y\\n    struct Fees {\\n        uint128 tokenX;\\n        uint128 tokenY;\\n    }\\n\\n    /// @dev Structure to minting informations:\\n    /// - amountXIn: The amount of token X sent\\n    /// - amountYIn: The amount of token Y sent\\n    /// - amountXAddedToPair: The amount of token X that have been actually added to the pair\\n    /// - amountYAddedToPair: The amount of token Y that have been actually added to the pair\\n    /// - activeFeeX: Fees X currently generated\\n    /// - activeFeeY: Fees Y currently generated\\n    /// - totalDistributionX: Total distribution of token X. Should be 1e18 (100%) or 0 (0%)\\n    /// - totalDistributionY: Total distribution of token Y. Should be 1e18 (100%) or 0 (0%)\\n    /// - id: Id of the current working bin when looping on the distribution array\\n    /// - amountX: The amount of token X deposited in the current bin\\n    /// - amountY: The amount of token Y deposited in the current bin\\n    /// - distributionX: Distribution of token X for the current working bin\\n    /// - distributionY: Distribution of token Y for the current working bin\\n    struct MintInfo {\\n        uint256 amountXIn;\\n        uint256 amountYIn;\\n        uint256 amountXAddedToPair;\\n        uint256 amountYAddedToPair;\\n        uint256 activeFeeX;\\n        uint256 activeFeeY;\\n        uint256 totalDistributionX;\\n        uint256 totalDistributionY;\\n        uint256 id;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 distributionX;\\n        uint256 distributionY;\\n    }\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 indexed id,\\n        bool swapForY,\\n        uint256 amountIn,\\n        uint256 amountOut,\\n        uint256 volatilityAccumulated,\\n        uint256 fees\\n    );\\n\\n    event FlashLoan(address indexed sender, address indexed receiver, IERC20 token, uint256 amount, uint256 fee);\\n\\n    event CompositionFee(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 feesX, uint256 feesY\\n    );\\n\\n    event DepositedToBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event WithdrawnFromBin(\\n        address indexed sender, address indexed recipient, uint256 indexed id, uint256 amountX, uint256 amountY\\n    );\\n\\n    event FeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event ProtocolFeesCollected(address indexed sender, address indexed recipient, uint256 amountX, uint256 amountY);\\n\\n    event OracleSizeIncreased(uint256 previousSize, uint256 newSize);\\n\\n    function tokenX() external view returns (IERC20);\\n\\n    function tokenY() external view returns (IERC20);\\n\\n    function factory() external view returns (address);\\n\\n    function getReservesAndId() external view returns (uint256 reserveX, uint256 reserveY, uint256 activeId);\\n\\n    function getGlobalFees()\\n        external\\n        view\\n        returns (uint128 feesXTotal, uint128 feesYTotal, uint128 feesXProtocol, uint128 feesYProtocol);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (\\n            uint256 oracleSampleLifetime,\\n            uint256 oracleSize,\\n            uint256 oracleActiveSize,\\n            uint256 oracleLastTimestamp,\\n            uint256 oracleId,\\n            uint256 min,\\n            uint256 max\\n        );\\n\\n    function getOracleSampleFrom(uint256 timeDelta)\\n        external\\n        view\\n        returns (uint256 cumulativeId, uint256 cumulativeAccumulator, uint256 cumulativeBinCrossed);\\n\\n    function feeParameters() external view returns (FeeParameters memory);\\n\\n    function findFirstNonEmptyBinId(uint24 id_, bool sentTokenY) external view returns (uint24 id);\\n\\n    function getBin(uint24 id) external view returns (uint256 reserveX, uint256 reserveY);\\n\\n    function pendingFees(address account, uint256[] memory ids)\\n        external\\n        view\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function swap(bool sentTokenY, address to) external returns (uint256 amountXOut, uint256 amountYOut);\\n\\n    function flashLoan(address receiver, IERC20 token, uint256 amount, bytes calldata data) external;\\n\\n    function mint(\\n        uint256[] calldata ids,\\n        uint256[] calldata distributionX,\\n        uint256[] calldata distributionY,\\n        address to\\n    ) external returns (uint256 amountXAddedToPair, uint256 amountYAddedToPair, uint256[] memory liquidityMinted);\\n\\n    function burn(uint256[] calldata ids, uint256[] calldata amounts, address to)\\n        external\\n        returns (uint256 amountX, uint256 amountY);\\n\\n    function increaseOracleLength(uint16 newSize) external;\\n\\n    function collectFees(address account, uint256[] calldata ids) external returns (uint256 amountX, uint256 amountY);\\n\\n    function collectProtocolFees() external returns (uint128 amountX, uint128 amountY);\\n\\n    function setFeesParameters(bytes32 packedFeeParameters) external;\\n\\n    function forceDecay() external;\\n\\n    function initialize(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint24 activeId,\\n        uint16 sampleLifetime,\\n        bytes32 packedFeeParameters\\n    ) external;\\n}\\n\",\"keccak256\":\"0x50691b25afe50c5f24b7dc4d89e15872c1ff833962503ee3985616025d715f25\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBLegacyPair} from \\\"./ILBLegacyPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/// @title Liquidity Book Router Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBRouter contract\\ninterface ILBLegacyRouter {\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        uint256 deadline;\\n    }\\n\\n    function factory() external view returns (address);\\n\\n    function wavax() external view returns (address);\\n\\n    function oldFactory() external view returns (address);\\n\\n    function getIdFromPrice(ILBLegacyPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBLegacyPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBLegacyPair lbPair, uint256 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountIn, uint256 feesIn);\\n\\n    function getSwapOut(ILBLegacyPair lbPair, uint256 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint256 amountOut, uint256 feesIn);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBLegacyPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function addLiquidityAVAX(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (uint256[] memory depositIds, uint256[] memory liquidityMinted);\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityAVAX(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountAVAXMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountAVAX);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAX(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactAVAX(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapAVAXForExactTokens(\\n        uint256 amountOut,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinAVAX,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        uint256[] memory pairBinSteps,\\n        IERC20[] memory tokenPath,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x6dd45a103c84d545155f1d1010c0b0cfe4e9e4097ab7c50a8498756e46f2c80a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBLegacyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title Liquidity Book V2 Token Interface\\n/// @author Trader Joe\\n/// @notice Required interface of LBToken contract\\ninterface ILBLegacyToken is IERC165 {\\n    event TransferSingle(address indexed sender, address indexed from, address indexed to, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory batchBalances);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function setApprovalForAll(address sender, bool approved) external;\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount) external;\\n\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata id, uint256[] calldata amount)\\n        external;\\n}\\n\",\"keccak256\":\"0x7910e19e35a01a163a9f8c4040dc19e1663c4d562a22a1181d25610ebc5295a1\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBFlashLoanCallback} from \\\"./ILBFlashLoanCallback.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\n\\ninterface ILBPair is ILBToken {\\n    error LBPair__ZeroBorrowAmount();\\n    error LBPair__AddressZero();\\n    error LBPair__AlreadyInitialized();\\n    error LBPair__EmptyMarketConfigs();\\n    error LBPair__FlashLoanCallbackFailed();\\n    error LBPair__FlashLoanInsufficientAmount();\\n    error LBPair__InsufficientAmountIn();\\n    error LBPair__InsufficientAmountOut();\\n    error LBPair__InvalidInput();\\n    error LBPair__InvalidStaticFeeParameters();\\n    error LBPair__OnlyFactory();\\n    error LBPair__OnlyProtocolFeeRecipient();\\n    error LBPair__OutOfLiquidity();\\n    error LBPair__TokenNotSupported();\\n    error LBPair__ZeroAmount(uint24 id);\\n    error LBPair__ZeroAmountsOut(uint24 id);\\n    error LBPair__ZeroShares(uint24 id);\\n    error LBPair__MaxTotalFeeExceeded();\\n\\n    struct MintArrays {\\n        uint256[] ids;\\n        bytes32[] amounts;\\n        uint256[] liquidityMinted;\\n    }\\n\\n    event DepositedToBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event WithdrawnFromBins(address indexed sender, address indexed to, uint256[] ids, bytes32[] amounts);\\n\\n    event CompositionFees(address indexed sender, uint24 id, bytes32 totalFees, bytes32 protocolFees);\\n\\n    event CollectedProtocolFees(address indexed feeRecipient, bytes32 protocolFees);\\n\\n    event Swap(\\n        address indexed sender,\\n        address indexed to,\\n        uint24 id,\\n        bytes32 amountsIn,\\n        bytes32 amountsOut,\\n        uint24 volatilityAccumulator,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event StaticFeeParametersSet(\\n        address indexed sender,\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    );\\n\\n    event FlashLoan(\\n        address indexed sender,\\n        ILBFlashLoanCallback indexed receiver,\\n        uint24 activeId,\\n        bytes32 amounts,\\n        bytes32 totalFees,\\n        bytes32 protocolFees\\n    );\\n\\n    event OracleLengthIncreased(address indexed sender, uint16 oracleLength);\\n\\n    event ForcedDecay(address indexed sender, uint24 idReference, uint24 volatilityReference);\\n\\n    function initialize(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator,\\n        uint24 activeId\\n    ) external;\\n\\n    function getFactory() external view returns (ILBFactory factory);\\n\\n    function getTokenX() external view returns (IERC20 tokenX);\\n\\n    function getTokenY() external view returns (IERC20 tokenY);\\n\\n    function getBinStep() external view returns (uint16 binStep);\\n\\n    function getReserves() external view returns (uint128 reserveX, uint128 reserveY);\\n\\n    function getActiveId() external view returns (uint24 activeId);\\n\\n    function getBin(uint24 id) external view returns (uint128 binReserveX, uint128 binReserveY);\\n\\n    function getNextNonEmptyBin(bool swapForY, uint24 id) external view returns (uint24 nextId);\\n\\n    function getProtocolFees() external view returns (uint128 protocolFeeX, uint128 protocolFeeY);\\n\\n    function getStaticFeeParameters()\\n        external\\n        view\\n        returns (\\n            uint16 baseFactor,\\n            uint16 filterPeriod,\\n            uint16 decayPeriod,\\n            uint16 reductionFactor,\\n            uint24 variableFeeControl,\\n            uint16 protocolShare,\\n            uint24 maxVolatilityAccumulator\\n        );\\n\\n    function getLBHooksParameters() external view returns (bytes32 hooksParameters);\\n\\n    function getVariableFeeParameters()\\n        external\\n        view\\n        returns (uint24 volatilityAccumulator, uint24 volatilityReference, uint24 idReference, uint40 timeOfLastUpdate);\\n\\n    function getOracleParameters()\\n        external\\n        view\\n        returns (uint8 sampleLifetime, uint16 size, uint16 activeSize, uint40 lastUpdated, uint40 firstTimestamp);\\n\\n    function getOracleSampleAt(uint40 lookupTimestamp)\\n        external\\n        view\\n        returns (uint64 cumulativeId, uint64 cumulativeVolatility, uint64 cumulativeBinCrossed);\\n\\n    function getPriceFromId(uint24 id) external view returns (uint256 price);\\n\\n    function getIdFromPrice(uint256 price) external view returns (uint24 id);\\n\\n    function getSwapIn(uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function swap(bool swapForY, address to) external returns (bytes32 amountsOut);\\n\\n    function flashLoan(ILBFlashLoanCallback receiver, bytes32 amounts, bytes calldata data) external;\\n\\n    function mint(address to, bytes32[] calldata liquidityConfigs, address refundTo)\\n        external\\n        returns (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted);\\n\\n    function burn(address from, address to, uint256[] calldata ids, uint256[] calldata amountsToBurn)\\n        external\\n        returns (bytes32[] memory amounts);\\n\\n    function collectProtocolFees() external returns (bytes32 collectedProtocolFees);\\n\\n    function increaseOracleLength(uint16 newLength) external;\\n\\n    function setStaticFeeParameters(\\n        uint16 baseFactor,\\n        uint16 filterPeriod,\\n        uint16 decayPeriod,\\n        uint16 reductionFactor,\\n        uint24 variableFeeControl,\\n        uint16 protocolShare,\\n        uint24 maxVolatilityAccumulator\\n    ) external;\\n\\n    function forceDecay() external;\\n}\\n\",\"keccak256\":\"0x7c3fadc233d8c0b7a26499d68ecc6fe09c30c29ae02ef9cb98b208f3be0afbb1\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport {IJoeFactory} from \\\"./IJoeFactory.sol\\\";\\nimport {ILBFactory} from \\\"./ILBFactory.sol\\\";\\nimport {ILBLegacyFactory} from \\\"./ILBLegacyFactory.sol\\\";\\nimport {ILBLegacyRouter} from \\\"./ILBLegacyRouter.sol\\\";\\nimport {ILBPair} from \\\"./ILBPair.sol\\\";\\nimport {ILBToken} from \\\"./ILBToken.sol\\\";\\nimport {IWNATIVE} from \\\"./IWNATIVE.sol\\\";\\n\\n/**\\n * @title Liquidity Book Router Interface\\n * @author Trader Joe\\n * @notice Required interface of LBRouter contract\\n */\\ninterface ILBRouter {\\n    error LBRouter__SenderIsNotWNATIVE();\\n    error LBRouter__PairNotCreated(address tokenX, address tokenY, uint256 binStep);\\n    error LBRouter__WrongAmounts(uint256 amount, uint256 reserve);\\n    error LBRouter__SwapOverflows(uint256 id);\\n    error LBRouter__BrokenSwapSafetyCheck();\\n    error LBRouter__NotFactoryOwner();\\n    error LBRouter__TooMuchTokensIn(uint256 excess);\\n    error LBRouter__BinReserveOverflows(uint256 id);\\n    error LBRouter__IdOverflows(int256 id);\\n    error LBRouter__LengthsMismatch();\\n    error LBRouter__WrongTokenOrder();\\n    error LBRouter__IdSlippageCaught(uint256 activeIdDesired, uint256 idSlippage, uint256 activeId);\\n    error LBRouter__AmountSlippageCaught(uint256 amountXMin, uint256 amountX, uint256 amountYMin, uint256 amountY);\\n    error LBRouter__IdDesiredOverflows(uint256 idDesired, uint256 idSlippage);\\n    error LBRouter__FailedToSendNATIVE(address recipient, uint256 amount);\\n    error LBRouter__DeadlineExceeded(uint256 deadline, uint256 currentTimestamp);\\n    error LBRouter__AmountSlippageBPTooBig(uint256 amountSlippage);\\n    error LBRouter__InsufficientAmountOut(uint256 amountOutMin, uint256 amountOut);\\n    error LBRouter__MaxAmountInExceeded(uint256 amountInMax, uint256 amountIn);\\n    error LBRouter__InvalidTokenPath(address wrongToken);\\n    error LBRouter__InvalidVersion(uint256 version);\\n    error LBRouter__WrongNativeLiquidityParameters(\\n        address tokenX, address tokenY, uint256 amountX, uint256 amountY, uint256 msgValue\\n    );\\n\\n    /**\\n     * @dev This enum represents the version of the pair requested\\n     * - V1: Joe V1 pair\\n     * - V2: LB pair V2. Also called legacyPair\\n     * - V2_1: LB pair V2.1\\n     * - V2_2: LB pair V2.2 (current version)\\n     */\\n    enum Version {\\n        V1,\\n        V2,\\n        V2_1,\\n        V2_2\\n    }\\n\\n    /**\\n     * @dev The liquidity parameters, such as:\\n     * - tokenX: The address of token X\\n     * - tokenY: The address of token Y\\n     * - binStep: The bin step of the pair\\n     * - amountX: The amount to send of token X\\n     * - amountY: The amount to send of token Y\\n     * - amountXMin: The min amount of token X added to liquidity\\n     * - amountYMin: The min amount of token Y added to liquidity\\n     * - activeIdDesired: The active id that user wants to add liquidity from\\n     * - idSlippage: The number of id that are allowed to slip\\n     * - deltaIds: The list of delta ids to add liquidity (`deltaId = activeId - desiredId`)\\n     * - distributionX: The distribution of tokenX with sum(distributionX) = 1e18 (100%) or 0 (0%)\\n     * - distributionY: The distribution of tokenY with sum(distributionY) = 1e18 (100%) or 0 (0%)\\n     * - to: The address of the recipient\\n     * - refundTo: The address of the recipient of the refunded tokens if too much tokens are sent\\n     * - deadline: The deadline of the transaction\\n     */\\n    struct LiquidityParameters {\\n        IERC20 tokenX;\\n        IERC20 tokenY;\\n        uint256 binStep;\\n        uint256 amountX;\\n        uint256 amountY;\\n        uint256 amountXMin;\\n        uint256 amountYMin;\\n        uint256 activeIdDesired;\\n        uint256 idSlippage;\\n        int256[] deltaIds;\\n        uint256[] distributionX;\\n        uint256[] distributionY;\\n        address to;\\n        address refundTo;\\n        uint256 deadline;\\n    }\\n\\n    /**\\n     * @dev The path parameters, such as:\\n     * - pairBinSteps: The list of bin steps of the pairs to go through\\n     * - versions: The list of versions of the pairs to go through\\n     * - tokenPath: The list of tokens in the path to go through\\n     */\\n    struct Path {\\n        uint256[] pairBinSteps;\\n        Version[] versions;\\n        IERC20[] tokenPath;\\n    }\\n\\n    function getFactory() external view returns (ILBFactory);\\n\\n    function getFactoryV2_1() external view returns (ILBFactory);\\n\\n    function getLegacyFactory() external view returns (ILBLegacyFactory);\\n\\n    function getV1Factory() external view returns (IJoeFactory);\\n\\n    function getLegacyRouter() external view returns (ILBLegacyRouter);\\n\\n    function getWNATIVE() external view returns (IWNATIVE);\\n\\n    function getIdFromPrice(ILBPair LBPair, uint256 price) external view returns (uint24);\\n\\n    function getPriceFromId(ILBPair LBPair, uint24 id) external view returns (uint256);\\n\\n    function getSwapIn(ILBPair LBPair, uint128 amountOut, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountIn, uint128 amountOutLeft, uint128 fee);\\n\\n    function getSwapOut(ILBPair LBPair, uint128 amountIn, bool swapForY)\\n        external\\n        view\\n        returns (uint128 amountInLeft, uint128 amountOut, uint128 fee);\\n\\n    function createLBPair(IERC20 tokenX, IERC20 tokenY, uint24 activeId, uint16 binStep)\\n        external\\n        returns (ILBPair pair);\\n\\n    function addLiquidity(LiquidityParameters calldata liquidityParameters)\\n        external\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function addLiquidityNATIVE(LiquidityParameters calldata liquidityParameters)\\n        external\\n        payable\\n        returns (\\n            uint256 amountXAdded,\\n            uint256 amountYAdded,\\n            uint256 amountXLeft,\\n            uint256 amountYLeft,\\n            uint256[] memory depositIds,\\n            uint256[] memory liquidityMinted\\n        );\\n\\n    function removeLiquidity(\\n        IERC20 tokenX,\\n        IERC20 tokenY,\\n        uint16 binStep,\\n        uint256 amountXMin,\\n        uint256 amountYMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountX, uint256 amountY);\\n\\n    function removeLiquidityNATIVE(\\n        IERC20 token,\\n        uint16 binStep,\\n        uint256 amountTokenMin,\\n        uint256 amountNATIVEMin,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountNATIVE);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVE(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokens(uint256 amountOutMin, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256 amountOut);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapTokensForExactNATIVE(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amountsIn);\\n\\n    function swapNATIVEForExactTokens(uint256 amountOut, Path memory path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amountsIn);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactTokensForNATIVESupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMinNATIVE,\\n        Path memory path,\\n        address payable to,\\n        uint256 deadline\\n    ) external returns (uint256 amountOut);\\n\\n    function swapExactNATIVEForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        Path memory path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountOut);\\n\\n    function sweep(IERC20 token, address to, uint256 amount) external;\\n\\n    function sweepLBToken(ILBToken _lbToken, address _to, uint256[] calldata _ids, uint256[] calldata _amounts)\\n        external;\\n}\\n\",\"keccak256\":\"0x23b050eceaf13b7ec158c01992f125fd8f30b3c1956d32bbc1107394a9699f3a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/ILBToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Token Interface\\n * @author Trader Joe\\n * @notice Interface to interact with the LBToken.\\n */\\ninterface ILBToken {\\n    error LBToken__AddressThisOrZero();\\n    error LBToken__InvalidLength();\\n    error LBToken__SelfApproval(address owner);\\n    error LBToken__SpenderNotApproved(address from, address spender);\\n    error LBToken__TransferExceedsBalance(address from, uint256 id, uint256 amount);\\n    error LBToken__BurnExceedsBalance(address from, uint256 id, uint256 amount);\\n\\n    event TransferBatch(\\n        address indexed sender, address indexed from, address indexed to, uint256[] ids, uint256[] amounts\\n    );\\n\\n    event ApprovalForAll(address indexed account, address indexed sender, bool approved);\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function totalSupply(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function isApprovedForAll(address owner, address spender) external view returns (bool);\\n\\n    function approveForAll(address spender, bool approved) external;\\n\\n    function batchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts) external;\\n}\\n\",\"keccak256\":\"0x6ec82e130bfcee455420f5b6025dd9f6237654c5d081b1a929de1c4ac942387a\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IPendingOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Pending Ownable Interface\\n * @author Trader Joe\\n * @notice Required interface of Pending Ownable contract used for LBFactory\\n */\\ninterface IPendingOwnable {\\n    error PendingOwnable__AddressZero();\\n    error PendingOwnable__NoPendingOwner();\\n    error PendingOwnable__NotOwner();\\n    error PendingOwnable__NotPendingOwner();\\n    error PendingOwnable__PendingOwnerAlreadySet();\\n\\n    event PendingOwnerSet(address indexed pendingOwner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function owner() external view returns (address);\\n\\n    function pendingOwner() external view returns (address);\\n\\n    function setPendingOwner(address pendingOwner) external;\\n\\n    function revokePendingOwner() external;\\n\\n    function becomeOwner() external;\\n\\n    function renounceOwnership() external;\\n}\\n\",\"keccak256\":\"0xecbc396e150ad6643d5749ed99402dfeb19fc3a5cd0536467755b49dcf795e3f\",\"license\":\"MIT\"},\"contracts/interfaces/joe-v2/IWNATIVE.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title WNATIVE Interface\\n * @notice Required interface of Wrapped NATIVE contract\\n */\\ninterface IWNATIVE is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x60ffbeb68bc35b80c5a8046854ac095c73cdffbe0f293091f69f0adaf31543e3\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Constants Library\\n * @author Trader Joe\\n * @notice Set of constants for Liquidity Book contracts\\n */\\nlibrary Constants {\\n    uint8 internal constant SCALE_OFFSET = 128;\\n    uint256 internal constant SCALE = 1 << SCALE_OFFSET;\\n\\n    uint256 internal constant PRECISION = 1e18;\\n    uint256 internal constant SQUARED_PRECISION = PRECISION * PRECISION;\\n\\n    uint256 internal constant MAX_FEE = 0.1e18; // 10%\\n    uint256 internal constant MAX_PROTOCOL_SHARE = 2_500; // 25% of the fee\\n\\n    uint256 internal constant BASIS_POINT_MAX = 10_000;\\n\\n    /// @dev The expected return after a successful flash loan\\n    bytes32 internal constant CALLBACK_SUCCESS = keccak256(\\\"LBPair.onFlashLoan\\\");\\n}\\n\",\"keccak256\":\"0xa972f7798c31cc2dc4eb2c0749ea3f7972574c2bcea85fbe41dae40f99ff266d\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/PriceHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Uint128x128Math} from \\\"./math/Uint128x128Math.sol\\\";\\nimport {Uint256x256Math} from \\\"./math/Uint256x256Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {Constants} from \\\"./Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Price Helper Library\\n * @author Trader Joe\\n * @notice This library contains functions to calculate prices\\n */\\nlibrary PriceHelper {\\n    using Uint128x128Math for uint256;\\n    using Uint256x256Math for uint256;\\n    using SafeCast for uint256;\\n\\n    int256 private constant REAL_ID_SHIFT = 1 << 23;\\n\\n    /**\\n     * @dev Calculates the price from the id and the bin step\\n     * @param id The id\\n     * @param binStep The bin step\\n     * @return price The price as a 128.128-binary fixed-point number\\n     */\\n    function getPriceFromId(uint24 id, uint16 binStep) internal pure returns (uint256 price) {\\n        uint256 base = getBase(binStep);\\n        int256 exponent = getExponent(id);\\n\\n        price = base.pow(exponent);\\n    }\\n\\n    /**\\n     * @dev Calculates the id from the price and the bin step\\n     * @param price The price as a 128.128-binary fixed-point number\\n     * @param binStep The bin step\\n     * @return id The id\\n     */\\n    function getIdFromPrice(uint256 price, uint16 binStep) internal pure returns (uint24 id) {\\n        uint256 base = getBase(binStep);\\n        int256 realId = price.log2() / base.log2();\\n\\n        unchecked {\\n            id = uint256(REAL_ID_SHIFT + realId).safe24();\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the base from the bin step, which is `1 + binStep / BASIS_POINT_MAX`\\n     * @param binStep The bin step\\n     * @return base The base\\n     */\\n    function getBase(uint16 binStep) internal pure returns (uint256) {\\n        unchecked {\\n            return Constants.SCALE + (uint256(binStep) << Constants.SCALE_OFFSET) / Constants.BASIS_POINT_MAX;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the exponent from the id, which is `id - REAL_ID_SHIFT`\\n     * @param id The id\\n     * @return exponent The exponent\\n     */\\n    function getExponent(uint24 id) internal pure returns (int256) {\\n        unchecked {\\n            return int256(uint256(id)) - REAL_ID_SHIFT;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a price with 18 decimals to a 128.128-binary fixed-point number\\n     * @param price The price with 18 decimals\\n     * @return price128x128 The 128.128-binary fixed-point number\\n     */\\n    function convertDecimalPriceTo128x128(uint256 price) internal pure returns (uint256) {\\n        return price.shiftDivRoundDown(Constants.SCALE_OFFSET, Constants.PRECISION);\\n    }\\n\\n    /**\\n     * @dev Converts a 128.128-binary fixed-point number to a price with 18 decimals\\n     * @param price128x128 The 128.128-binary fixed-point number\\n     * @return price The price with 18 decimals\\n     */\\n    function convert128x128PriceToDecimal(uint256 price128x128) internal pure returns (uint256) {\\n        return price128x128.mulShiftRoundDown(Constants.PRECISION, Constants.SCALE_OFFSET);\\n    }\\n}\\n\",\"keccak256\":\"0xe660c07d0812609a65bcdccc1d7212116e8075c3a86cf9b15ead3639b0f9fdb7\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/BitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Bit Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for bit calculations\\n */\\nlibrary BitMath {\\n    /**\\n     * @dev Returns the index of the closest bit on the right of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the right of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitRight(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            uint256 shift = 255 - bit;\\n            x <<= shift;\\n\\n            // can't overflow as it's non-zero and we shifted it by `_shift`\\n            return (x == 0) ? type(uint256).max : mostSignificantBit(x) - shift;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the closest bit on the left of x that is non null\\n     * @param x The value as a uint256\\n     * @param bit The index of the bit to start searching at\\n     * @return id The index of the closest non null bit on the left of x.\\n     * If there is no closest bit, it returns max(uint256)\\n     */\\n    function closestBitLeft(uint256 x, uint8 bit) internal pure returns (uint256 id) {\\n        unchecked {\\n            x >>= bit;\\n\\n            return (x == 0) ? type(uint256).max : leastSignificantBit(x) + bit;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the most significant bit of x\\n     * This function returns 0 if x is 0\\n     * @param x The value as a uint256\\n     * @return msb The index of the most significant bit of x\\n     */\\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 msb) {\\n        assembly {\\n            if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                x := shr(128, x)\\n                msb := 128\\n            }\\n            if gt(x, 0xffffffffffffffff) {\\n                x := shr(64, x)\\n                msb := add(msb, 64)\\n            }\\n            if gt(x, 0xffffffff) {\\n                x := shr(32, x)\\n                msb := add(msb, 32)\\n            }\\n            if gt(x, 0xffff) {\\n                x := shr(16, x)\\n                msb := add(msb, 16)\\n            }\\n            if gt(x, 0xff) {\\n                x := shr(8, x)\\n                msb := add(msb, 8)\\n            }\\n            if gt(x, 0xf) {\\n                x := shr(4, x)\\n                msb := add(msb, 4)\\n            }\\n            if gt(x, 0x3) {\\n                x := shr(2, x)\\n                msb := add(msb, 2)\\n            }\\n            if gt(x, 0x1) { msb := add(msb, 1) }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the index of the least significant bit of x\\n     * This function returns 255 if x is 0\\n     * @param x The value as a uint256\\n     * @return lsb The index of the least significant bit of x\\n     */\\n    function leastSignificantBit(uint256 x) internal pure returns (uint8 lsb) {\\n        assembly {\\n            let sx := shl(128, x)\\n            if iszero(iszero(sx)) {\\n                lsb := 128\\n                x := sx\\n            }\\n            sx := shl(64, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 64)\\n            }\\n            sx := shl(32, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 32)\\n            }\\n            sx := shl(16, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 16)\\n            }\\n            sx := shl(8, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 8)\\n            }\\n            sx := shl(4, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 4)\\n            }\\n            sx := shl(2, x)\\n            if iszero(iszero(sx)) {\\n                x := sx\\n                lsb := add(lsb, 2)\\n            }\\n            if iszero(iszero(shl(1, x))) { lsb := add(lsb, 1) }\\n\\n            lsb := sub(255, lsb)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7b359776521706ae1291cbf8707919aaa5cb78d59b9dfbe5393322c393250b1f\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/Encoded.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Encoded Library\\n * @author Trader Joe\\n * @notice Helper contract used for decoding bytes32 sample\\n */\\nlibrary Encoded {\\n    uint256 internal constant MASK_UINT1 = 0x1;\\n    uint256 internal constant MASK_UINT8 = 0xff;\\n    uint256 internal constant MASK_UINT12 = 0xfff;\\n    uint256 internal constant MASK_UINT14 = 0x3fff;\\n    uint256 internal constant MASK_UINT16 = 0xffff;\\n    uint256 internal constant MASK_UINT20 = 0xfffff;\\n    uint256 internal constant MASK_UINT24 = 0xffffff;\\n    uint256 internal constant MASK_UINT40 = 0xffffffffff;\\n    uint256 internal constant MASK_UINT64 = 0xffffffffffffffff;\\n    uint256 internal constant MASK_UINT128 = 0xffffffffffffffffffffffffffffffff;\\n\\n    /**\\n     * @notice Internal function to set a value in an encoded bytes32 using a mask and offset\\n     * @dev This function can overflow\\n     * @param encoded The previous encoded value\\n     * @param value The value to encode\\n     * @param mask The mask\\n     * @param offset The offset\\n     * @return newEncoded The new encoded value\\n     */\\n    function set(bytes32 encoded, uint256 value, uint256 mask, uint256 offset)\\n        internal\\n        pure\\n        returns (bytes32 newEncoded)\\n    {\\n        assembly {\\n            newEncoded := and(encoded, not(shl(offset, mask)))\\n            newEncoded := or(newEncoded, shl(offset, and(value, mask)))\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to set a bool in an encoded bytes32 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The previous encoded value\\n     * @param boolean The bool to encode\\n     * @param offset The offset\\n     * @return newEncoded The new encoded value\\n     */\\n    function setBool(bytes32 encoded, bool boolean, uint256 offset) internal pure returns (bytes32 newEncoded) {\\n        return set(encoded, boolean ? 1 : 0, MASK_UINT1, offset);\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample using a mask and offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param mask The mask\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decode(bytes32 encoded, uint256 mask, uint256 offset) internal pure returns (uint256 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a bool using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return boolean The decoded value as a bool\\n     */\\n    function decodeBool(bytes32 encoded, uint256 offset) internal pure returns (bool boolean) {\\n        assembly {\\n            boolean := and(shr(offset, encoded), MASK_UINT1)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint8 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint8(bytes32 encoded, uint256 offset) internal pure returns (uint8 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT8)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint12 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value as a uint16, since uint12 is not supported\\n     */\\n    function decodeUint12(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT12)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint14 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value as a uint16, since uint14 is not supported\\n     */\\n    function decodeUint14(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT14)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint16 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint16(bytes32 encoded, uint256 offset) internal pure returns (uint16 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT16)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint20 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value as a uint24, since uint20 is not supported\\n     */\\n    function decodeUint20(bytes32 encoded, uint256 offset) internal pure returns (uint24 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT20)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint24 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint24(bytes32 encoded, uint256 offset) internal pure returns (uint24 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT24)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint40 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint40(bytes32 encoded, uint256 offset) internal pure returns (uint40 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT40)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint64 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint64(bytes32 encoded, uint256 offset) internal pure returns (uint64 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT64)\\n        }\\n    }\\n\\n    /**\\n     * @notice Internal function to decode a bytes32 sample into a uint128 using an offset\\n     * @dev This function can overflow\\n     * @param encoded The encoded value\\n     * @param offset The offset\\n     * @return value The decoded value\\n     */\\n    function decodeUint128(bytes32 encoded, uint256 offset) internal pure returns (uint128 value) {\\n        assembly {\\n            value := and(shr(offset, encoded), MASK_UINT128)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd7caeb3b8c48ac9015c89a5fc6e6387a421359c0d773b6cd276baa17eb8c4c3f\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/LiquidityConfigurations.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {PackedUint128Math} from \\\"./PackedUint128Math.sol\\\";\\nimport {Encoded} from \\\"./Encoded.sol\\\";\\n\\n/**\\n * @title Liquidity Book Liquidity Configurations Library\\n * @author Trader Joe\\n * @notice This library contains functions to encode and decode the config of a pool and interact with the encoded bytes32.\\n */\\nlibrary LiquidityConfigurations {\\n    using PackedUint128Math for bytes32;\\n    using PackedUint128Math for uint128;\\n    using Encoded for bytes32;\\n\\n    error LiquidityConfigurations__InvalidConfig();\\n\\n    uint256 private constant OFFSET_ID = 0;\\n    uint256 private constant OFFSET_DISTRIBUTION_Y = 24;\\n    uint256 private constant OFFSET_DISTRIBUTION_X = 88;\\n\\n    uint256 private constant PRECISION = 1e18;\\n\\n    /**\\n     * @dev Encode the distributionX, distributionY and id into a single bytes32\\n     * @param distributionX The distribution of the first token\\n     * @param distributionY The distribution of the second token\\n     * @param id The id of the pool\\n     * @return config The encoded config as follows:\\n     * [0 - 24[: id\\n     * [24 - 88[: distributionY\\n     * [88 - 152[: distributionX\\n     * [152 - 256[: empty\\n     */\\n    function encodeParams(uint64 distributionX, uint64 distributionY, uint24 id)\\n        internal\\n        pure\\n        returns (bytes32 config)\\n    {\\n        config = config.set(distributionX, Encoded.MASK_UINT64, OFFSET_DISTRIBUTION_X);\\n        config = config.set(distributionY, Encoded.MASK_UINT64, OFFSET_DISTRIBUTION_Y);\\n        config = config.set(id, Encoded.MASK_UINT24, OFFSET_ID);\\n    }\\n\\n    /**\\n     * @dev Decode the distributionX, distributionY and id from a single bytes32\\n     * @param config The encoded config as follows:\\n     * [0 - 24[: id\\n     * [24 - 88[: distributionY\\n     * [88 - 152[: distributionX\\n     * [152 - 256[: empty\\n     * @return distributionX The distribution of the first token\\n     * @return distributionY The distribution of the second token\\n     * @return id The id of the bin to add the liquidity to\\n     */\\n    function decodeParams(bytes32 config)\\n        internal\\n        pure\\n        returns (uint64 distributionX, uint64 distributionY, uint24 id)\\n    {\\n        distributionX = config.decodeUint64(OFFSET_DISTRIBUTION_X);\\n        distributionY = config.decodeUint64(OFFSET_DISTRIBUTION_Y);\\n        id = config.decodeUint24(OFFSET_ID);\\n\\n        if (uint256(config) > type(uint152).max || distributionX > PRECISION || distributionY > PRECISION) {\\n            revert LiquidityConfigurations__InvalidConfig();\\n        }\\n    }\\n\\n    /**\\n     * @dev Get the amounts and id from a config and amountsIn\\n     * @param config The encoded config as follows:\\n     * [0 - 24[: id\\n     * [24 - 88[: distributionY\\n     * [88 - 152[: distributionX\\n     * [152 - 256[: empty\\n     * @param amountsIn The amounts to distribute as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @return amounts The distributed amounts as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @return id The id of the bin to add the liquidity to\\n     */\\n    function getAmountsAndId(bytes32 config, bytes32 amountsIn) internal pure returns (bytes32, uint24) {\\n        (uint64 distributionX, uint64 distributionY, uint24 id) = decodeParams(config);\\n\\n        (uint128 x1, uint128 x2) = amountsIn.decode();\\n\\n        assembly {\\n            x1 := div(mul(x1, distributionX), PRECISION)\\n            x2 := div(mul(x2, distributionY), PRECISION)\\n        }\\n\\n        return (x1.encode(x2), id);\\n    }\\n}\\n\",\"keccak256\":\"0x0508102d0e1197ec2e323bd518fae0862c379345a1473e095509ff53c6070e74\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/PackedUint128Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\n\\n/**\\n * @title Liquidity Book Packed Uint128 Math Library\\n * @author Trader Joe\\n * @notice This library contains functions to encode and decode two uint128 into a single bytes32\\n * and interact with the encoded bytes32.\\n */\\nlibrary PackedUint128Math {\\n    error PackedUint128Math__AddOverflow();\\n    error PackedUint128Math__SubUnderflow();\\n    error PackedUint128Math__MultiplierTooLarge();\\n\\n    uint256 private constant OFFSET = 128;\\n    uint256 private constant MASK_128 = 0xffffffffffffffffffffffffffffffff;\\n    uint256 private constant MASK_128_PLUS_ONE = MASK_128 + 1;\\n\\n    /**\\n     * @dev Encodes two uint128 into a single bytes32\\n     * @param x1 The first uint128\\n     * @param x2 The second uint128\\n     * @return z The encoded bytes32 as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     */\\n    function encode(uint128 x1, uint128 x2) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := or(and(x1, MASK_128), shl(OFFSET, x2))\\n        }\\n    }\\n\\n    /**\\n     * @dev Encodes a uint128 into a single bytes32 as the first uint128\\n     * @param x1 The uint128\\n     * @return z The encoded bytes32 as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: empty\\n     */\\n    function encodeFirst(uint128 x1) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := and(x1, MASK_128)\\n        }\\n    }\\n\\n    /**\\n     * @dev Encodes a uint128 into a single bytes32 as the second uint128\\n     * @param x2 The uint128\\n     * @return z The encoded bytes32 as follows:\\n     * [0 - 128[: empty\\n     * [128 - 256[: x2\\n     */\\n    function encodeSecond(uint128 x2) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := shl(OFFSET, x2)\\n        }\\n    }\\n\\n    /**\\n     * @dev Encodes a uint128 into a single bytes32 as the first or second uint128\\n     * @param x The uint128\\n     * @param first Whether to encode as the first or second uint128\\n     * @return z The encoded bytes32 as follows:\\n     * if first:\\n     * [0 - 128[: x\\n     * [128 - 256[: empty\\n     * else:\\n     * [0 - 128[: empty\\n     * [128 - 256[: x\\n     */\\n    function encode(uint128 x, bool first) internal pure returns (bytes32 z) {\\n        return first ? encodeFirst(x) : encodeSecond(x);\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into two uint128\\n     * @param z The encoded bytes32 as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @return x1 The first uint128\\n     * @return x2 The second uint128\\n     */\\n    function decode(bytes32 z) internal pure returns (uint128 x1, uint128 x2) {\\n        assembly {\\n            x1 := and(z, MASK_128)\\n            x2 := shr(OFFSET, z)\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into a uint128 as the first uint128\\n     * @param z The encoded bytes32 as follows:\\n     * [0 - 128[: x\\n     * [128 - 256[: any\\n     * @return x The first uint128\\n     */\\n    function decodeX(bytes32 z) internal pure returns (uint128 x) {\\n        assembly {\\n            x := and(z, MASK_128)\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into a uint128 as the second uint128\\n     * @param z The encoded bytes32 as follows:\\n     * [0 - 128[: any\\n     * [128 - 256[: y\\n     * @return y The second uint128\\n     */\\n    function decodeY(bytes32 z) internal pure returns (uint128 y) {\\n        assembly {\\n            y := shr(OFFSET, z)\\n        }\\n    }\\n\\n    /**\\n     * @dev Decodes a bytes32 into a uint128 as the first or second uint128\\n     * @param z The encoded bytes32 as follows:\\n     * if first:\\n     * [0 - 128[: x1\\n     * [128 - 256[: empty\\n     * else:\\n     * [0 - 128[: empty\\n     * [128 - 256[: x2\\n     * @param first Whether to decode as the first or second uint128\\n     * @return x The decoded uint128\\n     */\\n    function decode(bytes32 z, bool first) internal pure returns (uint128 x) {\\n        return first ? decodeX(z) : decodeY(z);\\n    }\\n\\n    /**\\n     * @dev Adds two encoded bytes32, reverting on overflow on any of the uint128\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return z The sum of x and y encoded as follows:\\n     * [0 - 128[: x1 + y1\\n     * [128 - 256[: x2 + y2\\n     */\\n    function add(bytes32 x, bytes32 y) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := add(x, y)\\n        }\\n\\n        if (z < x || uint128(uint256(z)) < uint128(uint256(x))) {\\n            revert PackedUint128Math__AddOverflow();\\n        }\\n    }\\n\\n    /**\\n     * @dev Adds an encoded bytes32 and two uint128, reverting on overflow on any of the uint128\\n     * @param x The bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y1 The first uint128\\n     * @param y2 The second uint128\\n     * @return z The sum of x and y encoded as follows:\\n     * [0 - 128[: x1 + y1\\n     * [128 - 256[: x2 + y2\\n     */\\n    function add(bytes32 x, uint128 y1, uint128 y2) internal pure returns (bytes32) {\\n        return add(x, encode(y1, y2));\\n    }\\n\\n    /**\\n     * @dev Subtracts two encoded bytes32, reverting on underflow on any of the uint128\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return z The difference of x and y encoded as follows:\\n     * [0 - 128[: x1 - y1\\n     * [128 - 256[: x2 - y2\\n     */\\n    function sub(bytes32 x, bytes32 y) internal pure returns (bytes32 z) {\\n        assembly {\\n            z := sub(x, y)\\n        }\\n\\n        if (z > x || uint128(uint256(z)) > uint128(uint256(x))) {\\n            revert PackedUint128Math__SubUnderflow();\\n        }\\n    }\\n\\n    /**\\n     * @dev Subtracts an encoded bytes32 and two uint128, reverting on underflow on any of the uint128\\n     * @param x The bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y1 The first uint128\\n     * @param y2 The second uint128\\n     * @return z The difference of x and y encoded as follows:\\n     * [0 - 128[: x1 - y1\\n     * [128 - 256[: x2 - y2\\n     */\\n    function sub(bytes32 x, uint128 y1, uint128 y2) internal pure returns (bytes32) {\\n        return sub(x, encode(y1, y2));\\n    }\\n\\n    /**\\n     * @dev Returns whether any of the uint128 of x is strictly greater than the corresponding uint128 of y\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return x1 < y1 || x2 < y2\\n     */\\n    function lt(bytes32 x, bytes32 y) internal pure returns (bool) {\\n        (uint128 x1, uint128 x2) = decode(x);\\n        (uint128 y1, uint128 y2) = decode(y);\\n\\n        return x1 < y1 || x2 < y2;\\n    }\\n\\n    /**\\n     * @dev Returns whether any of the uint128 of x is strictly greater than the corresponding uint128 of y\\n     * @param x The first bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param y The second bytes32 encoded as follows:\\n     * [0 - 128[: y1\\n     * [128 - 256[: y2\\n     * @return x1 < y1 || x2 < y2\\n     */\\n    function gt(bytes32 x, bytes32 y) internal pure returns (bool) {\\n        (uint128 x1, uint128 x2) = decode(x);\\n        (uint128 y1, uint128 y2) = decode(y);\\n\\n        return x1 > y1 || x2 > y2;\\n    }\\n\\n    /**\\n     * @dev Multiplies an encoded bytes32 by a uint128 then divides the result by 10_000, rounding down\\n     * The result can't overflow as the multiplier needs to be smaller or equal to 10_000\\n     * @param x The bytes32 encoded as follows:\\n     * [0 - 128[: x1\\n     * [128 - 256[: x2\\n     * @param multiplier The uint128 to multiply by (must be smaller or equal to 10_000)\\n     * @return z The product of x and multiplier encoded as follows:\\n     * [0 - 128[: floor((x1 * multiplier) / 10_000)\\n     * [128 - 256[: floor((x2 * multiplier) / 10_000)\\n     */\\n    function scalarMulDivBasisPointRoundDown(bytes32 x, uint128 multiplier) internal pure returns (bytes32 z) {\\n        if (multiplier == 0) return 0;\\n\\n        uint256 BASIS_POINT_MAX = Constants.BASIS_POINT_MAX;\\n        if (multiplier > BASIS_POINT_MAX) revert PackedUint128Math__MultiplierTooLarge();\\n\\n        (uint128 x1, uint128 x2) = decode(x);\\n\\n        assembly {\\n            x1 := div(mul(x1, multiplier), BASIS_POINT_MAX)\\n            x2 := div(mul(x2, multiplier), BASIS_POINT_MAX)\\n        }\\n\\n        return encode(x1, x2);\\n    }\\n}\\n\",\"keccak256\":\"0x4e57313a54c7809e23cfbda591daf98f21fbabe6db88168c98f62e9cf48199bb\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Liquidity Book Safe Cast Library\\n * @author Trader Joe\\n * @notice This library contains functions to safely cast uint256 to different uint types.\\n */\\nlibrary SafeCast {\\n    error SafeCast__Exceeds248Bits();\\n    error SafeCast__Exceeds240Bits();\\n    error SafeCast__Exceeds232Bits();\\n    error SafeCast__Exceeds224Bits();\\n    error SafeCast__Exceeds216Bits();\\n    error SafeCast__Exceeds208Bits();\\n    error SafeCast__Exceeds200Bits();\\n    error SafeCast__Exceeds192Bits();\\n    error SafeCast__Exceeds184Bits();\\n    error SafeCast__Exceeds176Bits();\\n    error SafeCast__Exceeds168Bits();\\n    error SafeCast__Exceeds160Bits();\\n    error SafeCast__Exceeds152Bits();\\n    error SafeCast__Exceeds144Bits();\\n    error SafeCast__Exceeds136Bits();\\n    error SafeCast__Exceeds128Bits();\\n    error SafeCast__Exceeds120Bits();\\n    error SafeCast__Exceeds112Bits();\\n    error SafeCast__Exceeds104Bits();\\n    error SafeCast__Exceeds96Bits();\\n    error SafeCast__Exceeds88Bits();\\n    error SafeCast__Exceeds80Bits();\\n    error SafeCast__Exceeds72Bits();\\n    error SafeCast__Exceeds64Bits();\\n    error SafeCast__Exceeds56Bits();\\n    error SafeCast__Exceeds48Bits();\\n    error SafeCast__Exceeds40Bits();\\n    error SafeCast__Exceeds32Bits();\\n    error SafeCast__Exceeds24Bits();\\n    error SafeCast__Exceeds16Bits();\\n    error SafeCast__Exceeds8Bits();\\n\\n    /**\\n     * @dev Returns x on uint248 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint248\\n     */\\n    function safe248(uint256 x) internal pure returns (uint248 y) {\\n        if ((y = uint248(x)) != x) revert SafeCast__Exceeds248Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint240 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint240\\n     */\\n    function safe240(uint256 x) internal pure returns (uint240 y) {\\n        if ((y = uint240(x)) != x) revert SafeCast__Exceeds240Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint232 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint232\\n     */\\n    function safe232(uint256 x) internal pure returns (uint232 y) {\\n        if ((y = uint232(x)) != x) revert SafeCast__Exceeds232Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint224 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint224\\n     */\\n    function safe224(uint256 x) internal pure returns (uint224 y) {\\n        if ((y = uint224(x)) != x) revert SafeCast__Exceeds224Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint216 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint216\\n     */\\n    function safe216(uint256 x) internal pure returns (uint216 y) {\\n        if ((y = uint216(x)) != x) revert SafeCast__Exceeds216Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint208 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint208\\n     */\\n    function safe208(uint256 x) internal pure returns (uint208 y) {\\n        if ((y = uint208(x)) != x) revert SafeCast__Exceeds208Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint200 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint200\\n     */\\n    function safe200(uint256 x) internal pure returns (uint200 y) {\\n        if ((y = uint200(x)) != x) revert SafeCast__Exceeds200Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint192 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint192\\n     */\\n    function safe192(uint256 x) internal pure returns (uint192 y) {\\n        if ((y = uint192(x)) != x) revert SafeCast__Exceeds192Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint184 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint184\\n     */\\n    function safe184(uint256 x) internal pure returns (uint184 y) {\\n        if ((y = uint184(x)) != x) revert SafeCast__Exceeds184Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint176 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint176\\n     */\\n    function safe176(uint256 x) internal pure returns (uint176 y) {\\n        if ((y = uint176(x)) != x) revert SafeCast__Exceeds176Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint168 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint168\\n     */\\n    function safe168(uint256 x) internal pure returns (uint168 y) {\\n        if ((y = uint168(x)) != x) revert SafeCast__Exceeds168Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint160 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint160\\n     */\\n    function safe160(uint256 x) internal pure returns (uint160 y) {\\n        if ((y = uint160(x)) != x) revert SafeCast__Exceeds160Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint152 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint152\\n     */\\n    function safe152(uint256 x) internal pure returns (uint152 y) {\\n        if ((y = uint152(x)) != x) revert SafeCast__Exceeds152Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint144 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint144\\n     */\\n    function safe144(uint256 x) internal pure returns (uint144 y) {\\n        if ((y = uint144(x)) != x) revert SafeCast__Exceeds144Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint136 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint136\\n     */\\n    function safe136(uint256 x) internal pure returns (uint136 y) {\\n        if ((y = uint136(x)) != x) revert SafeCast__Exceeds136Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint128 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint128\\n     */\\n    function safe128(uint256 x) internal pure returns (uint128 y) {\\n        if ((y = uint128(x)) != x) revert SafeCast__Exceeds128Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint120 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint120\\n     */\\n    function safe120(uint256 x) internal pure returns (uint120 y) {\\n        if ((y = uint120(x)) != x) revert SafeCast__Exceeds120Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint112 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint112\\n     */\\n    function safe112(uint256 x) internal pure returns (uint112 y) {\\n        if ((y = uint112(x)) != x) revert SafeCast__Exceeds112Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint104 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint104\\n     */\\n    function safe104(uint256 x) internal pure returns (uint104 y) {\\n        if ((y = uint104(x)) != x) revert SafeCast__Exceeds104Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint96 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint96\\n     */\\n    function safe96(uint256 x) internal pure returns (uint96 y) {\\n        if ((y = uint96(x)) != x) revert SafeCast__Exceeds96Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint88 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint88\\n     */\\n    function safe88(uint256 x) internal pure returns (uint88 y) {\\n        if ((y = uint88(x)) != x) revert SafeCast__Exceeds88Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint80 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint80\\n     */\\n    function safe80(uint256 x) internal pure returns (uint80 y) {\\n        if ((y = uint80(x)) != x) revert SafeCast__Exceeds80Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint72 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint72\\n     */\\n    function safe72(uint256 x) internal pure returns (uint72 y) {\\n        if ((y = uint72(x)) != x) revert SafeCast__Exceeds72Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint64 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint64\\n     */\\n    function safe64(uint256 x) internal pure returns (uint64 y) {\\n        if ((y = uint64(x)) != x) revert SafeCast__Exceeds64Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint56 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint56\\n     */\\n    function safe56(uint256 x) internal pure returns (uint56 y) {\\n        if ((y = uint56(x)) != x) revert SafeCast__Exceeds56Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint48 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint48\\n     */\\n    function safe48(uint256 x) internal pure returns (uint48 y) {\\n        if ((y = uint48(x)) != x) revert SafeCast__Exceeds48Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint40 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint40\\n     */\\n    function safe40(uint256 x) internal pure returns (uint40 y) {\\n        if ((y = uint40(x)) != x) revert SafeCast__Exceeds40Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint32 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint32\\n     */\\n    function safe32(uint256 x) internal pure returns (uint32 y) {\\n        if ((y = uint32(x)) != x) revert SafeCast__Exceeds32Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint24 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint24\\n     */\\n    function safe24(uint256 x) internal pure returns (uint24 y) {\\n        if ((y = uint24(x)) != x) revert SafeCast__Exceeds24Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint16 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint16\\n     */\\n    function safe16(uint256 x) internal pure returns (uint16 y) {\\n        if ((y = uint16(x)) != x) revert SafeCast__Exceeds16Bits();\\n    }\\n\\n    /**\\n     * @dev Returns x on uint8 and check that it does not overflow\\n     * @param x The value as an uint256\\n     * @return y The value as an uint8\\n     */\\n    function safe8(uint256 x) internal pure returns (uint8 y) {\\n        if ((y = uint8(x)) != x) revert SafeCast__Exceeds8Bits();\\n    }\\n}\\n\",\"keccak256\":\"0x3e22926e8f7d352568f01a896860c83b3ab35b47a0ed9a0f2e780a82aa52f4a8\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/Uint128x128Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {Constants} from \\\"../Constants.sol\\\";\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/**\\n * @title Liquidity Book Uint128x128 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for power and log calculations\\n */\\nlibrary Uint128x128Math {\\n    using BitMath for uint256;\\n\\n    error Uint128x128Math__LogUnderflow();\\n    error Uint128x128Math__PowUnderflow(uint256 x, int256 y);\\n\\n    uint256 constant LOG_SCALE_OFFSET = 127;\\n    uint256 constant LOG_SCALE = 1 << LOG_SCALE_OFFSET;\\n    uint256 constant LOG_SCALE_SQUARED = LOG_SCALE * LOG_SCALE;\\n\\n    /**\\n     * @notice Calculates the binary logarithm of x.\\n     * @dev Based on the iterative approximation algorithm.\\n     * https://en.wikipedia.org/wiki/Binary_logarithm#Iterative_approximation\\n     * Requirements:\\n     * - x must be greater than zero.\\n     * Caveats:\\n     * - The results are not perfectly accurate to the last decimal, due to the lossy precision of the iterative approximation\\n     * Also because x is converted to an unsigned 129.127-binary fixed-point number during the operation to optimize the multiplication\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the binary logarithm.\\n     * @return result The binary logarithm as a signed 128.128-binary fixed-point number.\\n     */\\n    function log2(uint256 x) internal pure returns (int256 result) {\\n        // Convert x to a unsigned 129.127-binary fixed-point number to optimize the multiplication.\\n        // If we use an offset of 128 bits, y would need 129 bits and y**2 would would overflow and we would have to\\n        // use mulDiv, by reducing x to 129.127-binary fixed-point number we assert that y will use 128 bits, and we\\n        // can use the regular multiplication\\n\\n        if (x == 1) return -128;\\n        if (x == 0) revert Uint128x128Math__LogUnderflow();\\n\\n        x >>= 1;\\n\\n        unchecked {\\n            // This works because log2(x) = -log2(1/x).\\n            int256 sign;\\n            if (x >= LOG_SCALE) {\\n                sign = 1;\\n            } else {\\n                sign = -1;\\n                // Do the fixed-point inversion inline to save gas\\n                x = LOG_SCALE_SQUARED / x;\\n            }\\n\\n            // Calculate the integer part of the logarithm and add it to the result and finally calculate y = x * 2^(-n).\\n            uint256 n = (x >> LOG_SCALE_OFFSET).mostSignificantBit();\\n\\n            // The integer part of the logarithm as a signed 129.127-binary fixed-point number. The operation can't overflow\\n            // because n is maximum 255, LOG_SCALE_OFFSET is 127 bits and sign is either 1 or -1.\\n            result = int256(n) << LOG_SCALE_OFFSET;\\n\\n            // This is y = x * 2^(-n).\\n            uint256 y = x >> n;\\n\\n            // If y = 1, the fractional part is zero.\\n            if (y != LOG_SCALE) {\\n                // Calculate the fractional part via the iterative approximation.\\n                // The \\\"delta >>= 1\\\" part is equivalent to \\\"delta /= 2\\\", but shifting bits is faster.\\n                for (int256 delta = int256(1 << (LOG_SCALE_OFFSET - 1)); delta > 0; delta >>= 1) {\\n                    y = (y * y) >> LOG_SCALE_OFFSET;\\n\\n                    // Is y^2 > 2 and so in the range [2,4)?\\n                    if (y >= 1 << (LOG_SCALE_OFFSET + 1)) {\\n                        // Add the 2^(-m) factor to the logarithm.\\n                        result += delta;\\n\\n                        // Corresponds to z/2 on Wikipedia.\\n                        y >>= 1;\\n                    }\\n                }\\n            }\\n            // Convert x back to unsigned 128.128-binary fixed-point number\\n            result = (result * sign) << 1;\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the value of x^y. It calculates `1 / x^abs(y)` if x is bigger than 2^128.\\n     * At the end of the operations, we invert the result if needed.\\n     * @param x The unsigned 128.128-binary fixed-point number for which to calculate the power\\n     * @param y A relative number without any decimals, needs to be between ]2^21; 2^21[\\n     */\\n    function pow(uint256 x, int256 y) internal pure returns (uint256 result) {\\n        bool invert;\\n        uint256 absY;\\n\\n        if (y == 0) return Constants.SCALE;\\n\\n        assembly {\\n            absY := y\\n            if slt(absY, 0) {\\n                absY := sub(0, absY)\\n                invert := iszero(invert)\\n            }\\n        }\\n\\n        if (absY < 0x100000) {\\n            result = Constants.SCALE;\\n            assembly {\\n                let squared := x\\n                if gt(x, 0xffffffffffffffffffffffffffffffff) {\\n                    squared := div(not(0), squared)\\n                    invert := iszero(invert)\\n                }\\n\\n                if and(absY, 0x1) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x100) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x200) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x400) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x800) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x1000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x2000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x4000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x8000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x10000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x20000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x40000) { result := shr(128, mul(result, squared)) }\\n                squared := shr(128, mul(squared, squared))\\n                if and(absY, 0x80000) { result := shr(128, mul(result, squared)) }\\n            }\\n        }\\n\\n        // revert if y is too big or if x^y underflowed\\n        if (result == 0) revert Uint128x128Math__PowUnderflow(x, y);\\n\\n        return invert ? type(uint256).max / result : result;\\n    }\\n}\\n\",\"keccak256\":\"0x4c91310af429799ae2585dbdbf8ee3cce5a4ca4e9b64ca86fb560c516a37e503\",\"license\":\"MIT\"},\"contracts/lib/joe-v2/math/Uint256x256Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.10;\\n\\nimport {BitMath} from \\\"./BitMath.sol\\\";\\n\\n/**\\n * @title Liquidity Book Uint256x256 Math Library\\n * @author Trader Joe\\n * @notice Helper contract used for full precision calculations\\n */\\nlibrary Uint256x256Math {\\n    error Uint256x256Math__MulShiftOverflow();\\n    error Uint256x256Math__MulDivOverflow();\\n\\n    /**\\n     * @notice Calculates floor(x*y/denominator) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundDown(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        return _getEndOfDivRoundDown(x, y, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x*y/denominator) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The denominator cannot be zero\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function mulDivRoundUp(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        result = mulDivRoundDown(x, y, denominator);\\n        if (mulmod(x, y, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundDown(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        (uint256 prod0, uint256 prod1) = _getMulProds(x, y);\\n\\n        if (prod0 != 0) result = prod0 >> offset;\\n        if (prod1 != 0) {\\n            // Make sure the result is less than 2^256.\\n            if (prod1 >= 1 << offset) revert Uint256x256Math__MulShiftOverflow();\\n\\n            unchecked {\\n                result += prod1 << (256 - offset);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / 2**offset) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param offset The offset as an uint256, can't be greater than 256\\n     * @return result The result as an uint256\\n     */\\n    function mulShiftRoundUp(uint256 x, uint256 y, uint8 offset) internal pure returns (uint256 result) {\\n        result = mulShiftRoundDown(x, y, offset);\\n        if (mulmod(x, y, 1 << offset) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x << offset / y) with full precision\\n     * The result will be rounded down\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundDown(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        uint256 prod0;\\n        uint256 prod1;\\n\\n        prod0 = x << offset; // Least significant 256 bits of the product\\n        unchecked {\\n            prod1 = x >> (256 - offset); // Most significant 256 bits of the product\\n        }\\n\\n        return _getEndOfDivRoundDown(x, 1 << offset, denominator, prod0, prod1);\\n    }\\n\\n    /**\\n     * @notice Calculates ceil(x << offset / y) with full precision\\n     * The result will be rounded up\\n     * @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n     * Requirements:\\n     * - The offset needs to be strictly lower than 256\\n     * - The result must fit within uint256\\n     * Caveats:\\n     * - This function does not work with fixed-point numbers\\n     * @param x The multiplicand as an uint256\\n     * @param offset The number of bit to shift x as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @return result The result as an uint256\\n     */\\n    function shiftDivRoundUp(uint256 x, uint8 offset, uint256 denominator) internal pure returns (uint256 result) {\\n        result = shiftDivRoundDown(x, offset, denominator);\\n        if (mulmod(x, 1 << offset, denominator) != 0) result += 1;\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y` as 2 uint256\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @return prod0 The least significant 256 bits of the product\\n     * @return prod1 The most significant 256 bits of the product\\n     */\\n    function _getMulProds(uint256 x, uint256 y) private pure returns (uint256 prod0, uint256 prod1) {\\n        // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n        // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2^256 + prod0.\\n        assembly {\\n            let mm := mulmod(x, y, not(0))\\n            prod0 := mul(x, y)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n    }\\n\\n    /**\\n     * @notice Helper function to return the result of `x * y / denominator` with full precision\\n     * @param x The multiplicand as an uint256\\n     * @param y The multiplier as an uint256\\n     * @param denominator The divisor as an uint256\\n     * @param prod0 The least significant 256 bits of the product\\n     * @param prod1 The most significant 256 bits of the product\\n     * @return result The result as an uint256\\n     */\\n    function _getEndOfDivRoundDown(uint256 x, uint256 y, uint256 denominator, uint256 prod0, uint256 prod1)\\n        private\\n        pure\\n        returns (uint256 result)\\n    {\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            unchecked {\\n                result = prod0 / denominator;\\n            }\\n        } else {\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0\\n            if (prod1 >= denominator) revert Uint256x256Math__MulDivOverflow();\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1\\n            // See https://cs.stackexchange.com/q/138556/92363\\n            unchecked {\\n                // Does not overflow because the denominator cannot be zero at this stage in the function\\n                uint256 lpotdod = denominator & (~denominator + 1);\\n                assembly {\\n                    // Divide denominator by lpotdod.\\n                    denominator := div(denominator, lpotdod)\\n\\n                    // Divide [prod1 prod0] by lpotdod.\\n                    prod0 := div(prod0, lpotdod)\\n\\n                    // Flip lpotdod such that it is 2^256 / lpotdod. If lpotdod is zero, then it becomes one\\n                    lpotdod := add(div(sub(0, lpotdod), lpotdod), 1)\\n                }\\n\\n                // Shift in bits from prod1 into prod0\\n                prod0 |= prod1 * lpotdod;\\n\\n                // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n                // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n                // four bits. That is, denominator * inv = 1 mod 2^4\\n                uint256 inverse = (3 * denominator) ^ 2;\\n\\n                // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n                // in modular arithmetic, doubling the correct bits in each step\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n                inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n                // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n                // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n                // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n                // is no longer required.\\n                result = prod0 * inverse;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the square root of x\\n     * @dev Credit to OpenZeppelin's Math library under MIT license\\n     */\\n    function sqrt(uint256 x) internal pure returns (uint256 sqrtX) {\\n        if (x == 0) return 0;\\n\\n        uint256 msb = BitMath.mostSignificantBit(x);\\n\\n        assembly {\\n            sqrtX := shl(shr(1, msb), 1)\\n\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n            sqrtX := shr(1, add(sqrtX, div(x, sqrtX)))\\n\\n            x := div(x, sqrtX)\\n        }\\n\\n        return sqrtX < x ? sqrtX : x;\\n    }\\n}\\n\",\"keccak256\":\"0xa85a6d3be7cdf95ec9b246d36c3843de738af3df11fcc2bf8bf6e15c350870d6\",\"license\":\"MIT\"},\"contracts/lib/uniswap-v3/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n\\n        //TODO: our change\\n        //https://ethereum.stackexchange.com/questions/96642/unary-operator-minus-cannot-be-applied-to-type-uint256\\n//        uint256 twos = -denominator & denominator;\\n        uint256 twos = denominator & (~denominator + 1);\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0e3d614b18e1382e748cc12435bb38e682bb38505202e99304c8c9b582366706\",\"license\":\"MIT\"},\"contracts/token/sPrime.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: aca0d66772607a851d7017b5cb3e6f38ee11f918;\\n\\npragma solidity ^0.8.17;\\n\\n// Importing necessary libraries and interfaces\\nimport \\\"../interfaces/joe-v2/ILBRouter.sol\\\";\\nimport \\\"../interfaces/joe-v2/ILBHooksBaseRewarder.sol\\\";\\nimport \\\"../interfaces/ISPrimeTraderJoe.sol\\\";\\nimport \\\"../interfaces/IPositionManager.sol\\\";\\nimport \\\"../interfaces/IVPrimeController.sol\\\";\\nimport \\\"../lib/joe-v2/math/SafeCast.sol\\\";\\nimport \\\"../lib/uniswap-v3/FullMath.sol\\\";\\nimport \\\"../lib/joe-v2/math/Uint256x256Math.sol\\\";\\nimport \\\"../lib/joe-v2/math/LiquidityConfigurations.sol\\\";\\nimport \\\"../lib/joe-v2/PriceHelper.sol\\\";\\nimport \\\"../abstract/PendingOwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\n\\n// SPrime contract declaration\\ncontract SPrime is ISPrimeTraderJoe, ReentrancyGuardUpgradeable, PendingOwnableUpgradeable, ERC20Upgradeable, ProxyConnector {\\n    using SafeERC20 for IERC20Metadata; // Using SafeERC20 for IERC20Metadata for safe token transfers\\n    using SafeCast for uint256; // Using SafeCast for uint256 for safe type casting\\n    using Uint256x256Math for uint256;\\n    using PackedUint128Math for bytes32;\\n\\n    // Constants declaration\\n    uint256 private constant _REBALANCE_MARGIN = 500;\\n    uint256 private constant _DENOMINATOR = 10000;\\n    uint256 private constant _MAX_SLIPPAGE = 500;\\n    uint16 internal constant DEFAULT_BIN_STEP = 50;\\n    uint256 public constant MAX_LOCK_TIME = 3 * 365 days;\\n\\n    // Mapping for storing pair information and user shares\\n    mapping(address => LockDetails[]) public locks;\\n\\n    // Immutable variables for storing token and pair information\\n    IERC20Metadata public tokenX;\\n    IERC20Metadata public tokenY;\\n    uint8 public tokenXDecimals;\\n    uint8 public tokenYDecimals;\\n    ILBPair public lbPair;\\n    IPositionManager public positionManager;\\n    IVPrimeController public vPrimeController;\\n    address public traderJoeV2Router;\\n\\n    // Arrays for storing deltaIds and distributions\\n    DepositForm[] private depositForm;\\n\\n    address public operator;\\n    ILBHooksBaseRewarder public baseRewarder;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n    * @dev initialize of the contract.\\n    * @param tokenX_ The address of the token X.\\n    * @param tokenY_ The address of the token Y.\\n    * @param name_ The name of the SPrime token. ex: PRIME-USDC LP\\n    * @param depositForm_ Pre-defined distributions and delta ids\\n    * @param positionManager_ Position Manager contract for sPrime\\n    * @param traderJoeV2Router_ Trader Joe V2 Router Address\\n    */\\n    function initialize(address tokenX_, address tokenY_, string memory name_, DepositForm[] calldata depositForm_, IPositionManager positionManager_, address traderJoeV2Router_) external initializer {\\n        __PendingOwnable_init();\\n        __ReentrancyGuard_init();\\n        __ERC20_init(name_, \\\"sPrime\\\");\\n\\n        traderJoeV2Router = traderJoeV2Router_;\\n        ILBFactory lbFactory = ILBRouter(traderJoeV2Router).getFactory();\\n        ILBFactory.LBPairInformation memory pairInfo = lbFactory.getLBPairInformation(IERC20(tokenX_), IERC20(tokenY_), DEFAULT_BIN_STEP);\\n\\n        lbPair = pairInfo.LBPair;\\n        tokenX = IERC20Metadata(address(lbPair.getTokenX()));\\n        tokenY = IERC20Metadata(address(lbPair.getTokenY()));\\n\\n        tokenXDecimals = tokenX.decimals();\\n        tokenYDecimals = tokenY.decimals();\\n\\n        for(uint256 i = 0 ; i < depositForm_.length ; i ++) {\\n            depositForm.push(depositForm_[i]);\\n        }\\n\\n        positionManager = positionManager_;\\n    }\\n\\n    modifier onlyOperator() {\\n        if (_msgSender() != operator) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    function setVPrimeControllerAddress(IVPrimeController _vPrimeController) public onlyOwner {\\n        vPrimeController = _vPrimeController;\\n    }\\n\\n    function setOperator(\\n        address _operator\\n    ) public onlyOwner {\\n        operator = _operator;\\n    }\\n\\n    function setBaseRewarder(\\n        ILBHooksBaseRewarder _baseRewarder\\n    ) public onlyOwner {\\n        baseRewarder = _baseRewarder;\\n    }\\n\\n    /** Public View Functions */\\n\\n    function getLBPair() public view returns (ILBPair) {\\n        return lbPair;\\n    }\\n\\n    function getTokenX() public view returns (IERC20) {\\n        return tokenX;\\n    }\\n\\n    function getTokenY() public view returns (IERC20) {\\n        return tokenY;\\n    }\\n\\n    /**\\n     * @dev Check if the active id is in the user position range\\n     * @param user User Address.\\n     * @return status bin status\\n     */\\n    function binInRange(address user) public view returns(bool) {\\n        uint256 tokenId = getUserTokenId(user);\\n        if (tokenId == 0) {\\n            revert NoPosition();\\n        }\\n\\n        IPositionManager.DepositConfig memory depositConfig = positionManager.getDepositConfigFromTokenId(tokenId);\\n\\n        uint256[] memory depositIds = depositConfig.depositIds;\\n        uint256 activeId = lbPair.getActiveId();\\n        if (depositIds[0] <= activeId && depositIds[depositIds.length - 1] >= activeId) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Returns the estimated USD value of the user position\\n     * @param user User Address\\n     * @param poolPrice Pool Price or oracle price for calculating proper token amount\\n     * @return Total Value in tokenY amount for the user's position.\\n     */\\n    function getUserValueInTokenY(address user, uint256 poolPrice) public view returns (uint256) {\\n        (,,,,uint256 centerId, uint256[] memory liquidityMinted) = positionManager.positions(getUserTokenId(user));\\n        IPositionManager.DepositConfig memory depositConfig = positionManager.getDepositConfig(centerId);\\n        (uint256 amountX, uint256 amountY) = _getLiquidityTokenAmounts(depositConfig.depositIds, liquidityMinted, poolPrice);\\n\\n        amountY = amountY + FullMath.mulDiv(amountX, poolPrice, 1e8);\\n\\n        return amountY;\\n    }\\n\\n    /**\\n     * @dev Returns the estimated USD value of the user position\\n     * @param user User Address\\n     * @return Total Value in tokenY amount for the user's position.\\n     */\\n    function getUserValueInTokenY(address user) external view returns (uint256) {\\n        uint256 poolPrice = getPoolPrice();\\n        return getUserValueInTokenY(user, poolPrice);\\n    }\\n\\n    /**\\n    * @dev Returns the fully vested locked balance for an account.\\n    * @dev Full business logic description can be found in Pool::getFullyVestedLockedBalance() docstring\\n    * @param account The address of the account.\\n    * @return fullyVestedBalance Fully vested locked balance\\n    */\\n    function getFullyVestedLockedBalance(address account) public view returns (uint256 fullyVestedBalance) {\\n        uint256 length = locks[account].length;\\n        for (uint256 i; i != length; ++i) {\\n            LockDetails memory lock = locks[account][i];\\n            if (lock.unlockTime > block.timestamp) {\\n                fullyVestedBalance += FullMath.mulDiv(lock.amount, lock.lockPeriod, MAX_LOCK_TIME);\\n            }\\n        }\\n    }\\n\\n    /**\\n    * @dev Returns the total locked balance of an account.\\n    * @param account The address of the account.\\n    * @return The total locked balance of the account.\\n    */\\n    function getLockedBalance(address account) public view returns (uint256) {\\n        uint256 lockedBalance;\\n        uint256 length = locks[account].length;\\n        for (uint256 i; i != length; ++i) {\\n            LockDetails memory lock = locks[account][i];\\n            if (lock.unlockTime > block.timestamp) {\\n                lockedBalance += lock.amount;\\n            }\\n        }\\n        return lockedBalance;\\n    }\\n\\n    /**\\n    * @dev Returns the token id for the user\\n    * @param user The user address\\n    * @return tokenId token id owned by the user\\n    */\\n    function getUserTokenId(address user) public view returns(uint256 tokenId){\\n        if(positionManager.balanceOf(user) > 0) {\\n            tokenId = positionManager.tokenOfOwnerByIndex(user, 0);\\n        }\\n    }\\n\\n    /** Internal Functions */\\n    \\n    /**\\n    * @dev Returns the token balances for the specific bin.\\n    * @param depositIds Deposited bin id list.\\n    * @param liquidityMinted Liquidity minted for each bin.\\n    * @param poolPrice Oracle Price\\n    */\\n    function _getLiquidityTokenAmounts(uint256[] memory depositIds, uint256[] memory liquidityMinted, uint256 poolPrice) internal view returns(uint256 amountX, uint256 amountY) {\\n        if (depositIds.length != liquidityMinted.length) {\\n            revert LengthMismatch();\\n        }\\n        poolPrice = FullMath.mulDiv(poolPrice, 10 ** tokenYDecimals, 1e8);\\n        uint24 binId = lbPair.getIdFromPrice(PriceHelper.convertDecimalPriceTo128x128(poolPrice));\\n\\n        for (uint256 i; i < depositIds.length; ++i) {\\n            uint24 id = depositIds[i].safe24();\\n\\n            uint256 liquidity = liquidityMinted[i];\\n            (uint256 binReserveX, uint256 binReserveY) = lbPair.getBin(id);\\n\\n            // Get Current Pool price from id.\\n            uint256 currentPrice = PriceHelper.convert128x128PriceToDecimal(lbPair.getPriceFromId(id));\\n\\n            uint256 totalSupply = lbPair.totalSupply(id);\\n            uint256 xAmount = liquidity.mulDivRoundDown(binReserveX, totalSupply);\\n            uint256 yAmount = liquidity.mulDivRoundDown(binReserveY, totalSupply);\\n            if(binId > id) {\\n                xAmount = xAmount + FullMath.mulDiv(yAmount, 10 ** 18, currentPrice);\\n                yAmount = 0;\\n            } else if(binId < id) {\\n                yAmount = yAmount + FullMath.mulDiv(xAmount, currentPrice, 10 ** 18);\\n                xAmount = 0;\\n            } \\n\\n            amountX += xAmount;\\n            amountY += yAmount;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the total weight of tokens in a liquidity pair.\\n     * @param amountX Token X Amount.\\n     * @param amountY Token Y Amount.\\n     * @return weight The total weight of the tokens.\\n     */\\n    function _getTotalInTokenY(uint256 amountX, uint256 amountY) internal view returns(uint256 weight) {\\n        uint256 amountXToY = _getTokenYFromTokenX(amountX);\\n        weight = amountY + amountXToY;\\n    }\\n\\n    function getPoolPrice() public view returns(uint256) {\\n        uint256 price = PriceHelper.convert128x128PriceToDecimal(lbPair.getPriceFromId(lbPair.getActiveId()));\\n        return FullMath.mulDiv(price, 1e8, 1e18);\\n    }\\n\\n    /**\\n     * @dev Returns the estimated token Y amount from token X.\\n     * @param amountX Token X Amount.\\n     * @return amountY Token Y Amount to return.\\n     */\\n    function _getTokenYFromTokenX(uint256 amountX) internal view returns(uint256 amountY) {\\n        (uint128 reserveA, uint128 reserveB) = lbPair.getReserves();\\n        if(reserveA > 0 || reserveB > 0) {\\n            uint256 price = PriceHelper.convert128x128PriceToDecimal(lbPair.getPriceFromId(lbPair.getActiveId()));\\n            // Swap For Y : Convert token X to token Y\\n            amountY = amountX * price / 1e18;\\n        } else {\\n            amountY = 0;\\n        }\\n    }\\n\\n    /**\\n    * @dev Returns the updated amounts of tokens.\\n    * @return amountX The updated amount of token X.\\n    * @return amountY The updated amount of token Y.\\n    */\\n    function _swapForEqualValues(uint256 amountX, uint256 amountY, uint256 swapSlippage) internal returns(uint256, uint256) {\\n        uint256 amountXToY = _getTokenYFromTokenX(amountX);\\n        bool swapTokenX = amountY < amountXToY;\\n        uint256 diff = swapTokenX ? amountXToY - amountY : amountY - amountXToY;\\n        // (amountXToY != 0 || amountX == 0) for excluding the initial LP deposit\\n        if(FullMath.mulDiv(amountY, _REBALANCE_MARGIN, _DENOMINATOR) < diff && (amountXToY > 0 || amountX == 0)) {\\n            uint256 amountIn;\\n            {\\n                uint256 price = PriceHelper.convert128x128PriceToDecimal(lbPair.getPriceFromId(lbPair.getActiveId()));\\n                // Swap For X : Convert token Y to token X\\n                amountIn = FullMath.mulDiv(diff / 2, 1e18, price);\\n            }\\n\\n            uint256 amountOut = diff / 2; \\n\\n            (amountIn, amountOut) = swapTokenX ? (amountIn, amountOut) : (amountOut, amountIn);\\n            IERC20[] memory tokenPathDynamic = new IERC20[](2);\\n            if (swapTokenX) {\\n                tokenPathDynamic[0] = tokenX;\\n                tokenPathDynamic[1] = tokenY;\\n                tokenX.safeApprove(traderJoeV2Router, 0);\\n                tokenX.safeApprove(traderJoeV2Router, amountIn);\\n            } else {\\n                tokenPathDynamic[0] = tokenY;\\n                tokenPathDynamic[1] = tokenX;\\n                tokenY.safeApprove(traderJoeV2Router, 0);\\n                tokenY.safeApprove(traderJoeV2Router, amountIn);\\n            }\\n\\n            ILBRouter.Version[] memory versionsDynamic = new ILBRouter.Version[](1);\\n            versionsDynamic[0] = ILBRouter.Version.V2_2;\\n\\n            uint256[] memory binStepsDynamic = new uint256[](1);\\n            binStepsDynamic[0] = DEFAULT_BIN_STEP;\\n\\n            ILBRouter.Path memory path = ILBRouter.Path({\\n                pairBinSteps: binStepsDynamic,\\n                versions: versionsDynamic,\\n                tokenPath: tokenPathDynamic\\n            });\\n            amountOut = ILBRouter(traderJoeV2Router).swapExactTokensForTokens(amountIn, amountOut * (_DENOMINATOR - swapSlippage) / _DENOMINATOR, path, address(this), block.timestamp);\\n            (amountX, amountY) = swapTokenX ? (amountX - amountIn,amountY + amountOut) : (amountX + amountOut, amountY - amountIn);\\n        }\\n        return (amountX, amountY);\\n    }\\n\\n    /**\\n    * @dev Returns the liquidity configurations for the given range.\\n    * @param centerId The active id of the pair.\\n    * @return liquidityConfigs The liquidity configurations for the given range.\\n    * @return depositIds Deposit ID list.\\n    */\\n    function _encodeDepositConfigs(uint256 centerId) internal view returns (bytes32[] memory liquidityConfigs, uint256[] memory depositIds) {\\n        uint256 length = depositForm.length;\\n        liquidityConfigs = new bytes32[](length);\\n        depositIds = new uint256[](length);\\n        for (uint256 i = 0; i < length; ++i) {\\n            DepositForm memory config = depositForm[i];\\n            int256 _id = int256(centerId) + config.deltaId;\\n            if (!(_id >= 0 && uint256(_id) <= type(uint24).max)) {\\n                revert Overflow();\\n            }\\n            depositIds[i] = uint256(_id);\\n            liquidityConfigs[i] = LiquidityConfigurations.encodeParams(config.distributionX, config.distributionY, uint24(uint256(_id)));\\n        }\\n    }\\n\\n    /**\\n    * @dev Withdraws tokens from the Liquidity Book Pair.\\n    * @param user User address to withdraw\\n    * @param depositIds Deposit ID list.\\n    * @param liquidityMinted The amount of ids to withdraw.\\n    * @param share sPrime amount to withdraw.\\n    * @return balanceX The amount of token X received.\\n    * @return balanceY The amount of token Y received.\\n    */\\n    function _withdrawFromLB(address user, uint256[] memory depositIds, uint256[] memory liquidityMinted, uint256 share) internal returns (uint256 balanceX, uint256 balanceY, uint256[] memory liquidityAmounts) {\\n        if (depositIds.length != liquidityMinted.length) {\\n            revert LengthMismatch();\\n        }\\n\\n        uint256 length;\\n        uint256 totalShare = balanceOf(user);\\n        // Get the lbPair address and the delta between the upper and lower range.\\n        uint256 delta = depositIds.length;\\n\\n        uint256[] memory ids = new uint256[](delta);\\n        uint256[] memory amounts = new uint256[](delta);\\n        liquidityAmounts  = new uint256[](delta);\\n\\n        // Get the ids and amounts of the tokens to withdraw.\\n        for (uint256 i; i < delta;) {\\n            uint256 id = depositIds[i];\\n            liquidityAmounts[i] = FullMath.mulDiv(liquidityMinted[i], share, totalShare);\\n            if (liquidityAmounts[i] != 0) {\\n                ids[length] = id;\\n                amounts[length] = liquidityAmounts[i];\\n\\n                unchecked {\\n                    ++length;\\n                }\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 balanceXBefore = tokenX.balanceOf(address(this));\\n        uint256 balanceYBefore = tokenY.balanceOf(address(this));\\n\\n        // If the range is not empty, burn the tokens from the lbPair.\\n        if (length > 0) {\\n            // If the length is different than the delta, update the arrays, this allows to avoid the zero share error.\\n            if (length != delta) {\\n                assembly {\\n                    mstore(ids, length)\\n                    mstore(amounts, length)\\n                }\\n            }\\n\\n            lbPair.burn(address(this), address(this), ids, amounts);\\n        }\\n\\n        // Get the amount of tokens in the sPrime contract.\\n        balanceX = tokenX.balanceOf(address(this)) - balanceXBefore;\\n        balanceY = tokenY.balanceOf(address(this)) - balanceYBefore;\\n    }\\n\\n    /**\\n     * @dev Deposits tokens into the lbPair.\\n     * @param user The user address to receive sPrime.\\n     * @param centerId The active Id.\\n     */\\n    function _depositToLB(address user, uint256 centerId) internal {\\n        IPositionManager.DepositConfig memory depositConfig = positionManager.getDepositConfig(centerId);\\n        if(depositConfig.depositIds.length == 0) {\\n            (depositConfig.liquidityConfigs, depositConfig.depositIds) = _encodeDepositConfigs(centerId);\\n        }\\n\\n        // Mint the liquidity tokens.\\n        (bytes32 amountsReceived, bytes32 amountsLeft, uint256[] memory liquidityMinted) = lbPair.mint(address(this), depositConfig.liquidityConfigs, user);\\n        \\n        uint256 share = _getTotalInTokenY(amountsReceived.decodeX() - amountsLeft.decodeX(), amountsReceived.decodeY() - amountsLeft.decodeY());\\n        uint256 tokenId = getUserTokenId(user);\\n        if(tokenId == 0) {\\n            tokenId = positionManager.mint(IPositionManager.MintParams({\\n                recipient: user,\\n                totalShare: share,\\n                centerId: centerId,\\n                liquidityMinted: liquidityMinted,\\n                liquidityConfigs: depositConfig.liquidityConfigs,\\n                depositIds: depositConfig.depositIds\\n            }));\\n        } else  {\\n            positionManager.update(IPositionManager.UpdateParams({\\n                tokenId: tokenId,\\n                share: share,\\n                liquidityAmounts: liquidityMinted,\\n                isAdd: true\\n            }));\\n        }\\n        _mint(user, share);\\n    }\\n\\n    /**\\n    * @dev Internal function to transfer tokens between addresses.\\n    * @param from The address from which tokens are being transferred.\\n    * @param to The address to which tokens are being transferred.\\n    * @param amountX The amount of token X to transfer.\\n    * @param amountY The amount of token Y to transfer.\\n    */\\n    function _transferTokens(address from, address to, uint256 amountX, uint256 amountY) internal {\\n        if(from == address(this)) {\\n            if(amountX > 0) tokenX.safeTransfer(to, amountX);\\n            if(amountY > 0) tokenY.safeTransfer(to, amountY);\\n        } else {\\n            if(amountX > 0) tokenX.safeTransferFrom(from, to, amountX);\\n            if(amountY > 0) tokenY.safeTransferFrom(from, to, amountY);\\n        }\\n    }\\n\\n\\n    /** Public And External Functions */\\n\\n    /**\\n    * @dev Users can use deposit function for depositing tokens to the specific bin.\\n    * @param activeIdDesired The active id that user wants to add liquidity from\\n    * @param idSlippage The number of id that are allowed to slip\\n    * @param amountX The amount of token X to deposit.\\n    * @param amountY The amount of token Y to deposit.\\n    * @param isRebalance Rebalance the existing position with deposit.\\n    * @param swapSlippage Slippage for the rebalance.\\n    */\\n    function deposit(uint256 activeIdDesired, uint256 idSlippage, uint256 amountX, uint256 amountY, bool isRebalance, uint256 swapSlippage) public nonReentrant {\\n        _transferTokens(_msgSender(), address(this), amountX, amountY);\\n\\n        _deposit(_msgSender(), activeIdDesired, idSlippage, amountX, amountY, isRebalance, swapSlippage);\\n\\n        notifyVPrimeController(_msgSender());\\n    }\\n\\n\\n    function _deposit(address user, uint256 activeIdDesired, uint256 idSlippage, uint256 amountX, uint256 amountY, bool isRebalance, uint256 swapSlippage) internal {\\n\\n        if (swapSlippage > _MAX_SLIPPAGE) {\\n            revert SlippageTooHigh();\\n        }\\n\\n        uint256 tokenId = getUserTokenId(user);\\n        uint256 activeId = lbPair.getActiveId();\\n        if(tokenId > 0) {\\n            (,,, uint256 share, uint256 centerId, uint256[] memory liquidityMinted) = positionManager.positions(tokenId);\\n            activeId = centerId;\\n            if(isRebalance) { // Withdraw Position For Rebalance\\n                IPositionManager.DepositConfig memory depositConfig = positionManager.getDepositConfig(centerId);\\n                (uint256 amountXBefore, uint256 amountYBefore, ) = _withdrawFromLB(user, depositConfig.depositIds, liquidityMinted, share);\\n                \\n                positionManager.burn(tokenId);   \\n                _burn(user, share);\\n\\n                (amountX, amountY) = (amountX + amountXBefore, amountY + amountYBefore);\\n                tokenId = 0;\\n            }\\n        }\\n        (amountX, amountY) = _swapForEqualValues(amountX, amountY, swapSlippage);\\n        \\n        // Revert if active id moved without rebalancing\\n        if (!(activeId == lbPair.getActiveId() || tokenId == 0)) {\\n            revert BinIdChanged();\\n        }\\n        activeId = lbPair.getActiveId();\\n\\n        if (!(activeIdDesired + idSlippage >= activeId && activeId + idSlippage >= activeIdDesired)) {\\n            revert SlippageTooHigh();\\n        }\\n\\n        _transferTokens(address(this), address(lbPair), amountX, amountY);\\n        _depositToLB(user, activeId);\\n    }\\n\\n    /**\\n    * @dev Users can use deposit function for depositing tokens to the specific bin.\\n    * @param user The active id that user wants to add liquidity from\\n    * @param percentForLocks sPrime amount % to lock\\n    * @param lockPeriods Lock period to Lock for each amount\\n    * @param amountX The amount of token X to deposit.\\n    * @param amountY The amount of token Y to deposit.\\n    * @param activeIdDesired Desired bin id.\\n    * @param idSlippage Bin id slippage from the active id.\\n    */\\n    function mintForUserAndLock(address user, uint256[] calldata percentForLocks, uint256[] calldata lockPeriods, uint256 amountX, uint256 amountY, uint256 activeIdDesired, uint256 idSlippage) public onlyOperator nonReentrant {\\n        if (percentForLocks.length != lockPeriods.length) {\\n            revert LengthMismatch();\\n        }\\n        \\n        uint256 oldBalance = balanceOf(user);\\n        _transferTokens(_msgSender(), address(this), amountX, amountY);\\n        _deposit(user, activeIdDesired, idSlippage, amountX, amountY, true, _MAX_SLIPPAGE);\\n        if (balanceOf(user) < oldBalance) {\\n            revert NegativeMint();\\n        }\\n\\n        uint256 totalLock;\\n        for(uint8 i = 0 ; i < lockPeriods.length ; i ++) {\\n            totalLock += percentForLocks[i];\\n        }\\n        if (totalLock != 100) {\\n            revert ShouldLock100Percent();\\n        }\\n        \\n        uint256 balance = balanceOf(user) - oldBalance;\\n        totalLock = 0;\\n        for(uint8 i = 0 ; i < lockPeriods.length ; i ++) {\\n            if (lockPeriods[i] > MAX_LOCK_TIME) {\\n                revert MaxLockTimeExceeded();\\n            }\\n            // Should minus from total balance to avoid the round issue\\n            uint256 amount = i == lockPeriods.length - 1 ? balance - totalLock : balance * percentForLocks[i] / 100;\\n            locks[user].push(LockDetails({\\n                lockPeriod: lockPeriods[i],\\n                amount: amount,\\n                unlockTime: block.timestamp + lockPeriods[i]\\n            }));\\n            totalLock += amount;\\n        }\\n\\n        notifyVPrimeController(user);\\n    }\\n\\n    /**\\n    * @dev Users can use deposit function for depositing tokens to the specific bin.\\n    * @param ids Depoisit Ids from TraderJoe\\n    * @param amounts Minted LBT amount for each deposit id\\n    * @param activeIdDesired The active id that user wants to add liquidity from\\n    * @param idSlippage The number of id that are allowed to slip\\n    * @param swapSlippage Slippage for the rebalance.\\n    */\\n    function migrateLiquidity(uint256[] calldata ids, uint256[] calldata amounts, uint256 activeIdDesired, uint256 idSlippage, uint256 swapSlippage) public nonReentrant {\\n        uint256 balanceXBefore = tokenX.balanceOf(address(this));\\n        uint256 balanceYBefore = tokenY.balanceOf(address(this));\\n\\n        lbPair.burn(_msgSender(), address(this), ids, amounts);\\n\\n        _deposit(_msgSender(), activeIdDesired, idSlippage, tokenX.balanceOf(address(this)) - balanceXBefore, tokenY.balanceOf(address(this)) - balanceYBefore, true, swapSlippage);\\n\\n        notifyVPrimeController(_msgSender());\\n    }\\n\\n    /**\\n    * @dev Users can use withdraw function for withdrawing their share.\\n    * @param share Amount to withdraw\\n    */\\n    function withdraw(uint256 share) external nonReentrant {\\n        uint256 tokenId = getUserTokenId(_msgSender());\\n        if (tokenId == 0) {\\n            revert NoPosition();\\n        }\\n\\n        (,,,, uint256 centerId, uint256[] memory liquidityMinted) = positionManager.positions(tokenId);\\n        IPositionManager.DepositConfig memory depositConfig = positionManager.getDepositConfig(centerId);\\n\\n        uint256 lockedBalance = getLockedBalance(_msgSender());\\n        if (balanceOf(_msgSender()) < share + lockedBalance) {\\n            revert BalanceIsLocked();\\n        }\\n\\n        (uint256 amountX, uint256 amountY, uint256[] memory liquidityAmounts) = _withdrawFromLB(_msgSender(), depositConfig.depositIds, liquidityMinted, share);\\n\\n        positionManager.update(IPositionManager.UpdateParams({\\n            tokenId: tokenId,\\n            share: share,\\n            liquidityAmounts: liquidityAmounts,\\n            isAdd: false\\n        }));\\n\\n        // Burn Position NFT\\n        if(balanceOf(_msgSender()) == share) {\\n            positionManager.burn(tokenId);\\n        }\\n\\n        // Send the tokens to the user.\\n        _transferTokens(address(this), _msgSender(), amountX, amountY);\\n\\n        _burn(_msgSender(), share);\\n\\n        notifyVPrimeController(_msgSender());\\n    }\\n\\n    /**\\n    * @dev Locks a specified amount of balance for a specified lock period.\\n    * @param amount The amount of balance to be locked.\\n    * @param lockPeriod The duration for which the balance will be locked.\\n    */\\n    function lockBalance(uint256 amount, uint256 lockPeriod) public nonReentrant {\\n        uint256 lockedBalance = getLockedBalance(_msgSender());\\n        if (balanceOf(_msgSender()) < amount + lockedBalance) {\\n            revert InsufficientBalance();\\n        }\\n        if (lockPeriod > MAX_LOCK_TIME) {\\n            revert MaxLockTimeExceeded();\\n        }\\n        locks[_msgSender()].push(LockDetails({\\n            lockPeriod: lockPeriod,\\n            amount: amount,\\n            unlockTime: block.timestamp + lockPeriod\\n        }));\\n\\n        notifyVPrimeController(_msgSender());\\n    }\\n\\n    /**\\n    * @dev Claims the reward from TraderJoe v2.2 Base Reward Pool\\n    * @param receiver User address that will receive the collected reward.\\n    * @param ids Bin Id list to claim.\\n    */\\n    function claim(address receiver, uint256[] calldata ids) public onlyOwner nonReentrant {\\n        baseRewarder.claim(address(this), ids);\\n        IERC20Metadata rewardToken = IERC20Metadata(address(baseRewarder.getRewardToken()));\\n        uint256 reward = rewardToken.balanceOf(address(this));\\n        if(reward > 0) {\\n            rewardToken.safeTransfer(receiver, reward);\\n        }\\n    }\\n\\n    /** Overrided Functions */\\n\\n    /**\\n    * @dev The hook that happens before token transfer.\\n    * @param from The address to transfer from.\\n    * @param to The address to transfer to.\\n    * @param amount The amount to transfer.\\n    */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\\n        if(from != address(0) && to != address(0)) {\\n            uint256 lockedBalance = getLockedBalance(from);\\n            uint256 fromBalance = balanceOf(from);\\n            if (fromBalance < amount + lockedBalance) {\\n                revert InsufficientBalance();\\n            }\\n            if (getUserTokenId(to) != 0) {\\n                revert UserAlreadyHasPosition();\\n            }\\n            \\n            uint256 tokenId = getUserTokenId(from);\\n\\n            if(fromBalance == amount) {\\n                positionManager.forceTransfer(from, to, tokenId);\\n            } else {\\n                (,,,,uint256 centerId, uint256[] memory liquidityMinted) = positionManager.positions(tokenId);\\n                IPositionManager.DepositConfig memory depositConfig = positionManager.getDepositConfig(centerId);\\n                for(uint256 i = 0 ; i < liquidityMinted.length ; i ++) {\\n                    liquidityMinted[i] = FullMath.mulDiv(liquidityMinted[i], amount, fromBalance);\\n                }\\n\\n                positionManager.update(IPositionManager.UpdateParams({\\n                    tokenId: tokenId,\\n                    share: amount,\\n                    liquidityAmounts: liquidityMinted,\\n                    isAdd: false\\n                }));\\n\\n                positionManager.mint(IPositionManager.MintParams({\\n                    recipient: to,\\n                    totalShare: amount,\\n                    centerId: centerId,\\n                    liquidityMinted: liquidityMinted,\\n                    liquidityConfigs: depositConfig.liquidityConfigs,\\n                    depositIds: depositConfig.depositIds\\n                }));\\n            }\\n        }\\n    }\\n\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        if(from != address(0) && to != address(0)) {\\n            notifyVPrimeController(from);\\n            notifyVPrimeController(to);\\n        }\\n    }\\n\\n    function containsOracleCalldata() public pure returns (bool) {\\n        // Checking if the calldata ends with the RedStone marker\\n        bool hasValidRedstoneMarker;\\n        assembly {\\n            let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n            hasValidRedstoneMarker := eq(\\n                REDSTONE_MARKER_MASK,\\n                and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n            )\\n        }\\n        return hasValidRedstoneMarker;\\n    }\\n\\n    function notifyVPrimeController(address account) internal {\\n        if(address(vPrimeController) != address(0)){\\n            if(containsOracleCalldata()) {\\n                proxyCalldata(\\n                    address(vPrimeController),\\n                    abi.encodeWithSignature\\n                    (\\\"updateVPrimeSnapshot(address)\\\", account),\\n                    false\\n                );\\n            } else {\\n                vPrimeController.setUserNeedsUpdate(account);\\n            }\\n        }\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return tokenYDecimals;\\n    }\\n\\n    // CUSTOM ERRORS\\n    error InsufficientBalance();\\n    error BalanceIsLocked();\\n    error NoPosition();\\n    error LengthMismatch();\\n    error MaxLockTimeExceeded();\\n    error SlippageTooHigh();\\n    error BinIdChanged();\\n    error UserAlreadyHasPosition();\\n    error NegativeMint();\\n    error ShouldLock100Percent();\\n    error Unauthorized();\\n    error Overflow();\\n}\",\"keccak256\":\"0xe4dcf2e13b55f6765a1609117e8aafbcfe4ccee38bf97db27c82245c4cc3f41e\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506200001c62000022565b620000e3565b600054610100900460ff16156200008f5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811614620000e1576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b615fba80620000f36000396000f3fe608060405234801561001057600080fd5b50600436106102465760003560e01c8063045850b01461024b57806305e8746d1461026057806306fdde0314610283578063095ea7b3146102985780630b0ccc96146102bb5780630d1870df146102ce57806316dc165b146102d657806318160ddd146102e9578063191723ed146102fb5780631cbd50671461030e57806320d2a1131461032157806323b872dd146103345780632e1a7d4d14610347578063313ce5671461035a578063395093511461037a578063447ff2621461038d57806345718278146103a05780634671f215146103b357806355a547d5146103c7578063570ca735146103cf5780635bc6dab6146103e25780635f9c01b1146103f5578063625af7671461040657806370a0823114610419578063715018a61461042c578063791b98bc1461043457806379ba509714610447578063808d7c9b1461044f578063885a08e0146104625780638da5cb5b1461046a57806395d89b411461047257806397c82bc51461047a578063a457c2d71461048d578063a9059cbb146104a0578063b02d72e9146104b3578063b3ab15fb146104c7578063b425f802146104da578063b5db796114610508578063b7d19fc41461051b578063c40868931461052e578063c4ce635814610541578063d9197fe314610554578063da10610c14610567578063dd62ed3e14610578578063e30c39781461058b578063eddeebf314610593578063f2fde38b146105a6578063f4f357b1146105b9578063fa78668f146105cc578063fefd4e4f146105d7575b600080fd5b61025e610259366004614f58565b6105ea565b005b60ca546001600160a01b03165b60405161027a919061505b565b60405180910390f35b61028b610af1565b60405161027a91906150bf565b6102ab6102a63660046150d2565b610b83565b604051901515815260200161027a565b61025e6102c9366004615142565b610b9d565b6102ab610e69565b60ca5461026d906001600160a01b031681565b6099545b60405190815260200161027a565b61025e6103093660046151e4565b610e7d565b61025e61031c366004615206565b610f67565b6102ed61032f36600461528c565b6111fe565b6102ab6103423660046152a9565b61121c565b61025e6103553660046152ea565b611240565b60cb54600160a81b900460ff165b60405160ff909116815260200161027a565b6102ab6103883660046150d2565b6114e4565b60ce5461026d906001600160a01b031681565b61025e6103ae366004615303565b611506565b60cb5461036890600160a81b900460ff1681565b6102ed611692565b60d15461026d906001600160a01b031681565b60d25461026d906001600160a01b031681565b60cc546001600160a01b031661026d565b60cc5461026d906001600160a01b031681565b6102ed61042736600461528c565b6117aa565b61025e6117c5565b60cd5461026d906001600160a01b031681565b61025e6117d9565b61025e61045d36600461528c565b611868565b6102ed611892565b61026d611992565b61028b6119a1565b61025e61048836600461528c565b6119b0565b6102ab61049b3660046150d2565b6119da565b6102ab6104ae3660046150d2565b611a55565b60cb5461036890600160a01b900460ff1681565b61025e6104d536600461528c565b611a63565b6104ed6104e83660046150d2565b611a8d565b6040805193845260208401929092529082015260600161027a565b61025e610516366004615365565b611acf565b60cb5461026d906001600160a01b031681565b6102ed61053c36600461528c565b611b0c565b6102ed61054f36600461528c565b611bcb565b6102ab61056236600461528c565b611c98565b60cb546001600160a01b031661026d565b6102ed6105863660046153ba565b611e24565b61026d611e4f565b6102ed6105a13660046150d2565b611e5e565b61025e6105b436600461528c565b611f9c565b60cf5461026d906001600160a01b031681565b6102ed6305a39a8081565b6102ed6105e536600461528c565b612063565b600054610100900460ff161580801561060a5750600054600160ff909116105b8061062b57506106193061215b565b15801561062b575060005460ff166001145b6106935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156106b6576000805461ff0019166101001790555b6106be61216a565b6106c6612199565b6106ee8660405180604001604052806006815260200165735072696d6560d01b8152506121c8565b60cf80546001600160a01b0319166001600160a01b03841690811790915560408051632233163960e21b81529051600092916388cc58e49160048083019260209291908290030181865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906153f3565b60405163704037bd60e01b81526001600160a01b038b811660048301528a811660248301526032604483015291925060009183169063704037bd90606401608060405180830381865afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190615410565b60208181015160cc80546001600160a01b0319166001600160a01b039092169182179055604080516305e8746d60e01b8152905193945090926305e8746d926004808401939192918290030181865afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087291906153f3565b60ca80546001600160a01b0319166001600160a01b0392831617905560cc5460408051633684184360e21b81529051919092169163da10610c9160048083019260209291908290030181865afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f491906153f3565b60cb80546001600160a01b0319166001600160a01b0392831617905560ca546040805163313ce56760e01b81529051919092169163313ce5679160048083019260209291908290030181865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610976919061549b565b60cb60146101000a81548160ff021916908360ff16021790555060cb60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a07919061549b565b60cb60156101000a81548160ff021916908360ff16021790555060005b86811015610a835760d0888883818110610a4057610a406154be565b835460018101855560009485526020909420606090910292909201926002029091019050610a6e82826154ed565b50508080610a7b90615555565b915050610a24565b505060cd80546001600160a01b0319166001600160a01b038616179055508015610ae7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6060609a8054610b009061556e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2c9061556e565b8015610b795780601f10610b4e57610100808354040283529160200191610b79565b820191906000526020600020905b815481529060010190602001808311610b5c57829003601f168201915b5050505050905090565b600033610b918185856121f9565b60019150505b92915050565b60d1546001600160a01b0316336001600160a01b031614610bd0576040516282b42960e81b815260040160405180910390fd5b610bd861231d565b868514610bfb576040516001621398b960e31b0319815260040160405180910390fd5b6000610c068a6117aa565b9050610c1433308787612376565b610c268a8484888860016101f4612407565b80610c308b6117aa565b1015610c4f5760405163301e24df60e01b815260040160405180910390fd5b6000805b60ff8116881115610c99578a8a8260ff16818110610c7357610c736154be565b9050602002013582610c8591906155a2565b915080610c91816155b5565b915050610c53565b5080606414610cbb5760405163ab3ea90d60e01b815260040160405180910390fd5b600082610cc78d6117aa565b610cd191906155d4565b90506000915060005b60ff8116891115610e48576305a39a808a8a8360ff16818110610cff57610cff6154be565b905060200201351115610d2557604051636f9a2cd560e11b815260040160405180910390fd5b6000610d3260018b6155d4565b8260ff1614610d735760648d8d8460ff16818110610d5257610d526154be565b9050602002013584610d6491906155e7565b610d6e9190615614565b610d7d565b610d7d84846155d4565b6001600160a01b038f16600090815260c9602052604090819020815160608101909252919250808d8d60ff8716818110610db957610db96154be565b9050602002013581526020018381526020018d8d8660ff16818110610de057610de06154be565b9050602002013542610df291906155a2565b905281546001818101845560009384526020938490208351600390930201918255928201519281019290925560400151600290910155610e3281856155a2565b9350508080610e40906155b5565b915050610cda565b50610e528c6127e8565b505050610e5e60018055565b505050505050505050565b6602ed57011e0000601f1936013581161490565b610e8561231d565b6000610e9033611b0c565b9050610e9c81846155a2565b610ea5336117aa565b1015610ec457604051631e9acf1760e31b815260040160405180910390fd5b6305a39a80821115610ee957604051636f9a2cd560e11b815260040160405180910390fd5b33600090815260c960209081526040918290208251606081018452858152918201869052918101610f1a85426155a2565b905281546001808201845560009384526020938490208351600390930201918255928201519281019290925560400151600290910155610f59336127e8565b50610f6360018055565b5050565b610f6f61231d565b60ca546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610fa090309060040161505b565b602060405180830381865afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190615636565b60cb546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061101790309060040161505b565b602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190615636565b60cc546040516364c9cfaf60e11b81529192506001600160a01b03169063c9939f5e9061109390339030908e908e908e908e90600401615681565b6000604051808303816000875af11580156110b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110da919081019061574f565b506111e13360ca546040516370a0823160e01b81528891889187916001600160a01b0316906370a082319061111390309060040161505b565b602060405180830381865afa158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111549190615636565b61115e91906155d4565b60cb546040516370a0823160e01b815287916001600160a01b0316906370a082319061118e90309060040161505b565b602060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf9190615636565b6111d991906155d4565b600189612407565b6111ea336127e8565b50506111f560018055565b50505050505050565b600080611209611892565b90506112158382611e5e565b9392505050565b60003361122a8582856128c4565b611235858585612938565b506001949350505050565b61124861231d565b600061125333612063565b90508060000361127657604051632afc3c0d60e21b815260040160405180910390fd5b60cd5460405163133f757160e31b81526004810183905260009182916001600160a01b03909116906399fbab8890602401600060405180830381865afa1580156112c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ec9190810190615783565b60cd5460405163b91e526f60e01b815260048101849052929850909650600095506001600160a01b0316935063b91e526f92506024019050600060405180830381865afa158015611341573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611369919081019061580d565b9050600061137633611b0c565b905061138281876155a2565b61138b336117aa565b10156113aa576040516385c6c5d360e01b815260040160405180910390fd5b600080806113bb338651888c612ae2565b60cd54604080516080810182528d8152602081018f90528082018490526000606082015290516325f9c4dd60e21b81529497509295509093506001600160a01b0316916397e7137491611410916004016158ee565b600060405180830381600087803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050508861144d6104273390565b036114b15760cd54604051630852cd8d60e31b8152600481018a90526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b505050505b6114bd30338585612376565b6114c7338a612f6d565b6114d0336127e8565b50505050505050506114e160018055565b50565b600033610b918185856114f78383611e24565b61150191906155a2565b6121f9565b61150e6130a2565b61151661231d565b60d2546040516308ae304f60e31b81526001600160a01b039091169063457182789061154a90309086908690600401615936565b600060405180830381600087803b15801561156457600080fd5b505af1158015611578573d6000803e3d6000fd5b50505050600060d260009054906101000a90046001600160a01b03166001600160a01b03166369940d796040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f591906153f3565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611625919061505b565b602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116669190615636565b90508015611682576116826001600160a01b0383168683613101565b505061168d60018055565b505050565b60008061169d613157565b905060006116aa826131fe565b61ffff169050806000036116d157604051632154bfcf60e21b815260040160405180910390fd5b6116dc6002836155a2565b915060005b818110156117a45760006116f484613238565b90506000806117046068876155a2565b9050600061171282366155d4565b9050803592508265ffffffffffff1660000361174157604051630336dc9d60e41b815260040160405180910390fd5b87600003611759578265ffffffffffff169750611781565b878365ffffffffffff16146117815760405163d9d1f46560e01b815260040160405180910390fd5b61178b84886155a2565b965050505050808061179c90615555565b9150506116e1565b50505090565b6001600160a01b031660009081526097602052604090205490565b6117cd6130a2565b6117d76000613274565b565b60006117e36132c6565b9050336001600160a01b038216146118555760405162461bcd60e51b815260206004820152602f60248201527f50656e64696e674f776e61626c653a2063616c6c6572206973206e6f7420746860448201526e32903832b73234b7339037bbb732b960891b606482015260840161068a565b61185e81613274565b6114e160006132d9565b6118706130a2565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b60cc54604080516336f997b760e21b815290516000928392611973926001600160a01b0390921691634c7cffbd91839163dbe65edc916004808201926020929091908290030181865afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611911919061595b565b6040518263ffffffff1660e01b815260040161192d9190615980565b602060405180830381865afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e9190615636565b6132eb565b905061198c816305f5e100670de0b6b3a7640000613301565b91505090565b6065546001600160a01b031690565b6060609b8054610b009061556e565b6119b86130a2565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b600033816119e88286611e24565b905083811015611a485760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161068a565b61123582868684036121f9565b600033610b91818585612938565b611a6b6130a2565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60c96020528160005260406000208181548110611aa957600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b611ad761231d565b611ae333308686612376565b611af233878787878787612407565b611afb336127e8565b611b0460018055565b505050505050565b6001600160a01b038116600090815260c960205260408120548190815b818114611bc2576001600160a01b038516600090815260c960205260408120805483908110611b5a57611b5a6154be565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090504281604001511115611bb1576020810151611bae90856155a2565b93505b50611bbb81615555565b9050611b29565b50909392505050565b6001600160a01b038116600090815260c96020526040812054815b818114611c91576001600160a01b038416600090815260c960205260408120805483908110611c1757611c176154be565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090504281604001511115611c8057611c73816020015182600001516305a39a80613301565b611c7d90856155a2565b93505b50611c8a81615555565b9050611be6565b5050919050565b600080611ca483612063565b905080600003611cc757604051632afc3c0d60e21b815260040160405180910390fd5b60cd546040516312431a6360e01b8152600481018390526000916001600160a01b0316906312431a6390602401600060405180830381865afa158015611d11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d39919081019061580d565b805160cc54604080516336f997b760e21b8152905193945091926000926001600160a01b039092169163dbe65edc9160048083019260209291908290030181865afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db0919061595b565b62ffffff1690508082600081518110611dcb57611dcb6154be565b602002602001015111158015611e075750808260018451611dec91906155d4565b81518110611dfc57611dfc6154be565b602002602001015110155b15611e185750600195945050505050565b50600095945050505050565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b6000611e596132c6565b905090565b60cd54600090819081906001600160a01b03166399fbab88611e7f87612063565b6040518263ffffffff1660e01b8152600401611e9d91815260200190565b600060405180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ee29190810190615783565b60cd5460405163b91e526f60e01b815260048101849052929850909650600095506001600160a01b0316935063b91e526f92506024019050600060405180830381865afa158015611f37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5f919081019061580d565b9050600080611f738360000151858961347a565b91509150611f8682886305f5e100613301565b611f9090826155a2565b98975050505050505050565b611fa46130a2565b6001600160a01b0381166120105760405162461bcd60e51b815260206004820152602d60248201527f50656e64696e674f776e61626c653a206e6577206f776e65722069732074686560448201526c207a65726f206164647265737360981b606482015260840161068a565b612019816132d9565b806001600160a01b031661202b611992565b6001600160a01b03167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60cd546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061209890869060040161505b565b602060405180830381865afa1580156120b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d99190615636565b11156121565760cd54604051632f745c5960e01b81526001600160a01b0390911690632f745c5990612112908590600090600401615990565b602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121539190615636565b90505b919050565b6001600160a01b03163b151590565b600054610100900460ff166121915760405162461bcd60e51b815260040161068a906159a9565b6117d761379e565b600054610100900460ff166121c05760405162461bcd60e51b815260040161068a906159a9565b6117d76137cd565b600054610100900460ff166121ef5760405162461bcd60e51b815260040161068a906159a9565b610f6382826137f4565b6001600160a01b03831661225b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161068a565b6001600160a01b0382166122bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161068a565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60026001540361236f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068a565b6002600155565b306001600160a01b038516036123c55781156123a35760ca546123a3906001600160a01b03168484613101565b80156123c05760cb546123c0906001600160a01b03168483613101565b612401565b81156123e35760ca546123e3906001600160a01b0316858585613834565b80156124015760cb54612401906001600160a01b0316858584613834565b50505050565b6101f481111561242a5760405163428637bb60e11b815260040160405180910390fd5b600061243588612063565b9050600060cc60009054906101000a90046001600160a01b03166001600160a01b031663dbe65edc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561248c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b0919061595b565b62ffffff169050811561265e5760cd5460405163133f757160e31b815260048101849052600091829182916001600160a01b0316906399fbab8890602401600060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125339190810190615783565b955095509550505050819350861561265a5760cd5460405163b91e526f60e01b8152600481018490526000916001600160a01b03169063b91e526f90602401600060405180830381865afa15801561258f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125b7919081019061580d565b90506000806125cc8f84600001518689612ae2565b5060cd54604051630852cd8d60e31b8152600481018c90529294509092506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561261757600080fd5b505af115801561262b573d6000803e3d6000fd5b505050506126398f87612f6d565b612643828d6155a2565b61264d828d6155a2565b909c509a50600097505050505b5050505b612669868685613855565b60cc54604080516336f997b760e21b815290519399509197506001600160a01b03169163dbe65edc916004808201926020929091908290030181865afa1580156126b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126db919061595b565b62ffffff168114806126eb575081155b612708576040516348fca9dd60e01b815260040160405180910390fd5b60cc60009054906101000a90046001600160a01b03166001600160a01b031663dbe65edc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f919061595b565b62ffffff16905080612791888a6155a2565b101580156127a85750876127a588836155a2565b10155b6127c55760405163428637bb60e11b815260040160405180910390fd5b60cc546127de9030906001600160a01b03168888612376565b610e5e8982613c83565b60ce546001600160a01b0316156114e157612801610e69565b156128595760ce54604051610f63916001600160a01b03169061282890849060240161505b565b60408051601f198184030181529190526020810180516001600160e01b0316636cec346160e01b1790526000613f4a565b60ce5460405163bf18c23960e01b81526001600160a01b039091169063bf18c2399061288990849060040161505b565b600060405180830381600087803b1580156128a357600080fd5b505af11580156128b7573d6000803e3d6000fd5b5050505050565b60018055565b60006128d08484611e24565b90506000198114612401578181101561292b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161068a565b61240184848484036121f9565b6001600160a01b03831661299c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161068a565b6001600160a01b0382166129fe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161068a565b612a09838383613fde565b6001600160a01b03831660009081526097602052604090205481811015612a815760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161068a565b6001600160a01b038085166000818152609760205260408082208686039055928616808252908390208054860190559151600080516020615f6583398151915290612acf9086815260200190565b60405180910390a3612401848484614373565b60008060608451865114612b0c576040516001621398b960e31b0319815260040160405180910390fd5b600080612b18896117aa565b88519091506000816001600160401b03811115612b3757612b37614ec7565b604051908082528060200260200182016040528015612b60578160200160208202803683370190505b5090506000826001600160401b03811115612b7d57612b7d614ec7565b604051908082528060200260200182016040528015612ba6578160200160208202803683370190505b509050826001600160401b03811115612bc157612bc1614ec7565b604051908082528060200260200182016040528015612bea578160200160208202803683370190505b50955060005b83811015612ce05760008c8281518110612c0c57612c0c6154be565b60200260200101519050612c3a8c8381518110612c2b57612c2b6154be565b60200260200101518c88613301565b888381518110612c4c57612c4c6154be565b602002602001018181525050878281518110612c6a57612c6a6154be565b6020026020010151600014612cd75780848881518110612c8c57612c8c6154be565b602002602001018181525050878281518110612caa57612caa6154be565b6020026020010151838881518110612cc457612cc46154be565b6020026020010181815250508660010196505b50600101612bf0565b5060ca546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612d1290309060040161505b565b602060405180830381865afa158015612d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d539190615636565b60cb546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612d8990309060040161505b565b602060405180830381865afa158015612da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dca9190615636565b90508615612e5f57848714612de0578684528683525b60cc546040516364c9cfaf60e11b81526001600160a01b039091169063c9939f5e90612e169030908190899089906004016159f4565b6000604051808303816000875af1158015612e35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e5d919081019061574f565b505b60ca546040516370a0823160e01b815283916001600160a01b0316906370a0823190612e8f90309060040161505b565b602060405180830381865afa158015612eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed09190615636565b612eda91906155d4565b60cb546040516370a0823160e01b8152919b5082916001600160a01b03909116906370a0823190612f0f90309060040161505b565b602060405180830381865afa158015612f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f509190615636565b612f5a91906155d4565b9850505050505050509450945094915050565b6001600160a01b038216612fcd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161068a565b612fd982600083613fde565b6001600160a01b0382166000908152609760205260409020548181101561304d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161068a565b6001600160a01b0383166000818152609760209081526040808320868603905560998054879003905551858152919291600080516020615f65833981519152910160405180910390a361168d83600084614373565b336130ab611992565b6001600160a01b0316146117d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068a565b61168d8363a9059cbb60e01b8484604051602401613120929190615990565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143aa565b60006602ed57011e0000601f1936013581161480613188576040516373bb264f60e11b815260040160405180910390fd5b600036602911156131ac57604051632bcb7bc560e11b815260040160405180910390fd5b50602819360135600060096131c7600362ffffff85166155a2565b6131d191906155a2565b9050366131df6002836155a2565b11156112155760405163c30a7bd760e01b815260040160405180910390fd5b60008061320c6020846155a2565b90503681111561322f57604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b60008060006132468461447f565b9092509050604e6132588260206155a2565b61326290846155e7565b61326c91906155a2565b949350505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080516020615f458339815191525490565b600080516020615f4583398151915255565b600061215382670de0b6b3a764000060806144d6565b600080806000198587098587029250828110838203039150508060000361333a576000841161332f57600080fd5b508290049050611215565b80841161334657600080fd5b6000848688098084039381119092039190506000613366861960016155a2565b861695869004959384900493600081900304600101905061338781846155e7565b9093179260006133988760036155e7565b60021890506133a781886155e7565b6133b29060026155d4565b6133bc90826155e7565b90506133c881886155e7565b6133d39060026155d4565b6133dd90826155e7565b90506133e981886155e7565b6133f49060026155d4565b6133fe90826155e7565b905061340a81886155e7565b6134159060026155d4565b61341f90826155e7565b905061342b81886155e7565b6134369060026155d4565b61344090826155e7565b905061344c81886155e7565b6134579060026155d4565b61346190826155e7565b905061346d81866155e7565b9998505050505050505050565b60008083518551146134a2576040516001621398b960e31b0319815260040160405180910390fd5b60cb546134ca9084906134c090600160a81b900460ff16600a615b16565b6305f5e100613301565b60cc549093506000906001600160a01b031663f5e293296134ea86614544565b6040518263ffffffff1660e01b815260040161350891815260200190565b602060405180830381865afa158015613525573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613549919061595b565b905060005b865181101561379457600061357b88838151811061356e5761356e6154be565b602002602001015161455a565b90506000878381518110613591576135916154be565b602090810291909101015160cc54604051630157d2d160e31b815291925060009182916001600160a01b031690630abe9688906135d2908790600401615980565b6040805180830381865afa1580156135ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136129190615b3c565b60cc54604051634c7cffbd60e01b81526001600160801b03938416955091909216925060009161365c916001600160a01b0390911690634c7cffbd9061192d908990600401615980565b60cc5460405163bd85b03960e01b81529192506000916001600160a01b039091169063bd85b03990613692908990600401615980565b602060405180830381865afa1580156136af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d39190615636565b905060006136e2868684614580565b905060006136f1878685614580565b90508762ffffff168a62ffffff16111561372d5761371881670de0b6b3a764000086613301565b61372290836155a2565b915060009050613763565b8762ffffff168a62ffffff161015613763576137528285670de0b6b3a7640000613301565b61375c90826155a2565b9050600091505b61376d828d6155a2565b9b50613779818c6155a2565b9a5050505050505050508061378d90615555565b905061354e565b5050935093915050565b600054610100900460ff166137c55760405162461bcd60e51b815260040161068a906159a9565b6117d76145aa565b600054610100900460ff166128be5760405162461bcd60e51b815260040161068a906159a9565b600054610100900460ff1661381b5760405162461bcd60e51b815260040161068a906159a9565b609a6138278382615bb5565b50609b61168d8282615bb5565b612401846323b872dd60e01b85858560405160240161312093929190615c74565b6000806000613863866145da565b905080851060008161387e5761387983886155d4565b613888565b61388887846155d4565b90508061389a886101f4612710613301565b1080156138af575060008311806138af575087155b15613c775760cc54604080516336f997b760e21b81529051600092839261390f926001600160a01b0390921691634c7cffbd91839163dbe65edc916004808201926020929091908290030181865afa1580156118ed573d6000803e3d6000fd5b905061392e61391f600285615614565b670de0b6b3a764000083613301565b91506000905061393f600284615614565b90508361394d578082613950565b81815b604080516002808252606082018352939550919350600092906020830190803683370190505090508415613a1f5760ca5481516001600160a01b039091169082906000906139a0576139a06154be565b6001600160a01b03928316602091820292909201015260cb548251911690829060019081106139d1576139d16154be565b6001600160a01b03928316602091820292909201015260cf5460ca546139fd9290811691166000614709565b60cf5460ca54613a1a916001600160a01b03918216911685614709565b613abb565b60cb5481516001600160a01b03909116908290600090613a4157613a416154be565b6001600160a01b03928316602091820292909201015260ca54825191169082906001908110613a7257613a726154be565b6001600160a01b03928316602091820292909201015260cf5460cb54613a9e9290811691166000614709565b60cf5460cb54613abb916001600160a01b03918216911685614709565b60408051600180825281830190925260009160208083019080368337019050509050600381600081518110613af257613af26154be565b60200260200101906003811115613b0b57613b0b615c98565b90816003811115613b1e57613b1e615c98565b90525060408051600180825281830190925260009160208083019080368337019050509050603261ffff1681600081518110613b5c57613b5c6154be565b6020026020010181815250506000604051806060016040528083815260200184815260200185815250905060cf60009054906101000a90046001600160a01b03166001600160a01b0316632a443fae876127108f612710613bbd91906155d4565b613bc7908a6155e7565b613bd19190615614565b8430426040518663ffffffff1660e01b8152600401613bf4959493929190615ce7565b6020604051808303816000875af1158015613c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c379190615636565b945087613c5757613c48858f6155a2565b613c52878f6155d4565b613c6b565b613c61868f6155d4565b613c6b868f6155a2565b909e509c505050505050505b50959694955050505050565b60cd5460405163b91e526f60e01b8152600481018390526000916001600160a01b03169063b91e526f90602401600060405180830381865afa158015613ccd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613cf5919081019061580d565b805151909150600003613d1357613d0b8261480d565b825260208201525b60cc54602082015160405163383d15c560e01b8152600092839283926001600160a01b039092169163383d15c591613d52913091908b90600401615db9565b6000604051808303816000875af1158015613d71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d999190810190615dee565b9250925092506000613dfc613db4846001600160801b031690565b613dc7906001600160801b038716615e3e565b6001600160801b0316613dda8560801c90565b613de48760801c90565b613dee9190615e3e565b6001600160801b03166149ae565b90506000613e0988612063565b905080600003613ebf5760cd546040805160c0810182526001600160a01b038b8116825260208083018790528284018c9052606083018890528a01516080830152895160a0830152915163124f70a960e01b8152919092169163124f70a991613e759190600401615e65565b6020604051808303816000875af1158015613e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb89190615636565b9050613f40565b60cd5460408051608081018252838152602081018590528082018690526001606082015290516325f9c4dd60e21b81526001600160a01b03909216916397e7137491613f0d916004016158ee565b600060405180830381600087803b158015613f2757600080fd5b505af1158015613f3b573d6000803e3d6000fd5b505050505b610ae788836149c6565b60606000613f5784614a89565b9050600080866001600160a01b031685613f72576000613f74565b345b84604051613f829190615ee3565b60006040518083038185875af1925050503d8060008114613fbf576040519150601f19603f3d011682016040523d82523d6000602084013e613fc4565b606091505b5091509150613fd38282614b18565b979650505050505050565b6001600160a01b03831615801590613ffe57506001600160a01b03821615155b1561168d57600061400e84611b0c565b9050600061401b856117aa565b905061402782846155a2565b81101561404757604051631e9acf1760e31b815260040160405180910390fd5b61405084612063565b1561406e576040516335af998760e01b815260040160405180910390fd5b600061407986612063565b90508382036140ed5760cd546040516333bebb7760e01b81526001600160a01b03909116906333bebb77906140b690899089908690600401615c74565b600060405180830381600087803b1580156140d057600080fd5b505af11580156140e4573d6000803e3d6000fd5b50505050611b04565b60cd5460405163133f757160e31b81526004810183905260009182916001600160a01b03909116906399fbab8890602401600060405180830381865afa15801561413b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141639190810190615783565b60cd5460405163b91e526f60e01b815260048101849052929850909650600095506001600160a01b0316935063b91e526f92506024019050600060405180830381865afa1580156141b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141e0919081019061580d565b905060005b825181101561424157614212838281518110614203576142036154be565b60200260200101518988613301565b838281518110614224576142246154be565b60209081029190910101528061423981615555565b9150506141e5565b5060cd5460408051608081018252868152602081018a90528082018590526000606082015290516325f9c4dd60e21b81526001600160a01b03909216916397e7137491614290916004016158ee565b600060405180830381600087803b1580156142aa57600080fd5b505af11580156142be573d6000803e3d6000fd5b505060cd546040805160c0810182526001600160a01b038d8116825260208083018e90528284018a9052606083018990528701516080830152865160a0830152915163124f70a960e01b815291909216935063124f70a992506143249190600401615e65565b6020604051808303816000875af1158015614343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143679190615636565b50505050505050505050565b6001600160a01b0383161580159061439357506001600160a01b03821615155b1561168d576143a1836127e8565b61168d826127e8565b60006143ff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b959092919063ffffffff16565b90508051600014806144205750808060200190518101906144209190615eff565b61168d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161068a565b6000808080806144906041876155a2565b905060006144a96144a26020846155a2565b3690614ba4565b8035945090506144ba816003614ba4565b62ffffff9490941697933563ffffffff16965092945050505050565b60008060006144e58686614bb0565b91509150816000146144fb578360ff1682901c92505b801561453b57600160ff85161b811061452757604051638e471a8960e01b815260040160405180910390fd5b8360ff166101000361ffff1681901b830192505b50509392505050565b6000612153826080670de0b6b3a7640000614bcf565b8062ffffff8116811461215657604051639b63641560e01b815260040160405180910390fd5b600080600061458f8686614bb0565b915091506145a08686868585614bf5565b9695505050505050565b600054610100900460ff166145d15760405162461bcd60e51b815260040161068a906159a9565b6117d733613274565b600080600060cc60009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015614631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146559190615b3c565b915091506000826001600160801b0316118061467a57506000816001600160801b0316115b156146ff5760cc54604080516336f997b760e21b815290516000926146d8926001600160a01b0390911691634c7cffbd91839163dbe65edc916004808201926020929091908290030181865afa1580156118ed573d6000803e3d6000fd5b9050670de0b6b3a76400006146ed82876155e7565b6146f79190615614565b935050611c91565b5060009392505050565b8015806147835750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561475d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147819190615636565b155b6147ee5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161068a565b61168d8363095ea7b360e01b8484604051602401613120929190615990565b60d0546060908190806001600160401b0381111561482d5761482d614ec7565b604051908082528060200260200182016040528015614856578160200160208202803683370190505b509250806001600160401b0381111561487157614871614ec7565b60405190808252806020026020018201604052801561489a578160200160208202803683370190505b50915060005b818110156149a757600060d082815481106148bd576148bd6154be565b6000918252602080832060408051606081018252600290940290910180548085526001909101546001600160401b0380821694860194909452600160401b9004909216908301529092506149119088615f1c565b905060008112158015614927575062ffffff8111155b61494457604051631a93c68960e11b815260040160405180910390fd5b80858481518110614957576149576154be565b6020026020010181815250506149768260200151836040015183614ca5565b868481518110614988576149886154be565b6020026020010181815250505050806149a090615555565b90506148a0565b5050915091565b6000806149ba846145da565b905061326c81846155a2565b6001600160a01b038216614a1c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161068a565b614a2860008383613fde565b8060996000828254614a3a91906155a2565b90915550506001600160a01b038216600081815260976020908152604080832080548601905551848152600080516020615f65833981519152910160405180910390a3610f6360008383614373565b80516060906000614a98614cd5565b90506000614aa682846155a2565b905036821115614ac957604051632bcb7bc560e11b815260040160405180910390fd5b6060604051905081815285602001848101826020015b81831015614af7578251815260209283019201614adf565b50505082833603856020018301379190920181016020016040529392505050565b606082614b8f578151600003614b4157604051632b3ff13d60e11b815260040160405180910390fd5b602082015162461bcd60e51b148015614b74576040516301efd04f60e31b8152604484019061068a9082906004016150bf565b8260405163fd36fde360e01b815260040161068a91906150bf565b50919050565b606061326c8484600085614d40565b600061121582846155d4565b6000806000198385098385029250828110838203039150509250929050565b600060ff831684811b9061ffff6101008290031686901c906145a09087906001901b8685855b600081600003614c1657838381614c0e57614c0e6155fe565b049050614c9c565b838210614c36576040516313eae71560e01b815260040160405180910390fd5b60008486880960018619810187169687900496600081900381900490910186831190950394850291909503949094049390931792505060026003840281188085028203028085028203028085028203028085028203028085028203028085029091030282025b95945050505050565b601882901b6301000000600160581b0316605884901b600160581b600160981b03161762ffffff8216811761326c565b600080614ce0613157565b90506000614ced826131fe565b61ffff169050614cfe6002836155a2565b915060005b81811015614d38576000614d1684613238565b9050614d2281856155a2565b9350508080614d3090615555565b915050614d03565b509092915050565b606082471015614da15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161068a565b600080866001600160a01b03168587604051614dbd9190615ee3565b60006040518083038185875af1925050503d8060008114614dfa576040519150601f19603f3d011682016040523d82523d6000602084013e614dff565b606091505b5091509150613fd38783838760608315614e78578251600003614e7157614e258561215b565b614e715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068a565b508161326c565b61326c8383815115614e8d5781518083602001fd5b8060405162461bcd60e51b815260040161068a91906150bf565b6001600160a01b03811681146114e157600080fd5b803561215681614ea7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614f0557614f05614ec7565b604052919050565b60008083601f840112614f1f57600080fd5b5081356001600160401b03811115614f3657600080fd5b602083019150836020606083028501011115614f5157600080fd5b9250929050565b600080600080600080600060c0888a031215614f7357600080fd5b8735614f7e81614ea7565b9650602088810135614f8f81614ea7565b965060408901356001600160401b0380821115614fab57600080fd5b818b0191508b601f830112614fbf57600080fd5b813581811115614fd157614fd1614ec7565b614fe3601f8201601f19168501614edd565b8181528d85838601011115614ff757600080fd5b818585018683013760009181019094015291965060608a0135918083111561501e57600080fd5b505061502c8a828b01614f0d565b909550935061503f905060808901614ebc565b915061504d60a08901614ebc565b905092959891949750929550565b6001600160a01b0391909116815260200190565b60005b8381101561508a578181015183820152602001615072565b50506000910152565b600081518084526150ab81602086016020860161506f565b601f01601f19169290920160200192915050565b6020815260006112156020830184615093565b600080604083850312156150e557600080fd5b82356150f081614ea7565b946020939093013593505050565b60008083601f84011261511057600080fd5b5081356001600160401b0381111561512757600080fd5b6020830191508360208260051b8501011115614f5157600080fd5b600080600080600080600080600060e08a8c03121561516057600080fd5b893561516b81614ea7565b985060208a01356001600160401b038082111561518757600080fd5b6151938d838e016150fe565b909a50985060408c01359150808211156151ac57600080fd5b506151b98c828d016150fe565b9a9d999c50979a9799986060890135986080810135985060a0810135975060c0013595509350505050565b600080604083850312156151f757600080fd5b50508035926020909101359150565b600080600080600080600060a0888a03121561522157600080fd5b87356001600160401b038082111561523857600080fd5b6152448b838c016150fe565b909950975060208a013591508082111561525d57600080fd5b5061526a8a828b016150fe565b989b979a50986040810135976060820135975060809091013595509350505050565b60006020828403121561529e57600080fd5b813561121581614ea7565b6000806000606084860312156152be57600080fd5b83356152c981614ea7565b925060208401356152d981614ea7565b929592945050506040919091013590565b6000602082840312156152fc57600080fd5b5035919050565b60008060006040848603121561531857600080fd5b833561532381614ea7565b925060208401356001600160401b0381111561533e57600080fd5b61534a868287016150fe565b9497909650939450505050565b80151581146114e157600080fd5b60008060008060008060c0878903121561537e57600080fd5b8635955060208701359450604087013593506060870135925060808701356153a581615357565b8092505060a087013590509295509295509295565b600080604083850312156153cd57600080fd5b82356153d881614ea7565b915060208301356153e881614ea7565b809150509250929050565b60006020828403121561540557600080fd5b815161121581614ea7565b60006080828403121561542257600080fd5b604051608081016001600160401b038111828210171561544457615444614ec7565b604052825161ffff8116811461545957600080fd5b8152602083015161546981614ea7565b6020820152604083015161547c81615357565b6040820152606083015161548f81615357565b60608201529392505050565b6000602082840312156154ad57600080fd5b815160ff8116811461121557600080fd5b634e487b7160e01b600052603260045260246000fd5b600081356001600160401b0381168114610b9757600080fd5b81358155600181016001600160401b03615509602085016154d4565b8254911690600160401b600160801b03615525604087016154d4565b60401b168260018060801b03198316171783555050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016155675761556761553f565b5060010190565b600181811c9082168061558257607f821691505b602082108103614b8f57634e487b7160e01b600052602260045260246000fd5b80820180821115610b9757610b9761553f565b600060ff821660ff81036155cb576155cb61553f565b60010192915050565b81810381811115610b9757610b9761553f565b8082028115828204841417610b9757610b9761553f565b634e487b7160e01b600052601260045260246000fd5b60008261563157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561564857600080fd5b5051919050565b81835260006001600160fb1b0383111561566857600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b038781168252861660208201526080604082018190526000906156ae908301868861564f565b828103606084015261346d81858761564f565b60006001600160401b038211156156da576156da614ec7565b5060051b60200190565b600082601f8301126156f557600080fd5b8151602061570a615705836156c1565b614edd565b82815260059290921b8401810191818101908684111561572957600080fd5b8286015b84811015615744578051835291830191830161572d565b509695505050505050565b60006020828403121561576157600080fd5b81516001600160401b0381111561577757600080fd5b61326c848285016156e4565b60008060008060008060c0878903121561579c57600080fd5b86516157a781614ea7565b60208801519096506157b881614ea7565b60408801519095506157c981614ea7565b6060880151608089015160a08a015192965090945092506001600160401b038111156157f457600080fd5b61580089828a016156e4565b9150509295509295509295565b60006020828403121561581f57600080fd5b81516001600160401b038082111561583657600080fd5b908301906040828603121561584a57600080fd5b60405160408101818110838211171561586557615865614ec7565b60405282518281111561587757600080fd5b615883878286016156e4565b82525060208301518281111561589857600080fd5b6158a4878286016156e4565b60208301525095945050505050565b600081518084526020808501945080840160005b838110156158e3578151875295820195908201906001016158c7565b509495945050505050565b602081528151602082015260208201516040820152600060408301516080606084015261591e60a08401826158b3565b90506060840151151560808401528091505092915050565b6001600160a01b0384168152604060208201819052600090614c9c908301848661564f565b60006020828403121561596d57600080fd5b815162ffffff8116811461121557600080fd5b62ffffff91909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03858116825284166020820152608060408201819052600090615a20908301856158b3565b8281036060840152613fd381856158b3565b600181815b80851115615a6d578160001904821115615a5357615a5361553f565b80851615615a6057918102915b93841c9390800290615a37565b509250929050565b600082615a8457506001610b97565b81615a9157506000610b97565b8160018114615aa75760028114615ab157615acd565b6001915050610b97565b60ff841115615ac257615ac261553f565b50506001821b610b97565b5060208310610133831016604e8410600b8410161715615af0575081810a610b97565b615afa8383615a32565b8060001904821115615b0e57615b0e61553f565b029392505050565b600061121560ff841683615a75565b80516001600160801b038116811461215657600080fd5b60008060408385031215615b4f57600080fd5b615b5883615b25565b9150615b6660208401615b25565b90509250929050565b601f82111561168d57600081815260208120601f850160051c81016020861015615b965750805b601f850160051c820191505b81811015611b0457828155600101615ba2565b81516001600160401b03811115615bce57615bce614ec7565b615be281615bdc845461556e565b84615b6f565b602080601f831160018114615c175760008415615bff5750858301515b600019600386901b1c1916600185901b178555611b04565b600085815260208120601f198616915b82811015615c4657888601518255948401946001909101908401615c27565b5085821015615c645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b838110156158e35781516001600160a01b031687529582019590820190600101615cc2565b85815260006020868184015260a060408401528551606060a0850152615d116101008501826158b3565b82880151609f19868303810160c088015281518084529185019350600092909190850190835b81811015615d705785516004808210615d5d57634e487b7160e01b875260218152602487fd5b5083529486019491860191600101615d37565b505060408a01519450818782030160e0880152615d8d8186615cae565b95505050505050615da960608301856001600160a01b03169052565b8260808301529695505050505050565b600060018060a01b03808616835260606020840152615ddb60608401866158b3565b9150808416604084015250949350505050565b600080600060608486031215615e0357600080fd5b83516020850151604086015191945092506001600160401b03811115615e2857600080fd5b615e34868287016156e4565b9150509250925092565b6001600160801b03828116828216039080821115615e5e57615e5e61553f565b5092915050565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160c06080840152615ea760e08401826158b3565b90506080840151601f19808584030160a0860152615ec583836158b3565b925060a08601519150808584030160c086015250614c9c82826158b3565b60008251615ef581846020870161506f565b9190910192915050565b600060208284031215615f1157600080fd5b815161121581615357565b8082018281126000831280158216821582161715615f3c57615f3c61553f565b50509291505056fe63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122028d94e9fe22989ba8d3efb8a3acd4ca7d5a400d669a295d2b8adb4c8b37479f664736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102465760003560e01c8063045850b01461024b57806305e8746d1461026057806306fdde0314610283578063095ea7b3146102985780630b0ccc96146102bb5780630d1870df146102ce57806316dc165b146102d657806318160ddd146102e9578063191723ed146102fb5780631cbd50671461030e57806320d2a1131461032157806323b872dd146103345780632e1a7d4d14610347578063313ce5671461035a578063395093511461037a578063447ff2621461038d57806345718278146103a05780634671f215146103b357806355a547d5146103c7578063570ca735146103cf5780635bc6dab6146103e25780635f9c01b1146103f5578063625af7671461040657806370a0823114610419578063715018a61461042c578063791b98bc1461043457806379ba509714610447578063808d7c9b1461044f578063885a08e0146104625780638da5cb5b1461046a57806395d89b411461047257806397c82bc51461047a578063a457c2d71461048d578063a9059cbb146104a0578063b02d72e9146104b3578063b3ab15fb146104c7578063b425f802146104da578063b5db796114610508578063b7d19fc41461051b578063c40868931461052e578063c4ce635814610541578063d9197fe314610554578063da10610c14610567578063dd62ed3e14610578578063e30c39781461058b578063eddeebf314610593578063f2fde38b146105a6578063f4f357b1146105b9578063fa78668f146105cc578063fefd4e4f146105d7575b600080fd5b61025e610259366004614f58565b6105ea565b005b60ca546001600160a01b03165b60405161027a919061505b565b60405180910390f35b61028b610af1565b60405161027a91906150bf565b6102ab6102a63660046150d2565b610b83565b604051901515815260200161027a565b61025e6102c9366004615142565b610b9d565b6102ab610e69565b60ca5461026d906001600160a01b031681565b6099545b60405190815260200161027a565b61025e6103093660046151e4565b610e7d565b61025e61031c366004615206565b610f67565b6102ed61032f36600461528c565b6111fe565b6102ab6103423660046152a9565b61121c565b61025e6103553660046152ea565b611240565b60cb54600160a81b900460ff165b60405160ff909116815260200161027a565b6102ab6103883660046150d2565b6114e4565b60ce5461026d906001600160a01b031681565b61025e6103ae366004615303565b611506565b60cb5461036890600160a81b900460ff1681565b6102ed611692565b60d15461026d906001600160a01b031681565b60d25461026d906001600160a01b031681565b60cc546001600160a01b031661026d565b60cc5461026d906001600160a01b031681565b6102ed61042736600461528c565b6117aa565b61025e6117c5565b60cd5461026d906001600160a01b031681565b61025e6117d9565b61025e61045d36600461528c565b611868565b6102ed611892565b61026d611992565b61028b6119a1565b61025e61048836600461528c565b6119b0565b6102ab61049b3660046150d2565b6119da565b6102ab6104ae3660046150d2565b611a55565b60cb5461036890600160a01b900460ff1681565b61025e6104d536600461528c565b611a63565b6104ed6104e83660046150d2565b611a8d565b6040805193845260208401929092529082015260600161027a565b61025e610516366004615365565b611acf565b60cb5461026d906001600160a01b031681565b6102ed61053c36600461528c565b611b0c565b6102ed61054f36600461528c565b611bcb565b6102ab61056236600461528c565b611c98565b60cb546001600160a01b031661026d565b6102ed6105863660046153ba565b611e24565b61026d611e4f565b6102ed6105a13660046150d2565b611e5e565b61025e6105b436600461528c565b611f9c565b60cf5461026d906001600160a01b031681565b6102ed6305a39a8081565b6102ed6105e536600461528c565b612063565b600054610100900460ff161580801561060a5750600054600160ff909116105b8061062b57506106193061215b565b15801561062b575060005460ff166001145b6106935760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff1916600117905580156106b6576000805461ff0019166101001790555b6106be61216a565b6106c6612199565b6106ee8660405180604001604052806006815260200165735072696d6560d01b8152506121c8565b60cf80546001600160a01b0319166001600160a01b03841690811790915560408051632233163960e21b81529051600092916388cc58e49160048083019260209291908290030181865afa15801561074a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076e91906153f3565b60405163704037bd60e01b81526001600160a01b038b811660048301528a811660248301526032604483015291925060009183169063704037bd90606401608060405180830381865afa1580156107c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ed9190615410565b60208181015160cc80546001600160a01b0319166001600160a01b039092169182179055604080516305e8746d60e01b8152905193945090926305e8746d926004808401939192918290030181865afa15801561084e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087291906153f3565b60ca80546001600160a01b0319166001600160a01b0392831617905560cc5460408051633684184360e21b81529051919092169163da10610c9160048083019260209291908290030181865afa1580156108d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f491906153f3565b60cb80546001600160a01b0319166001600160a01b0392831617905560ca546040805163313ce56760e01b81529051919092169163313ce5679160048083019260209291908290030181865afa158015610952573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610976919061549b565b60cb60146101000a81548160ff021916908360ff16021790555060cb60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a07919061549b565b60cb60156101000a81548160ff021916908360ff16021790555060005b86811015610a835760d0888883818110610a4057610a406154be565b835460018101855560009485526020909420606090910292909201926002029091019050610a6e82826154ed565b50508080610a7b90615555565b915050610a24565b505060cd80546001600160a01b0319166001600160a01b038616179055508015610ae7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050505050565b6060609a8054610b009061556e565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2c9061556e565b8015610b795780601f10610b4e57610100808354040283529160200191610b79565b820191906000526020600020905b815481529060010190602001808311610b5c57829003601f168201915b5050505050905090565b600033610b918185856121f9565b60019150505b92915050565b60d1546001600160a01b0316336001600160a01b031614610bd0576040516282b42960e81b815260040160405180910390fd5b610bd861231d565b868514610bfb576040516001621398b960e31b0319815260040160405180910390fd5b6000610c068a6117aa565b9050610c1433308787612376565b610c268a8484888860016101f4612407565b80610c308b6117aa565b1015610c4f5760405163301e24df60e01b815260040160405180910390fd5b6000805b60ff8116881115610c99578a8a8260ff16818110610c7357610c736154be565b9050602002013582610c8591906155a2565b915080610c91816155b5565b915050610c53565b5080606414610cbb5760405163ab3ea90d60e01b815260040160405180910390fd5b600082610cc78d6117aa565b610cd191906155d4565b90506000915060005b60ff8116891115610e48576305a39a808a8a8360ff16818110610cff57610cff6154be565b905060200201351115610d2557604051636f9a2cd560e11b815260040160405180910390fd5b6000610d3260018b6155d4565b8260ff1614610d735760648d8d8460ff16818110610d5257610d526154be565b9050602002013584610d6491906155e7565b610d6e9190615614565b610d7d565b610d7d84846155d4565b6001600160a01b038f16600090815260c9602052604090819020815160608101909252919250808d8d60ff8716818110610db957610db96154be565b9050602002013581526020018381526020018d8d8660ff16818110610de057610de06154be565b9050602002013542610df291906155a2565b905281546001818101845560009384526020938490208351600390930201918255928201519281019290925560400151600290910155610e3281856155a2565b9350508080610e40906155b5565b915050610cda565b50610e528c6127e8565b505050610e5e60018055565b505050505050505050565b6602ed57011e0000601f1936013581161490565b610e8561231d565b6000610e9033611b0c565b9050610e9c81846155a2565b610ea5336117aa565b1015610ec457604051631e9acf1760e31b815260040160405180910390fd5b6305a39a80821115610ee957604051636f9a2cd560e11b815260040160405180910390fd5b33600090815260c960209081526040918290208251606081018452858152918201869052918101610f1a85426155a2565b905281546001808201845560009384526020938490208351600390930201918255928201519281019290925560400151600290910155610f59336127e8565b50610f6360018055565b5050565b610f6f61231d565b60ca546040516370a0823160e01b81526000916001600160a01b0316906370a0823190610fa090309060040161505b565b602060405180830381865afa158015610fbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe19190615636565b60cb546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061101790309060040161505b565b602060405180830381865afa158015611034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110589190615636565b60cc546040516364c9cfaf60e11b81529192506001600160a01b03169063c9939f5e9061109390339030908e908e908e908e90600401615681565b6000604051808303816000875af11580156110b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110da919081019061574f565b506111e13360ca546040516370a0823160e01b81528891889187916001600160a01b0316906370a082319061111390309060040161505b565b602060405180830381865afa158015611130573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111549190615636565b61115e91906155d4565b60cb546040516370a0823160e01b815287916001600160a01b0316906370a082319061118e90309060040161505b565b602060405180830381865afa1580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf9190615636565b6111d991906155d4565b600189612407565b6111ea336127e8565b50506111f560018055565b50505050505050565b600080611209611892565b90506112158382611e5e565b9392505050565b60003361122a8582856128c4565b611235858585612938565b506001949350505050565b61124861231d565b600061125333612063565b90508060000361127657604051632afc3c0d60e21b815260040160405180910390fd5b60cd5460405163133f757160e31b81526004810183905260009182916001600160a01b03909116906399fbab8890602401600060405180830381865afa1580156112c4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ec9190810190615783565b60cd5460405163b91e526f60e01b815260048101849052929850909650600095506001600160a01b0316935063b91e526f92506024019050600060405180830381865afa158015611341573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611369919081019061580d565b9050600061137633611b0c565b905061138281876155a2565b61138b336117aa565b10156113aa576040516385c6c5d360e01b815260040160405180910390fd5b600080806113bb338651888c612ae2565b60cd54604080516080810182528d8152602081018f90528082018490526000606082015290516325f9c4dd60e21b81529497509295509093506001600160a01b0316916397e7137491611410916004016158ee565b600060405180830381600087803b15801561142a57600080fd5b505af115801561143e573d6000803e3d6000fd5b505050508861144d6104273390565b036114b15760cd54604051630852cd8d60e31b8152600481018a90526001600160a01b03909116906342966c6890602401600060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b505050505b6114bd30338585612376565b6114c7338a612f6d565b6114d0336127e8565b50505050505050506114e160018055565b50565b600033610b918185856114f78383611e24565b61150191906155a2565b6121f9565b61150e6130a2565b61151661231d565b60d2546040516308ae304f60e31b81526001600160a01b039091169063457182789061154a90309086908690600401615936565b600060405180830381600087803b15801561156457600080fd5b505af1158015611578573d6000803e3d6000fd5b50505050600060d260009054906101000a90046001600160a01b03166001600160a01b03166369940d796040518163ffffffff1660e01b8152600401602060405180830381865afa1580156115d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f591906153f3565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611625919061505b565b602060405180830381865afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116669190615636565b90508015611682576116826001600160a01b0383168683613101565b505061168d60018055565b505050565b60008061169d613157565b905060006116aa826131fe565b61ffff169050806000036116d157604051632154bfcf60e21b815260040160405180910390fd5b6116dc6002836155a2565b915060005b818110156117a45760006116f484613238565b90506000806117046068876155a2565b9050600061171282366155d4565b9050803592508265ffffffffffff1660000361174157604051630336dc9d60e41b815260040160405180910390fd5b87600003611759578265ffffffffffff169750611781565b878365ffffffffffff16146117815760405163d9d1f46560e01b815260040160405180910390fd5b61178b84886155a2565b965050505050808061179c90615555565b9150506116e1565b50505090565b6001600160a01b031660009081526097602052604090205490565b6117cd6130a2565b6117d76000613274565b565b60006117e36132c6565b9050336001600160a01b038216146118555760405162461bcd60e51b815260206004820152602f60248201527f50656e64696e674f776e61626c653a2063616c6c6572206973206e6f7420746860448201526e32903832b73234b7339037bbb732b960891b606482015260840161068a565b61185e81613274565b6114e160006132d9565b6118706130a2565b60ce80546001600160a01b0319166001600160a01b0392909216919091179055565b60cc54604080516336f997b760e21b815290516000928392611973926001600160a01b0390921691634c7cffbd91839163dbe65edc916004808201926020929091908290030181865afa1580156118ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611911919061595b565b6040518263ffffffff1660e01b815260040161192d9190615980565b602060405180830381865afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e9190615636565b6132eb565b905061198c816305f5e100670de0b6b3a7640000613301565b91505090565b6065546001600160a01b031690565b6060609b8054610b009061556e565b6119b86130a2565b60d280546001600160a01b0319166001600160a01b0392909216919091179055565b600033816119e88286611e24565b905083811015611a485760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161068a565b61123582868684036121f9565b600033610b91818585612938565b611a6b6130a2565b60d180546001600160a01b0319166001600160a01b0392909216919091179055565b60c96020528160005260406000208181548110611aa957600080fd5b600091825260209091206003909102018054600182015460029092015490935090915083565b611ad761231d565b611ae333308686612376565b611af233878787878787612407565b611afb336127e8565b611b0460018055565b505050505050565b6001600160a01b038116600090815260c960205260408120548190815b818114611bc2576001600160a01b038516600090815260c960205260408120805483908110611b5a57611b5a6154be565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090504281604001511115611bb1576020810151611bae90856155a2565b93505b50611bbb81615555565b9050611b29565b50909392505050565b6001600160a01b038116600090815260c96020526040812054815b818114611c91576001600160a01b038416600090815260c960205260408120805483908110611c1757611c176154be565b9060005260206000209060030201604051806060016040529081600082015481526020016001820154815260200160028201548152505090504281604001511115611c8057611c73816020015182600001516305a39a80613301565b611c7d90856155a2565b93505b50611c8a81615555565b9050611be6565b5050919050565b600080611ca483612063565b905080600003611cc757604051632afc3c0d60e21b815260040160405180910390fd5b60cd546040516312431a6360e01b8152600481018390526000916001600160a01b0316906312431a6390602401600060405180830381865afa158015611d11573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611d39919081019061580d565b805160cc54604080516336f997b760e21b8152905193945091926000926001600160a01b039092169163dbe65edc9160048083019260209291908290030181865afa158015611d8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db0919061595b565b62ffffff1690508082600081518110611dcb57611dcb6154be565b602002602001015111158015611e075750808260018451611dec91906155d4565b81518110611dfc57611dfc6154be565b602002602001015110155b15611e185750600195945050505050565b50600095945050505050565b6001600160a01b03918216600090815260986020908152604080832093909416825291909152205490565b6000611e596132c6565b905090565b60cd54600090819081906001600160a01b03166399fbab88611e7f87612063565b6040518263ffffffff1660e01b8152600401611e9d91815260200190565b600060405180830381865afa158015611eba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ee29190810190615783565b60cd5460405163b91e526f60e01b815260048101849052929850909650600095506001600160a01b0316935063b91e526f92506024019050600060405180830381865afa158015611f37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f5f919081019061580d565b9050600080611f738360000151858961347a565b91509150611f8682886305f5e100613301565b611f9090826155a2565b98975050505050505050565b611fa46130a2565b6001600160a01b0381166120105760405162461bcd60e51b815260206004820152602d60248201527f50656e64696e674f776e61626c653a206e6577206f776e65722069732074686560448201526c207a65726f206164647265737360981b606482015260840161068a565b612019816132d9565b806001600160a01b031661202b611992565b6001600160a01b03167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127860405160405180910390a350565b60cd546040516370a0823160e01b815260009182916001600160a01b03909116906370a082319061209890869060040161505b565b602060405180830381865afa1580156120b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d99190615636565b11156121565760cd54604051632f745c5960e01b81526001600160a01b0390911690632f745c5990612112908590600090600401615990565b602060405180830381865afa15801561212f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121539190615636565b90505b919050565b6001600160a01b03163b151590565b600054610100900460ff166121915760405162461bcd60e51b815260040161068a906159a9565b6117d761379e565b600054610100900460ff166121c05760405162461bcd60e51b815260040161068a906159a9565b6117d76137cd565b600054610100900460ff166121ef5760405162461bcd60e51b815260040161068a906159a9565b610f6382826137f4565b6001600160a01b03831661225b5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161068a565b6001600160a01b0382166122bc5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161068a565b6001600160a01b0383811660008181526098602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60026001540361236f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161068a565b6002600155565b306001600160a01b038516036123c55781156123a35760ca546123a3906001600160a01b03168484613101565b80156123c05760cb546123c0906001600160a01b03168483613101565b612401565b81156123e35760ca546123e3906001600160a01b0316858585613834565b80156124015760cb54612401906001600160a01b0316858584613834565b50505050565b6101f481111561242a5760405163428637bb60e11b815260040160405180910390fd5b600061243588612063565b9050600060cc60009054906101000a90046001600160a01b03166001600160a01b031663dbe65edc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561248c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124b0919061595b565b62ffffff169050811561265e5760cd5460405163133f757160e31b815260048101849052600091829182916001600160a01b0316906399fbab8890602401600060405180830381865afa15801561250b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125339190810190615783565b955095509550505050819350861561265a5760cd5460405163b91e526f60e01b8152600481018490526000916001600160a01b03169063b91e526f90602401600060405180830381865afa15801561258f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526125b7919081019061580d565b90506000806125cc8f84600001518689612ae2565b5060cd54604051630852cd8d60e31b8152600481018c90529294509092506001600160a01b0316906342966c6890602401600060405180830381600087803b15801561261757600080fd5b505af115801561262b573d6000803e3d6000fd5b505050506126398f87612f6d565b612643828d6155a2565b61264d828d6155a2565b909c509a50600097505050505b5050505b612669868685613855565b60cc54604080516336f997b760e21b815290519399509197506001600160a01b03169163dbe65edc916004808201926020929091908290030181865afa1580156126b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126db919061595b565b62ffffff168114806126eb575081155b612708576040516348fca9dd60e01b815260040160405180910390fd5b60cc60009054906101000a90046001600160a01b03166001600160a01b031663dbe65edc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561275b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277f919061595b565b62ffffff16905080612791888a6155a2565b101580156127a85750876127a588836155a2565b10155b6127c55760405163428637bb60e11b815260040160405180910390fd5b60cc546127de9030906001600160a01b03168888612376565b610e5e8982613c83565b60ce546001600160a01b0316156114e157612801610e69565b156128595760ce54604051610f63916001600160a01b03169061282890849060240161505b565b60408051601f198184030181529190526020810180516001600160e01b0316636cec346160e01b1790526000613f4a565b60ce5460405163bf18c23960e01b81526001600160a01b039091169063bf18c2399061288990849060040161505b565b600060405180830381600087803b1580156128a357600080fd5b505af11580156128b7573d6000803e3d6000fd5b5050505050565b60018055565b60006128d08484611e24565b90506000198114612401578181101561292b5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000604482015260640161068a565b61240184848484036121f9565b6001600160a01b03831661299c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161068a565b6001600160a01b0382166129fe5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161068a565b612a09838383613fde565b6001600160a01b03831660009081526097602052604090205481811015612a815760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161068a565b6001600160a01b038085166000818152609760205260408082208686039055928616808252908390208054860190559151600080516020615f6583398151915290612acf9086815260200190565b60405180910390a3612401848484614373565b60008060608451865114612b0c576040516001621398b960e31b0319815260040160405180910390fd5b600080612b18896117aa565b88519091506000816001600160401b03811115612b3757612b37614ec7565b604051908082528060200260200182016040528015612b60578160200160208202803683370190505b5090506000826001600160401b03811115612b7d57612b7d614ec7565b604051908082528060200260200182016040528015612ba6578160200160208202803683370190505b509050826001600160401b03811115612bc157612bc1614ec7565b604051908082528060200260200182016040528015612bea578160200160208202803683370190505b50955060005b83811015612ce05760008c8281518110612c0c57612c0c6154be565b60200260200101519050612c3a8c8381518110612c2b57612c2b6154be565b60200260200101518c88613301565b888381518110612c4c57612c4c6154be565b602002602001018181525050878281518110612c6a57612c6a6154be565b6020026020010151600014612cd75780848881518110612c8c57612c8c6154be565b602002602001018181525050878281518110612caa57612caa6154be565b6020026020010151838881518110612cc457612cc46154be565b6020026020010181815250508660010196505b50600101612bf0565b5060ca546040516370a0823160e01b81526000916001600160a01b0316906370a0823190612d1290309060040161505b565b602060405180830381865afa158015612d2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d539190615636565b60cb546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612d8990309060040161505b565b602060405180830381865afa158015612da6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dca9190615636565b90508615612e5f57848714612de0578684528683525b60cc546040516364c9cfaf60e11b81526001600160a01b039091169063c9939f5e90612e169030908190899089906004016159f4565b6000604051808303816000875af1158015612e35573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052612e5d919081019061574f565b505b60ca546040516370a0823160e01b815283916001600160a01b0316906370a0823190612e8f90309060040161505b565b602060405180830381865afa158015612eac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ed09190615636565b612eda91906155d4565b60cb546040516370a0823160e01b8152919b5082916001600160a01b03909116906370a0823190612f0f90309060040161505b565b602060405180830381865afa158015612f2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f509190615636565b612f5a91906155d4565b9850505050505050509450945094915050565b6001600160a01b038216612fcd5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161068a565b612fd982600083613fde565b6001600160a01b0382166000908152609760205260409020548181101561304d5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161068a565b6001600160a01b0383166000818152609760209081526040808320868603905560998054879003905551858152919291600080516020615f65833981519152910160405180910390a361168d83600084614373565b336130ab611992565b6001600160a01b0316146117d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161068a565b61168d8363a9059cbb60e01b8484604051602401613120929190615990565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526143aa565b60006602ed57011e0000601f1936013581161480613188576040516373bb264f60e11b815260040160405180910390fd5b600036602911156131ac57604051632bcb7bc560e11b815260040160405180910390fd5b50602819360135600060096131c7600362ffffff85166155a2565b6131d191906155a2565b9050366131df6002836155a2565b11156112155760405163c30a7bd760e01b815260040160405180910390fd5b60008061320c6020846155a2565b90503681111561322f57604051632bcb7bc560e11b815260040160405180910390fd5b36033592915050565b60008060006132468461447f565b9092509050604e6132588260206155a2565b61326290846155e7565b61326c91906155a2565b949350505050565b606580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600080516020615f458339815191525490565b600080516020615f4583398151915255565b600061215382670de0b6b3a764000060806144d6565b600080806000198587098587029250828110838203039150508060000361333a576000841161332f57600080fd5b508290049050611215565b80841161334657600080fd5b6000848688098084039381119092039190506000613366861960016155a2565b861695869004959384900493600081900304600101905061338781846155e7565b9093179260006133988760036155e7565b60021890506133a781886155e7565b6133b29060026155d4565b6133bc90826155e7565b90506133c881886155e7565b6133d39060026155d4565b6133dd90826155e7565b90506133e981886155e7565b6133f49060026155d4565b6133fe90826155e7565b905061340a81886155e7565b6134159060026155d4565b61341f90826155e7565b905061342b81886155e7565b6134369060026155d4565b61344090826155e7565b905061344c81886155e7565b6134579060026155d4565b61346190826155e7565b905061346d81866155e7565b9998505050505050505050565b60008083518551146134a2576040516001621398b960e31b0319815260040160405180910390fd5b60cb546134ca9084906134c090600160a81b900460ff16600a615b16565b6305f5e100613301565b60cc549093506000906001600160a01b031663f5e293296134ea86614544565b6040518263ffffffff1660e01b815260040161350891815260200190565b602060405180830381865afa158015613525573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613549919061595b565b905060005b865181101561379457600061357b88838151811061356e5761356e6154be565b602002602001015161455a565b90506000878381518110613591576135916154be565b602090810291909101015160cc54604051630157d2d160e31b815291925060009182916001600160a01b031690630abe9688906135d2908790600401615980565b6040805180830381865afa1580156135ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136129190615b3c565b60cc54604051634c7cffbd60e01b81526001600160801b03938416955091909216925060009161365c916001600160a01b0390911690634c7cffbd9061192d908990600401615980565b60cc5460405163bd85b03960e01b81529192506000916001600160a01b039091169063bd85b03990613692908990600401615980565b602060405180830381865afa1580156136af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136d39190615636565b905060006136e2868684614580565b905060006136f1878685614580565b90508762ffffff168a62ffffff16111561372d5761371881670de0b6b3a764000086613301565b61372290836155a2565b915060009050613763565b8762ffffff168a62ffffff161015613763576137528285670de0b6b3a7640000613301565b61375c90826155a2565b9050600091505b61376d828d6155a2565b9b50613779818c6155a2565b9a5050505050505050508061378d90615555565b905061354e565b5050935093915050565b600054610100900460ff166137c55760405162461bcd60e51b815260040161068a906159a9565b6117d76145aa565b600054610100900460ff166128be5760405162461bcd60e51b815260040161068a906159a9565b600054610100900460ff1661381b5760405162461bcd60e51b815260040161068a906159a9565b609a6138278382615bb5565b50609b61168d8282615bb5565b612401846323b872dd60e01b85858560405160240161312093929190615c74565b6000806000613863866145da565b905080851060008161387e5761387983886155d4565b613888565b61388887846155d4565b90508061389a886101f4612710613301565b1080156138af575060008311806138af575087155b15613c775760cc54604080516336f997b760e21b81529051600092839261390f926001600160a01b0390921691634c7cffbd91839163dbe65edc916004808201926020929091908290030181865afa1580156118ed573d6000803e3d6000fd5b905061392e61391f600285615614565b670de0b6b3a764000083613301565b91506000905061393f600284615614565b90508361394d578082613950565b81815b604080516002808252606082018352939550919350600092906020830190803683370190505090508415613a1f5760ca5481516001600160a01b039091169082906000906139a0576139a06154be565b6001600160a01b03928316602091820292909201015260cb548251911690829060019081106139d1576139d16154be565b6001600160a01b03928316602091820292909201015260cf5460ca546139fd9290811691166000614709565b60cf5460ca54613a1a916001600160a01b03918216911685614709565b613abb565b60cb5481516001600160a01b03909116908290600090613a4157613a416154be565b6001600160a01b03928316602091820292909201015260ca54825191169082906001908110613a7257613a726154be565b6001600160a01b03928316602091820292909201015260cf5460cb54613a9e9290811691166000614709565b60cf5460cb54613abb916001600160a01b03918216911685614709565b60408051600180825281830190925260009160208083019080368337019050509050600381600081518110613af257613af26154be565b60200260200101906003811115613b0b57613b0b615c98565b90816003811115613b1e57613b1e615c98565b90525060408051600180825281830190925260009160208083019080368337019050509050603261ffff1681600081518110613b5c57613b5c6154be565b6020026020010181815250506000604051806060016040528083815260200184815260200185815250905060cf60009054906101000a90046001600160a01b03166001600160a01b0316632a443fae876127108f612710613bbd91906155d4565b613bc7908a6155e7565b613bd19190615614565b8430426040518663ffffffff1660e01b8152600401613bf4959493929190615ce7565b6020604051808303816000875af1158015613c13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c379190615636565b945087613c5757613c48858f6155a2565b613c52878f6155d4565b613c6b565b613c61868f6155d4565b613c6b868f6155a2565b909e509c505050505050505b50959694955050505050565b60cd5460405163b91e526f60e01b8152600481018390526000916001600160a01b03169063b91e526f90602401600060405180830381865afa158015613ccd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613cf5919081019061580d565b805151909150600003613d1357613d0b8261480d565b825260208201525b60cc54602082015160405163383d15c560e01b8152600092839283926001600160a01b039092169163383d15c591613d52913091908b90600401615db9565b6000604051808303816000875af1158015613d71573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052613d999190810190615dee565b9250925092506000613dfc613db4846001600160801b031690565b613dc7906001600160801b038716615e3e565b6001600160801b0316613dda8560801c90565b613de48760801c90565b613dee9190615e3e565b6001600160801b03166149ae565b90506000613e0988612063565b905080600003613ebf5760cd546040805160c0810182526001600160a01b038b8116825260208083018790528284018c9052606083018890528a01516080830152895160a0830152915163124f70a960e01b8152919092169163124f70a991613e759190600401615e65565b6020604051808303816000875af1158015613e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613eb89190615636565b9050613f40565b60cd5460408051608081018252838152602081018590528082018690526001606082015290516325f9c4dd60e21b81526001600160a01b03909216916397e7137491613f0d916004016158ee565b600060405180830381600087803b158015613f2757600080fd5b505af1158015613f3b573d6000803e3d6000fd5b505050505b610ae788836149c6565b60606000613f5784614a89565b9050600080866001600160a01b031685613f72576000613f74565b345b84604051613f829190615ee3565b60006040518083038185875af1925050503d8060008114613fbf576040519150601f19603f3d011682016040523d82523d6000602084013e613fc4565b606091505b5091509150613fd38282614b18565b979650505050505050565b6001600160a01b03831615801590613ffe57506001600160a01b03821615155b1561168d57600061400e84611b0c565b9050600061401b856117aa565b905061402782846155a2565b81101561404757604051631e9acf1760e31b815260040160405180910390fd5b61405084612063565b1561406e576040516335af998760e01b815260040160405180910390fd5b600061407986612063565b90508382036140ed5760cd546040516333bebb7760e01b81526001600160a01b03909116906333bebb77906140b690899089908690600401615c74565b600060405180830381600087803b1580156140d057600080fd5b505af11580156140e4573d6000803e3d6000fd5b50505050611b04565b60cd5460405163133f757160e31b81526004810183905260009182916001600160a01b03909116906399fbab8890602401600060405180830381865afa15801561413b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141639190810190615783565b60cd5460405163b91e526f60e01b815260048101849052929850909650600095506001600160a01b0316935063b91e526f92506024019050600060405180830381865afa1580156141b8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526141e0919081019061580d565b905060005b825181101561424157614212838281518110614203576142036154be565b60200260200101518988613301565b838281518110614224576142246154be565b60209081029190910101528061423981615555565b9150506141e5565b5060cd5460408051608081018252868152602081018a90528082018590526000606082015290516325f9c4dd60e21b81526001600160a01b03909216916397e7137491614290916004016158ee565b600060405180830381600087803b1580156142aa57600080fd5b505af11580156142be573d6000803e3d6000fd5b505060cd546040805160c0810182526001600160a01b038d8116825260208083018e90528284018a9052606083018990528701516080830152865160a0830152915163124f70a960e01b815291909216935063124f70a992506143249190600401615e65565b6020604051808303816000875af1158015614343573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143679190615636565b50505050505050505050565b6001600160a01b0383161580159061439357506001600160a01b03821615155b1561168d576143a1836127e8565b61168d826127e8565b60006143ff826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316614b959092919063ffffffff16565b90508051600014806144205750808060200190518101906144209190615eff565b61168d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161068a565b6000808080806144906041876155a2565b905060006144a96144a26020846155a2565b3690614ba4565b8035945090506144ba816003614ba4565b62ffffff9490941697933563ffffffff16965092945050505050565b60008060006144e58686614bb0565b91509150816000146144fb578360ff1682901c92505b801561453b57600160ff85161b811061452757604051638e471a8960e01b815260040160405180910390fd5b8360ff166101000361ffff1681901b830192505b50509392505050565b6000612153826080670de0b6b3a7640000614bcf565b8062ffffff8116811461215657604051639b63641560e01b815260040160405180910390fd5b600080600061458f8686614bb0565b915091506145a08686868585614bf5565b9695505050505050565b600054610100900460ff166145d15760405162461bcd60e51b815260040161068a906159a9565b6117d733613274565b600080600060cc60009054906101000a90046001600160a01b03166001600160a01b0316630902f1ac6040518163ffffffff1660e01b81526004016040805180830381865afa158015614631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146559190615b3c565b915091506000826001600160801b0316118061467a57506000816001600160801b0316115b156146ff5760cc54604080516336f997b760e21b815290516000926146d8926001600160a01b0390911691634c7cffbd91839163dbe65edc916004808201926020929091908290030181865afa1580156118ed573d6000803e3d6000fd5b9050670de0b6b3a76400006146ed82876155e7565b6146f79190615614565b935050611c91565b5060009392505050565b8015806147835750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa15801561475d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147819190615636565b155b6147ee5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161068a565b61168d8363095ea7b360e01b8484604051602401613120929190615990565b60d0546060908190806001600160401b0381111561482d5761482d614ec7565b604051908082528060200260200182016040528015614856578160200160208202803683370190505b509250806001600160401b0381111561487157614871614ec7565b60405190808252806020026020018201604052801561489a578160200160208202803683370190505b50915060005b818110156149a757600060d082815481106148bd576148bd6154be565b6000918252602080832060408051606081018252600290940290910180548085526001909101546001600160401b0380821694860194909452600160401b9004909216908301529092506149119088615f1c565b905060008112158015614927575062ffffff8111155b61494457604051631a93c68960e11b815260040160405180910390fd5b80858481518110614957576149576154be565b6020026020010181815250506149768260200151836040015183614ca5565b868481518110614988576149886154be565b6020026020010181815250505050806149a090615555565b90506148a0565b5050915091565b6000806149ba846145da565b905061326c81846155a2565b6001600160a01b038216614a1c5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161068a565b614a2860008383613fde565b8060996000828254614a3a91906155a2565b90915550506001600160a01b038216600081815260976020908152604080832080548601905551848152600080516020615f65833981519152910160405180910390a3610f6360008383614373565b80516060906000614a98614cd5565b90506000614aa682846155a2565b905036821115614ac957604051632bcb7bc560e11b815260040160405180910390fd5b6060604051905081815285602001848101826020015b81831015614af7578251815260209283019201614adf565b50505082833603856020018301379190920181016020016040529392505050565b606082614b8f578151600003614b4157604051632b3ff13d60e11b815260040160405180910390fd5b602082015162461bcd60e51b148015614b74576040516301efd04f60e31b8152604484019061068a9082906004016150bf565b8260405163fd36fde360e01b815260040161068a91906150bf565b50919050565b606061326c8484600085614d40565b600061121582846155d4565b6000806000198385098385029250828110838203039150509250929050565b600060ff831684811b9061ffff6101008290031686901c906145a09087906001901b8685855b600081600003614c1657838381614c0e57614c0e6155fe565b049050614c9c565b838210614c36576040516313eae71560e01b815260040160405180910390fd5b60008486880960018619810187169687900496600081900381900490910186831190950394850291909503949094049390931792505060026003840281188085028203028085028203028085028203028085028203028085028203028085029091030282025b95945050505050565b601882901b6301000000600160581b0316605884901b600160581b600160981b03161762ffffff8216811761326c565b600080614ce0613157565b90506000614ced826131fe565b61ffff169050614cfe6002836155a2565b915060005b81811015614d38576000614d1684613238565b9050614d2281856155a2565b9350508080614d3090615555565b915050614d03565b509092915050565b606082471015614da15760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161068a565b600080866001600160a01b03168587604051614dbd9190615ee3565b60006040518083038185875af1925050503d8060008114614dfa576040519150601f19603f3d011682016040523d82523d6000602084013e614dff565b606091505b5091509150613fd38783838760608315614e78578251600003614e7157614e258561215b565b614e715760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161068a565b508161326c565b61326c8383815115614e8d5781518083602001fd5b8060405162461bcd60e51b815260040161068a91906150bf565b6001600160a01b03811681146114e157600080fd5b803561215681614ea7565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715614f0557614f05614ec7565b604052919050565b60008083601f840112614f1f57600080fd5b5081356001600160401b03811115614f3657600080fd5b602083019150836020606083028501011115614f5157600080fd5b9250929050565b600080600080600080600060c0888a031215614f7357600080fd5b8735614f7e81614ea7565b9650602088810135614f8f81614ea7565b965060408901356001600160401b0380821115614fab57600080fd5b818b0191508b601f830112614fbf57600080fd5b813581811115614fd157614fd1614ec7565b614fe3601f8201601f19168501614edd565b8181528d85838601011115614ff757600080fd5b818585018683013760009181019094015291965060608a0135918083111561501e57600080fd5b505061502c8a828b01614f0d565b909550935061503f905060808901614ebc565b915061504d60a08901614ebc565b905092959891949750929550565b6001600160a01b0391909116815260200190565b60005b8381101561508a578181015183820152602001615072565b50506000910152565b600081518084526150ab81602086016020860161506f565b601f01601f19169290920160200192915050565b6020815260006112156020830184615093565b600080604083850312156150e557600080fd5b82356150f081614ea7565b946020939093013593505050565b60008083601f84011261511057600080fd5b5081356001600160401b0381111561512757600080fd5b6020830191508360208260051b8501011115614f5157600080fd5b600080600080600080600080600060e08a8c03121561516057600080fd5b893561516b81614ea7565b985060208a01356001600160401b038082111561518757600080fd5b6151938d838e016150fe565b909a50985060408c01359150808211156151ac57600080fd5b506151b98c828d016150fe565b9a9d999c50979a9799986060890135986080810135985060a0810135975060c0013595509350505050565b600080604083850312156151f757600080fd5b50508035926020909101359150565b600080600080600080600060a0888a03121561522157600080fd5b87356001600160401b038082111561523857600080fd5b6152448b838c016150fe565b909950975060208a013591508082111561525d57600080fd5b5061526a8a828b016150fe565b989b979a50986040810135976060820135975060809091013595509350505050565b60006020828403121561529e57600080fd5b813561121581614ea7565b6000806000606084860312156152be57600080fd5b83356152c981614ea7565b925060208401356152d981614ea7565b929592945050506040919091013590565b6000602082840312156152fc57600080fd5b5035919050565b60008060006040848603121561531857600080fd5b833561532381614ea7565b925060208401356001600160401b0381111561533e57600080fd5b61534a868287016150fe565b9497909650939450505050565b80151581146114e157600080fd5b60008060008060008060c0878903121561537e57600080fd5b8635955060208701359450604087013593506060870135925060808701356153a581615357565b8092505060a087013590509295509295509295565b600080604083850312156153cd57600080fd5b82356153d881614ea7565b915060208301356153e881614ea7565b809150509250929050565b60006020828403121561540557600080fd5b815161121581614ea7565b60006080828403121561542257600080fd5b604051608081016001600160401b038111828210171561544457615444614ec7565b604052825161ffff8116811461545957600080fd5b8152602083015161546981614ea7565b6020820152604083015161547c81615357565b6040820152606083015161548f81615357565b60608201529392505050565b6000602082840312156154ad57600080fd5b815160ff8116811461121557600080fd5b634e487b7160e01b600052603260045260246000fd5b600081356001600160401b0381168114610b9757600080fd5b81358155600181016001600160401b03615509602085016154d4565b8254911690600160401b600160801b03615525604087016154d4565b60401b168260018060801b03198316171783555050505050565b634e487b7160e01b600052601160045260246000fd5b6000600182016155675761556761553f565b5060010190565b600181811c9082168061558257607f821691505b602082108103614b8f57634e487b7160e01b600052602260045260246000fd5b80820180821115610b9757610b9761553f565b600060ff821660ff81036155cb576155cb61553f565b60010192915050565b81810381811115610b9757610b9761553f565b8082028115828204841417610b9757610b9761553f565b634e487b7160e01b600052601260045260246000fd5b60008261563157634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561564857600080fd5b5051919050565b81835260006001600160fb1b0383111561566857600080fd5b8260051b80836020870137939093016020019392505050565b6001600160a01b038781168252861660208201526080604082018190526000906156ae908301868861564f565b828103606084015261346d81858761564f565b60006001600160401b038211156156da576156da614ec7565b5060051b60200190565b600082601f8301126156f557600080fd5b8151602061570a615705836156c1565b614edd565b82815260059290921b8401810191818101908684111561572957600080fd5b8286015b84811015615744578051835291830191830161572d565b509695505050505050565b60006020828403121561576157600080fd5b81516001600160401b0381111561577757600080fd5b61326c848285016156e4565b60008060008060008060c0878903121561579c57600080fd5b86516157a781614ea7565b60208801519096506157b881614ea7565b60408801519095506157c981614ea7565b6060880151608089015160a08a015192965090945092506001600160401b038111156157f457600080fd5b61580089828a016156e4565b9150509295509295509295565b60006020828403121561581f57600080fd5b81516001600160401b038082111561583657600080fd5b908301906040828603121561584a57600080fd5b60405160408101818110838211171561586557615865614ec7565b60405282518281111561587757600080fd5b615883878286016156e4565b82525060208301518281111561589857600080fd5b6158a4878286016156e4565b60208301525095945050505050565b600081518084526020808501945080840160005b838110156158e3578151875295820195908201906001016158c7565b509495945050505050565b602081528151602082015260208201516040820152600060408301516080606084015261591e60a08401826158b3565b90506060840151151560808401528091505092915050565b6001600160a01b0384168152604060208201819052600090614c9c908301848661564f565b60006020828403121561596d57600080fd5b815162ffffff8116811461121557600080fd5b62ffffff91909116815260200190565b6001600160a01b03929092168252602082015260400190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b6001600160a01b03858116825284166020820152608060408201819052600090615a20908301856158b3565b8281036060840152613fd381856158b3565b600181815b80851115615a6d578160001904821115615a5357615a5361553f565b80851615615a6057918102915b93841c9390800290615a37565b509250929050565b600082615a8457506001610b97565b81615a9157506000610b97565b8160018114615aa75760028114615ab157615acd565b6001915050610b97565b60ff841115615ac257615ac261553f565b50506001821b610b97565b5060208310610133831016604e8410600b8410161715615af0575081810a610b97565b615afa8383615a32565b8060001904821115615b0e57615b0e61553f565b029392505050565b600061121560ff841683615a75565b80516001600160801b038116811461215657600080fd5b60008060408385031215615b4f57600080fd5b615b5883615b25565b9150615b6660208401615b25565b90509250929050565b601f82111561168d57600081815260208120601f850160051c81016020861015615b965750805b601f850160051c820191505b81811015611b0457828155600101615ba2565b81516001600160401b03811115615bce57615bce614ec7565b615be281615bdc845461556e565b84615b6f565b602080601f831160018114615c175760008415615bff5750858301515b600019600386901b1c1916600185901b178555611b04565b600085815260208120601f198616915b82811015615c4657888601518255948401946001909101908401615c27565b5085821015615c645787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052602160045260246000fd5b600081518084526020808501945080840160005b838110156158e35781516001600160a01b031687529582019590820190600101615cc2565b85815260006020868184015260a060408401528551606060a0850152615d116101008501826158b3565b82880151609f19868303810160c088015281518084529185019350600092909190850190835b81811015615d705785516004808210615d5d57634e487b7160e01b875260218152602487fd5b5083529486019491860191600101615d37565b505060408a01519450818782030160e0880152615d8d8186615cae565b95505050505050615da960608301856001600160a01b03169052565b8260808301529695505050505050565b600060018060a01b03808616835260606020840152615ddb60608401866158b3565b9150808416604084015250949350505050565b600080600060608486031215615e0357600080fd5b83516020850151604086015191945092506001600160401b03811115615e2857600080fd5b615e34868287016156e4565b9150509250925092565b6001600160801b03828116828216039080821115615e5e57615e5e61553f565b5092915050565b6020815260018060a01b03825116602082015260208201516040820152604082015160608201526000606083015160c06080840152615ea760e08401826158b3565b90506080840151601f19808584030160a0860152615ec583836158b3565b925060a08601519150808584030160c086015250614c9c82826158b3565b60008251615ef581846020870161506f565b9190910192915050565b600060208284031215615f1157600080fd5b815161121581615357565b8082018281126000831280158216821582161715615f3c57615f3c61553f565b50509291505056fe63a0d9df49fae3f1b9d24f8dc819a568c429a1b11d0d8e9de63df53a0194acb2ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122028d94e9fe22989ba8d3efb8a3acd4ca7d5a400d669a295d2b8adb4c8b37479f664736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "binInRange(address)": {
        "details": "Check if the active id is in the user position range",
        "params": {
          "user": "User Address."
        },
        "returns": {
          "_0": "status bin status"
        }
      },
      "claim(address,uint256[])": {
        "details": "Claims the reward from TraderJoe v2.2 Base Reward Pool",
        "params": {
          "ids": "Bin Id list to claim.",
          "receiver": "User address that will receive the collected reward."
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256,uint256,uint256,uint256,bool,uint256)": {
        "details": "Users can use deposit function for depositing tokens to the specific bin.",
        "params": {
          "activeIdDesired": "The active id that user wants to add liquidity from",
          "amountX": "The amount of token X to deposit.",
          "amountY": "The amount of token Y to deposit.",
          "idSlippage": "The number of id that are allowed to slip",
          "isRebalance": "Rebalance the existing position with deposit.",
          "swapSlippage": "Slippage for the rebalance."
        }
      },
      "getFullyVestedLockedBalance(address)": {
        "details": "Returns the fully vested locked balance for an account.Full business logic description can be found in Pool::getFullyVestedLockedBalance() docstring",
        "params": {
          "account": "The address of the account."
        },
        "returns": {
          "fullyVestedBalance": "Fully vested locked balance"
        }
      },
      "getLockedBalance(address)": {
        "details": "Returns the total locked balance of an account.",
        "params": {
          "account": "The address of the account."
        },
        "returns": {
          "_0": "The total locked balance of the account."
        }
      },
      "getUserTokenId(address)": {
        "details": "Returns the token id for the user",
        "params": {
          "user": "The user address"
        },
        "returns": {
          "tokenId": "token id owned by the user"
        }
      },
      "getUserValueInTokenY(address)": {
        "details": "Returns the estimated USD value of the user position",
        "params": {
          "user": "User Address"
        },
        "returns": {
          "_0": "Total Value in tokenY amount for the user's position."
        }
      },
      "getUserValueInTokenY(address,uint256)": {
        "details": "Returns the estimated USD value of the user position",
        "params": {
          "poolPrice": "Pool Price or oracle price for calculating proper token amount",
          "user": "User Address"
        },
        "returns": {
          "_0": "Total Value in tokenY amount for the user's position."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,string,(int256,uint64,uint64)[],address,address)": {
        "details": "initialize of the contract.",
        "params": {
          "depositForm_": "Pre-defined distributions and delta ids",
          "name_": "The name of the SPrime token. ex: PRIME-USDC LP",
          "positionManager_": "Position Manager contract for sPrime",
          "tokenX_": "The address of the token X.",
          "tokenY_": "The address of the token Y.",
          "traderJoeV2Router_": "Trader Joe V2 Router Address"
        }
      },
      "lockBalance(uint256,uint256)": {
        "details": "Locks a specified amount of balance for a specified lock period.",
        "params": {
          "amount": "The amount of balance to be locked.",
          "lockPeriod": "The duration for which the balance will be locked."
        }
      },
      "migrateLiquidity(uint256[],uint256[],uint256,uint256,uint256)": {
        "details": "Users can use deposit function for depositing tokens to the specific bin.",
        "params": {
          "activeIdDesired": "The active id that user wants to add liquidity from",
          "amounts": "Minted LBT amount for each deposit id",
          "idSlippage": "The number of id that are allowed to slip",
          "ids": "Depoisit Ids from TraderJoe",
          "swapSlippage": "Slippage for the rebalance."
        }
      },
      "mintForUserAndLock(address,uint256[],uint256[],uint256,uint256,uint256,uint256)": {
        "details": "Users can use deposit function for depositing tokens to the specific bin.",
        "params": {
          "activeIdDesired": "Desired bin id.",
          "amountX": "The amount of token X to deposit.",
          "amountY": "The amount of token Y to deposit.",
          "idSlippage": "Bin id slippage from the active id.",
          "lockPeriods": "Lock period to Lock for each amount",
          "percentForLocks": "sPrime amount % to lock",
          "user": "The active id that user wants to add liquidity from"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "withdraw(uint256)": {
        "details": "Users can use withdraw function for withdrawing their share.",
        "params": {
          "share": "Amount to withdraw"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getLBPair()": {
        "notice": "Public View Functions "
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 314,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 383,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1470,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 403,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_balances",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 409,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_allowances",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 411,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "153",
        "type": "t_uint256"
      },
      {
        "astId": 413,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_name",
        "offset": 0,
        "slot": "154",
        "type": "t_string_storage"
      },
      {
        "astId": 415,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "_symbol",
        "offset": 0,
        "slot": "155",
        "type": "t_string_storage"
      },
      {
        "astId": 995,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "__gap",
        "offset": 0,
        "slot": "156",
        "type": "t_array(t_uint256)45_storage"
      },
      {
        "astId": 9556,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "locks",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_array(t_struct(LockDetails)3703_storage)dyn_storage)"
      },
      {
        "astId": 9559,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "tokenX",
        "offset": 0,
        "slot": "202",
        "type": "t_contract(IERC20Metadata)1574"
      },
      {
        "astId": 9562,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "tokenY",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IERC20Metadata)1574"
      },
      {
        "astId": 9564,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "tokenXDecimals",
        "offset": 20,
        "slot": "203",
        "type": "t_uint8"
      },
      {
        "astId": 9566,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "tokenYDecimals",
        "offset": 21,
        "slot": "203",
        "type": "t_uint8"
      },
      {
        "astId": 9569,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "lbPair",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(ILBPair)6161"
      },
      {
        "astId": 9572,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "positionManager",
        "offset": 0,
        "slot": "205",
        "type": "t_contract(IPositionManager)3693"
      },
      {
        "astId": 9575,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "vPrimeController",
        "offset": 0,
        "slot": "206",
        "type": "t_contract(IVPrimeController)3798"
      },
      {
        "astId": 9577,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "traderJoeV2Router",
        "offset": 0,
        "slot": "207",
        "type": "t_address"
      },
      {
        "astId": 9581,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "depositForm",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_struct(DepositForm)3756_storage)dyn_storage"
      },
      {
        "astId": 9583,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "operator",
        "offset": 0,
        "slot": "209",
        "type": "t_address"
      },
      {
        "astId": 9586,
        "contract": "contracts/token/sPrime.sol:SPrime",
        "label": "baseRewarder",
        "offset": 0,
        "slot": "210",
        "type": "t_contract(ILBHooksBaseRewarder)4428"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(DepositForm)3756_storage)dyn_storage": {
        "base": "t_struct(DepositForm)3756_storage",
        "encoding": "dynamic_array",
        "label": "struct ISPrimeTraderJoe.DepositForm[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(LockDetails)3703_storage)dyn_storage": {
        "base": "t_struct(LockDetails)3703_storage",
        "encoding": "dynamic_array",
        "label": "struct ISPrime.LockDetails[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)45_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[45]",
        "numberOfBytes": "1440"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20Metadata)1574": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_contract(ILBHooksBaseRewarder)4428": {
        "encoding": "inplace",
        "label": "contract ILBHooksBaseRewarder",
        "numberOfBytes": "20"
      },
      "t_contract(ILBPair)6161": {
        "encoding": "inplace",
        "label": "contract ILBPair",
        "numberOfBytes": "20"
      },
      "t_contract(IPositionManager)3693": {
        "encoding": "inplace",
        "label": "contract IPositionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IVPrimeController)3798": {
        "encoding": "inplace",
        "label": "contract IVPrimeController",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(LockDetails)3703_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ISPrime.LockDetails[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(LockDetails)3703_storage)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DepositForm)3756_storage": {
        "encoding": "inplace",
        "label": "struct ISPrimeTraderJoe.DepositForm",
        "members": [
          {
            "astId": 3751,
            "contract": "contracts/token/sPrime.sol:SPrime",
            "label": "deltaId",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 3753,
            "contract": "contracts/token/sPrime.sol:SPrime",
            "label": "distributionX",
            "offset": 0,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 3755,
            "contract": "contracts/token/sPrime.sol:SPrime",
            "label": "distributionY",
            "offset": 8,
            "slot": "1",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(LockDetails)3703_storage": {
        "encoding": "inplace",
        "label": "struct ISPrime.LockDetails",
        "members": [
          {
            "astId": 3698,
            "contract": "contracts/token/sPrime.sol:SPrime",
            "label": "lockPeriod",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3700,
            "contract": "contracts/token/sPrime.sol:SPrime",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3702,
            "contract": "contracts/token/sPrime.sol:SPrime",
            "label": "unlockTime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}