{
  "address": "0xEb1e902f8297E46F823ff0B2365505ec833232Cb",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe4165aa0dad22dedd6d29eac7f41249749d262277ea38c27b15c792c4c27a32e",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xEb1e902f8297E46F823ff0B2365505ec833232Cb",
    "transactionIndex": 0,
    "gasUsed": "4771010",
    "logsBloom": "0x
    "blockHash": "0xfa9eac5bde36e929527941ba18e1f800cb3cc0b08db8ee645ab730f3830f6083",
    "transactionHash": "0xe4165aa0dad22dedd6d29eac7f41249749d262277ea38c27b15c792c4c27a32e",
    "logs": [],
    "blockNumber": 22331293,
    "cumulativeGasUsed": "4771010",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "02aba8a6f2c894ec249fcacc1939b79b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a pool contract\",\"events\":{\"PoolDeployed(address,address,uint256)\":{\"details\":\"emitted after pool is deployed by any user\",\"params\":{\"poolAddress\":\"of deployed pool\",\"timestamp\":\"of the deployment*\",\"user\":\"the address initiating the deployment\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"PoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/UsdcPoolFactory.sol\":\"UsdcPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2e9f2aba0ab8e419a7d1bf6e83f967ae0bc9c538;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n    mapping(address => bool) public canDeposit;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== TEST-DEPLOYMENT ========== */\\n\\n    /* ========== SETTERS ========== */\\n    function setAccess(address user, bool allowDeposit) external onlyOwner {\\n        canDeposit[user] = allowDeposit;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        require(AddressUpgradeable.isContract(address(_poolRewarder)) || address(_poolRewarder) == address(0), \\\"Must be a contract\\\");\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n//    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n//        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n//        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n//        _allowed[msg.sender][spender] = newAllowance;\\n//\\n//        emit Approval(msg.sender, spender, newAllowance);\\n//        return true;\\n//    }\\n//\\n//    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n//        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n//        uint256 currentAllowance = _allowed[msg.sender][spender];\\n//        require(currentAllowance >= subtractedValue, \\\"Current allowance is too small\\\");\\n//\\n//        uint256 newAllowance = currentAllowance - subtractedValue;\\n//        _allowed[msg.sender][spender] = newAllowance;\\n//\\n//        emit Approval(msg.sender, spender, newAllowance);\\n//        return true;\\n//    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed\\\");\\n        require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n        _accumulateDepositInterest(sender);\\n\\n        require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        require(canDeposit[msg.sender], \\\"User not permitted to create a loan\\\");\\n\\n        require(_amount>0, \\\"Deposit amount must be > 0\\\");\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool\\\");\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        require(borrowed[msg.sender] >= amount, \\\"Trying to repay more than was borrowed\\\");\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        require(amount <= balance, \\\"Trying to recover more than pool balance\\\");\\n        require(amount <= surplus, \\\"Trying to recover more than current surplus\\\");\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        require(to != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n        require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n            _deposited[address(this)] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        require(address(ratesCalculator) != address(0), \\\"Pool is frozen\\\");\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        require(address(borrowersRegistry) != address(0), \\\"Borrowers registry not configured\\\");\\n        require(borrowersRegistry.canBorrow(msg.sender), \\\"Only authorized accounts may borrow\\\");\\n        require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n        _;\\n        require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n}\",\"keccak256\":\"0x04437aa06acbe30e8d98f7509a8a1fef4c2811f99366249654de6362ba562ac3\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/UsdcPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../Pool.sol\\\";\\n\\n\\n/**\\n * @title UsdcPool\\n * @dev Contract allowing user to deposit to and borrow USDC from a dedicated user account\\n */\\ncontract UsdcPool is Pool {\\n}\",\"keccak256\":\"0x5b90ae9170ec29e8257c3fb51d84a3ecac31327bdd600615aa5f5b2569e5cdb9\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/UsdcPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"./UsdcPool.sol\\\";\\n\\n\\n/**\\n * @title PoolFactory\\n * @dev Contract factory allowing anyone to deploy a pool contract\\n */\\ncontract UsdcPoolFactory {\\n    function deployPool() public {\\n        UsdcPool pool = new UsdcPool();\\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\\n    }\\n\\n    /**\\n     * @dev emitted after pool is deployed by any user\\n     * @param user the address initiating the deployment\\n     * @param poolAddress of deployed pool\\n     * @param timestamp of the deployment\\n     **/\\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\\n}\",\"keccak256\":\"0x7460890d2a7c9a0326000b00d7068f820f26cf69ce9dca05ea0baae953eaa28b\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external;\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x872c6c2ba149ca3c3e4761047819b4c9dd5b979f572815f56740b40edbf74d01\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506155bf806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a4565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a26591883382426040516100999392919061010b565b60405180910390a150565b6154478061014383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b82525050565b6000819050919050565b610105816100f2565b82525050565b600060608201905061012060008301866100e3565b61012d60208301856100e3565b61013a60408301846100fc565b94935050505056fe608060405234801561001057600080fd5b50615427806100206000396000f3fe608060405234801561001057600080fd5b50600436106102065760003560e01c80637b8989391161011a578063b84614a5116100ad578063dd62ed3e1161007c578063dd62ed3e146105b5578063ee61bd6e146105e5578063f2fde38b14610603578063f36b24251461061f578063fc68f6611461063d57610206565b8063b84614a514610543578063c5ebeaec1461055f578063cc2a9a5b1461057b578063d06dca891461059757610206565b8063a9059cbb116100e9578063a9059cbb146104bb578063aa5af0fd146104eb578063b6b55f2514610509578063b790634e1461052557610206565b80637b898939146104435780638da5cb5b146104615780639d76ea581461047f5780639dcee9a41461049d57610206565b80632e1a7d4d1161019d5780636011163e1161016c5780636011163e1461039f5780636ca6d5d0146103cf57806370a08231146103ed57806370d4cea01461041d578063715018a61461043957610206565b80632e1a7d4d14610319578063371fd8e6146103355780634bf0d331146103515780634c19386c1461038157610206565b80631457db34116101d95780631457db341461029157806318160ddd146102ad57806323b872dd146102cb5780632aeaa291146102fb57610206565b80630572b0cc1461020b5780630790ef9a146102155780630941cb3d14610231578063095ea7b314610261575b600080fd5b610213610659565b005b61022f600480360381019061022a9190613c68565b6106e8565b005b61024b60048036038101906102469190613ca8565b610918565b6040516102589190613ce4565b60405180910390f35b61027b60048036038101906102769190613cff565b610930565b6040516102889190613d5a565b60405180910390f35b6102ab60048036038101906102a69190613db3565b610a90565b005b6102b5610c1d565b6040516102c29190613ce4565b60405180910390f35b6102e560048036038101906102e09190613de0565b610c2d565b6040516102f29190613d5a565b60405180910390f35b61030361100e565b6040516103109190613ce4565b60405180910390f35b610333600480360381019061032e9190613e33565b6110b0565b005b61034f600480360381019061034a9190613e33565b611341565b005b61036b60048036038101906103669190613ca8565b611532565b6040516103789190613d5a565b60405180910390f35b610389611552565b6040516103969190613ce4565b60405180910390f35b6103b960048036038101906103b49190613ca8565b611562565b6040516103c69190613ce4565b60405180910390f35b6103d7611648565b6040516103e49190613ebf565b60405180910390f35b61040760048036038101906104029190613ca8565b61166e565b6040516104149190613ce4565b60405180910390f35b61043760048036038101906104329190613f18565b611754565b005b61044161191e565b005b61044b611920565b6040516104589190613f66565b60405180910390f35b610469611946565b6040516104769190613f90565b60405180910390f35b610487611970565b6040516104949190613fcc565b60405180910390f35b6104a5611996565b6040516104b29190613ce4565b60405180910390f35b6104d560048036038101906104d09190613cff565b6119a2565b6040516104e29190613d5a565b60405180910390f35b6104f3611c26565b6040516105009190613f66565b60405180910390f35b610523600480360381019061051e9190613e33565b611c4c565b005b61052d611f24565b60405161053a9190613ce4565b60405180910390f35b61055d60048036038101906105589190614013565b611fd7565b005b61057960048036038101906105749190613e33565b6120ae565b005b610595600480360381019061059091906140fb565b612528565b005b61059f612873565b6040516105ac91906141a9565b60405180910390f35b6105cf60048036038101906105ca91906141c4565b612899565b6040516105dc9190613ce4565b60405180910390f35b6105ed612920565b6040516105fa9190614225565b60405180910390f35b61061d60048036038101906106189190613ca8565b612946565b005b610627612a3d565b6040516106349190613ce4565b60405180910390f35b61065760048036038101906106529190614240565b612af0565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b81526004016106b49190613f90565b600060405180830381600087803b1580156106ce57600080fd5b505af11580156106e2573d6000803e3d6000fd5b50505050565b6106f0612c46565b73ffffffffffffffffffffffffffffffffffffffff1661070e611946565b73ffffffffffffffffffffffffffffffffffffffff1614610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b906142ca565b60405180910390fd5b6002606554036107a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a090614336565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161080e9190613f90565b602060405180830381865afa15801561082b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f919061436b565b9050600061085b610c1d565b610863611552565b8361086e91906143c7565b61087891906143fb565b9050818411156108bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b4906144a1565b60405180910390fd5b80841115610900576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f790614533565b60405180910390fd5b61090a8385612c4e565b505060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109a0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109979061459f565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610a7e9190613ce4565b60405180910390a36001905092915050565b610a98612c46565b73ffffffffffffffffffffffffffffffffffffffff16610ab6611946565b73ffffffffffffffffffffffffffffffffffffffff1614610b0c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b03906142ca565b60405180910390fd5b610b1581612c9f565b80610b4c5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610b8b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b829061460b565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610c129190613ce4565b60405180910390a250565b6000610c283061166e565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610cee576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce590614677565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610d5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5490614709565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610dcb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc29061479b565b60405180910390fd5b610dd484612cc2565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610e56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4d9061482d565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ea591906143fb565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f3891906143fb565b92505081905550610f4883612cc2565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f9791906143c7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ffb9190613ce4565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b815260040161106a9190613f90565b602060405180830381865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab919061436b565b905090565b6002606554036110f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ec90614336565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016111599190613f90565b602060405180830381865afa158015611176573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119a919061436b565b10156111db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d290614899565b60405180910390fd5b6111e433612cc2565b6111ee3382612edd565b6111f83382612c4e565b6112006130e5565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146112e657609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b81526004016112b39291906148b9565b600060405180830381600087803b1580156112cd57600080fd5b505af11580156112e1573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb824260405161132e9291906148e2565b60405180910390a2600160658190555050565b600260655403611386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137d90614336565b60405180910390fd5b6002606581905550611397336133e6565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611419576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114109061497d565b60405180910390fd5b611423338261359b565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461147291906143fb565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114c891906143fb565b925050819055506114d76130e5565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d824260405161151f9291906148e2565b60405180910390a2600160658190555050565b609a6020528060005260406000206000915054906101000a900460ff1681565b600061155d30611562565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016116009291906148b9565b602060405180830381865afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611641919061436b565b9050919050565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b815260040161170c9291906148b9565b602060405180830381865afa158015611729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174d919061436b565b9050919050565b61175c612c46565b73ffffffffffffffffffffffffffffffffffffffff1661177a611946565b73ffffffffffffffffffffffffffffffffffffffff16146117d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c7906142ca565b60405180910390fd5b6117d981612c9f565b806118105750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b61184f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118469061460b565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118cd576118cc6130e5565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e0182426040516119139190613ce4565b60405180910390a250565b565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0990614709565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611a80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a779061479b565b60405180910390fd5b611a8933612cc2565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611b0b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b029061482d565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611b6183612cc2565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611bb091906143c7565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611c149190613ce4565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260655403611c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c8890614336565b60405180910390fd5b6002606581905550609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611d25576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1c90614a0f565b60405180910390fd5b60008111611d68576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5f90614a7b565b60405180910390fd5b611d7133612cc2565b611d7b338261359b565b611d8533826135ee565b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611dd491906143c7565b92505081905550611de36130e5565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611ec957609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b8152600401611e969291906148b9565b600060405180830381600087803b158015611eb057600080fd5b505af1158015611ec4573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a158242604051611f119291906148e2565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331611f6c611552565b611f74610c1d565b6040518363ffffffff1660e01b8152600401611f919291906148e2565b602060405180830381865afa158015611fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fd2919061436b565b905090565b611fdf612c46565b73ffffffffffffffffffffffffffffffffffffffff16611ffd611946565b73ffffffffffffffffffffffffffffffffffffffff1614612053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161204a906142ca565b60405180910390fd5b80609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361213f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161213690614b0d565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b815260040161219a9190613f90565b602060405180830381865afa1580156121b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121db9190614b42565b61221a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221190614be1565b60405180910390fd5b6000612224610c1d565b03612264576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161225b90614c4d565b60405180910390fd5b6002606554036122a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122a090614336565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161230d9190613f90565b602060405180830381865afa15801561232a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061234e919061436b565b101561238f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238690614899565b60405180910390fd5b612398336133e6565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123e791906143c7565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461243d91906143c7565b9250508190555061244e3382612c4e565b6124566130e5565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d5824260405161249e9291906148e2565b60405180910390a26001606581905550670d2f13f7789f00006124bf610c1d565b670de0b6b3a76400006124d0611552565b6124da9190614c6d565b6124e49190614cde565b1115612525576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161251c90614d81565b60405180910390fd5b50565b600060019054906101000a900460ff166125505760008054906101000a900460ff1615612559565b61255861371d565b5b612598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258f90614e13565b60405180910390fd5b60008060019054906101000a900460ff1615905080156125e8576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6125f187612c9f565b8015612602575061260186612c9f565b5b8015612613575061261285612c9f565b5b8015612624575061262384612c9f565b5b801561266c575061263482612c9f565b8061266b5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b5b6126ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126a290614e7f565b60405180910390fd5b85609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061283961372e565b612841613787565b6128496130e5565b801561286a5760008060016101000a81548160ff0219169083151502179055505b50505050505050565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61294e612c46565b73ffffffffffffffffffffffffffffffffffffffff1661296c611946565b73ffffffffffffffffffffffffffffffffffffffff16146129c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b9906142ca565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612a31576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2890614f11565b60405180910390fd5b612a3a816137e0565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec612a85611552565b612a8d610c1d565b6040518363ffffffff1660e01b8152600401612aaa9291906148e2565b602060405180830381865afa158015612ac7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aeb919061436b565b905090565b612af8612c46565b73ffffffffffffffffffffffffffffffffffffffff16612b16611946565b73ffffffffffffffffffffffffffffffffffffffff1614612b6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b63906142ca565b60405180910390fd5b612b7581612c9f565b612bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bab9061460b565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051612c3b9190613ce4565b60405180910390a250565b600033905090565b612c9b828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166138a69092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612d0d8361166e565b612d1791906143fb565b9050612d2382826135ee565b612d2c3061166e565b609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618242604051612db79291906148e2565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b8152600401612e1a9190613f90565b600060405180830381600087803b158015612e3457600080fd5b505af1158015612e48573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401612ea79190613f90565b600060405180830381600087803b158015612ec157600080fd5b505af1158015612ed5573d6000803e3d6000fd5b505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f5690614fa3565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612fe1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fd890615035565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516130d99190613ce4565b60405180910390a35050565b60006130ef611552565b905060006130fb610c1d565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361318e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613185906150a1565b60405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b81526004016132299291906148e2565b602060405180830381865afa158015613246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326a919061436b565b6040518263ffffffff1660e01b81526004016132869190613ce4565b600060405180830381600087803b1580156132a057600080fd5b505af11580156132b4573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b81526004016133539291906148e2565b602060405180830381865afa158015613370573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613394919061436b565b6040518263ffffffff1660e01b81526004016133b09190613ce4565b600060405180830381600087803b1580156133ca57600080fd5b505af11580156133de573d6000803e3d6000fd5b505050505050565b6133ef81611562565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061343b30611562565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b81526004016134d99190613f90565b600060405180830381600087803b1580156134f357600080fd5b505af1158015613507573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016135669190613f90565b600060405180830381600087803b15801561358057600080fd5b505af1158015613594573d6000803e3d6000fd5b5050505050565b6135ea82308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166139dc909392919063ffffffff16565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361365d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161365490615133565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546136ac91906143c7565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516137119190613ce4565b60405180910390a35050565b600061372830612c9f565b15905090565b600060019054906101000a900460ff1661377d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613774906151c5565b60405180910390fd5b613785613b15565b565b600060019054906101000a900460ff166137d6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137cd906151c5565b60405180910390fd5b6137de613b76565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016138d89291906151e5565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613926919061527f565b6000604051808303816000865af19150503d8060008114613963576040519150601f19603f3d011682016040523d82523d6000602084013e613968565b606091505b509150915081801561399657506000815114806139955750808060200190518101906139949190614b42565b5b5b6139d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139cc90615308565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401613a1093929190615328565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051613a5e919061527f565b6000604051808303816000865af19150503d8060008114613a9b576040519150601f19603f3d011682016040523d82523d6000602084013e613aa0565b606091505b5091509150818015613ace5750600081511480613acd575080806020019051810190613acc9190614b42565b5b5b613b0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b04906153d1565b60405180910390fd5b505050505050565b600060019054906101000a900460ff16613b64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b5b906151c5565b60405180910390fd5b613b74613b6f612c46565b6137e0565b565b600060019054906101000a900460ff16613bc5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613bbc906151c5565b60405180910390fd5b6001606581905550565b600080fd5b6000819050919050565b613be781613bd4565b8114613bf257600080fd5b50565b600081359050613c0481613bde565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613c3582613c0a565b9050919050565b613c4581613c2a565b8114613c5057600080fd5b50565b600081359050613c6281613c3c565b92915050565b60008060408385031215613c7f57613c7e613bcf565b5b6000613c8d85828601613bf5565b9250506020613c9e85828601613c53565b9150509250929050565b600060208284031215613cbe57613cbd613bcf565b5b6000613ccc84828501613c53565b91505092915050565b613cde81613bd4565b82525050565b6000602082019050613cf96000830184613cd5565b92915050565b60008060408385031215613d1657613d15613bcf565b5b6000613d2485828601613c53565b9250506020613d3585828601613bf5565b9150509250929050565b60008115159050919050565b613d5481613d3f565b82525050565b6000602082019050613d6f6000830184613d4b565b92915050565b6000613d8082613c2a565b9050919050565b613d9081613d75565b8114613d9b57600080fd5b50565b600081359050613dad81613d87565b92915050565b600060208284031215613dc957613dc8613bcf565b5b6000613dd784828501613d9e565b91505092915050565b600080600060608486031215613df957613df8613bcf565b5b6000613e0786828701613c53565b9350506020613e1886828701613c53565b9250506040613e2986828701613bf5565b9150509250925092565b600060208284031215613e4957613e48613bcf565b5b6000613e5784828501613bf5565b91505092915050565b6000819050919050565b6000613e85613e80613e7b84613c0a565b613e60565b613c0a565b9050919050565b6000613e9782613e6a565b9050919050565b6000613ea982613e8c565b9050919050565b613eb981613e9e565b82525050565b6000602082019050613ed46000830184613eb0565b92915050565b6000613ee582613c2a565b9050919050565b613ef581613eda565b8114613f0057600080fd5b50565b600081359050613f1281613eec565b92915050565b600060208284031215613f2e57613f2d613bcf565b5b6000613f3c84828501613f03565b91505092915050565b6000613f5082613e8c565b9050919050565b613f6081613f45565b82525050565b6000602082019050613f7b6000830184613f57565b92915050565b613f8a81613c2a565b82525050565b6000602082019050613fa56000830184613f81565b92915050565b6000613fb682613c0a565b9050919050565b613fc681613fab565b82525050565b6000602082019050613fe16000830184613fbd565b92915050565b613ff081613d3f565b8114613ffb57600080fd5b50565b60008135905061400d81613fe7565b92915050565b6000806040838503121561402a57614029613bcf565b5b600061403885828601613c53565b925050602061404985828601613ffe565b9150509250929050565b600061405e82613c2a565b9050919050565b61406e81614053565b811461407957600080fd5b50565b60008135905061408b81614065565b92915050565b600061409c82613c2a565b9050919050565b6140ac81614091565b81146140b757600080fd5b50565b6000813590506140c9816140a3565b92915050565b6140d881613fab565b81146140e357600080fd5b50565b6000813590506140f5816140cf565b92915050565b60008060008060008060c0878903121561411857614117613bcf565b5b600061412689828a01613f03565b965050602061413789828a0161407c565b955050604061414889828a016140ba565b945050606061415989828a016140ba565b935050608061416a89828a016140e6565b92505060a061417b89828a01613d9e565b9150509295509295509295565b600061419382613e8c565b9050919050565b6141a381614188565b82525050565b60006020820190506141be600083018461419a565b92915050565b600080604083850312156141db576141da613bcf565b5b60006141e985828601613c53565b92505060206141fa85828601613c53565b9150509250929050565b600061420f82613e8c565b9050919050565b61421f81614204565b82525050565b600060208201905061423a6000830184614216565b92915050565b60006020828403121561425657614255613bcf565b5b60006142648482850161407c565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006142b460208361426d565b91506142bf8261427e565b602082019050919050565b600060208201905081810360008301526142e3816142a7565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614320601f8361426d565b915061432b826142ea565b602082019050919050565b6000602082019050818103600083015261434f81614313565b9050919050565b60008151905061436581613bde565b92915050565b60006020828403121561438157614380613bcf565b5b600061438f84828501614356565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006143d282613bd4565b91506143dd83613bd4565b92508282019050808211156143f5576143f4614398565b5b92915050565b600061440682613bd4565b915061441183613bd4565b925082820390508181111561442957614428614398565b5b92915050565b7f547279696e6720746f207265636f766572206d6f7265207468616e20706f6f6c60008201527f2062616c616e6365000000000000000000000000000000000000000000000000602082015250565b600061448b60288361426d565b91506144968261442f565b604082019050919050565b600060208201905081810360008301526144ba8161447e565b9050919050565b7f547279696e6720746f207265636f766572206d6f7265207468616e206375727260008201527f656e7420737572706c7573000000000000000000000000000000000000000000602082015250565b600061451d602b8361426d565b9150614528826144c1565b604082019050919050565b6000602082019050818103600083015261454c81614510565b9050919050565b7f5370656e6465722063616e6e6f742062652061207a65726f2061646472657373600082015250565b600061458960208361426d565b915061459482614553565b602082019050919050565b600060208201905081810360008301526145b88161457c565b9050919050565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b60006145f560128361426d565b9150614600826145bf565b602082019050919050565b60006020820190508181036000830152614624816145e8565b9050919050565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656400000000000000600082015250565b600061466160198361426d565b915061466c8261462b565b602082019050919050565b6000602082019050818103600083015261469081614654565b9050919050565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b60006146f3602a8361426d565b91506146fe82614697565b604082019050919050565b60006020820190508181036000830152614722816146e6565b9050919050565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b6000614785602a8361426d565b915061479082614729565b604082019050919050565b600060208201905081810360008301526147b481614778565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b600061481760268361426d565b9150614822826147bb565b604082019050919050565b600060208201905081810360008301526148468161480a565b9050919050565b7f4e6f7420656e6f7567682066756e647320696e2074686520706f6f6c00000000600082015250565b6000614883601c8361426d565b915061488e8261484d565b602082019050919050565b600060208201905081810360008301526148b281614876565b9050919050565b60006040820190506148ce6000830185613cd5565b6148db6020830184613f81565b9392505050565b60006040820190506148f76000830185613cd5565b6149046020830184613cd5565b9392505050565b7f547279696e6720746f207265706179206d6f7265207468616e2077617320626f60008201527f72726f7765640000000000000000000000000000000000000000000000000000602082015250565b600061496760268361426d565b91506149728261490b565b604082019050919050565b600060208201905081810360008301526149968161495a565b9050919050565b7f55736572206e6f74207065726d697474656420746f206372656174652061206c60008201527f6f616e0000000000000000000000000000000000000000000000000000000000602082015250565b60006149f960238361426d565b9150614a048261499d565b604082019050919050565b60006020820190508181036000830152614a28816149ec565b9050919050565b7f4465706f73697420616d6f756e74206d757374206265203e2030000000000000600082015250565b6000614a65601a8361426d565b9150614a7082614a2f565b602082019050919050565b60006020820190508181036000830152614a9481614a58565b9050919050565b7f426f72726f77657273207265676973747279206e6f7420636f6e66696775726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000614af760218361426d565b9150614b0282614a9b565b604082019050919050565b60006020820190508181036000830152614b2681614aea565b9050919050565b600081519050614b3c81613fe7565b92915050565b600060208284031215614b5857614b57613bcf565b5b6000614b6684828501614b2d565b91505092915050565b7f4f6e6c7920617574686f72697a6564206163636f756e7473206d617920626f7260008201527f726f770000000000000000000000000000000000000000000000000000000000602082015250565b6000614bcb60238361426d565b9150614bd682614b6f565b604082019050919050565b60006020820190508181036000830152614bfa81614bbe565b9050919050565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b6000614c3760208361426d565b9150614c4282614c01565b602082019050919050565b60006020820190508181036000830152614c6681614c2a565b9050919050565b6000614c7882613bd4565b9150614c8383613bd4565b9250828202614c9181613bd4565b91508282048414831517614ca857614ca7614398565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614ce982613bd4565b9150614cf483613bd4565b925082614d0457614d03614caf565b5b828204905092915050565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b6000614d6b602f8361426d565b9150614d7682614d0f565b604082019050919050565b60006020820190508181036000830152614d9a81614d5e565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000614dfd602e8361426d565b9150614e0882614da1565b604082019050919050565b60006020820190508181036000830152614e2c81614df0565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b6000614e6960148361426d565b9150614e7482614e33565b602082019050919050565b60006020820190508181036000830152614e9881614e5c565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000614efb60268361426d565b9150614f0682614e9f565b604082019050919050565b60006020820190508181036000830152614f2a81614eee565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b6000614f8d60278361426d565b9150614f9882614f31565b604082019050919050565b60006020820190508181036000830152614fbc81614f80565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b600061501f60378361426d565b915061502a82614fc3565b604082019050919050565b6000602082019050818103600083015261504e81615012565b9050919050565b7f506f6f6c2069732066726f7a656e000000000000000000000000000000000000600082015250565b600061508b600e8361426d565b915061509682615055565b602082019050919050565b600060208201905081810360008301526150ba8161507e565b9050919050565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600061511d60268361426d565b9150615128826150c1565b604082019050919050565b6000602082019050818103600083015261514c81615110565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b60006151af602b8361426d565b91506151ba82615153565b604082019050919050565b600060208201905081810360008301526151de816151a2565b9050919050565b60006040820190506151fa6000830185613f81565b6152076020830184613cd5565b9392505050565b600081519050919050565b600081905092915050565b60005b83811015615242578082015181840152602081019050615227565b60008484015250505050565b60006152598261520e565b6152638185615219565b9350615273818560208601615224565b80840191505092915050565b600061528b828461524e565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b60006152f2602d8361426d565b91506152fd82615296565b604082019050919050565b60006020820190508181036000830152615321816152e5565b9050919050565b600060608201905061533d6000830186613f81565b61534a6020830185613f81565b6153576040830184613cd5565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b60006153bb60318361426d565b91506153c68261535f565b604082019050919050565b600060208201905081810360008301526153ea816153ae565b905091905056fea26469706673582212207d698f0809537001fc86142533c3985153c32152fb5e84b9234fb73a684dffea64736f6c63430008110033a264697066735822122059d32686e219e3e6b802b1bd9b0047caac82988e967b4898b40e3a4b91f5091664736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a pool contract",
    "events": {
      "PoolDeployed(address,address,uint256)": {
        "details": "emitted after pool is deployed by any user",
        "params": {
          "poolAddress": "of deployed pool",
          "timestamp": "of the deployment*",
          "user": "the address initiating the deployment"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "PoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}