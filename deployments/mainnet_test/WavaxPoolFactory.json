{
  "address": "0x9Eb88975eD681Ae7c93c20b54E579615Fd37898d",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x40dd202c7aeebbf7be8ab4f814678484ddc10643ebac6ed04f1b3e0f1b12e481",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x9Eb88975eD681Ae7c93c20b54E579615Fd37898d",
    "transactionIndex": 0,
    "gasUsed": "5238229",
    "logsBloom": "0x
    "blockHash": "0xf43f78d6f1e48f97f0c48364281ff020ebbb4959c1ee6480a7a08e5c221c3e56",
    "transactionHash": "0x40dd202c7aeebbf7be8ab4f814678484ddc10643ebac6ed04f1b3e0f1b12e481",
    "logs": [],
    "blockNumber": 22331281,
    "cumulativeGasUsed": "5238229",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "6f1353845e1cef882a019b30c57e4f90",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a pool contract\",\"events\":{\"PoolDeployed(address,address,uint256)\":{\"details\":\"emitted after pool is deployed by any user\",\"params\":{\"poolAddress\":\"of deployed pool\",\"timestamp\":\"of the deployment*\",\"user\":\"the address initiating the deployment\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"WavaxPoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/WavaxPoolFactory.sol\":\"WavaxPoolFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2e9f2aba0ab8e419a7d1bf6e83f967ae0bc9c538;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n    mapping(address => bool) public canDeposit;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== TEST-DEPLOYMENT ========== */\\n\\n    /* ========== SETTERS ========== */\\n    function setAccess(address user, bool allowDeposit) external onlyOwner {\\n        canDeposit[user] = allowDeposit;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        require(AddressUpgradeable.isContract(address(_poolRewarder)) || address(_poolRewarder) == address(0), \\\"Must be a contract\\\");\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n//    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n//        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n//        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n//        _allowed[msg.sender][spender] = newAllowance;\\n//\\n//        emit Approval(msg.sender, spender, newAllowance);\\n//        return true;\\n//    }\\n//\\n//    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n//        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n//        uint256 currentAllowance = _allowed[msg.sender][spender];\\n//        require(currentAllowance >= subtractedValue, \\\"Current allowance is too small\\\");\\n//\\n//        uint256 newAllowance = currentAllowance - subtractedValue;\\n//        _allowed[msg.sender][spender] = newAllowance;\\n//\\n//        emit Approval(msg.sender, spender, newAllowance);\\n//        return true;\\n//    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed\\\");\\n        require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n        _accumulateDepositInterest(sender);\\n\\n        require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        require(canDeposit[msg.sender], \\\"User not permitted to create a loan\\\");\\n\\n        require(_amount>0, \\\"Deposit amount must be > 0\\\");\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool\\\");\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        require(borrowed[msg.sender] >= amount, \\\"Trying to repay more than was borrowed\\\");\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        require(amount <= balance, \\\"Trying to recover more than pool balance\\\");\\n        require(amount <= surplus, \\\"Trying to recover more than current surplus\\\");\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        require(to != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n        require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n            _deposited[address(this)] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        require(address(ratesCalculator) != address(0), \\\"Pool is frozen\\\");\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        require(address(borrowersRegistry) != address(0), \\\"Borrowers registry not configured\\\");\\n        require(borrowersRegistry.canBorrow(msg.sender), \\\"Only authorized accounts may borrow\\\");\\n        require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n        _;\\n        require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n}\",\"keccak256\":\"0x04437aa06acbe30e8d98f7509a8a1fef4c2811f99366249654de6362ba562ac3\",\"license\":\"BUSL-1.1\"},\"contracts/WrappedNativeTokenPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"./Pool.sol\\\";\\nimport \\\"./interfaces/IWrappedNativeToken.sol\\\";\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a single pot\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\n * The interest rates calculation is delegated to the external calculator contract.\\n */\\ncontract WrappedNativeTokenPool is Pool {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    /**\\n     * Wraps and deposits amount attached to the transaction\\n     **/\\n    function depositNativeToken() public payable virtual {\\n        require(canDeposit[msg.sender], \\\"User not permitted to create a loan\\\");\\n        IWrappedNativeToken(tokenAddress).deposit{value : msg.value}();\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _mint(msg.sender, msg.value);\\n        _deposited[address(this)] += msg.value;\\n        _updateRates();\\n\\n        emit Deposit(msg.sender, msg.value, block.timestamp);\\n    }\\n\\n    /**\\n     * Unwraps and withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdrawNativeToken(uint256 _amount) external nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool to withdraw\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _burn(msg.sender, _amount);\\n\\n        IWrappedNativeToken(tokenAddress).withdraw(_amount);\\n        payable(msg.sender).safeTransferETH(_amount);\\n\\n        _updateRates();\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /* ========== RECEIVE AVAX FUNCTION ========== */\\n    //needed for withdrawNativeToken\\n    receive() external payable {}\\n}\",\"keccak256\":\"0x1110a64d6b7ef8d0abd43952946c16c5c8a47000af8ad0467f7234d63aebeec0\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/WavaxPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../WrappedNativeTokenPool.sol\\\";\\n\\n\\n/**\\n * @title WavaxPool\\n * @dev Contract allowing user to deposit to and borrow WAVAX from a dedicated user account\\n */\\ncontract WavaxPool is WrappedNativeTokenPool {\\n}\",\"keccak256\":\"0x5d06bbb222315cb6d6592bb40fe707f6e7c88423bbd5eba64811a3e78d19f629\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/WavaxPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"./WavaxPool.sol\\\";\\n\\n\\n/**\\n * @title WavaxPoolFactory\\n * @dev Contract factory allowing anyone to deploy a pool contract\\n */\\ncontract WavaxPoolFactory {\\n    function deployPool() public {\\n        WavaxPool pool = new WavaxPool();\\n        emit PoolDeployed(msg.sender, address(pool), block.timestamp);\\n    }\\n\\n    /**\\n     * @dev emitted after pool is deployed by any user\\n     * @param user the address initiating the deployment\\n     * @param poolAddress of deployed pool\\n     * @param timestamp of the deployment\\n     **/\\n    event PoolDeployed(address user, address poolAddress, uint256 timestamp);\\n}\",\"keccak256\":\"0xc3860925105fce9f6761d18794247c66e0fd1bcc113e5718eb040350180dea20\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external;\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x872c6c2ba149ca3c3e4761047819b4c9dd5b979f572815f56740b40edbf74d01\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IWrappedNativeToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity 0.8.17;\\n\\ninterface IWrappedNativeToken {\\n\\n    function balanceOf(address account) external view returns (uint);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint wad) external;\\n\\n    function totalSupply() external view returns (uint);\\n\\n    function approve(address guy, uint wad) external returns (bool);\\n\\n    function transfer(address dst, uint wad) external returns (bool);\\n\\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\\n\\n}\",\"keccak256\":\"0xda3d2a135faa6e2ae9b10fa2727a498fdd64e26ebf1e367e2b031e7d35647196\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615e3d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a4565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a26591883382426040516100999392919061010b565b60405180910390a150565b615cc58061014383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b82525050565b6000819050919050565b610105816100f2565b82525050565b600060608201905061012060008301866100e3565b61012d60208301856100e3565b61013a60408301846100fc565b94935050505056fe608060405234801561001057600080fd5b50615ca480620000216000396000f3fe6080604052600436106102135760003560e01c806379433d8b11610118578063b84614a5116100a0578063dd62ed3e1161006f578063dd62ed3e14610775578063ee61bd6e146107b2578063f2fde38b146107dd578063f36b242514610806578063fc68f661146108315761021a565b8063b84614a5146106cf578063c5ebeaec146106f8578063cc2a9a5b14610721578063d06dca891461074a5761021a565b80639dcee9a4116100e75780639dcee9a4146105e8578063a9059cbb14610613578063aa5af0fd14610650578063b6b55f251461067b578063b790634e146106a45761021a565b806379433d8b1461055d5780637b898939146105675780638da5cb5b146105925780639d76ea58146105bd5761021a565b80632e1a7d4d1161019b5780636011163e1161016a5780636011163e146104785780636ca6d5d0146104b557806370a08231146104e057806370d4cea01461051d578063715018a6146105465761021a565b80632e1a7d4d146103be578063371fd8e6146103e75780634bf0d331146104105780634c19386c1461044d5761021a565b80631457db34116101e25780631457db34146102d957806317e0f2521461030257806318160ddd1461032b57806323b872dd146103565780632aeaa291146103935761021a565b80630572b0cc1461021f5780630790ef9a146102365780630941cb3d1461025f578063095ea7b31461029c5761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b5061023461085a565b005b34801561024257600080fd5b5061025d60048036038101906102589190614392565b6108e9565b005b34801561026b57600080fd5b50610286600480360381019061028191906143d2565b610b19565b604051610293919061440e565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be9190614429565b610b31565b6040516102d09190614484565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb91906144dd565b610c91565b005b34801561030e57600080fd5b506103296004803603810190610324919061450a565b610e1e565b005b34801561033757600080fd5b50610340611075565b60405161034d919061440e565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190614537565b611085565b60405161038a9190614484565b60405180910390f35b34801561039f57600080fd5b506103a8611466565b6040516103b5919061440e565b60405180910390f35b3480156103ca57600080fd5b506103e560048036038101906103e0919061450a565b611508565b005b3480156103f357600080fd5b5061040e6004803603810190610409919061450a565b611799565b005b34801561041c57600080fd5b50610437600480360381019061043291906143d2565b61198a565b6040516104449190614484565b60405180910390f35b34801561045957600080fd5b506104626119aa565b60405161046f919061440e565b60405180910390f35b34801561048457600080fd5b5061049f600480360381019061049a91906143d2565b6119ba565b6040516104ac919061440e565b60405180910390f35b3480156104c157600080fd5b506104ca611aa0565b6040516104d791906145e9565b60405180910390f35b3480156104ec57600080fd5b50610507600480360381019061050291906143d2565b611ac6565b604051610514919061440e565b60405180910390f35b34801561052957600080fd5b50610544600480360381019061053f9190614642565b611bac565b005b34801561055257600080fd5b5061055b611d76565b005b610565611d78565b005b34801561057357600080fd5b5061057c611f4a565b6040516105899190614690565b60405180910390f35b34801561059e57600080fd5b506105a7611f70565b6040516105b491906146ba565b60405180910390f35b3480156105c957600080fd5b506105d2611f9a565b6040516105df91906146f6565b60405180910390f35b3480156105f457600080fd5b506105fd611fc0565b60405161060a919061440e565b60405180910390f35b34801561061f57600080fd5b5061063a60048036038101906106359190614429565b611fcc565b6040516106479190614484565b60405180910390f35b34801561065c57600080fd5b50610665612250565b6040516106729190614690565b60405180910390f35b34801561068757600080fd5b506106a2600480360381019061069d919061450a565b612276565b005b3480156106b057600080fd5b506106b961254e565b6040516106c6919061440e565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f1919061473d565b612601565b005b34801561070457600080fd5b5061071f600480360381019061071a919061450a565b6126d8565b005b34801561072d57600080fd5b5061074860048036038101906107439190614825565b612b52565b005b34801561075657600080fd5b5061075f612e9d565b60405161076c91906148d3565b60405180910390f35b34801561078157600080fd5b5061079c600480360381019061079791906148ee565b612ec3565b6040516107a9919061440e565b60405180910390f35b3480156107be57600080fd5b506107c7612f4a565b6040516107d4919061494f565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff91906143d2565b612f70565b005b34801561081257600080fd5b5061081b613067565b604051610828919061440e565b60405180910390f35b34801561083d57600080fd5b506108586004803603810190610853919061496a565b61311a565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b81526004016108b591906146ba565b600060405180830381600087803b1580156108cf57600080fd5b505af11580156108e3573d6000803e3d6000fd5b50505050565b6108f1613270565b73ffffffffffffffffffffffffffffffffffffffff1661090f611f70565b73ffffffffffffffffffffffffffffffffffffffff1614610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c906149f4565b60405180910390fd5b6002606554036109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a190614a60565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a0f91906146ba565b602060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190614a95565b90506000610a5c611075565b610a646119aa565b83610a6f9190614af1565b610a799190614b25565b905081841115610abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab590614bcb565b60405180910390fd5b80841115610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890614c5d565b60405180910390fd5b610b0b8385613278565b505060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890614cc9565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610c7f919061440e565b60405180910390a36001905092915050565b610c99613270565b73ffffffffffffffffffffffffffffffffffffffff16610cb7611f70565b73ffffffffffffffffffffffffffffffffffffffff1614610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906149f4565b60405180910390fd5b610d16816132c9565b80610d4d5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390614d35565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610e13919061440e565b60405180910390a250565b600260655403610e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5a90614a60565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ec791906146ba565b602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190614a95565b1015610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4090614dc7565b60405180910390fd5b610f52336132ec565b610f5c3382613507565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610fb7919061440e565b600060405180830381600087803b158015610fd157600080fd5b505af1158015610fe5573d6000803e3d6000fd5b50505050611012813373ffffffffffffffffffffffffffffffffffffffff1661370f90919063ffffffff16565b61101a61380f565b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051611062929190614de7565b60405180910390a2600160658190555050565b600061108030611ac6565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d90614e5c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac90614eee565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a90614f80565b60405180910390fd5b61122c846132ec565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a590615012565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112fd9190614b25565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113909190614b25565b925050819055506113a0836132ec565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ef9190614af1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611453919061440e565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b81526004016114c291906146ba565b602060405180830381865afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115039190614a95565b905090565b60026065540361154d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154490614a60565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115b191906146ba565b602060405180830381865afa1580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f29190614a95565b1015611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a9061507e565b60405180910390fd5b61163c336132ec565b6116463382613507565b6116503382613278565b61165861380f565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461173e57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b815260040161170b92919061509e565b600060405180830381600087803b15801561172557600080fd5b505af1158015611739573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051611786929190614de7565b60405180910390a2600160658190555050565b6002606554036117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d590614a60565b60405180910390fd5b60026065819055506117ef33613b10565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186890615139565b60405180910390fd5b61187b3382613cc5565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118ca9190614b25565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119209190614b25565b9250508190555061192f61380f565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d8242604051611977929190614de7565b60405180910390a2600160658190555050565b609a6020528060005260406000206000915054906101000a900460ff1681565b60006119b5306119ba565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401611a5892919061509e565b602060405180830381865afa158015611a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a999190614a95565b9050919050565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401611b6492919061509e565b602060405180830381865afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190614a95565b9050919050565b611bb4613270565b73ffffffffffffffffffffffffffffffffffffffff16611bd2611f70565b73ffffffffffffffffffffffffffffffffffffffff1614611c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1f906149f4565b60405180910390fd5b611c31816132c9565b80611c685750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e90614d35565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d2557611d2461380f565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e018242604051611d6b919061440e565b60405180910390a250565b565b609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb906151cb565b60405180910390fd5b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e6e57600080fd5b505af1158015611e82573d6000803e3d6000fd5b5050505050611e90336132ec565b611e9a3334613d18565b34609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ee99190614af1565b92505081905550611ef861380f565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a153442604051611f40929190614de7565b60405180910390a2565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361203c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203390614eee565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a190614f80565b60405180910390fd5b6120b3336132ec565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212c90615012565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061218b836132ec565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121da9190614af1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161223e919061440e565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002606554036122bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b290614a60565b60405180910390fd5b6002606581905550609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661234f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612346906151cb565b60405180910390fd5b60008111612392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238990615237565b60405180910390fd5b61239b336132ec565b6123a53382613cc5565b6123af3382613d18565b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123fe9190614af1565b9250508190555061240d61380f565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124f357609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b81526004016124c092919061509e565b600060405180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15824260405161253b929190614de7565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd083316125966119aa565b61259e611075565b6040518363ffffffff1660e01b81526004016125bb929190614de7565b602060405180830381865afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc9190614a95565b905090565b612609613270565b73ffffffffffffffffffffffffffffffffffffffff16612627611f70565b73ffffffffffffffffffffffffffffffffffffffff161461267d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612674906149f4565b60405180910390fd5b80609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612760906152c9565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b81526004016127c491906146ba565b602060405180830381865afa1580156127e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280591906152fe565b612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283b9061539d565b60405180910390fd5b600061284e611075565b0361288e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288590615409565b60405180910390fd5b6002606554036128d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ca90614a60565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161293791906146ba565b602060405180830381865afa158015612954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129789190614a95565b10156129b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b09061507e565b60405180910390fd5b6129c233613b10565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a119190614af1565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a679190614af1565b92505081905550612a783382613278565b612a8061380f565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d58242604051612ac8929190614de7565b60405180910390a26001606581905550670d2f13f7789f0000612ae9611075565b670de0b6b3a7640000612afa6119aa565b612b049190615429565b612b0e919061549a565b1115612b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b469061553d565b60405180910390fd5b50565b600060019054906101000a900460ff16612b7a5760008054906101000a900460ff1615612b83565b612b82613e47565b5b612bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb9906155cf565b60405180910390fd5b60008060019054906101000a900460ff161590508015612c12576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612c1b876132c9565b8015612c2c5750612c2b866132c9565b5b8015612c3d5750612c3c856132c9565b5b8015612c4e5750612c4d846132c9565b5b8015612c965750612c5e826132c9565b80612c955750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b5b612cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ccc9061563b565b60405180910390fd5b85609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e63613e58565b612e6b613eb1565b612e7361380f565b8015612e945760008060016101000a81548160ff0219169083151502179055505b50505050505050565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612f78613270565b73ffffffffffffffffffffffffffffffffffffffff16612f96611f70565b73ffffffffffffffffffffffffffffffffffffffff1614612fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe3906149f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361305b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613052906156cd565b60405180910390fd5b61306481613f0a565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec6130af6119aa565b6130b7611075565b6040518363ffffffff1660e01b81526004016130d4929190614de7565b602060405180830381865afa1580156130f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131159190614a95565b905090565b613122613270565b73ffffffffffffffffffffffffffffffffffffffff16613140611f70565b73ffffffffffffffffffffffffffffffffffffffff1614613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161318d906149f4565b60405180910390fd5b61319f816132c9565b6131de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d590614d35565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051613265919061440e565b60405180910390a250565b600033905090565b6132c5828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613fd09092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461333783611ac6565b6133419190614b25565b905061334d8282613d18565b61335630611ac6565b609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e216182426040516133e1929190614de7565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b815260040161344491906146ba565b600060405180830381600087803b15801561345e57600080fd5b505af1158015613472573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016134d191906146ba565b600060405180830381600087803b1580156134eb57600080fd5b505af11580156134ff573d6000803e3d6000fd5b505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135809061575f565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561360b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613602906157f1565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613703919061440e565b60405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561374457613743615811565b5b6040519080825280601f01601f1916602001820160405280156137765781602001600182028036833780820191505090505b5060405161378491906158b1565b60006040518083038185875af1925050503d80600081146137c1576040519150601f19603f3d011682016040523d82523d6000602084013e6137c6565b606091505b505090508061380a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138019061593a565b60405180910390fd5b505050565b60006138196119aa565b90506000613825611075565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036138b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138af906159a6565b60405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b8152600401613953929190614de7565b602060405180830381865afa158015613970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139949190614a95565b6040518263ffffffff1660e01b81526004016139b0919061440e565b600060405180830381600087803b1580156139ca57600080fd5b505af11580156139de573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b8152600401613a7d929190614de7565b602060405180830381865afa158015613a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613abe9190614a95565b6040518263ffffffff1660e01b8152600401613ada919061440e565b600060405180830381600087803b158015613af457600080fd5b505af1158015613b08573d6000803e3d6000fd5b505050505050565b613b19816119ba565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613b65306119ba565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b8152600401613c0391906146ba565b600060405180830381600087803b158015613c1d57600080fd5b505af1158015613c31573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401613c9091906146ba565b600060405180830381600087803b158015613caa57600080fd5b505af1158015613cbe573d6000803e3d6000fd5b5050505050565b613d1482308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614106909392919063ffffffff16565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d7e90615a38565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613dd69190614af1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613e3b919061440e565b60405180910390a35050565b6000613e52306132c9565b15905090565b600060019054906101000a900460ff16613ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e9e90615aca565b60405180910390fd5b613eaf61423f565b565b600060019054906101000a900460ff16613f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ef790615aca565b60405180910390fd5b613f086142a0565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401614002929190615aea565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161405091906158b1565b6000604051808303816000865af19150503d806000811461408d576040519150601f19603f3d011682016040523d82523d6000602084013e614092565b606091505b50915091508180156140c057506000815114806140bf5750808060200190518101906140be91906152fe565b5b5b6140ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140f690615b85565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161413a93929190615ba5565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161418891906158b1565b6000604051808303816000865af19150503d80600081146141c5576040519150601f19603f3d011682016040523d82523d6000602084013e6141ca565b606091505b50915091508180156141f857506000815114806141f75750808060200190518101906141f691906152fe565b5b5b614237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161422e90615c4e565b60405180910390fd5b505050505050565b600060019054906101000a900460ff1661428e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161428590615aca565b60405180910390fd5b61429e614299613270565b613f0a565b565b600060019054906101000a900460ff166142ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016142e690615aca565b60405180910390fd5b6001606581905550565b600080fd5b6000819050919050565b614311816142fe565b811461431c57600080fd5b50565b60008135905061432e81614308565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061435f82614334565b9050919050565b61436f81614354565b811461437a57600080fd5b50565b60008135905061438c81614366565b92915050565b600080604083850312156143a9576143a86142f9565b5b60006143b78582860161431f565b92505060206143c88582860161437d565b9150509250929050565b6000602082840312156143e8576143e76142f9565b5b60006143f68482850161437d565b91505092915050565b614408816142fe565b82525050565b600060208201905061442360008301846143ff565b92915050565b600080604083850312156144405761443f6142f9565b5b600061444e8582860161437d565b925050602061445f8582860161431f565b9150509250929050565b60008115159050919050565b61447e81614469565b82525050565b60006020820190506144996000830184614475565b92915050565b60006144aa82614354565b9050919050565b6144ba8161449f565b81146144c557600080fd5b50565b6000813590506144d7816144b1565b92915050565b6000602082840312156144f3576144f26142f9565b5b6000614501848285016144c8565b91505092915050565b6000602082840312156145205761451f6142f9565b5b600061452e8482850161431f565b91505092915050565b6000806000606084860312156145505761454f6142f9565b5b600061455e8682870161437d565b935050602061456f8682870161437d565b92505060406145808682870161431f565b9150509250925092565b6000819050919050565b60006145af6145aa6145a584614334565b61458a565b614334565b9050919050565b60006145c182614594565b9050919050565b60006145d3826145b6565b9050919050565b6145e3816145c8565b82525050565b60006020820190506145fe60008301846145da565b92915050565b600061460f82614354565b9050919050565b61461f81614604565b811461462a57600080fd5b50565b60008135905061463c81614616565b92915050565b600060208284031215614658576146576142f9565b5b60006146668482850161462d565b91505092915050565b600061467a826145b6565b9050919050565b61468a8161466f565b82525050565b60006020820190506146a56000830184614681565b92915050565b6146b481614354565b82525050565b60006020820190506146cf60008301846146ab565b92915050565b60006146e082614334565b9050919050565b6146f0816146d5565b82525050565b600060208201905061470b60008301846146e7565b92915050565b61471a81614469565b811461472557600080fd5b50565b60008135905061473781614711565b92915050565b60008060408385031215614754576147536142f9565b5b60006147628582860161437d565b925050602061477385828601614728565b9150509250929050565b600061478882614354565b9050919050565b6147988161477d565b81146147a357600080fd5b50565b6000813590506147b58161478f565b92915050565b60006147c682614354565b9050919050565b6147d6816147bb565b81146147e157600080fd5b50565b6000813590506147f3816147cd565b92915050565b614802816146d5565b811461480d57600080fd5b50565b60008135905061481f816147f9565b92915050565b60008060008060008060c08789031215614842576148416142f9565b5b600061485089828a0161462d565b965050602061486189828a016147a6565b955050604061487289828a016147e4565b945050606061488389828a016147e4565b935050608061489489828a01614810565b92505060a06148a589828a016144c8565b9150509295509295509295565b60006148bd826145b6565b9050919050565b6148cd816148b2565b82525050565b60006020820190506148e860008301846148c4565b92915050565b60008060408385031215614905576149046142f9565b5b60006149138582860161437d565b92505060206149248582860161437d565b9150509250929050565b6000614939826145b6565b9050919050565b6149498161492e565b82525050565b60006020820190506149646000830184614940565b92915050565b6000602082840312156149805761497f6142f9565b5b600061498e848285016147a6565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006149de602083614997565b91506149e9826149a8565b602082019050919050565b60006020820190508181036000830152614a0d816149d1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614a4a601f83614997565b9150614a5582614a14565b602082019050919050565b60006020820190508181036000830152614a7981614a3d565b9050919050565b600081519050614a8f81614308565b92915050565b600060208284031215614aab57614aaa6142f9565b5b6000614ab984828501614a80565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614afc826142fe565b9150614b07836142fe565b9250828201905080821115614b1f57614b1e614ac2565b5b92915050565b6000614b30826142fe565b9150614b3b836142fe565b9250828203905081811115614b5357614b52614ac2565b5b92915050565b7f547279696e6720746f207265636f766572206d6f7265207468616e20706f6f6c60008201527f2062616c616e6365000000000000000000000000000000000000000000000000602082015250565b6000614bb5602883614997565b9150614bc082614b59565b604082019050919050565b60006020820190508181036000830152614be481614ba8565b9050919050565b7f547279696e6720746f207265636f766572206d6f7265207468616e206375727260008201527f656e7420737572706c7573000000000000000000000000000000000000000000602082015250565b6000614c47602b83614997565b9150614c5282614beb565b604082019050919050565b60006020820190508181036000830152614c7681614c3a565b9050919050565b7f5370656e6465722063616e6e6f742062652061207a65726f2061646472657373600082015250565b6000614cb3602083614997565b9150614cbe82614c7d565b602082019050919050565b60006020820190508181036000830152614ce281614ca6565b9050919050565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b6000614d1f601283614997565b9150614d2a82614ce9565b602082019050919050565b60006020820190508181036000830152614d4e81614d12565b9050919050565b7f4e6f7420656e6f7567682066756e647320696e2074686520706f6f6c20746f2060008201527f7769746864726177000000000000000000000000000000000000000000000000602082015250565b6000614db1602883614997565b9150614dbc82614d55565b604082019050919050565b60006020820190508181036000830152614de081614da4565b9050919050565b6000604082019050614dfc60008301856143ff565b614e0960208301846143ff565b9392505050565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656400000000000000600082015250565b6000614e46601983614997565b9150614e5182614e10565b602082019050919050565b60006020820190508181036000830152614e7581614e39565b9050919050565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614ed8602a83614997565b9150614ee382614e7c565b604082019050919050565b60006020820190508181036000830152614f0781614ecb565b9050919050565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b6000614f6a602a83614997565b9150614f7582614f0e565b604082019050919050565b60006020820190508181036000830152614f9981614f5d565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614ffc602683614997565b915061500782614fa0565b604082019050919050565b6000602082019050818103600083015261502b81614fef565b9050919050565b7f4e6f7420656e6f7567682066756e647320696e2074686520706f6f6c00000000600082015250565b6000615068601c83614997565b915061507382615032565b602082019050919050565b600060208201905081810360008301526150978161505b565b9050919050565b60006040820190506150b360008301856143ff565b6150c060208301846146ab565b9392505050565b7f547279696e6720746f207265706179206d6f7265207468616e2077617320626f60008201527f72726f7765640000000000000000000000000000000000000000000000000000602082015250565b6000615123602683614997565b915061512e826150c7565b604082019050919050565b6000602082019050818103600083015261515281615116565b9050919050565b7f55736572206e6f74207065726d697474656420746f206372656174652061206c60008201527f6f616e0000000000000000000000000000000000000000000000000000000000602082015250565b60006151b5602383614997565b91506151c082615159565b604082019050919050565b600060208201905081810360008301526151e4816151a8565b9050919050565b7f4465706f73697420616d6f756e74206d757374206265203e2030000000000000600082015250565b6000615221601a83614997565b915061522c826151eb565b602082019050919050565b6000602082019050818103600083015261525081615214565b9050919050565b7f426f72726f77657273207265676973747279206e6f7420636f6e66696775726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006152b3602183614997565b91506152be82615257565b604082019050919050565b600060208201905081810360008301526152e2816152a6565b9050919050565b6000815190506152f881614711565b92915050565b600060208284031215615314576153136142f9565b5b6000615322848285016152e9565b91505092915050565b7f4f6e6c7920617574686f72697a6564206163636f756e7473206d617920626f7260008201527f726f770000000000000000000000000000000000000000000000000000000000602082015250565b6000615387602383614997565b91506153928261532b565b604082019050919050565b600060208201905081810360008301526153b68161537a565b9050919050565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b60006153f3602083614997565b91506153fe826153bd565b602082019050919050565b60006020820190508181036000830152615422816153e6565b9050919050565b6000615434826142fe565b915061543f836142fe565b925082820261544d816142fe565b9150828204841483151761546457615463614ac2565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006154a5826142fe565b91506154b0836142fe565b9250826154c0576154bf61546b565b5b828204905092915050565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b6000615527602f83614997565b9150615532826154cb565b604082019050919050565b600060208201905081810360008301526155568161551a565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006155b9602e83614997565b91506155c48261555d565b604082019050919050565b600060208201905081810360008301526155e8816155ac565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b6000615625601483614997565b9150615630826155ef565b602082019050919050565b6000602082019050818103600083015261565481615618565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006156b7602683614997565b91506156c28261565b565b604082019050919050565b600060208201905081810360008301526156e6816156aa565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b6000615749602783614997565b9150615754826156ed565b604082019050919050565b600060208201905081810360008301526157788161573c565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b60006157db603783614997565b91506157e68261577f565b604082019050919050565b6000602082019050818103600083015261580a816157ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015615874578082015181840152602081019050615859565b60008484015250505050565b600061588b82615840565b615895818561584b565b93506158a5818560208601615856565b80840191505092915050565b60006158bd8284615880565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b6000615924603483614997565b915061592f826158c8565b604082019050919050565b6000602082019050818103600083015261595381615917565b9050919050565b7f506f6f6c2069732066726f7a656e000000000000000000000000000000000000600082015250565b6000615990600e83614997565b915061599b8261595a565b602082019050919050565b600060208201905081810360008301526159bf81615983565b9050919050565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615a22602683614997565b9150615a2d826159c6565b604082019050919050565b60006020820190508181036000830152615a5181615a15565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615ab4602b83614997565b9150615abf82615a58565b604082019050919050565b60006020820190508181036000830152615ae381615aa7565b9050919050565b6000604082019050615aff60008301856146ab565b615b0c60208301846143ff565b9392505050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000615b6f602d83614997565b9150615b7a82615b13565b604082019050919050565b60006020820190508181036000830152615b9e81615b62565b9050919050565b6000606082019050615bba60008301866146ab565b615bc760208301856146ab565b615bd460408301846143ff565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000615c38603183614997565b9150615c4382615bdc565b604082019050919050565b60006020820190508181036000830152615c6781615c2b565b905091905056fea26469706673582212208e0cd07ce8039a30b82e8945d916ce63cb869132173a4165c68e8fabc5a20b2964736f6c63430008110033a2646970667358221220b618dfb24dca5dd37abe3434ee42fb9b3e93efb8b1ae273daf288672c6972a1264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a4565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ee86aef36bbfe981da97c8fa8694fcb8feba220190e5f528c1eb4d1a26591883382426040516100999392919061010b565b60405180910390a150565b615cc58061014383390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100dc826100b1565b9050919050565b6100ec816100d1565b82525050565b6000819050919050565b610105816100f2565b82525050565b600060608201905061012060008301866100e3565b61012d60208301856100e3565b61013a60408301846100fc565b94935050505056fe608060405234801561001057600080fd5b50615ca480620000216000396000f3fe6080604052600436106102135760003560e01c806379433d8b11610118578063b84614a5116100a0578063dd62ed3e1161006f578063dd62ed3e14610775578063ee61bd6e146107b2578063f2fde38b146107dd578063f36b242514610806578063fc68f661146108315761021a565b8063b84614a5146106cf578063c5ebeaec146106f8578063cc2a9a5b14610721578063d06dca891461074a5761021a565b80639dcee9a4116100e75780639dcee9a4146105e8578063a9059cbb14610613578063aa5af0fd14610650578063b6b55f251461067b578063b790634e146106a45761021a565b806379433d8b1461055d5780637b898939146105675780638da5cb5b146105925780639d76ea58146105bd5761021a565b80632e1a7d4d1161019b5780636011163e1161016a5780636011163e146104785780636ca6d5d0146104b557806370a08231146104e057806370d4cea01461051d578063715018a6146105465761021a565b80632e1a7d4d146103be578063371fd8e6146103e75780634bf0d331146104105780634c19386c1461044d5761021a565b80631457db34116101e25780631457db34146102d957806317e0f2521461030257806318160ddd1461032b57806323b872dd146103565780632aeaa291146103935761021a565b80630572b0cc1461021f5780630790ef9a146102365780630941cb3d1461025f578063095ea7b31461029c5761021a565b3661021a57005b600080fd5b34801561022b57600080fd5b5061023461085a565b005b34801561024257600080fd5b5061025d60048036038101906102589190614392565b6108e9565b005b34801561026b57600080fd5b50610286600480360381019061028191906143d2565b610b19565b604051610293919061440e565b60405180910390f35b3480156102a857600080fd5b506102c360048036038101906102be9190614429565b610b31565b6040516102d09190614484565b60405180910390f35b3480156102e557600080fd5b5061030060048036038101906102fb91906144dd565b610c91565b005b34801561030e57600080fd5b506103296004803603810190610324919061450a565b610e1e565b005b34801561033757600080fd5b50610340611075565b60405161034d919061440e565b60405180910390f35b34801561036257600080fd5b5061037d60048036038101906103789190614537565b611085565b60405161038a9190614484565b60405180910390f35b34801561039f57600080fd5b506103a8611466565b6040516103b5919061440e565b60405180910390f35b3480156103ca57600080fd5b506103e560048036038101906103e0919061450a565b611508565b005b3480156103f357600080fd5b5061040e6004803603810190610409919061450a565b611799565b005b34801561041c57600080fd5b50610437600480360381019061043291906143d2565b61198a565b6040516104449190614484565b60405180910390f35b34801561045957600080fd5b506104626119aa565b60405161046f919061440e565b60405180910390f35b34801561048457600080fd5b5061049f600480360381019061049a91906143d2565b6119ba565b6040516104ac919061440e565b60405180910390f35b3480156104c157600080fd5b506104ca611aa0565b6040516104d791906145e9565b60405180910390f35b3480156104ec57600080fd5b50610507600480360381019061050291906143d2565b611ac6565b604051610514919061440e565b60405180910390f35b34801561052957600080fd5b50610544600480360381019061053f9190614642565b611bac565b005b34801561055257600080fd5b5061055b611d76565b005b610565611d78565b005b34801561057357600080fd5b5061057c611f4a565b6040516105899190614690565b60405180910390f35b34801561059e57600080fd5b506105a7611f70565b6040516105b491906146ba565b60405180910390f35b3480156105c957600080fd5b506105d2611f9a565b6040516105df91906146f6565b60405180910390f35b3480156105f457600080fd5b506105fd611fc0565b60405161060a919061440e565b60405180910390f35b34801561061f57600080fd5b5061063a60048036038101906106359190614429565b611fcc565b6040516106479190614484565b60405180910390f35b34801561065c57600080fd5b50610665612250565b6040516106729190614690565b60405180910390f35b34801561068757600080fd5b506106a2600480360381019061069d919061450a565b612276565b005b3480156106b057600080fd5b506106b961254e565b6040516106c6919061440e565b60405180910390f35b3480156106db57600080fd5b506106f660048036038101906106f1919061473d565b612601565b005b34801561070457600080fd5b5061071f600480360381019061071a919061450a565b6126d8565b005b34801561072d57600080fd5b5061074860048036038101906107439190614825565b612b52565b005b34801561075657600080fd5b5061075f612e9d565b60405161076c91906148d3565b60405180910390f35b34801561078157600080fd5b5061079c600480360381019061079791906148ee565b612ec3565b6040516107a9919061440e565b60405180910390f35b3480156107be57600080fd5b506107c7612f4a565b6040516107d4919061494f565b60405180910390f35b3480156107e957600080fd5b5061080460048036038101906107ff91906143d2565b612f70565b005b34801561081257600080fd5b5061081b613067565b604051610828919061440e565b60405180910390f35b34801561083d57600080fd5b506108586004803603810190610853919061496a565b61311a565b005b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632260b83e336040518263ffffffff1660e01b81526004016108b591906146ba565b600060405180830381600087803b1580156108cf57600080fd5b505af11580156108e3573d6000803e3d6000fd5b50505050565b6108f1613270565b73ffffffffffffffffffffffffffffffffffffffff1661090f611f70565b73ffffffffffffffffffffffffffffffffffffffff1614610965576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095c906149f4565b60405180910390fd5b6002606554036109aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a190614a60565b60405180910390fd5b6002606581905550600060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a0f91906146ba565b602060405180830381865afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190614a95565b90506000610a5c611075565b610a646119aa565b83610a6f9190614af1565b610a799190614b25565b905081841115610abe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab590614bcb565b60405180910390fd5b80841115610b01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610af890614c5d565b60405180910390fd5b610b0b8385613278565b505060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610ba1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9890614cc9565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92584604051610c7f919061440e565b60405180910390a36001905092915050565b610c99613270565b73ffffffffffffffffffffffffffffffffffffffff16610cb7611f70565b73ffffffffffffffffffffffffffffffffffffffff1614610d0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d04906149f4565b60405180910390fd5b610d16816132c9565b80610d4d5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b610d8c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8390614d35565b60405180910390fd5b80609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f85796821ee1d670b0fdb986f256b5c1a29b9019038831c7f09df2061879cf9e542604051610e13919061440e565b60405180910390a250565b600260655403610e63576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5a90614a60565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ec791906146ba565b602060405180830381865afa158015610ee4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f089190614a95565b1015610f49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f4090614dc7565b60405180910390fd5b610f52336132ec565b610f5c3382613507565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b8152600401610fb7919061440e565b600060405180830381600087803b158015610fd157600080fd5b505af1158015610fe5573d6000803e3d6000fd5b50505050611012813373ffffffffffffffffffffffffffffffffffffffff1661370f90919063ffffffff16565b61101a61380f565b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051611062929190614de7565b60405180910390a2600160658190555050565b600061108030611ac6565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d90614e5c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036111b5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111ac90614eee565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611223576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121a90614f80565b60405180910390fd5b61122c846132ec565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156112ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a590615012565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112fd9190614b25565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113909190614b25565b925050819055506113a0836132ec565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113ef9190614af1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611453919061440e565b60405180910390a3600190509392505050565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16628cc262336040518263ffffffff1660e01b81526004016114c291906146ba565b602060405180830381865afa1580156114df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115039190614a95565b905090565b60026065540361154d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161154490614a60565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016115b191906146ba565b602060405180830381865afa1580156115ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115f29190614a95565b1015611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a9061507e565b60405180910390fd5b61163c336132ec565b6116463382613507565b6116503382613278565b61165861380f565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461173e57609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633576f6cc82336040518363ffffffff1660e01b815260040161170b92919061509e565b600060405180830381600087803b15801561172557600080fd5b505af1158015611739573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051611786929190614de7565b60405180910390a2600160658190555050565b6002606554036117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d590614a60565b60405180910390fd5b60026065819055506117ef33613b10565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611871576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186890615139565b60405180910390fd5b61187b3382613cc5565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118ca9190614b25565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119209190614b25565b9250508190555061192f61380f565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d8242604051611977929190614de7565b60405180910390a2600160658190555050565b609a6020528060005260406000206000915054906101000a900460ff1681565b60006119b5306119ba565b905090565b6000609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401611a5892919061509e565b602060405180830381865afa158015611a75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a999190614a95565b9050919050565b609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b8152600401611b6492919061509e565b602060405180830381865afa158015611b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba59190614a95565b9050919050565b611bb4613270565b73ffffffffffffffffffffffffffffffffffffffff16611bd2611f70565b73ffffffffffffffffffffffffffffffffffffffff1614611c28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1f906149f4565b60405180910390fd5b611c31816132c9565b80611c685750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9e90614d35565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d2557611d2461380f565b5b8073ffffffffffffffffffffffffffffffffffffffff167fef1b7e9216e08b283cc613824ccb26ea505227777839a4f3c6810d64594e018242604051611d6b919061440e565b60405180910390a250565b565b609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611e04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfb906151cb565b60405180910390fd5b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b158015611e6e57600080fd5b505af1158015611e82573d6000803e3d6000fd5b5050505050611e90336132ec565b611e9a3334613d18565b34609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ee99190614af1565b92505081905550611ef861380f565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a153442604051611f40929190614de7565b60405180910390a2565b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361203c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161203390614eee565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036120aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120a190614f80565b60405180910390fd5b6120b3336132ec565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612135576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161212c90615012565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555061218b836132ec565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121da9190614af1565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161223e919061440e565b60405180910390a36001905092915050565b609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002606554036122bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b290614a60565b60405180910390fd5b6002606581905550609a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661234f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612346906151cb565b60405180910390fd5b60008111612392576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238990615237565b60405180910390fd5b61239b336132ec565b6123a53382613cc5565b6123af3382613d18565b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546123fe9190614af1565b9250508190555061240d61380f565b600073ffffffffffffffffffffffffffffffffffffffff16609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146124f357609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166351746bb282336040518363ffffffff1660e01b81526004016124c092919061509e565b600060405180830381600087803b1580156124da57600080fd5b505af11580156124ee573d6000803e3d6000fd5b505050505b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15824260405161253b929190614de7565b60405180910390a2600160658190555050565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd083316125966119aa565b61259e611075565b6040518363ffffffff1660e01b81526004016125bb929190614de7565b602060405180830381865afa1580156125d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125fc9190614a95565b905090565b612609613270565b73ffffffffffffffffffffffffffffffffffffffff16612627611f70565b73ffffffffffffffffffffffffffffffffffffffff161461267d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612674906149f4565b60405180910390fd5b80609a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b600073ffffffffffffffffffffffffffffffffffffffff16609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603612769576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612760906152c9565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b81526004016127c491906146ba565b602060405180830381865afa1580156127e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061280591906152fe565b612844576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161283b9061539d565b60405180910390fd5b600061284e611075565b0361288e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161288590615409565b60405180910390fd5b6002606554036128d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128ca90614a60565b60405180910390fd5b60026065819055508060a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161293791906146ba565b602060405180830381865afa158015612954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129789190614a95565b10156129b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129b09061507e565b60405180910390fd5b6129c233613b10565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a119190614af1565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612a679190614af1565b92505081905550612a783382613278565b612a8061380f565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d58242604051612ac8929190614de7565b60405180910390a26001606581905550670d2f13f7789f0000612ae9611075565b670de0b6b3a7640000612afa6119aa565b612b049190615429565b612b0e919061549a565b1115612b4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b469061553d565b60405180910390fd5b50565b600060019054906101000a900460ff16612b7a5760008054906101000a900460ff1615612b83565b612b82613e47565b5b612bc2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bb9906155cf565b60405180910390fd5b60008060019054906101000a900460ff161590508015612c12576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b612c1b876132c9565b8015612c2c5750612c2b866132c9565b5b8015612c3d5750612c3c856132c9565b5b8015612c4e5750612c4d846132c9565b5b8015612c965750612c5e826132c9565b80612c955750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b5b612cd5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ccc9061563b565b60405180910390fd5b85609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555086609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609e60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083609f60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260a060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612e63613e58565b612e6b613eb1565b612e7361380f565b8015612e945760008060016101000a81548160ff0219169083151502179055505b50505050505050565b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b612f78613270565b73ffffffffffffffffffffffffffffffffffffffff16612f96611f70565b73ffffffffffffffffffffffffffffffffffffffff1614612fec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fe3906149f4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361305b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613052906156cd565b60405180910390fd5b61306481613f0a565b50565b6000609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec6130af6119aa565b6130b7611075565b6040518363ffffffff1660e01b81526004016130d4929190614de7565b602060405180830381865afa1580156130f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131159190614a95565b905090565b613122613270565b73ffffffffffffffffffffffffffffffffffffffff16613140611f70565b73ffffffffffffffffffffffffffffffffffffffff1614613196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161318d906149f4565b60405180910390fd5b61319f816132c9565b6131de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131d590614d35565b60405180910390fd5b80609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051613265919061440e565b60405180910390a250565b600033905090565b6132c5828260a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16613fd09092919063ffffffff16565b5050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000609860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461333783611ac6565b6133419190614b25565b905061334d8282613d18565b61335630611ac6565b609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e216182426040516133e1929190614de7565b60405180910390a2609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336836040518263ffffffff1660e01b815260040161344491906146ba565b600060405180830381600087803b15801561345e57600080fd5b505af1158015613472573d6000803e3d6000fd5b50505050609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016134d191906146ba565b600060405180830381600087803b1580156134eb57600080fd5b505af11580156134ff573d6000803e3d6000fd5b505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015613589576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016135809061575f565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561360b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613602906157f1565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613703919061440e565b60405180910390a35050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561374457613743615811565b5b6040519080825280601f01601f1916602001820160405280156137765781602001600182028036833780820191505090505b5060405161378491906158b1565b60006040518083038185875af1925050503d80600081146137c1576040519150601f19603f3d011682016040523d82523d6000602084013e6137c6565b606091505b505090508061380a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138019061593a565b60405180910390fd5b505050565b60006138196119aa565b90506000613825611075565b9050600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036138b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138af906159a6565b60405180910390fd5b609e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd0833185856040518363ffffffff1660e01b8152600401613953929190614de7565b602060405180830381865afa158015613970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139949190614a95565b6040518263ffffffff1660e01b81526004016139b0919061440e565b600060405180830381600087803b1580156139ca57600080fd5b505af11580156139de573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec85856040518363ffffffff1660e01b8152600401613a7d929190614de7565b602060405180830381865afa158015613a9a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613abe9190614a95565b6040518263ffffffff1660e01b8152600401613ada919061440e565b600060405180830381600087803b158015613af457600080fd5b505af1158015613b08573d6000803e3d6000fd5b505050505050565b613b19816119ba565b609960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550613b65306119ba565b609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336826040518263ffffffff1660e01b8152600401613c0391906146ba565b600060405180830381600087803b158015613c1d57600080fd5b505af1158015613c31573d6000803e3d6000fd5b50505050609f60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401613c9091906146ba565b600060405180830381600087803b158015613caa57600080fd5b505af1158015613cbe573d6000803e3d6000fd5b5050505050565b613d1482308360a060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16614106909392919063ffffffff16565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603613d87576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613d7e90615a38565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254613dd69190614af1565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051613e3b919061440e565b60405180910390a35050565b6000613e52306132c9565b15905090565b600060019054906101000a900460ff16613ea7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613e9e90615aca565b60405180910390fd5b613eaf61423f565b565b600060019054906101000a900460ff16613f00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ef790615aca565b60405180910390fd5b613f086142a0565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401614002929190615aea565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161405091906158b1565b6000604051808303816000865af19150503d806000811461408d576040519150601f19603f3d011682016040523d82523d6000602084013e614092565b606091505b50915091508180156140c057506000815114806140bf5750808060200190518101906140be91906152fe565b5b5b6140ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016140f690615b85565b60405180910390fd5b5050505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd86868660405160240161413a93929190615ba5565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161418891906158b1565b6000604051808303816000865af19150503d80600081146141c5576040519150601f19603f3d011682016040523d82523d6000602084013e6141ca565b606091505b50915091508180156141f857506000815114806141f75750808060200190518101906141f691906152fe565b5b5b614237576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161422e90615c4e565b60405180910390fd5b505050505050565b600060019054906101000a900460ff1661428e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161428590615aca565b60405180910390fd5b61429e614299613270565b613f0a565b565b600060019054906101000a900460ff166142ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016142e690615aca565b60405180910390fd5b6001606581905550565b600080fd5b6000819050919050565b614311816142fe565b811461431c57600080fd5b50565b60008135905061432e81614308565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061435f82614334565b9050919050565b61436f81614354565b811461437a57600080fd5b50565b60008135905061438c81614366565b92915050565b600080604083850312156143a9576143a86142f9565b5b60006143b78582860161431f565b92505060206143c88582860161437d565b9150509250929050565b6000602082840312156143e8576143e76142f9565b5b60006143f68482850161437d565b91505092915050565b614408816142fe565b82525050565b600060208201905061442360008301846143ff565b92915050565b600080604083850312156144405761443f6142f9565b5b600061444e8582860161437d565b925050602061445f8582860161431f565b9150509250929050565b60008115159050919050565b61447e81614469565b82525050565b60006020820190506144996000830184614475565b92915050565b60006144aa82614354565b9050919050565b6144ba8161449f565b81146144c557600080fd5b50565b6000813590506144d7816144b1565b92915050565b6000602082840312156144f3576144f26142f9565b5b6000614501848285016144c8565b91505092915050565b6000602082840312156145205761451f6142f9565b5b600061452e8482850161431f565b91505092915050565b6000806000606084860312156145505761454f6142f9565b5b600061455e8682870161437d565b935050602061456f8682870161437d565b92505060406145808682870161431f565b9150509250925092565b6000819050919050565b60006145af6145aa6145a584614334565b61458a565b614334565b9050919050565b60006145c182614594565b9050919050565b60006145d3826145b6565b9050919050565b6145e3816145c8565b82525050565b60006020820190506145fe60008301846145da565b92915050565b600061460f82614354565b9050919050565b61461f81614604565b811461462a57600080fd5b50565b60008135905061463c81614616565b92915050565b600060208284031215614658576146576142f9565b5b60006146668482850161462d565b91505092915050565b600061467a826145b6565b9050919050565b61468a8161466f565b82525050565b60006020820190506146a56000830184614681565b92915050565b6146b481614354565b82525050565b60006020820190506146cf60008301846146ab565b92915050565b60006146e082614334565b9050919050565b6146f0816146d5565b82525050565b600060208201905061470b60008301846146e7565b92915050565b61471a81614469565b811461472557600080fd5b50565b60008135905061473781614711565b92915050565b60008060408385031215614754576147536142f9565b5b60006147628582860161437d565b925050602061477385828601614728565b9150509250929050565b600061478882614354565b9050919050565b6147988161477d565b81146147a357600080fd5b50565b6000813590506147b58161478f565b92915050565b60006147c682614354565b9050919050565b6147d6816147bb565b81146147e157600080fd5b50565b6000813590506147f3816147cd565b92915050565b614802816146d5565b811461480d57600080fd5b50565b60008135905061481f816147f9565b92915050565b60008060008060008060c08789031215614842576148416142f9565b5b600061485089828a0161462d565b965050602061486189828a016147a6565b955050604061487289828a016147e4565b945050606061488389828a016147e4565b935050608061489489828a01614810565b92505060a06148a589828a016144c8565b9150509295509295509295565b60006148bd826145b6565b9050919050565b6148cd816148b2565b82525050565b60006020820190506148e860008301846148c4565b92915050565b60008060408385031215614905576149046142f9565b5b60006149138582860161437d565b92505060206149248582860161437d565b9150509250929050565b6000614939826145b6565b9050919050565b6149498161492e565b82525050565b60006020820190506149646000830184614940565b92915050565b6000602082840312156149805761497f6142f9565b5b600061498e848285016147a6565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006149de602083614997565b91506149e9826149a8565b602082019050919050565b60006020820190508181036000830152614a0d816149d1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614a4a601f83614997565b9150614a5582614a14565b602082019050919050565b60006020820190508181036000830152614a7981614a3d565b9050919050565b600081519050614a8f81614308565b92915050565b600060208284031215614aab57614aaa6142f9565b5b6000614ab984828501614a80565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614afc826142fe565b9150614b07836142fe565b9250828201905080821115614b1f57614b1e614ac2565b5b92915050565b6000614b30826142fe565b9150614b3b836142fe565b9250828203905081811115614b5357614b52614ac2565b5b92915050565b7f547279696e6720746f207265636f766572206d6f7265207468616e20706f6f6c60008201527f2062616c616e6365000000000000000000000000000000000000000000000000602082015250565b6000614bb5602883614997565b9150614bc082614b59565b604082019050919050565b60006020820190508181036000830152614be481614ba8565b9050919050565b7f547279696e6720746f207265636f766572206d6f7265207468616e206375727260008201527f656e7420737572706c7573000000000000000000000000000000000000000000602082015250565b6000614c47602b83614997565b9150614c5282614beb565b604082019050919050565b60006020820190508181036000830152614c7681614c3a565b9050919050565b7f5370656e6465722063616e6e6f742062652061207a65726f2061646472657373600082015250565b6000614cb3602083614997565b9150614cbe82614c7d565b602082019050919050565b60006020820190508181036000830152614ce281614ca6565b9050919050565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b6000614d1f601283614997565b9150614d2a82614ce9565b602082019050919050565b60006020820190508181036000830152614d4e81614d12565b9050919050565b7f4e6f7420656e6f7567682066756e647320696e2074686520706f6f6c20746f2060008201527f7769746864726177000000000000000000000000000000000000000000000000602082015250565b6000614db1602883614997565b9150614dbc82614d55565b604082019050919050565b60006020820190508181036000830152614de081614da4565b9050919050565b6000604082019050614dfc60008301856143ff565b614e0960208301846143ff565b9392505050565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656400000000000000600082015250565b6000614e46601983614997565b9150614e5182614e10565b602082019050919050565b60006020820190508181036000830152614e7581614e39565b9050919050565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b6000614ed8602a83614997565b9150614ee382614e7c565b604082019050919050565b60006020820190508181036000830152614f0781614ecb565b9050919050565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b6000614f6a602a83614997565b9150614f7582614f0e565b604082019050919050565b60006020820190508181036000830152614f9981614f5d565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000614ffc602683614997565b915061500782614fa0565b604082019050919050565b6000602082019050818103600083015261502b81614fef565b9050919050565b7f4e6f7420656e6f7567682066756e647320696e2074686520706f6f6c00000000600082015250565b6000615068601c83614997565b915061507382615032565b602082019050919050565b600060208201905081810360008301526150978161505b565b9050919050565b60006040820190506150b360008301856143ff565b6150c060208301846146ab565b9392505050565b7f547279696e6720746f207265706179206d6f7265207468616e2077617320626f60008201527f72726f7765640000000000000000000000000000000000000000000000000000602082015250565b6000615123602683614997565b915061512e826150c7565b604082019050919050565b6000602082019050818103600083015261515281615116565b9050919050565b7f55736572206e6f74207065726d697474656420746f206372656174652061206c60008201527f6f616e0000000000000000000000000000000000000000000000000000000000602082015250565b60006151b5602383614997565b91506151c082615159565b604082019050919050565b600060208201905081810360008301526151e4816151a8565b9050919050565b7f4465706f73697420616d6f756e74206d757374206265203e2030000000000000600082015250565b6000615221601a83614997565b915061522c826151eb565b602082019050919050565b6000602082019050818103600083015261525081615214565b9050919050565b7f426f72726f77657273207265676973747279206e6f7420636f6e66696775726560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b60006152b3602183614997565b91506152be82615257565b604082019050919050565b600060208201905081810360008301526152e2816152a6565b9050919050565b6000815190506152f881614711565b92915050565b600060208284031215615314576153136142f9565b5b6000615322848285016152e9565b91505092915050565b7f4f6e6c7920617574686f72697a6564206163636f756e7473206d617920626f7260008201527f726f770000000000000000000000000000000000000000000000000000000000602082015250565b6000615387602383614997565b91506153928261532b565b604082019050919050565b600060208201905081810360008301526153b68161537a565b9050919050565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b60006153f3602083614997565b91506153fe826153bd565b602082019050919050565b60006020820190508181036000830152615422816153e6565b9050919050565b6000615434826142fe565b915061543f836142fe565b925082820261544d816142fe565b9150828204841483151761546457615463614ac2565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006154a5826142fe565b91506154b0836142fe565b9250826154c0576154bf61546b565b5b828204905092915050565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b6000615527602f83614997565b9150615532826154cb565b604082019050919050565b600060208201905081810360008301526155568161551a565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b60006155b9602e83614997565b91506155c48261555d565b604082019050919050565b600060208201905081810360008301526155e8816155ac565b9050919050565b7f57726f6e6720696e697420617267756d656e7473000000000000000000000000600082015250565b6000615625601483614997565b9150615630826155ef565b602082019050919050565b6000602082019050818103600083015261565481615618565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006156b7602683614997565b91506156c28261565b565b604082019050919050565b600060208201905081810360008301526156e6816156aa565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b6000615749602783614997565b9150615754826156ed565b604082019050919050565b600060208201905081810360008301526157788161573c565b9050919050565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b60006157db603783614997565b91506157e68261577f565b604082019050919050565b6000602082019050818103600083015261580a816157ce565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081519050919050565b600081905092915050565b60005b83811015615874578082015181840152602081019050615859565b60008484015250505050565b600061588b82615840565b615895818561584b565b93506158a5818560208601615856565b80840191505092915050565b60006158bd8284615880565b915081905092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b6000615924603483614997565b915061592f826158c8565b604082019050919050565b6000602082019050818103600083015261595381615917565b9050919050565b7f506f6f6c2069732066726f7a656e000000000000000000000000000000000000600082015250565b6000615990600e83614997565b915061599b8261595a565b602082019050919050565b600060208201905081810360008301526159bf81615983565b9050919050565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000615a22602683614997565b9150615a2d826159c6565b604082019050919050565b60006020820190508181036000830152615a5181615a15565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000615ab4602b83614997565b9150615abf82615a58565b604082019050919050565b60006020820190508181036000830152615ae381615aa7565b9050919050565b6000604082019050615aff60008301856146ab565b615b0c60208301846143ff565b9392505050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000615b6f602d83614997565b9150615b7a82615b13565b604082019050919050565b60006020820190508181036000830152615b9e81615b62565b9050919050565b6000606082019050615bba60008301866146ab565b615bc760208301856146ab565b615bd460408301846143ff565b949350505050565b7f5472616e7366657248656c7065723a3a7472616e7366657246726f6d3a20747260008201527f616e7366657246726f6d206661696c6564000000000000000000000000000000602082015250565b6000615c38603183614997565b9150615c4382615bdc565b604082019050919050565b60006020820190508181036000830152615c6781615c2b565b905091905056fea26469706673582212208e0cd07ce8039a30b82e8945d916ce63cb869132173a4165c68e8fabc5a20b2964736f6c63430008110033a2646970667358221220b618dfb24dca5dd37abe3434ee42fb9b3e93efb8b1ae273daf288672c6972a1264736f6c63430008110033",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a pool contract",
    "events": {
      "PoolDeployed(address,address,uint256)": {
        "details": "emitted after pool is deployed by any user",
        "params": {
          "poolAddress": "of deployed pool",
          "timestamp": "of the deployment*",
          "user": "the address initiating the deployment"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "WavaxPoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}