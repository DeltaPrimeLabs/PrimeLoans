{
  "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AdminProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "poolAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "PoolAssetRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetActivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetDeactivated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tokenAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenAssetRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "poolAddress",
              "type": "address"
            }
          ],
          "internalType": "struct TokenManager.poolAsset[]",
          "name": "poolAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addPoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxLeverage",
              "type": "uint256"
            }
          ],
          "internalType": "struct TokenManager.Asset[]",
          "name": "tokenAssets",
          "type": "tuple[]"
        }
      ],
      "name": "addTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminTransferProposal",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "deactivateToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executeAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllTokenAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "allowInactive",
          "type": "bool"
        }
      ],
      "name": "getAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedTokensAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maxTokenLeverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "proposeAdminTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_poolAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removePoolAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_tokenAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "removeTokenAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxLeverage",
          "type": "uint256"
        }
      ],
      "name": "setMaxTokenLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenAddressToSymbol",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenToStatus",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
    "transactionIndex": 0,
    "gasUsed": "5378887",
    "logsBloom": "0x000000100000200000004200000000000000000002200000000008000000000800000000000000000010004000000020000040000040000000020000000000000008000000000000000000002000000000800000000000000000000000000400000000000200008000000200000028000080000004000400000000000410100000000000000000000000000000000000000000000000040000000000000088000000000000000002000000000000004002400000000000000008000000000020100002000000000000000004000001000000000040000000000000200000a0000800000000008080000000400000000000008004080000100000000000400000",
    "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155",
    "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0x766be043f7e09e95a2812f6c40555ea1bbaf526780a5412e1db72a3489ad8e73",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef0360000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 0,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x4156415800000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000b31f66aa3c1e785363f0875a1b74e27b85fd66c70000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 1,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x5553444300000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000b97ef9ef8734c71904d8002f8b6bc66dd9c48a6e0000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 2,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x4254430000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000050b7545627a5162f82a992c33b87adc75187b2180000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 3,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x4554480000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000049d5c2bdffac6ce2bfdb6640f4f80f226bc10bab0000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 4,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x5553445400000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000009702230a8ea53601f5cd2dc00fdbc13d4df4a8c70000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 5,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x4c494e4b00000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000005947bb275c521040051d82396192181b413227a30000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 6,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x5149000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000008729438eb15e2c8b576fcc6aecda6a148776c0f50000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 7,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x7341564158000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000002b2c81e08f1af8835a78bb2a90ae924ace0ea4be0000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 8,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x504e475f415641585f555344435f4c5000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000000e0100ab771e9288e0aa97e11557e6654c3a96650000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 9,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x544a5f415641585f555344435f4c500000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000f4003f4efbe8691b60249e6afbd307abe7758adb0000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 10,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x5959415633534131000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000aac0f2d0630d1d09ab2b5a400412a4840b866d950000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 11,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x5341563200000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000d0f41b1c9338eb9d374c83cc76b684ba3bb715570000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 12,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xf73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x59595f544a5f415641585f555344435f4c500000000000000000000000000000"
        ],
        "data": "0x000000000000000000000000def94a13ff31fb6363f1e03bf18fe0f59db83bbc0000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 13,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x4156415800000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x00000000000000000000000044f6aeaac8c784fee06cdc6ef9cece63423c50d40000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 14,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 22331337,
        "transactionHash": "0x6b770e7d3536e55e707ba7974a2d0f83a53731b712206db5f291ff72f8752b05",
        "address": "0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB",
        "topics": [
          "0xcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036",
          "0x5553444300000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x0000000000000000000000006f8e87538aacc12e4a50f13b45f19c248561450e0000000000000000000000000000000000000000000000000000000063711c3a",
        "logIndex": 15,
        "blockHash": "0x9bf7349421dc38fcd6f3cce71f78d898a4ae2b65e2892d9b91d0e042d1e19155"
      }
    ],
    "blockNumber": 22331337,
    "cumulativeGasUsed": "5378887",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      {
        "asset": "0x4156415800000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x5553444300000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0xb97ef9ef8734c71904d8002f8b6bc66dd9c48a6e",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x4254430000000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0x50b7545627a5162f82a992c33b87adc75187b218",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x4554480000000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0x49d5c2bdffac6ce2bfdb6640f4f80f226bc10bab",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x5553445400000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0x9702230a8ea53601f5cd2dc00fdbc13d4df4a8c7",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x4c494e4b00000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0x5947bb275c521040051d82396192181b413227a3",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x5149000000000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0x8729438eb15e2c8b576fcc6aecda6a148776c0f5",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x7341564158000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x504e475f415641585f555344435f4c5000000000000000000000000000000000",
        "assetAddress": "0x0e0100ab771e9288e0aa97e11557e6654c3a9665",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x544a5f415641585f555344435f4c500000000000000000000000000000000000",
        "assetAddress": "0xf4003f4efbe8691b60249e6afbd307abe7758adb",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x5959415633534131000000000000000000000000000000000000000000000000",
        "assetAddress": "0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x5341563200000000000000000000000000000000000000000000000000000000",
        "assetAddress": "0xd0F41b1C9338eB9d374c83cC76b684ba3BB71557",
        "maxLeverage": "833333333333333300"
      },
      {
        "asset": "0x59595f544a5f415641585f555344435f4c500000000000000000000000000000",
        "assetAddress": "0xDEf94a13fF31FB6363f1e03bF18fe0F59Db83BBC",
        "maxLeverage": "833333333333333300"
      }
    ],
    [
      {
        "asset": "0x4156415800000000000000000000000000000000000000000000000000000000",
        "poolAddress": "0x44F6aEAAC8C784fEe06cdc6eF9CeCE63423c50d4"
      },
      {
        "asset": "0x5553444300000000000000000000000000000000000000000000000000000000",
        "poolAddress": "0x6F8e87538aAcC12E4a50f13b45F19c248561450E"
      }
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "4b5be2ad0b8e6e8c385c4dcd78bb7d0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"poolAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PoolAssetRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tokenAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenAssetRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenManager.poolAsset[]\",\"name\":\"poolAssets\",\"type\":\"tuple[]\"}],\"name\":\"addPoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"internalType\":\"struct TokenManager.Asset[]\",\"name\":\"tokenAssets\",\"type\":\"tuple[]\"}],\"name\":\"addTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminTransferProposal\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"deactivateToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executeAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllTokenAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"allowInactive\",\"type\":\"bool\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedTokensAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxTokenLeverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"proposeAdminTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_poolAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removePoolAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_tokenAssets\",\"type\":\"bytes32[]\"}],\"name\":\"removeTokenAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxLeverage\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAddressToSymbol\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenToStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"AdminChanged(address,address,uint256)\":{\"details\":\"emitted after changing an admin\",\"params\":{\"newAdmin\":\"new admin being set\",\"oldAdmin\":\"previous admin\",\"timestamp\":\"time of changing an admin*\"}},\"AdminProposed(address,address,uint256)\":{\"details\":\"emitted after proposing a new admin\",\"params\":{\"newAdmin\":\"new admin proposed\",\"oldAdmin\":\"current admin\",\"timestamp\":\"time of proposal*\"}},\"PoolAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a pool asset\",\"params\":{\"performer\":\"an address of wallet adding the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of the pool asset addition*\"}},\"PoolAssetRemoved(address,bytes32,address,uint256)\":{\"details\":\"emitted after removing a pool asset\",\"params\":{\"performer\":\"an address of wallet removing the pool asset\",\"poolAddress\":\"an address of the pool asset\",\"poolAsset\":\"pool asset\",\"timestamp\":\"time of a pool asset removal*\"}},\"TokenAssetActivated(address,address,uint256)\":{\"details\":\"emitted after activating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet activating a token asset\",\"timestamp\":\"time of activating a token asset*\"}},\"TokenAssetAdded(address,bytes32,address,uint256)\":{\"details\":\"emitted after adding a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet adding a token asset\",\"timestamp\":\"time of adding a token asset*\",\"tokenAsset\":\"token asset\"}},\"TokenAssetDeactivated(address,address,uint256)\":{\"details\":\"emitted after deactivating a token asset\",\"params\":{\"assetAddress\":\"an address of the token asset\",\"performer\":\"an address of the wallet deactivating a token asset\",\"timestamp\":\"time of deactivating a token asset*\"}},\"TokenAssetRemoved(address,bytes32,uint256)\":{\"details\":\"emitted after removing a token asset\",\"params\":{\"performer\":\"an address of the wallet removing a token asset\",\"timestamp\":\"time a token asset removal*\",\"tokenAsset\":\"token asset\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAssetAddress(bytes32,bool)\":{\"notice\":\"Returns address of an asset*\"},\"getPoolAddress(bytes32)\":{\"notice\":\"Returns address of an asset's lending pool*\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenManager.sol\":\"TokenManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract TokenManager {\\n    /**\\n     * For adding supported assets\\n     **/\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 maxLeverage;\\n    }\\n\\n    /**\\n     * For adding supported lending pools\\n     **/\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    uint256 private constant _NOT_SUPPORTED = 0;\\n    uint256 private constant _INACTIVE = 1;\\n    uint256 private constant _ACTIVE = 2;\\n\\n    address public admin;\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\n    mapping(address => uint256) private tokenPositionInList;\\n    // used for defining different leverage ratios for tokens\\n    mapping(address => uint256) public maxTokenLeverage;\\n    address[] public supportedTokensList;\\n\\n    address public adminTransferProposal;\\n\\n    mapping(address => uint256) public tokenToStatus;\\n\\n    constructor(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) {\\n        admin = msg.sender;\\n        emit AdminChanged(address(0), msg.sender, block.timestamp);\\n        addTokenAssets(tokenAssets);\\n        addPoolAssets(poolAssets);\\n    }\\n\\n    // Set to address(0) to reset proposal\\n    function proposeAdminTransfer(address _newOwner) onlyAdmin public {\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\n        adminTransferProposal = _newOwner;\\n        emit AdminProposed(msg.sender, _newOwner, block.timestamp);\\n    }\\n\\n    function executeAdminTransfer() public {\\n        require(adminTransferProposal != address(0), \\\"There is no active admin transfer proposal\\\");\\n        require(adminTransferProposal == msg.sender, \\\"Only the proposed new admin can execute admin transfer proposal\\\");\\n        address oldAdmin = admin;\\n        admin = adminTransferProposal;\\n        adminTransferProposal = address(0);\\n        emit AdminChanged(oldAdmin, msg.sender, block.timestamp);\\n    }\\n\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\n        return assetToPoolAddress._inner._keys._inner._values;\\n    }\\n\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\n        return supportedTokensList;\\n    }\\n\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\n        return assetToTokenAddress._inner._keys._inner._values;\\n    }\\n\\n    /**\\n    * Returns address of an asset\\n    **/\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n        if (!allowInactive) {\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\n        }\\n\\n        return assetAddress;\\n    }\\n\\n    /**\\n    * Returns address of an asset's lending pool\\n    **/\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\n\\n        return assetAddress;\\n    }\\n\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\n        }\\n    }\\n\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\n        assetToPoolAddress.set(_asset, _poolAddress);\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\n    }\\n\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].maxLeverage);\\n        }\\n    }\\n\\n    function activateToken(address token) public onlyAdmin {\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\n        tokenToStatus[token] = _ACTIVE;\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function deactivateToken(address token) public onlyAdmin {\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\n        tokenToStatus[token] = _INACTIVE;\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _maxLeverage) internal {\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\n        setMaxTokenLeverage(_tokenAddress, _maxLeverage);\\n\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\n\\n        supportedTokensList.push(_tokenAddress);\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\n\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\n    }\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        supportedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\n            _removeTokenAsset(_tokenAssets[i]);\\n        }\\n    }\\n\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\n        tokenAddressToSymbol[tokenAddress] = 0;\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\n        maxTokenLeverage[tokenAddress] = 0;\\n        _removeTokenFromList(tokenAddress);\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\n    }\\n\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\n            _removePoolAsset(_poolAssets[i]);\\n        }\\n    }\\n\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\n        address poolAddress = getPoolAddress(_poolAsset);\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\n    }\\n\\n    function setMaxTokenLeverage(address token, uint256 maxLeverage) public onlyAdmin {\\n        //LTV must be lower than 5\\n        require(maxLeverage <= 0.833333333333333333e18, 'Leverage higher than maximum acceptable');\\n        maxTokenLeverage[token] = maxLeverage;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"Admin only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after proposing a new admin\\n     * @param oldAdmin current admin\\n     * @param newAdmin new admin proposed\\n     * @param timestamp time of proposal\\n     **/\\n    event AdminProposed(address indexed oldAdmin, address newAdmin, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after changing an admin\\n     * @param oldAdmin previous admin\\n     * @param newAdmin new admin being set\\n     * @param timestamp time of changing an admin\\n     **/\\n    event AdminChanged(address indexed oldAdmin, address newAdmin, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a token asset\\n     * @param performer an address of the wallet adding a token asset\\n     * @param tokenAsset token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of adding a token asset\\n     **/\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after activating a token asset\\n     * @param performer an address of the wallet activating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of activating a token asset\\n     **/\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after deactivating a token asset\\n     * @param performer an address of the wallet deactivating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of deactivating a token asset\\n     **/\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a token asset\\n     * @param performer an address of the wallet removing a token asset\\n     * @param tokenAsset token asset\\n     * @param timestamp time a token asset removal\\n     **/\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a pool asset\\n     * @param performer an address of wallet adding the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of the pool asset addition\\n     **/\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a pool asset\\n     * @param performer an address of wallet removing the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of a pool asset removal\\n     **/\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x83b50c470ce3c03624d1368237bf40912d398b171bde781c381f93c0176a5781\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200438538038062004385833981810160405281019062000037919062000e28565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff167f766be043f7e09e95a2812f6c40555ea1bbaf526780a5412e1db72a3489ad8e733342604051620000c292919062000ecf565b60405180910390a2620000db82620000f460201b60201c565b620000ec816200022260201b60201c565b505062001383565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000185576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200017c9062000f5d565b60405180910390fd5b60005b81518110156200021e5762000208828281518110620001ac57620001ab62000f7f565b5b602002602001015160000151838381518110620001ce57620001cd62000f7f565b5b602002602001015160200151848481518110620001f057620001ef62000f7f565b5b6020026020010151604001516200032e60201b60201c565b8080620002159062000fdd565b91505062000188565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620002b3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002aa9062000f5d565b60405180910390fd5b60005b81518110156200032a5762000314828281518110620002da57620002d962000f7f565b5b602002602001015160000151838381518110620002fc57620002fb62000f7f565b5b6020026020010151602001516200060f60201b60201c565b8080620003219062000fdd565b915050620002b6565b5050565b6000830362000374576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200036b90620010a0565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603620003e6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620003dd9062001112565b60405180910390fd5b620004018360046200073a60201b620013991790919060201c565b1562000444576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200043b9062001184565b60405180910390fd5b6200045682826200075960201b60201c565b62000473838360046200088060201b620013b0179092919060201c565b5082600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a80549050620005749190620011a6565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b684426040516200060292919062000ecf565b60405180910390a3505050565b6200062581620008ba60201b620013e21760201c565b62000667576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200065e9062001257565b60405180910390fd5b620006828260016200073a60201b620013991790919060201c565b15620006c5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006bc90620012c9565b60405180910390fd5b620006e2828260016200088060201b620013b0179092919060201c565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e83426040516200072e92919062000ecf565b60405180910390a35050565b6000620007518360000183620008dd60201b60201c565b905092915050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620007ea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620007e19062000f5d565b60405180910390fd5b670b90984060d3555581111562000838576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200082f9062001361565b60405180910390fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000620008b184600001848473ffffffffffffffffffffffffffffffffffffffff1660001b6200090460201b60201c565b90509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000620008fc82846000016200094660201b620014051790919060201c565b905092915050565b600081846002016000858152602001908152602001600020819055506200093d83856000016200096560201b6200141c1790919060201c565b90509392505050565b60006200095d83600001836200098460201b60201c565b905092915050565b60006200097c8360000183620009a760201b60201c565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000620009bb83836200098460201b60201c565b62000a1657826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000a1b565b600090505b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a858262000a3a565b810181811067ffffffffffffffff8211171562000aa75762000aa662000a4b565b5b80604052505050565b600062000abc62000a21565b905062000aca828262000a7a565b919050565b600067ffffffffffffffff82111562000aed5762000aec62000a4b565b5b602082029050602081019050919050565b600080fd5b600080fd5b6000819050919050565b62000b1d8162000b08565b811462000b2957600080fd5b50565b60008151905062000b3d8162000b12565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000b708262000b43565b9050919050565b62000b828162000b63565b811462000b8e57600080fd5b50565b60008151905062000ba28162000b77565b92915050565b6000819050919050565b62000bbd8162000ba8565b811462000bc957600080fd5b50565b60008151905062000bdd8162000bb2565b92915050565b60006060828403121562000bfc5762000bfb62000b03565b5b62000c08606062000ab0565b9050600062000c1a8482850162000b2c565b600083015250602062000c308482850162000b91565b602083015250604062000c468482850162000bcc565b60408301525092915050565b600062000c6962000c638462000acf565b62000ab0565b9050808382526020820190506060840283018581111562000c8f5762000c8e62000afe565b5b835b8181101562000cbc578062000ca7888262000be3565b84526020840193505060608101905062000c91565b5050509392505050565b600082601f83011262000cde5762000cdd62000a35565b5b815162000cf084826020860162000c52565b91505092915050565b600067ffffffffffffffff82111562000d175762000d1662000a4b565b5b602082029050602081019050919050565b60006040828403121562000d415762000d4062000b03565b5b62000d4d604062000ab0565b9050600062000d5f8482850162000b2c565b600083015250602062000d758482850162000b91565b60208301525092915050565b600062000d9862000d928462000cf9565b62000ab0565b9050808382526020820190506040840283018581111562000dbe5762000dbd62000afe565b5b835b8181101562000deb578062000dd6888262000d28565b84526020840193505060408101905062000dc0565b5050509392505050565b600082601f83011262000e0d5762000e0c62000a35565b5b815162000e1f84826020860162000d81565b91505092915050565b6000806040838503121562000e425762000e4162000a2b565b5b600083015167ffffffffffffffff81111562000e635762000e6262000a30565b5b62000e718582860162000cc6565b925050602083015167ffffffffffffffff81111562000e955762000e9462000a30565b5b62000ea38582860162000df5565b9150509250929050565b62000eb88162000b63565b82525050565b62000ec98162000ba8565b82525050565b600060408201905062000ee6600083018562000ead565b62000ef5602083018462000ebe565b9392505050565b600082825260208201905092915050565b7f41646d696e206f6e6c7900000000000000000000000000000000000000000000600082015250565b600062000f45600a8362000efc565b915062000f528262000f0d565b602082019050919050565b6000602082019050818103600083015262000f788162000f36565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000fea8262000ba8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036200101f576200101e62000fae565b5b600182019050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b60006200108860218362000efc565b915062001095826200102a565b604082019050919050565b60006020820190508181036000830152620010bb8162001079565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b6000620010fa601c8362000efc565b91506200110782620010c2565b602082019050919050565b600060208201905081810360008301526200112d81620010eb565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b60006200116c601c8362000efc565b9150620011798262001134565b602082019050919050565b600060208201905081810360008301526200119f816200115d565b9050919050565b6000620011b38262000ba8565b9150620011c08362000ba8565b9250828203905081811115620011db57620011da62000fae565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b60006200123f60258362000efc565b91506200124c82620011e1565b604082019050919050565b60006020820190508181036000830152620012728162001230565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b6000620012b1601b8362000efc565b9150620012be8262001279565b602082019050919050565b60006020820190508181036000830152620012e481620012a2565b9050919050565b7f4c6576657261676520686967686572207468616e206d6178696d756d2061636360008201527f65707461626c6500000000000000000000000000000000000000000000000000602082015250565b60006200134960278362000efc565b91506200135682620012eb565b604082019050919050565b600060208201905081810360008301526200137c816200133a565b9050919050565b612ff280620013936000396000f3fe608060405234801561001057600080fd5b506004361061012c5760003560e01c80637fb966f8116100ad578063e0117bdd11610071578063e0117bdd1461031b578063f38555aa1461034b578063f823f1e014610367578063f851a44014610397578063fda4963b146103b55761012c565b80637fb966f81461028b578063869c490d146102a9578063949731d5146102c7578063a2d27933146102e3578063d1bc0831146102ff5761012c565b806363c91877116100f457806363c91877146101d557806366273c191461020557806368173bcf1461022357806378195a991461023f5780637e8aa69d1461026f5761012c565b80630d1ce2d2146101315780630edc25b61461014d5780630edd12371461017d57806321f880971461018757806325eb876f146101a5575b600080fd5b61014b60048036038101906101469190611ee5565b6103d1565b005b61016760048036038101906101629190611f48565b610579565b6040516101749190611f84565b60405180910390f35b61018561060b565b005b61018f610849565b60405161019c919061205d565b60405180910390f35b6101bf60048036038101906101ba91906120b7565b6108d7565b6040516101cc9190611f84565b60405180910390f35b6101ef60048036038101906101ea919061212d565b6109f2565b6040516101fc9190611f84565b60405180910390f35b61020d610a31565b60405161021a9190612218565b60405180910390f35b61023d60048036038101906102389190611ee5565b610a95565b005b61025960048036038101906102549190611ee5565b610c3d565b6040516102669190612249565b60405180910390f35b61028960048036038101906102849190611ee5565b610c55565b005b610293610de5565b6040516102a09190611f84565b60405180910390f35b6102b1610e0b565b6040516102be9190612218565b60405180910390f35b6102e160048036038101906102dc9190612264565b610e6f565b005b6102fd60048036038101906102f89190612466565b610f90565b005b61031960048036038101906103149190612572565b6110a6565b005b61033560048036038101906103309190611ee5565b61117a565b6040516103429190612249565b60405180910390f35b610365600480360381019061036091906126ce565b611192565b005b610381600480360381019061037c9190611ee5565b611289565b60405161038e9190612726565b60405180910390f35b61039f6112a1565b6040516103ac9190611f84565b60405180910390f35b6103cf60048036038101906103ca9190612572565b6112c5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104569061279e565b60405180910390fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d89061280a565b60405180910390fd5b6002600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4824260405161056e92919061282a565b60405180910390a250565b60008061059083600161143390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f99061289f565b60405180910390fd5b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069390612931565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461072c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610723906129c3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f766be043f7e09e95a2812f6c40555ea1bbaf526780a5412e1db72a3489ad8e73334260405161083e92919061282a565b60405180910390a250565b6060600a8054806020026020016040519081016040528092919081815260200182805480156108cd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610883575b5050505050905090565b6000806108ee84600461143390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095790612a2f565b60405180910390fd5b826109e8576002600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146109e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109de90612a9b565b60405180910390fd5b5b8091505092915050565b600a8181548110610a0257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606001600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610a8b57602002820191906000526020600020905b815481526020019060010190808311610a77575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a9061279e565b60405180910390fd5b6002600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90612b07565b60405180910390fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610c3292919061282a565b60405180910390a250565b60096020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda9061279e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4890612b99565b60405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f41b10bd706b2642889f1b32e2d77c19fb200a1a8a237ef32a7b2c48dbfc3ff408242604051610dda92919061282a565b60405180910390a250565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610e6557602002820191906000526020600020905b815481526020019060010190808311610e51575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef49061279e565b60405180910390fd5b670b90984060d35555811115610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612c2b565b60405180910390fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461101e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110159061279e565b60405180910390fd5b60005b81518110156110a25761108f8282815181106110405761103f612c4b565b5b60200260200101516000015183838151811061105f5761105e612c4b565b5b60200260200101516020015184848151811061107e5761107d612c4b565b5b60200260200101516040015161145c565b808061109a90612ca9565b915050611021565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b9061279e565b60405180910390fd5b60005b81518110156111765761116382828151811061115657611155612c4b565b5b602002602001015161171a565b808061116e90612ca9565b915050611137565b5050565b600c6020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611220576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112179061279e565b60405180910390fd5b60005b81518110156112855761127282828151811061124257611241612c4b565b5b60200260200101516000015183838151811061126157611260612c4b565b5b602002602001015160200151611862565b808061127d90612ca9565b915050611223565b5050565b60076020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134a9061279e565b60405180910390fd5b60005b81518110156113955761138282828151811061137557611374612c4b565b5b602002602001015161196a565b808061138d90612ca9565b915050611356565b5050565b60006113a883600001836119d8565b905092915050565b60006113d984600001848473ffffffffffffffffffffffffffffffffffffffff1660001b6119f8565b90509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006114148360000183611a33565b905092915050565b600061142b8360000183611a56565b905092915050565b6000806000806114468660000186611ac6565b91509150818160001c9350935050509250929050565b6000830361149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612d63565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361150e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150590612dcf565b60405180910390fd5b61152283600461139990919063ffffffff16565b15611562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155990612e3b565b60405180910390fd5b61156c8282610e6f565b611582838360046113b09092919063ffffffff16565b5082600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a805490506116819190612e5b565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6844260405161170d92919061282a565b60405180910390a3505050565b60006117278260016108d7565b9050611734600483611b15565b506000801b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061180f81611b2c565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516118569190612249565b60405180910390a35050565b61186b816113e2565b6118aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a190612f01565b60405180910390fd5b6118be82600161139990919063ffffffff16565b156118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f590612f6d565b60405180910390fd5b611914828260016113b09092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161195e92919061282a565b60405180910390a35050565b600061197582610579565b9050611982600183611b15565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e8383426040516119cc92919061282a565b60405180910390a35050565b60006119f0828460000161140590919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611a2a838560000161141c90919063ffffffff16565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611a628383611a33565b611abb578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611ac0565b600090505b92915050565b60008060008460020160008581526020019081526020016000205490506000801b8103611b0557611af785856119d8565b6000801b9250925050611b0e565b60018192509250505b9250929050565b6000611b248360000183611d0f565b905092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001600a80549050611b829190612e5b565b8114611c7f576000600a6001600a80549050611b9e9190612e5b565b81548110611baf57611bae612c4b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a8381548110611c3557611c34612c4b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b600a805480611c9157611c90612f8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600082600201600083815260200190815260200160002060009055611d408284600001611d4890919063ffffffff16565b905092915050565b6000611d578360000183611d5f565b905092915050565b60008083600101600084815260200190815260200160002054905060008114611e67576000600182611d919190612e5b565b9050600060018660000180549050611da99190612e5b565b9050818114611e18576000866000018281548110611dca57611dc9612c4b565b5b9060005260206000200154905080876000018481548110611dee57611ded612c4b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611e2c57611e2b612f8d565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611e6d565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611eb282611e87565b9050919050565b611ec281611ea7565b8114611ecd57600080fd5b50565b600081359050611edf81611eb9565b92915050565b600060208284031215611efb57611efa611e7d565b5b6000611f0984828501611ed0565b91505092915050565b6000819050919050565b611f2581611f12565b8114611f3057600080fd5b50565b600081359050611f4281611f1c565b92915050565b600060208284031215611f5e57611f5d611e7d565b5b6000611f6c84828501611f33565b91505092915050565b611f7e81611ea7565b82525050565b6000602082019050611f996000830184611f75565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611fd481611ea7565b82525050565b6000611fe68383611fcb565b60208301905092915050565b6000602082019050919050565b600061200a82611f9f565b6120148185611faa565b935061201f83611fbb565b8060005b838110156120505781516120378882611fda565b975061204283611ff2565b925050600181019050612023565b5085935050505092915050565b600060208201905081810360008301526120778184611fff565b905092915050565b60008115159050919050565b6120948161207f565b811461209f57600080fd5b50565b6000813590506120b18161208b565b92915050565b600080604083850312156120ce576120cd611e7d565b5b60006120dc85828601611f33565b92505060206120ed858286016120a2565b9150509250929050565b6000819050919050565b61210a816120f7565b811461211557600080fd5b50565b60008135905061212781612101565b92915050565b60006020828403121561214357612142611e7d565b5b600061215184828501612118565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218f81611f12565b82525050565b60006121a18383612186565b60208301905092915050565b6000602082019050919050565b60006121c58261215a565b6121cf8185612165565b93506121da83612176565b8060005b8381101561220b5781516121f28882612195565b97506121fd836121ad565b9250506001810190506121de565b5085935050505092915050565b6000602082019050818103600083015261223281846121ba565b905092915050565b612243816120f7565b82525050565b600060208201905061225e600083018461223a565b92915050565b6000806040838503121561227b5761227a611e7d565b5b600061228985828601611ed0565b925050602061229a85828601612118565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122f2826122a9565b810181811067ffffffffffffffff82111715612311576123106122ba565b5b80604052505050565b6000612324611e73565b905061233082826122e9565b919050565b600067ffffffffffffffff8211156123505761234f6122ba565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006060828403121561238157612380612366565b5b61238b606061231a565b9050600061239b84828501611f33565b60008301525060206123af84828501611ed0565b60208301525060406123c384828501612118565b60408301525092915050565b60006123e26123dd84612335565b61231a565b9050808382526020820190506060840283018581111561240557612404612361565b5b835b8181101561242e578061241a888261236b565b845260208401935050606081019050612407565b5050509392505050565b600082601f83011261244d5761244c6122a4565b5b813561245d8482602086016123cf565b91505092915050565b60006020828403121561247c5761247b611e7d565b5b600082013567ffffffffffffffff81111561249a57612499611e82565b5b6124a684828501612438565b91505092915050565b600067ffffffffffffffff8211156124ca576124c96122ba565b5b602082029050602081019050919050565b60006124ee6124e9846124af565b61231a565b9050808382526020820190506020840283018581111561251157612510612361565b5b835b8181101561253a57806125268882611f33565b845260208401935050602081019050612513565b5050509392505050565b600082601f830112612559576125586122a4565b5b81356125698482602086016124db565b91505092915050565b60006020828403121561258857612587611e7d565b5b600082013567ffffffffffffffff8111156125a6576125a5611e82565b5b6125b284828501612544565b91505092915050565b600067ffffffffffffffff8211156125d6576125d56122ba565b5b602082029050602081019050919050565b6000604082840312156125fd576125fc612366565b5b612607604061231a565b9050600061261784828501611f33565b600083015250602061262b84828501611ed0565b60208301525092915050565b600061264a612645846125bb565b61231a565b9050808382526020820190506040840283018581111561266d5761266c612361565b5b835b81811015612696578061268288826125e7565b84526020840193505060408101905061266f565b5050509392505050565b600082601f8301126126b5576126b46122a4565b5b81356126c5848260208601612637565b91505092915050565b6000602082840312156126e4576126e3611e7d565b5b600082013567ffffffffffffffff81111561270257612701611e82565b5b61270e848285016126a0565b91505092915050565b61272081611f12565b82525050565b600060208201905061273b6000830184612717565b92915050565b600082825260208201905092915050565b7f41646d696e206f6e6c7900000000000000000000000000000000000000000000600082015250565b6000612788600a83612741565b915061279382612752565b602082019050919050565b600060208201905081810360008301526127b78161277b565b9050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b60006127f4601083612741565b91506127ff826127be565b602082019050919050565b60006020820190508181036000830152612823816127e7565b9050919050565b600060408201905061283f6000830185611f75565b61284c602083018461223a565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b6000612889601983612741565b915061289482612853565b602082019050919050565b600060208201905081810360008301526128b88161287c565b9050919050565b7f5468657265206973206e6f206163746976652061646d696e207472616e73666560008201527f722070726f706f73616c00000000000000000000000000000000000000000000602082015250565b600061291b602a83612741565b9150612926826128bf565b604082019050919050565b6000602082019050818103600083015261294a8161290e565b9050919050565b7f4f6e6c79207468652070726f706f736564206e65772061646d696e2063616e2060008201527f657865637574652061646d696e207472616e736665722070726f706f73616c00602082015250565b60006129ad603f83612741565b91506129b882612951565b604082019050919050565b600060208201905081810360008301526129dc816129a0565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b6000612a19601483612741565b9150612a24826129e3565b602082019050919050565b60006020820190508181036000830152612a4881612a0c565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000612a85600e83612741565b9150612a9082612a4f565b602082019050919050565b60006020820190508181036000830152612ab481612a78565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b6000612af1600e83612741565b9150612afc82612abb565b602082019050919050565b60006020820190508181036000830152612b2081612ae4565b9050919050565b7f43616e27742070726f706f7365206f6e6573656c66206173206120636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612b83602983612741565b9150612b8e82612b27565b604082019050919050565b60006020820190508181036000830152612bb281612b76565b9050919050565b7f4c6576657261676520686967686572207468616e206d6178696d756d2061636360008201527f65707461626c6500000000000000000000000000000000000000000000000000602082015250565b6000612c15602783612741565b9150612c2082612bb9565b604082019050919050565b60006020820190508181036000830152612c4481612c08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612cb4826120f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ce657612ce5612c7a565b5b600182019050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d4d602183612741565b9150612d5882612cf1565b604082019050919050565b60006020820190508181036000830152612d7c81612d40565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b6000612db9601c83612741565b9150612dc482612d83565b602082019050919050565b60006020820190508181036000830152612de881612dac565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b6000612e25601c83612741565b9150612e3082612def565b602082019050919050565b60006020820190508181036000830152612e5481612e18565b9050919050565b6000612e66826120f7565b9150612e71836120f7565b9250828203905081811115612e8957612e88612c7a565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000612eeb602583612741565b9150612ef682612e8f565b604082019050919050565b60006020820190508181036000830152612f1a81612ede565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b6000612f57601b83612741565b9150612f6282612f21565b602082019050919050565b60006020820190508181036000830152612f8681612f4a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220cc424845b10d2ffbb5f131217e9fa0ba331194a684aba41b9ffcbc5b87a1c5bd64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061012c5760003560e01c80637fb966f8116100ad578063e0117bdd11610071578063e0117bdd1461031b578063f38555aa1461034b578063f823f1e014610367578063f851a44014610397578063fda4963b146103b55761012c565b80637fb966f81461028b578063869c490d146102a9578063949731d5146102c7578063a2d27933146102e3578063d1bc0831146102ff5761012c565b806363c91877116100f457806363c91877146101d557806366273c191461020557806368173bcf1461022357806378195a991461023f5780637e8aa69d1461026f5761012c565b80630d1ce2d2146101315780630edc25b61461014d5780630edd12371461017d57806321f880971461018757806325eb876f146101a5575b600080fd5b61014b60048036038101906101469190611ee5565b6103d1565b005b61016760048036038101906101629190611f48565b610579565b6040516101749190611f84565b60405180910390f35b61018561060b565b005b61018f610849565b60405161019c919061205d565b60405180910390f35b6101bf60048036038101906101ba91906120b7565b6108d7565b6040516101cc9190611f84565b60405180910390f35b6101ef60048036038101906101ea919061212d565b6109f2565b6040516101fc9190611f84565b60405180910390f35b61020d610a31565b60405161021a9190612218565b60405180910390f35b61023d60048036038101906102389190611ee5565b610a95565b005b61025960048036038101906102549190611ee5565b610c3d565b6040516102669190612249565b60405180910390f35b61028960048036038101906102849190611ee5565b610c55565b005b610293610de5565b6040516102a09190611f84565b60405180910390f35b6102b1610e0b565b6040516102be9190612218565b60405180910390f35b6102e160048036038101906102dc9190612264565b610e6f565b005b6102fd60048036038101906102f89190612466565b610f90565b005b61031960048036038101906103149190612572565b6110a6565b005b61033560048036038101906103309190611ee5565b61117a565b6040516103429190612249565b60405180910390f35b610365600480360381019061036091906126ce565b611192565b005b610381600480360381019061037c9190611ee5565b611289565b60405161038e9190612726565b60405180910390f35b61039f6112a1565b6040516103ac9190611f84565b60405180910390f35b6103cf60048036038101906103ca9190612572565b6112c5565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104569061279e565b60405180910390fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d89061280a565b60405180910390fd5b6002600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167febd9f0d5b5df9f4d5180bbeec65fda8d99982e273d2a7365431b2a869aa826d4824260405161056e92919061282a565b60405180910390a250565b60008061059083600161143390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610602576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f99061289f565b60405180910390fd5b80915050919050565b600073ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361069c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069390612931565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461072c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610723906129c3565b60405180910390fd5b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f766be043f7e09e95a2812f6c40555ea1bbaf526780a5412e1db72a3489ad8e73334260405161083e92919061282a565b60405180910390a250565b6060600a8054806020026020016040519081016040528092919081815260200182805480156108cd57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610883575b5050505050905090565b6000806108ee84600461143390919063ffffffff16565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610960576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095790612a2f565b60405180910390fd5b826109e8576002600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146109e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109de90612a9b565b60405180910390fd5b5b8091505092915050565b600a8181548110610a0257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606001600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610a8b57602002820191906000526020600020905b815481526020019060010190808311610a77575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610b23576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1a9061279e565b60405180910390fd5b6002600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610ba5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9c90612b07565b60405180910390fd5b6001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fbf0b0e2d837fddaee4742e91f53ca36bac9fdebdd571738027abb2b5f7c9a2f08242604051610c3292919061282a565b60405180910390a250565b60096020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cda9061279e565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d51576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4890612b99565b60405180910390fd5b80600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f41b10bd706b2642889f1b32e2d77c19fb200a1a8a237ef32a7b2c48dbfc3ff408242604051610dda92919061282a565b60405180910390a250565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004600001600001600001600001805480602002602001604051908101604052809291908181526020018280548015610e6557602002820191906000526020600020905b815481526020019060010190808311610e51575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610efd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef49061279e565b60405180910390fd5b670b90984060d35555811115610f48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3f90612c2b565b60405180910390fd5b80600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461101e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110159061279e565b60405180910390fd5b60005b81518110156110a25761108f8282815181106110405761103f612c4b565b5b60200260200101516000015183838151811061105f5761105e612c4b565b5b60200260200101516020015184848151811061107e5761107d612c4b565b5b60200260200101516040015161145c565b808061109a90612ca9565b915050611021565b5050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611134576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112b9061279e565b60405180910390fd5b60005b81518110156111765761116382828151811061115657611155612c4b565b5b602002602001015161171a565b808061116e90612ca9565b915050611137565b5050565b600c6020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611220576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112179061279e565b60405180910390fd5b60005b81518110156112855761127282828151811061124257611241612c4b565b5b60200260200101516000015183838151811061126157611260612c4b565b5b602002602001015160200151611862565b808061127d90612ca9565b915050611223565b5050565b60076020528060005260406000206000915090505481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134a9061279e565b60405180910390fd5b60005b81518110156113955761138282828151811061137557611374612c4b565b5b602002602001015161196a565b808061138d90612ca9565b915050611356565b5050565b60006113a883600001836119d8565b905092915050565b60006113d984600001848473ffffffffffffffffffffffffffffffffffffffff1660001b6119f8565b90509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006114148360000183611a33565b905092915050565b600061142b8360000183611a56565b905092915050565b6000806000806114468660000186611ac6565b91509150818160001c9350935050509250929050565b6000830361149f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161149690612d63565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361150e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150590612dcf565b60405180910390fd5b61152283600461139990919063ffffffff16565b15611562576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155990612e3b565b60405180910390fd5b61156c8282610e6f565b611582838360046113b09092919063ffffffff16565b5082600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506002600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600a829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a805490506116819190612e5b565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550823373ffffffffffffffffffffffffffffffffffffffff167ff73be6b27198eab18ec5fe07c2d7b2fbf4f05ffa1a05c94ca202531d7aa8c5b6844260405161170d92919061282a565b60405180910390a3505050565b60006117278260016108d7565b9050611734600483611b15565b506000801b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061180f81611b2c565b813373ffffffffffffffffffffffffffffffffffffffff167f228e158b51be6445b7bd2f4121209717a371d44c7c53d4085ae7f5e496153a93426040516118569190612249565b60405180910390a35050565b61186b816113e2565b6118aa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a190612f01565b60405180910390fd5b6118be82600161139990919063ffffffff16565b156118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f590612f6d565b60405180910390fd5b611914828260016113b09092919063ffffffff16565b50813373ffffffffffffffffffffffffffffffffffffffff167fcfbf9a4f33420379df003923a1d986358bb97d4b3455baae186db1d5d35cda3e834260405161195e92919061282a565b60405180910390a35050565b600061197582610579565b9050611982600183611b15565b50813373ffffffffffffffffffffffffffffffffffffffff167ff658b7b16fbc2f0f51a3320cc57763ccd8d13f554c4eb34ff0f5b49624b32e8383426040516119cc92919061282a565b60405180910390a35050565b60006119f0828460000161140590919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611a2a838560000161141c90919063ffffffff16565b90509392505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000611a628383611a33565b611abb578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050611ac0565b600090505b92915050565b60008060008460020160008581526020019081526020016000205490506000801b8103611b0557611af785856119d8565b6000801b9250925050611b0e565b60018192509250505b9250929050565b6000611b248360000183611d0f565b905092915050565b6000600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506001600a80549050611b829190612e5b565b8114611c7f576000600a6001600a80549050611b9e9190612e5b565b81548110611baf57611bae612c4b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600a8381548110611c3557611c34612c4b565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b600a805480611c9157611c90612f8d565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600082600201600083815260200190815260200160002060009055611d408284600001611d4890919063ffffffff16565b905092915050565b6000611d578360000183611d5f565b905092915050565b60008083600101600084815260200190815260200160002054905060008114611e67576000600182611d919190612e5b565b9050600060018660000180549050611da99190612e5b565b9050818114611e18576000866000018281548110611dca57611dc9612c4b565b5b9060005260206000200154905080876000018481548110611dee57611ded612c4b565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480611e2c57611e2b612f8d565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050611e6d565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611eb282611e87565b9050919050565b611ec281611ea7565b8114611ecd57600080fd5b50565b600081359050611edf81611eb9565b92915050565b600060208284031215611efb57611efa611e7d565b5b6000611f0984828501611ed0565b91505092915050565b6000819050919050565b611f2581611f12565b8114611f3057600080fd5b50565b600081359050611f4281611f1c565b92915050565b600060208284031215611f5e57611f5d611e7d565b5b6000611f6c84828501611f33565b91505092915050565b611f7e81611ea7565b82525050565b6000602082019050611f996000830184611f75565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611fd481611ea7565b82525050565b6000611fe68383611fcb565b60208301905092915050565b6000602082019050919050565b600061200a82611f9f565b6120148185611faa565b935061201f83611fbb565b8060005b838110156120505781516120378882611fda565b975061204283611ff2565b925050600181019050612023565b5085935050505092915050565b600060208201905081810360008301526120778184611fff565b905092915050565b60008115159050919050565b6120948161207f565b811461209f57600080fd5b50565b6000813590506120b18161208b565b92915050565b600080604083850312156120ce576120cd611e7d565b5b60006120dc85828601611f33565b92505060206120ed858286016120a2565b9150509250929050565b6000819050919050565b61210a816120f7565b811461211557600080fd5b50565b60008135905061212781612101565b92915050565b60006020828403121561214357612142611e7d565b5b600061215184828501612118565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61218f81611f12565b82525050565b60006121a18383612186565b60208301905092915050565b6000602082019050919050565b60006121c58261215a565b6121cf8185612165565b93506121da83612176565b8060005b8381101561220b5781516121f28882612195565b97506121fd836121ad565b9250506001810190506121de565b5085935050505092915050565b6000602082019050818103600083015261223281846121ba565b905092915050565b612243816120f7565b82525050565b600060208201905061225e600083018461223a565b92915050565b6000806040838503121561227b5761227a611e7d565b5b600061228985828601611ed0565b925050602061229a85828601612118565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122f2826122a9565b810181811067ffffffffffffffff82111715612311576123106122ba565b5b80604052505050565b6000612324611e73565b905061233082826122e9565b919050565b600067ffffffffffffffff8211156123505761234f6122ba565b5b602082029050602081019050919050565b600080fd5b600080fd5b60006060828403121561238157612380612366565b5b61238b606061231a565b9050600061239b84828501611f33565b60008301525060206123af84828501611ed0565b60208301525060406123c384828501612118565b60408301525092915050565b60006123e26123dd84612335565b61231a565b9050808382526020820190506060840283018581111561240557612404612361565b5b835b8181101561242e578061241a888261236b565b845260208401935050606081019050612407565b5050509392505050565b600082601f83011261244d5761244c6122a4565b5b813561245d8482602086016123cf565b91505092915050565b60006020828403121561247c5761247b611e7d565b5b600082013567ffffffffffffffff81111561249a57612499611e82565b5b6124a684828501612438565b91505092915050565b600067ffffffffffffffff8211156124ca576124c96122ba565b5b602082029050602081019050919050565b60006124ee6124e9846124af565b61231a565b9050808382526020820190506020840283018581111561251157612510612361565b5b835b8181101561253a57806125268882611f33565b845260208401935050602081019050612513565b5050509392505050565b600082601f830112612559576125586122a4565b5b81356125698482602086016124db565b91505092915050565b60006020828403121561258857612587611e7d565b5b600082013567ffffffffffffffff8111156125a6576125a5611e82565b5b6125b284828501612544565b91505092915050565b600067ffffffffffffffff8211156125d6576125d56122ba565b5b602082029050602081019050919050565b6000604082840312156125fd576125fc612366565b5b612607604061231a565b9050600061261784828501611f33565b600083015250602061262b84828501611ed0565b60208301525092915050565b600061264a612645846125bb565b61231a565b9050808382526020820190506040840283018581111561266d5761266c612361565b5b835b81811015612696578061268288826125e7565b84526020840193505060408101905061266f565b5050509392505050565b600082601f8301126126b5576126b46122a4565b5b81356126c5848260208601612637565b91505092915050565b6000602082840312156126e4576126e3611e7d565b5b600082013567ffffffffffffffff81111561270257612701611e82565b5b61270e848285016126a0565b91505092915050565b61272081611f12565b82525050565b600060208201905061273b6000830184612717565b92915050565b600082825260208201905092915050565b7f41646d696e206f6e6c7900000000000000000000000000000000000000000000600082015250565b6000612788600a83612741565b915061279382612752565b602082019050919050565b600060208201905081810360008301526127b78161277b565b9050919050565b7f4d75737420626520696e61637469766500000000000000000000000000000000600082015250565b60006127f4601083612741565b91506127ff826127be565b602082019050919050565b60006020820190508181036000830152612823816127e7565b9050919050565b600060408201905061283f6000830185611f75565b61284c602083018461223a565b9392505050565b7f506f6f6c206173736574206e6f7420737570706f727465642e00000000000000600082015250565b6000612889601983612741565b915061289482612853565b602082019050919050565b600060208201905081810360008301526128b88161287c565b9050919050565b7f5468657265206973206e6f206163746976652061646d696e207472616e73666560008201527f722070726f706f73616c00000000000000000000000000000000000000000000602082015250565b600061291b602a83612741565b9150612926826128bf565b604082019050919050565b6000602082019050818103600083015261294a8161290e565b9050919050565b7f4f6e6c79207468652070726f706f736564206e65772061646d696e2063616e2060008201527f657865637574652061646d696e207472616e736665722070726f706f73616c00602082015250565b60006129ad603f83612741565b91506129b882612951565b604082019050919050565b600060208201905081810360008301526129dc816129a0565b9050919050565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b6000612a19601483612741565b9150612a24826129e3565b602082019050919050565b60006020820190508181036000830152612a4881612a0c565b9050919050565b7f417373657420696e616374697665000000000000000000000000000000000000600082015250565b6000612a85600e83612741565b9150612a9082612a4f565b602082019050919050565b60006020820190508181036000830152612ab481612a78565b9050919050565b7f4d75737420626520616374697665000000000000000000000000000000000000600082015250565b6000612af1600e83612741565b9150612afc82612abb565b602082019050919050565b60006020820190508181036000830152612b2081612ae4565b9050919050565b7f43616e27742070726f706f7365206f6e6573656c66206173206120636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612b83602983612741565b9150612b8e82612b27565b604082019050919050565b60006020820190508181036000830152612bb281612b76565b9050919050565b7f4c6576657261676520686967686572207468616e206d6178696d756d2061636360008201527f65707461626c6500000000000000000000000000000000000000000000000000602082015250565b6000612c15602783612741565b9150612c2082612bb9565b604082019050919050565b60006020820190508181036000830152612c4481612c08565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612cb4826120f7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612ce657612ce5612c7a565b5b600182019050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b6000612d4d602183612741565b9150612d5882612cf1565b604082019050919050565b60006020820190508181036000830152612d7c81612d40565b9050919050565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b6000612db9601c83612741565b9150612dc482612d83565b602082019050919050565b60006020820190508181036000830152612de881612dac565b9050919050565b7f4173736574277320746f6b656e20616c72656164792065786973747300000000600082015250565b6000612e25601c83612741565b9150612e3082612def565b602082019050919050565b60006020820190508181036000830152612e5481612e18565b9050919050565b6000612e66826120f7565b9150612e71836120f7565b9250828203905081811115612e8957612e88612c7a565b5b92915050565b7f546f6b656e4d616e616765723a20506f6f6c206d757374206265206120636f6e60008201527f7472616374000000000000000000000000000000000000000000000000000000602082015250565b6000612eeb602583612741565b9150612ef682612e8f565b604082019050919050565b60006020820190508181036000830152612f1a81612ede565b9050919050565b7f4173736574277320706f6f6c20616c7265616479206578697374730000000000600082015250565b6000612f57601b83612741565b9150612f6282612f21565b602082019050919050565b60006020820190508181036000830152612f8681612f4a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220cc424845b10d2ffbb5f131217e9fa0ba331194a684aba41b9ffcbc5b87a1c5bd64736f6c63430008110033",
  "devdoc": {
    "events": {
      "AdminChanged(address,address,uint256)": {
        "details": "emitted after changing an admin",
        "params": {
          "newAdmin": "new admin being set",
          "oldAdmin": "previous admin",
          "timestamp": "time of changing an admin*"
        }
      },
      "AdminProposed(address,address,uint256)": {
        "details": "emitted after proposing a new admin",
        "params": {
          "newAdmin": "new admin proposed",
          "oldAdmin": "current admin",
          "timestamp": "time of proposal*"
        }
      },
      "PoolAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a pool asset",
        "params": {
          "performer": "an address of wallet adding the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of the pool asset addition*"
        }
      },
      "PoolAssetRemoved(address,bytes32,address,uint256)": {
        "details": "emitted after removing a pool asset",
        "params": {
          "performer": "an address of wallet removing the pool asset",
          "poolAddress": "an address of the pool asset",
          "poolAsset": "pool asset",
          "timestamp": "time of a pool asset removal*"
        }
      },
      "TokenAssetActivated(address,address,uint256)": {
        "details": "emitted after activating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet activating a token asset",
          "timestamp": "time of activating a token asset*"
        }
      },
      "TokenAssetAdded(address,bytes32,address,uint256)": {
        "details": "emitted after adding a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet adding a token asset",
          "timestamp": "time of adding a token asset*",
          "tokenAsset": "token asset"
        }
      },
      "TokenAssetDeactivated(address,address,uint256)": {
        "details": "emitted after deactivating a token asset",
        "params": {
          "assetAddress": "an address of the token asset",
          "performer": "an address of the wallet deactivating a token asset",
          "timestamp": "time of deactivating a token asset*"
        }
      },
      "TokenAssetRemoved(address,bytes32,uint256)": {
        "details": "emitted after removing a token asset",
        "params": {
          "performer": "an address of the wallet removing a token asset",
          "timestamp": "time a token asset removal*",
          "tokenAsset": "token asset"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAssetAddress(bytes32,bool)": {
        "notice": "Returns address of an asset*"
      },
      "getPoolAddress(bytes32)": {
        "notice": "Returns address of an asset's lending pool*"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10593,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10596,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToPoolAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(Bytes32ToAddressMap)22940_storage"
      },
      {
        "astId": 10599,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "assetToTokenAddress",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(Bytes32ToAddressMap)22940_storage"
      },
      {
        "astId": 10603,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenAddressToSymbol",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bytes32)"
      },
      {
        "astId": 10607,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenPositionInList",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10611,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "maxTokenLeverage",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10614,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "supportedTokensList",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 10616,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "adminTransferProposal",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 10620,
        "contract": "contracts/TokenManager.sol:TokenManager",
        "label": "tokenToStatus",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)4140_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4139,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3946_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToAddressMap)22940_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToAddressMap",
        "members": [
          {
            "astId": 22939,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)22710_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Map)22710_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 22705,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)4140_storage"
          },
          {
            "astId": 22709,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)3946_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3941,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3945,
            "contract": "contracts/TokenManager.sol:TokenManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}