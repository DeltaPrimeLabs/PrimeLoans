{
  "address": "0x627a40d9350b441C8e0D5aB3340533548d59D7AE",
  "abi": [
    {
      "inputs": [],
      "name": "CalldataMustHaveValidPayload",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CalldataOverOrUnderFlow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EachSignerMustProvideTheSameValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptyCalldataPointersArr",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "IncorrectUnsignedMetadataSize",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "receviedSignersCount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "requiredSignersCount",
          "type": "uint256"
        }
      ],
      "name": "InsufficientNumberOfUniqueSigners",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCalldataPointer",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        }
      ],
      "name": "ProxyCalldataFailedWithCustomError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "ProxyCalldataFailedWithStringMessage",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ProxyCalldataFailedWithoutErrMsg",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivedSigner",
          "type": "address"
        }
      ],
      "name": "SignerNotAuthorised",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "firstAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secondAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "firstAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "secondAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "firstAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "secondAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "soldAsset",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "boughtAsset",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "maximumSold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minimumBought",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "assetsToRepay",
          "type": "bytes32[]"
        }
      ],
      "name": "_getAllPricesForLiquidation",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "ownedAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "debtAssetsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "stakedPositionsPrices",
              "type": "tuple[]"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "asset",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "price",
                  "type": "uint256"
                }
              ],
              "internalType": "struct SolvencyFacetProd.AssetPrice[]",
              "name": "assetsToRepayPrices",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct SolvencyFacetProd.CachedPrices",
          "name": "result",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_getHealthRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "ownedAssetsPrices",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "debtAssetsPrices",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            }
          ],
          "internalType": "struct SolvencyFacetProd.AssetPrice[]",
          "name": "stakedPositionsPrices",
          "type": "tuple[]"
        }
      ],
      "name": "_getHealthRatioWithPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "health",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_firstAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_secondAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "amountADesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBDesired",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityTraderJoe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_bytes32",
          "type": "bytes32"
        }
      ],
      "name": "bytes32ToString",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeIntermediaryContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "symbol",
          "type": "bytes32"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "symbols",
          "type": "bytes32[]"
        }
      ],
      "name": "getPrices",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "prices",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_firstAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_secondAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidityTraderJoe",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "source",
          "type": "string"
        }
      ],
      "name": "stringToBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "result",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_soldAsset",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_boughtAsset",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBought",
          "type": "uint256"
        }
      ],
      "name": "swapTraderJoe",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xec3401ddca0a6a4992b47429b66351cfb3223001dfceda4aff897d6493825155",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x627a40d9350b441C8e0D5aB3340533548d59D7AE",
    "transactionIndex": 0,
    "gasUsed": "3396198",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5955a08123a5e14ac958164ea56e61f4fdf45264a11d495a92dc22f46915b826",
    "transactionHash": "0xec3401ddca0a6a4992b47429b66351cfb3223001dfceda4aff897d6493825155",
    "logs": [],
    "blockNumber": 22332417,
    "cumulativeGasUsed": "3396198",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "df3ad5bdcd0ec16bf72ca3adff085c61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"CalldataMustHaveValidPayload\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CalldataOverOrUnderFlow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EachSignerMustProvideTheSameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyCalldataPointersArr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectUnsignedMetadataSize\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"receviedSignersCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredSignersCount\",\"type\":\"uint256\"}],\"name\":\"InsufficientNumberOfUniqueSigners\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCalldataPointer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"}],\"name\":\"ProxyCalldataFailedWithCustomError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ProxyCalldataFailedWithStringMessage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProxyCalldataFailedWithoutErrMsg\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivedSigner\",\"type\":\"address\"}],\"name\":\"SignerNotAuthorised\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"firstAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secondAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"firstAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secondAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"soldAsset\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"boughtAsset\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maximumSold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minimumBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"assetsToRepay\",\"type\":\"bytes32[]\"}],\"name\":\"_getAllPricesForLiquidation\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"assetsToRepayPrices\",\"type\":\"tuple[]\"}],\"internalType\":\"struct SolvencyFacetProd.CachedPrices\",\"name\":\"result\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_getHealthRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"ownedAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"debtAssetsPrices\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"internalType\":\"struct SolvencyFacetProd.AssetPrice[]\",\"name\":\"stakedPositionsPrices\",\"type\":\"tuple[]\"}],\"name\":\"_getHealthRatioWithPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"health\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidityTraderJoe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_bytes32\",\"type\":\"bytes32\"}],\"name\":\"bytes32ToString\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeIntermediaryContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"symbol\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"symbols\",\"type\":\"bytes32[]\"}],\"name\":\"getPrices\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"prices\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_firstAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_secondAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"removeLiquidityTraderJoe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"}],\"name\":\"stringToBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"result\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_soldAsset\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_boughtAsset\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBought\",\"type\":\"uint256\"}],\"name\":\"swapTraderJoe\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"swapTraderJoe(bytes32,bytes32,uint256,uint256)\":{\"details\":\"This function uses the redstone-evm-connector\",\"params\":{\"_boughtAsset\":\"asset to be bought\",\"_exactSold\":\"exact amount of asset to be sold\",\"_minimumBought\":\"minimum amount of asset to be bought*\",\"_soldAsset\":\"asset to be sold\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExchangeIntermediaryContract()\":{\"notice\":\"Returns address of UniswapV2-like exchange*\"},\"swapTraderJoe(bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Swaps one asset to another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/facets/avalanche/TraderJoeDEXFacet.sol\":\"TraderJoeDEXFacet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0x3c07f43e60e099b3b157243b3152722e73b80eeb7985c2cd73712828d7f7da29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\n\\n/**\\n * @title The base contract with the main logic of data extraction from calldata\\n * @author The Redstone Oracles team\\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\\n * and the ProxyConnector contracts\\n */\\ncontract CalldataExtractor is RedstoneConstants {\\n  using SafeMath for uint256;\\n\\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\\n    // Checking if the calldata ends with the RedStone marker\\n    bool hasValidRedstoneMarker;\\n    assembly {\\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\\n      hasValidRedstoneMarker := eq(\\n        REDSTONE_MARKER_MASK,\\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\\n      )\\n    }\\n    if (!hasValidRedstoneMarker) {\\n      revert CalldataMustHaveValidPayload();\\n    }\\n\\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\\n    uint24 unsignedMetadataByteSize;\\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      unsignedMetadataByteSize := calldataload(\\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\\n      )\\n    }\\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\\n      + UNSGINED_METADATA_BYTE_SIZE_BS\\n      + REDSTONE_MARKER_BS;\\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\\n      revert IncorrectUnsignedMetadataSize();\\n    }\\n    return calldataNegativeOffset;\\n  }\\n\\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\\n    internal\\n    pure\\n    returns (uint16 dataPackagesCount)\\n  {\\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n    assembly {\\n      dataPackagesCount := calldataload(\\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\\n      )\\n    }\\n    return dataPackagesCount;\\n  }\\n\\n  function _extractDataPointValueAndDataFeedId(\\n    uint256 calldataNegativeOffsetForDataPackage,\\n    uint256 defaultDataPointValueByteSize,\\n    uint256 dataPointIndex\\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\\n    );\\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\\n    assembly {\\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\\n    }\\n  }\\n\\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\\n    internal\\n    pure\\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\\n  {\\n    // Using uint24, because data points count byte size number has 3 bytes\\n    uint24 dataPointsCount_;\\n\\n    // Using uint32, because data point value byte size has 4 bytes\\n    uint32 eachDataPointValueByteSize_;\\n\\n    // Extract data points count\\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\\n    assembly {\\n      dataPointsCount_ := calldataload(calldataOffset)\\n    }\\n\\n    // Extract each data point value size\\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\\n    assembly {\\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\\n    }\\n\\n    // Prepare returned values\\n    dataPointsCount = dataPointsCount_;\\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\\n  }\\n}\\n\",\"keccak256\":\"0xa96eced2521c637867c670f7f86f3a719e40f210d8a802124f322876bdf013df\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\n\\n/**\\n * @title The base contract for forwarding redstone payload to other contracts\\n * @author The Redstone Oracles team\\n */\\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\\n  error ProxyCalldataFailedWithoutErrMsg();\\n  error ProxyCalldataFailedWithStringMessage(string message);\\n  error ProxyCalldataFailedWithCustomError(bytes result);\\n\\n  function proxyCalldata(\\n    address contractAddress,\\n    bytes memory encodedFunction,\\n    bool forwardValue\\n  ) internal returns (bytes memory) {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n\\n    (bool success, bytes memory result) =\\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\\n\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\\n    internal\\n    view\\n    returns (bytes memory)\\n  {\\n    bytes memory message = _prepareMessage(encodedFunction);\\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\\n    return _prepareReturnValue(success, result);\\n  }\\n\\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\\n\\n    if (redstonePayloadByteSize > msg.data.length) {\\n      revert CalldataOverOrUnderFlow();\\n    }\\n\\n    bytes memory message;\\n\\n    assembly {\\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\\n\\n      // Saving the byte size of the result message (it's a standard in EVM)\\n      mstore(message, resultMessageByteSize)\\n\\n      // Copying function and its arguments\\n      for {\\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\\n        let fromEnd := add(from, encodedFunctionBytesCount)\\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\\n      } lt (from, fromEnd) {\\n        from := add(from, STANDARD_SLOT_BS)\\n        to := add(to, STANDARD_SLOT_BS)\\n      } {\\n        // Copying data from encodedFunction to message (32 bytes at a time)\\n        mstore(to, mload(from))\\n      }\\n\\n      // Copying redstone payload to the message bytes\\n      calldatacopy(\\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\\n        sub(calldatasize(), redstonePayloadByteSize), // offset\\n        redstonePayloadByteSize // bytes length to copy\\n      )\\n\\n      // Updating free memory pointer\\n      mstore(\\n        FREE_MEMORY_PTR,\\n        add(\\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\\n          BYTES_ARR_LEN_VAR_BS\\n        )\\n      )\\n    }\\n\\n    return message;\\n  }\\n\\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\\n      calldataNegativeOffset += dataPackageByteSize;\\n    }\\n\\n    return calldataNegativeOffset;\\n  }\\n\\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    return\\n      dataPointsCount *\\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\\n  }\\n\\n\\n  function _prepareReturnValue(bool success, bytes memory result)\\n    internal\\n    pure\\n    returns (bytes memory)\\n  {\\n    if (!success) {\\n\\n      if (result.length == 0) {\\n        revert ProxyCalldataFailedWithoutErrMsg();\\n      } else {\\n        bool isStringErrorMessage;\\n        assembly {\\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\\n        }\\n\\n        if (isStringErrorMessage) {\\n          string memory receivedErrMsg;\\n          assembly {\\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\\n          }\\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\\n        } else {\\n          revert ProxyCalldataFailedWithCustomError(result);\\n        }\\n      }\\n    }\\n\\n    return result;\\n  }\\n}\\n\",\"keccak256\":\"0x4630299916b145de0c392f390e77f75a7b1cec762bbd374f745abcdbcfdb5e8c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title The base contract with helpful constants\\n * @author The Redstone Oracles team\\n * @dev It mainly contains redstone-related values, which improve readability\\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\\n */\\ncontract RedstoneConstants {\\n  // === Abbreviations ===\\n  // BS - Bytes size\\n  // PTR - Pointer (memory location)\\n  // SIG - Signature\\n\\n  // Solidity and YUL constants\\n  uint256 internal constant STANDARD_SLOT_BS = 32;\\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\\n\\n  // RedStone protocol consts\\n  uint256 internal constant SIG_BS = 65;\\n  uint256 internal constant TIMESTAMP_BS = 6;\\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\\n\\n  // Derived values (based on consts)\\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\\n\\n  // Error messages\\n  error CalldataOverOrUnderFlow();\\n  error IncorrectUnsignedMetadataSize();\\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\\n  error EachSignerMustProvideTheSameValue();\\n  error EmptyCalldataPointersArr();\\n  error InvalidCalldataPointer();\\n  error CalldataMustHaveValidPayload();\\n  error SignerNotAuthorised(address receivedSigner);\\n}\\n\",\"keccak256\":\"0xc9a73986f5a12a28f74d98e8f028ca47c79909f317a38be02820e421d0723b30\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"./RedstoneConstants.sol\\\";\\nimport \\\"./RedstoneDefaultsLib.sol\\\";\\nimport \\\"./CalldataExtractor.sol\\\";\\nimport \\\"../libs/BitmapLib.sol\\\";\\nimport \\\"../libs/SignatureLib.sol\\\";\\n\\n/**\\n * @title The base contract with the main Redstone logic\\n * @author The Redstone Oracles team\\n * @dev Do not use this contract directly in consumer contracts, take a\\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\\n */\\nabstract contract RedstoneConsumerBase is CalldataExtractor {\\n  using SafeMath for uint256;\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  /**\\n   * @dev This function must be implemented by the child consumer contract.\\n   * It should return a unique index for a given signer address if the signer\\n   * is authorised, otherwise it should revert\\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\\n   * @return Unique index for a signer in the range [0..255]\\n   */\\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should validate the timestamp against the current time (block.timestamp)\\n   * It should revert with a helpful message if the timestamp is not valid\\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\\n   */\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\\n  }\\n\\n  /**\\n   * @dev This function should be overriden by the child consumer contract.\\n   * @return The minimum required value of unique authorised signers\\n   */\\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\\n    return 1;\\n  }\\n\\n  /**\\n   * @dev This function may be overriden by the child consumer contract.\\n   * It should aggregate values from different signers to a single uint value.\\n   * By default, it calculates the median value\\n   * @param values An array of uint256 values from different signers\\n   * @return Result of the aggregation in the form of a single number\\n   */\\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\\n    return RedstoneDefaultsLib.aggregateValues(values);\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  /**\\n   * @dev This is an internal helpful function for secure extraction oracle values\\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\\n   * validation, and aggregating values from different authorised signers into a\\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\\n   * insufficient number of autorised signers) do not match, the function will revert.\\n   *\\n   * Note! You should not call this function in a consumer contract. You can use\\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\\n   *\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in dataFeedIds array\\n   */\\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    returns (uint256[] memory)\\n  {\\n    // Initializing helpful variables and allocating memory\\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\\n      // The line below is commented because newly allocated arrays are filled with zeros\\n      // But we left it for better readability\\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\\n    }\\n\\n    // Extracting the number of data packages from calldata\\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\\n\\n    // Saving current free memory pointer\\n    uint256 freeMemPtr;\\n    assembly {\\n      freeMemPtr := mload(FREE_MEMORY_PTR)\\n    }\\n\\n    // Data packages extraction in a loop\\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\\n      // Extract data package details and update calldata offset\\n      uint256 dataPackageByteSize = _extractDataPackage(\\n        dataFeedIds,\\n        uniqueSignerCountForDataFeedIds,\\n        signersBitmapForDataFeedIds,\\n        valuesForDataFeeds,\\n        calldataNegativeOffset\\n      );\\n      calldataNegativeOffset += dataPackageByteSize;\\n\\n      // Shifting memory pointer back to the \\\"safe\\\" value\\n      assembly {\\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\\n      }\\n    }\\n\\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which extracts data for a data package based\\n   * on the given negative calldata offset, verifies them, and in the case of successful\\n   * verification updates the corresponding data package values in memory\\n   *\\n   * @param dataFeedIds an array of unique data feed identifiers\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param calldataNegativeOffset negative calldata offset for the given data package\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _extractDataPackage(\\n    bytes32[] memory dataFeedIds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds,\\n    uint256[] memory signersBitmapForDataFeedIds,\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256 calldataNegativeOffset\\n  ) private view returns (uint256) {\\n    uint256 signerIndex;\\n\\n    (\\n      uint256 dataPointsCount,\\n      uint256 eachDataPointValueByteSize\\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\\n\\n    // We use scopes to resolve problem with too deep stack\\n    {\\n      uint48 extractedTimestamp;\\n      address signerAddress;\\n      bytes32 signedHash;\\n      bytes memory signedMessage;\\n      uint256 signedMessageBytesCount;\\n\\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\\n\\n      uint256 timestampCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\\n\\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\\n\\n      assembly {\\n        // Extracting the signed message\\n        signedMessage := extractBytesFromCalldata(\\n          signedMessageCalldataOffset,\\n          signedMessageBytesCount\\n        )\\n\\n        // Hashing the signed message\\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\\n\\n        // Extracting timestamp\\n        extractedTimestamp := calldataload(timestampCalldataOffset)\\n\\n        function initByteArray(bytesCount) -> ptr {\\n          ptr := mload(FREE_MEMORY_PTR)\\n          mstore(ptr, bytesCount)\\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\\n        }\\n\\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\\n          let extractedBytesStartPtr := initByteArray(bytesCount)\\n          calldatacopy(\\n            extractedBytesStartPtr,\\n            offset,\\n            bytesCount\\n          )\\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\\n        }\\n      }\\n\\n      // Validating timestamp\\n      validateTimestamp(extractedTimestamp);\\n\\n      // Verifying the off-chain signature against on-chain hashed data\\n      signerAddress = SignatureLib.recoverSignerAddress(\\n        signedHash,\\n        calldataNegativeOffset + SIG_BS\\n      );\\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\\n    }\\n\\n    // Updating helpful arrays\\n    {\\n      bytes32 dataPointDataFeedId;\\n      uint256 dataPointValue;\\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\\n        // Extracting data feed id and value for the current data point\\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\\n          calldataNegativeOffset,\\n          eachDataPointValueByteSize,\\n          dataPointIndex\\n        );\\n\\n        for (\\n          uint256 dataFeedIdIndex = 0;\\n          dataFeedIdIndex < dataFeedIds.length;\\n          dataFeedIdIndex++\\n        ) {\\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\\n\\n            if (\\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\\n            ) {\\n              // Increase unique signer counter\\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\\n\\n              // Add new value\\n              valuesForDataFeeds[dataFeedIdIndex][\\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\\n              ] = dataPointValue;\\n\\n              // Update signers bitmap\\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\\n                bitmapSignersForDataFeedId,\\n                signerIndex\\n              );\\n            }\\n\\n            // Breaking, as there couldn't be several indexes for the same feed ID\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    // Return total data package byte size\\n    return\\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\\n      dataPointsCount;\\n  }\\n\\n  /**\\n   * @dev This is a private helpful function, which aggregates values from different\\n   * authorised signers for the given arrays of values for each data feed\\n   *\\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\\n   * j-th value for the i-th data feed\\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\\n   * for each data feed\\n   *\\n   * @return An array of the aggregated values\\n   */\\n  function _getAggregatedValues(\\n    uint256[][] memory valuesForDataFeeds,\\n    uint256[] memory uniqueSignerCountForDataFeedIds\\n  ) private view returns (uint256[] memory) {\\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\\n\\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\\n        revert InsufficientNumberOfUniqueSigners(\\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\\n          uniqueSignersThreshold);\\n      }\\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\\n    }\\n\\n    return aggregatedValues;\\n  }\\n}\\n\",\"keccak256\":\"0x202fada6c6efd72d2c57574f52ca1af65149c926b0e99a53503be3af6ad1864c\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"./RedstoneConsumerBase.sol\\\";\\n\\n/**\\n * @title The base contract for Redstone consumers' contracts that allows to\\n * securely calculate numeric redstone oracle values\\n * @author The Redstone Oracles team\\n * @dev This contract can extend other contracts to allow them\\n * securely fetch Redstone oracle data from transactions calldata\\n */\\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract an\\n   * oracle value for a given data feed id. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\\n   * @return Extracted and verified numeric oracle value for the given data feed id\\n   */\\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\\n    internal\\n    view\\n    virtual\\n    returns (uint256)\\n  {\\n    bytes32[] memory dataFeedIds = new bytes32[](1);\\n    dataFeedIds[0] = dataFeedId;\\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\\n  }\\n\\n  /**\\n   * @dev This function can be used in a consumer contract to securely extract several\\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\\n   * signatures verification, timestamp validation, and aggregating values\\n   * from different authorised signers into a single numeric value. If any of the\\n   * required conditions do not match, the function will revert.\\n   * Note! This function expects that tx calldata contains redstone payload in the end\\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\\n   * @param dataFeedIds An array of unique data feed identifiers\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIds array\\n   */\\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\\n    internal\\n    view\\n    virtual\\n    returns (uint256[] memory)\\n  {\\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\\n  }\\n\\n  /**\\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\\n   * only difference that it allows to request oracle data for an array of data feeds\\n   * that may contain duplicates\\n   * \\n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\\n   * @return An array of the extracted and verified oracle values in the same order\\n   * as they are requested in the dataFeedIdsWithDuplicates array\\n   */\\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\\n    // Building an array without duplicates\\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\\n    bool alreadyIncluded;\\n    uint256 uniqueDataFeedIdsCount = 0;\\n\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\\n      alreadyIncluded = false;\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\\n          alreadyIncluded = true;\\n          break;\\n        }\\n      }\\n\\n      // Adding if not included\\n      if (!alreadyIncluded) {\\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\\n        uniqueDataFeedIdsCount++;\\n      }\\n    }\\n\\n    // Overriding dataFeedIdsWithoutDuplicates.length\\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\\n    assembly {\\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\\n    }\\n\\n    // Requesting oracle values (without duplicates)\\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\\n\\n    // Preparing result values array\\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\\n          break;\\n        }\\n      }\\n    }\\n\\n    return valuesWithDuplicates;\\n  }\\n}\\n\",\"keccak256\":\"0x3edc6ab2395e53124bd3a29705a6b4a7968f3fd0ea7062690460e92a2cd0686b\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../libs/NumericArrayLib.sol\\\";\\n\\n/**\\n * @title Default implementations of virtual redstone consumer base functions\\n * @author The Redstone Oracles team\\n */\\nlibrary RedstoneDefaultsLib {\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\\n\\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\\n\\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\\n    bool isFromFuture = block.timestamp < receivedTimestampSeconds;\\n\\n    if ((block.timestamp + DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) < receivedTimestampSeconds) {\\n      revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\\n    }\\n    if (!isFromFuture && (block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\\n    }\\n  }\\n\\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\\n    return NumericArrayLib.pickMedian(values);\\n  }\\n}\\n\",\"keccak256\":\"0x11fdd6771bbf27a6a7ea0829c4e000b5a699c9af56e7bf1f55d689815b2914cc\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"../core/RedstoneConsumerNumericBase.sol\\\";\\n\\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n    return 10;\\n  }\\n\\n  function getAuthorisedSignerIndex(address signerAddress)\\n    public\\n    view\\n    virtual\\n    override\\n    returns (uint8)\\n  {\\n    if (signerAddress == 0x981bdA8276ae93F567922497153de7A5683708d3) {\\n      return 0;\\n    } else if (signerAddress == 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48) {\\n      return 1;\\n    } else if (signerAddress == 0xc1D5b940659e57b7bDF8870CDfC43f41Ca699460) {\\n      return 2;\\n    } else if (signerAddress == 0x1Cd8F9627a2838a7DAE6b98CF71c08B9CbF5174a) {\\n      return 3;\\n    } else if (signerAddress == 0xbC5a06815ee80dE7d20071703C1F1B8fC511c7d4) {\\n      return 4;\\n    } else if (signerAddress == 0xe9Fa2869C5f6fC3A0933981825564FD90573A86D) {\\n      return 5;\\n    } else if (signerAddress == 0xDf6b1cA313beE470D0142279791Fa760ABF5C537) {\\n      return 6;\\n    } else if (signerAddress == 0xa50abc5D76dAb99d5fe59FD32f239Bd37d55025f) {\\n      return 7;\\n    } else if (signerAddress == 0x496f4E8aC11076350A59b88D2ad62bc20d410EA3) {\\n      return 8;\\n    } else if (signerAddress == 0x41FB6b8d0f586E73d575bC57CFD29142B3214A47) {\\n      return 9;\\n    } else if (signerAddress == 0xC1068312a6333e6601f937c4773065B70D38A5bF) {\\n      return 10;\\n    } else if (signerAddress == 0xAE9D49Ea64DF38B9fcbC238bc7004a1421f7eeE8) {\\n      return 11;\\n    } else {\\n      revert SignerNotAuthorised(signerAddress);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xa619980c305a60fe5743079c1fa7a3c0e15a54652a29e086ce4cb498613647cf\",\"license\":\"BUSL-1.1\"},\"@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary BitmapLib {\\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\\n    return bitmap | (1 << bitIndex);\\n  }\\n\\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\\n    return bitAtIndex > 0;\\n  }\\n}\\n\",\"keccak256\":\"0x9762198cae997eebad303a7a43a6133908646ed30811285085c9ea9cbd2a5e07\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary NumericArrayLib {\\n  // This function sort array in memory using bubble sort algorithm,\\n  // which performs even better than quick sort for small arrays\\n\\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\\n  uint256 constant UINT256_VALUE_BS = 32;\\n\\n  error CanNotPickMedianOfEmptyArray();\\n\\n  // This function modifies the array\\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\\n    if (arr.length == 0) {\\n      revert CanNotPickMedianOfEmptyArray();\\n    }\\n    sort(arr);\\n    uint256 middleIndex = arr.length / 2;\\n    if (arr.length % 2 == 0) {\\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\\n      return sum / 2;\\n    } else {\\n      return arr[middleIndex];\\n    }\\n  }\\n\\n  function sort(uint256[] memory arr) internal pure {\\n    assembly {\\n      let arrLength := mload(arr)\\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\\n      for {\\n        let arrIPtr := valuesPtr\\n      } lt(arrIPtr, endPtr) {\\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\\n      } {\\n        for {\\n          let arrJPtr := valuesPtr\\n        } lt(arrJPtr, arrIPtr) {\\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\\n        } {\\n          let arrI := mload(arrIPtr)\\n          let arrJ := mload(arrJPtr)\\n          if lt(arrI, arrJ) {\\n            mstore(arrIPtr, arrJ)\\n            mstore(arrJPtr, arrI)\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x9b1a3a433a450cbe90e85801ddf891ab26deeda02d45a2d67e24443cdc33e764\",\"license\":\"MIT\"},\"@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.4;\\n\\nlibrary SignatureLib {\\n  uint256 constant ECDSA_SIG_R_BS = 32;\\n  uint256 constant ECDSA_SIG_S_BS = 32;\\n\\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\\n    internal\\n    pure\\n    returns (address)\\n  {\\n    bytes32 r;\\n    bytes32 s;\\n    uint8 v;\\n    assembly {\\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\\n      r := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\\n      s := calldataload(signatureCalldataStartPos)\\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\\n    }\\n    return ecrecover(signedHash, v, r, s);\\n  }\\n}\\n\",\"keccak256\":\"0x06037b440e5eab52d550718543c463da00ac7231f303a503178ad5191e154310\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/DiamondHelper.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IDiamondBeacon.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"./lib/avalanche/DeploymentConstants.sol\\\";\\n\\n/**\\n * DiamondHelper\\n * Helper methods\\n **/\\ncontract DiamondHelper {\\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\\n    }\\n}\",\"keccak256\":\"0x3836f18acae7434ca2528eb5ddafc6cf76c237e1bb3ba458bdf859fb98c0582e\",\"license\":\"BUSL-1.1\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2e9f2aba0ab8e419a7d1bf6e83f967ae0bc9c538;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\nimport \\\"./interfaces/IPoolRewarder.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * The interest rates calculation is delegated to an external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n    using TransferHelper for address payable;\\n\\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n    mapping(address => mapping(address => uint256)) private _allowed;\\n    mapping(address => uint256) internal _deposited;\\n\\n    mapping(address => uint256) public borrowed;\\n    mapping(address => bool) public canDeposit;\\n\\n    IRatesCalculator public ratesCalculator;\\n    IBorrowersRegistry public borrowersRegistry;\\n    IPoolRewarder public poolRewarder;\\n\\n    IIndex public depositIndex;\\n    IIndex public borrowIndex;\\n\\n    address payable public tokenAddress;\\n\\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_) public initializer {\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\\n            && AddressUpgradeable.isContract(address(depositIndex_))\\n            && AddressUpgradeable.isContract(address(borrowIndex_))\\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \\\"Wrong init arguments\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        ratesCalculator = ratesCalculator_;\\n        depositIndex = depositIndex_;\\n        borrowIndex = borrowIndex_;\\n        poolRewarder = poolRewarder_;\\n        tokenAddress = tokenAddress_;\\n\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n        _updateRates();\\n    }\\n\\n    /* ========== TEST-DEPLOYMENT ========== */\\n\\n    /* ========== SETTERS ========== */\\n    function setAccess(address user, bool allowDeposit) external onlyOwner {\\n        canDeposit[user] = allowDeposit;\\n    }\\n\\n    /**\\n     * Sets the new Pool Rewarder.\\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev _poolRewarder the address of PoolRewarder\\n    **/\\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\\n        require(AddressUpgradeable.isContract(address(_poolRewarder)) || address(_poolRewarder) == address(0), \\\"Must be a contract\\\");\\n        poolRewarder = _poolRewarder;\\n\\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new rate calculator.\\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev ratesCalculator the address of rates calculator\\n     **/\\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n        // setting address(0) ratesCalculator_ freezes the pool\\n        require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n        ratesCalculator = ratesCalculator_;\\n        if (address(ratesCalculator_) != address(0)) {\\n            _updateRates();\\n        }\\n\\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\\n    }\\n\\n    /**\\n     * Sets the new borrowers registry contract.\\n     * The borrowers registry decides if an account can borrow funds.\\n     * Only the owner of the Contract can execute this function.\\n     * @dev borrowersRegistry the address of borrowers registry\\n     **/\\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n        require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n        borrowersRegistry = borrowersRegistry_;\\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\n        require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        // (this is verified in \\\"require\\\" above)\\n        unchecked {\\n            _deposited[msg.sender] -= amount;\\n        }\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        emit Transfer(msg.sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) external view override returns (uint256) {\\n        return _allowed[owner][spender];\\n    }\\n\\n//    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n//        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n//        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n//        _allowed[msg.sender][spender] = newAllowance;\\n//\\n//        emit Approval(msg.sender, spender, newAllowance);\\n//        return true;\\n//    }\\n//\\n//    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n//        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n//        uint256 currentAllowance = _allowed[msg.sender][spender];\\n//        require(currentAllowance >= subtractedValue, \\\"Current allowance is too small\\\");\\n//\\n//        uint256 newAllowance = currentAllowance - subtractedValue;\\n//        _allowed[msg.sender][spender] = newAllowance;\\n//\\n//        emit Approval(msg.sender, spender, newAllowance);\\n//        return true;\\n//    }\\n\\n    function approve(address spender, uint256 amount) external override returns (bool) {\\n        require(spender != address(0), \\\"Spender cannot be a zero address\\\");\\n        _allowed[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n        require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed\\\");\\n        require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n        require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n        _accumulateDepositInterest(sender);\\n\\n        require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        _deposited[sender] -= amount;\\n        _allowed[sender][msg.sender] -= amount;\\n\\n        _accumulateDepositInterest(recipient);\\n        _deposited[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n\\n    /**\\n     * Deposits the amount\\n     * It updates user deposited balance, total deposited and rates\\n     **/\\n    function deposit(uint256 _amount) public virtual nonReentrant {\\n        require(canDeposit[msg.sender], \\\"User not permitted to create a loan\\\");\\n\\n        require(_amount>0, \\\"Deposit amount must be > 0\\\");\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _transferToPool(msg.sender, _amount);\\n\\n        _mint(msg.sender, _amount);\\n        _deposited[address(this)] += _amount;\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.stakeFor(_amount, msg.sender);\\n        }\\n\\n        emit Deposit(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    function _transferToPool(address from, uint256 amount) internal virtual {\\n        tokenAddress.safeTransferFrom(from, address(this), amount);\\n    }\\n\\n    function _transferFromPool(address to, uint256 amount) internal virtual {\\n        tokenAddress.safeTransfer(to, amount);\\n    }\\n\\n    /**\\n     * Withdraws selected amount from the user deposits\\n     * @dev _amount the amount to be withdrawn\\n     **/\\n    function withdraw(uint256 _amount) external nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool\\\");\\n\\n        _accumulateDepositInterest(msg.sender);\\n\\n        _burn(msg.sender, _amount);\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        if (address(poolRewarder) != address(0)) {\\n            poolRewarder.withdrawFor(_amount, msg.sender);\\n        }\\n\\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Borrows the specified amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev _amount the amount to be borrowed\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \\\"Not enough funds in the pool\\\");\\n\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        borrowed[msg.sender] += _amount;\\n        borrowed[address(this)] += _amount;\\n\\n        _transferFromPool(msg.sender, _amount);\\n\\n        _updateRates();\\n\\n        emit Borrowing(msg.sender, _amount, block.timestamp);\\n    }\\n\\n    /**\\n     * Repays the amount\\n     * It updates user borrowed balance, total borrowed amount and rates\\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\\n     **/\\n    function repay(uint256 amount) external nonReentrant {\\n        _accumulateBorrowingInterest(msg.sender);\\n\\n        require(borrowed[msg.sender] >= amount, \\\"Trying to repay more than was borrowed\\\");\\n        _transferToPool(msg.sender, amount);\\n\\n        borrowed[msg.sender] -= amount;\\n        borrowed[address(this)] -= amount;\\n\\n        _updateRates();\\n\\n        emit Repayment(msg.sender, amount, block.timestamp);\\n    }\\n\\n    /* =========\\n\\n\\n    /**\\n     * Returns the current borrowed amount for the given user\\n     * The value includes the interest rates owned at the current moment\\n     * @dev _user the address of queried borrower\\n    **/\\n    function getBorrowed(address _user) public view returns (uint256) {\\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return balanceOf(address(this));\\n    }\\n\\n    function totalBorrowed() public view returns (uint256) {\\n        return getBorrowed(address(this));\\n    }\\n\\n\\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\\n    function getRewards() external {\\n        poolRewarder.getRewardsFor(msg.sender);\\n    }\\n\\n    // Returns number of pending rewards for msg.sender\\n    function checkRewards() external view returns (uint256) {\\n        return poolRewarder.earned(msg.sender);\\n    }\\n\\n    /**\\n     * Returns the current deposited amount for the given user\\n     * The value includes the interest rates earned at the current moment\\n     * @dev _user the address of queried depositor\\n     **/\\n    function balanceOf(address user) public view override returns (uint256) {\\n        return depositIndex.getIndexedValue(_deposited[user], user);\\n    }\\n\\n    /**\\n     * Returns the current interest rate for deposits\\n     **/\\n    function getDepositRate() public view returns (uint256) {\\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Returns the current interest rate for borrowings\\n     **/\\n    function getBorrowingRate() public view returns (uint256) {\\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n    }\\n\\n    /**\\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n     **/\\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\\n\\n        require(amount <= balance, \\\"Trying to recover more than pool balance\\\");\\n        require(amount <= surplus, \\\"Trying to recover more than current surplus\\\");\\n\\n        _transferFromPool(account, amount);\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function _mint(address to, uint256 amount) internal {\\n        require(to != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n        _deposited[to] += amount;\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal {\\n        require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n        require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n        // verified in \\\"require\\\" above\\n        unchecked {\\n            _deposited[account] -= amount;\\n            _deposited[address(this)] -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _updateRates() internal {\\n        uint256 _totalBorrowed = totalBorrowed();\\n        uint256 _totalSupply = totalSupply();\\n        require(address(ratesCalculator) != address(0), \\\"Pool is frozen\\\");\\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\\n    }\\n\\n    function _accumulateDepositInterest(address user) internal {\\n        uint256 interest = balanceOf(user) - _deposited[user];\\n\\n        _mint(user, interest);\\n        _deposited[address(this)] = balanceOf(address(this));\\n\\n        emit InterestCollected(user, interest, block.timestamp);\\n\\n        depositIndex.updateUser(user);\\n        depositIndex.updateUser(address(this));\\n    }\\n\\n    function _accumulateBorrowingInterest(address user) internal {\\n        borrowed[user] = getBorrowed(user);\\n        borrowed[address(this)] = getBorrowed(address(this));\\n\\n        borrowIndex.updateUser(user);\\n        borrowIndex.updateUser(address(this));\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier canBorrow() {\\n        require(address(borrowersRegistry) != address(0), \\\"Borrowers registry not configured\\\");\\n        require(borrowersRegistry.canBorrow(msg.sender), \\\"Only authorized accounts may borrow\\\");\\n        require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n        _;\\n        require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after the user deposits funds\\n     * @param user the address performing the deposit\\n     * @param value the amount deposited\\n     * @param timestamp of the deposit\\n     **/\\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user withdraws funds\\n     * @param user the address performing the withdrawal\\n     * @param value the amount withdrawn\\n     * @param timestamp of the withdrawal\\n     **/\\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user borrows funds\\n     * @param user the address that borrows\\n     * @param value the amount borrowed\\n     * @param timestamp time of the borrowing\\n     **/\\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after the user repays debt\\n     * @param user the address that repays debt\\n     * @param value the amount repaid\\n     * @param timestamp of the repayment\\n     **/\\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after accumulating deposit interest\\n     * @param user the address that the deposit interest is accumulated for\\n     * @param value the amount that interest is calculated from\\n     * @param timestamp of the interest accumulation\\n     **/\\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing borrowers registry\\n    * @param registry an address of the newly set borrowers registry\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing rates calculator\\n    * @param calculator an address of the newly set rates calculator\\n    * @param timestamp of the borrowers registry change\\n    **/\\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after changing pool rewarder\\n    * @param poolRewarder an address of the newly set pool rewarder\\n    * @param timestamp of the pool rewarder change\\n    **/\\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\\n}\",\"keccak256\":\"0x04437aa06acbe30e8d98f7509a8a1fef4c2811f99366249654de6362ba562ac3\",\"license\":\"BUSL-1.1\"},\"contracts/RedstoneConfigManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RedstoneConfigManager is Ownable {\\n    mapping(address => bool) internal signerAuthorized;\\n    address[] public trustedSigners;\\n\\n    constructor(address[] memory _trustedSigners) {\\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\\n            require(!signerExists(_trustedSigners[i]), \\\"Signer already exists\\\");\\n            _addTrustedSigner(_trustedSigners[i]);\\n        }\\n    }\\n\\n    function getTrustedSigners() external view returns (address[] memory) {\\n        return trustedSigners;\\n    }\\n\\n    function signerExists(address signer) public view returns (bool) {\\n        return signerAuthorized[signer];\\n    }\\n\\n    function addTrustedSigners(address[] memory _trustedSigners) public onlyOwner {\\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\\n            require(!signerExists(_trustedSigners[i]), \\\"Signer already exists\\\");\\n            _addTrustedSigner(_trustedSigners[i]);\\n            emit SignerAdded(msg.sender, _trustedSigners[i], block.timestamp);\\n        }\\n    }\\n\\n    function _addTrustedSigner(address newSigner) private {\\n        signerAuthorized[newSigner] = true;\\n        trustedSigners.push(newSigner);\\n    }\\n\\n    function removeTrustedSigners(address[] memory _trustedSigners) public onlyOwner {\\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\\n            require(signerExists(_trustedSigners[i]), \\\"Signer does not exists\\\");\\n            _removeTrustedSigner(_trustedSigners[i]);\\n            emit SignerRemoved(msg.sender, _trustedSigners[i], block.timestamp);\\n        }\\n    }\\n\\n    function _removeTrustedSigner(address signerToRemove) private {\\n        // Signer is no longer authorized\\n        signerAuthorized[signerToRemove] = false;\\n\\n        // Remove signerToRemove from the trustedSigners list\\n        for (uint256 i = 0; i < trustedSigners.length; i++) {\\n            // Lookup signerToRemove position in the trustedSigners list\\n            if (trustedSigners[i] == signerToRemove) {\\n                // If signerToRemove is not at the last place in the list, copy last list's element to it's place\\n                if (i != trustedSigners.length - 1) {\\n                    trustedSigners[i] = trustedSigners[trustedSigners.length - 1];\\n                }\\n                // Remove last list's element\\n                trustedSigners.pop();\\n            }\\n        }\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    // EVENTS\\n    /**\\n    * @dev emitted after adding a signer\\n    * @param user performing the transaction\\n    * @param signer address of added signer\\n    * @param timestamp of change\\n    **/\\n    event SignerAdded(address indexed user, address signer, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after removing a signer\\n    * @param user performing the transaction\\n    * @param signer address of removed signer\\n    * @param timestamp of change\\n    **/\\n    event SignerRemoved(address indexed user, address signer, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x6af8ec818ad11fd9fd6cb15ca6338b87d78d1ffe2e528e933085d0c21a4e0821\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\n// contract that uses keccak slots instead of the standard storage layout.\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n */\\nabstract contract ReentrancyGuardKeccak {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rgs._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rgs._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xff292b8761ea7ade758ddc700e6e8b8727210285859db6a48d7bba1778ab7e1a\",\"license\":\"MIT\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract TokenManager {\\n    /**\\n     * For adding supported assets\\n     **/\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 maxLeverage;\\n    }\\n\\n    /**\\n     * For adding supported lending pools\\n     **/\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    uint256 private constant _NOT_SUPPORTED = 0;\\n    uint256 private constant _INACTIVE = 1;\\n    uint256 private constant _ACTIVE = 2;\\n\\n    address public admin;\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\n    mapping(address => uint256) private tokenPositionInList;\\n    // used for defining different leverage ratios for tokens\\n    mapping(address => uint256) public maxTokenLeverage;\\n    address[] public supportedTokensList;\\n\\n    address public adminTransferProposal;\\n\\n    mapping(address => uint256) public tokenToStatus;\\n\\n    constructor(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) {\\n        admin = msg.sender;\\n        emit AdminChanged(address(0), msg.sender, block.timestamp);\\n        addTokenAssets(tokenAssets);\\n        addPoolAssets(poolAssets);\\n    }\\n\\n    // Set to address(0) to reset proposal\\n    function proposeAdminTransfer(address _newOwner) onlyAdmin public {\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\n        adminTransferProposal = _newOwner;\\n        emit AdminProposed(msg.sender, _newOwner, block.timestamp);\\n    }\\n\\n    function executeAdminTransfer() public {\\n        require(adminTransferProposal != address(0), \\\"There is no active admin transfer proposal\\\");\\n        require(adminTransferProposal == msg.sender, \\\"Only the proposed new admin can execute admin transfer proposal\\\");\\n        address oldAdmin = admin;\\n        admin = adminTransferProposal;\\n        adminTransferProposal = address(0);\\n        emit AdminChanged(oldAdmin, msg.sender, block.timestamp);\\n    }\\n\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\n        return assetToPoolAddress._inner._keys._inner._values;\\n    }\\n\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\n        return supportedTokensList;\\n    }\\n\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\n        return assetToTokenAddress._inner._keys._inner._values;\\n    }\\n\\n    /**\\n    * Returns address of an asset\\n    **/\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n        if (!allowInactive) {\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\n        }\\n\\n        return assetAddress;\\n    }\\n\\n    /**\\n    * Returns address of an asset's lending pool\\n    **/\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\n\\n        return assetAddress;\\n    }\\n\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\n        }\\n    }\\n\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\n        assetToPoolAddress.set(_asset, _poolAddress);\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\n    }\\n\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].maxLeverage);\\n        }\\n    }\\n\\n    function activateToken(address token) public onlyAdmin {\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\n        tokenToStatus[token] = _ACTIVE;\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function deactivateToken(address token) public onlyAdmin {\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\n        tokenToStatus[token] = _INACTIVE;\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _maxLeverage) internal {\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\n        setMaxTokenLeverage(_tokenAddress, _maxLeverage);\\n\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\n\\n        supportedTokensList.push(_tokenAddress);\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\n\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\n    }\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        supportedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\n            _removeTokenAsset(_tokenAssets[i]);\\n        }\\n    }\\n\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\n        tokenAddressToSymbol[tokenAddress] = 0;\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\n        maxTokenLeverage[tokenAddress] = 0;\\n        _removeTokenFromList(tokenAddress);\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\n    }\\n\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\n            _removePoolAsset(_poolAssets[i]);\\n        }\\n    }\\n\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\n        address poolAddress = getPoolAddress(_poolAsset);\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\n    }\\n\\n    function setMaxTokenLeverage(address token, uint256 maxLeverage) public onlyAdmin {\\n        //LTV must be lower than 5\\n        require(maxLeverage <= 0.833333333333333333e18, 'Leverage higher than maximum acceptable');\\n        maxTokenLeverage[token] = maxLeverage;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"Admin only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after proposing a new admin\\n     * @param oldAdmin current admin\\n     * @param newAdmin new admin proposed\\n     * @param timestamp time of proposal\\n     **/\\n    event AdminProposed(address indexed oldAdmin, address newAdmin, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after changing an admin\\n     * @param oldAdmin previous admin\\n     * @param newAdmin new admin being set\\n     * @param timestamp time of changing an admin\\n     **/\\n    event AdminChanged(address indexed oldAdmin, address newAdmin, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a token asset\\n     * @param performer an address of the wallet adding a token asset\\n     * @param tokenAsset token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of adding a token asset\\n     **/\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after activating a token asset\\n     * @param performer an address of the wallet activating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of activating a token asset\\n     **/\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after deactivating a token asset\\n     * @param performer an address of the wallet deactivating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of deactivating a token asset\\n     **/\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a token asset\\n     * @param performer an address of the wallet removing a token asset\\n     * @param tokenAsset token asset\\n     * @param timestamp time a token asset removal\\n     **/\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a pool asset\\n     * @param performer an address of wallet adding the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of the pool asset addition\\n     **/\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a pool asset\\n     * @param performer an address of wallet removing the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of a pool asset removal\\n     **/\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x83b50c470ce3c03624d1368237bf40912d398b171bde781c381f93c0176a5781\",\"license\":\"BUSL-1.1\"},\"contracts/facets/SolvencyFacetProd.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"../oracle/RSOracleProd3Signers.sol\\\";\\nimport \\\"../TokenManager.sol\\\";\\nimport \\\"../Pool.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\n\\ncontract SolvencyFacetProd is RSOracleProd3Signers, DiamondHelper {\\n    struct AssetPrice {\\n        bytes32 asset;\\n        uint256 price;\\n    }\\n\\n    // Struct used in the liquidation process to obtain necessary prices only once\\n    struct CachedPrices {\\n        AssetPrice[] ownedAssetsPrices;\\n        AssetPrice[] debtAssetsPrices;\\n        AssetPrice[] stakedPositionsPrices;\\n        AssetPrice[] assetsToRepayPrices;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function isSolvent() public view returns (bool) {\\n        return getHealthRatio() >= 1e18;\\n    }\\n\\n    /**\\n      * Checks if the loan is solvent.\\n      * It means that the Health Ratio is greater than 1e18.\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n      * @param ownedAssetsPrices An array of Asset/Price structs used to calculate weighted value of owned assets\\n      * @param debtAssetsPrices An array of Asset/Price structs used to calculate value of the debt\\n      * @param stakedPositionsPrices An array of Asset/Price structs used to calculate value of the staked positions\\n    **/\\n    function isSolventWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory debtAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view returns (bool) {\\n        return getHealthRatioWithPrices(ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices) >= 1e18;\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of staked positions.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        bytes32[] memory symbols = new bytes32[](positions.length);\\n        for(uint256 i=0; i<positions.length; i++) {\\n            symbols[i] = positions[i].symbol;\\n        }\\n\\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\\n        result = new AssetPrice[](stakedPositionsPrices.length);\\n\\n        for(uint i; i<stakedPositionsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: symbols[i],\\n                price: stakedPositionsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\\n    **/\\n    function getDebtAssets() public view returns(bytes32[] memory result) {\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        result = tokenManager.getAllPoolAssets();\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory debtAssets = getDebtAssets();\\n\\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\\n        result = new AssetPrice[](debtAssetsPrices.length);\\n\\n        for(uint i; i<debtAssetsPrices.length; i++){\\n            result[i] = AssetPrice({\\n                asset: debtAssets[i],\\n                price: debtAssetsPrices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getOwnedAssetsPrices() public view returns(AssetPrice[] memory result) {\\n        bytes32[] memory assetsEnriched = getOwnedAssetsEnriched();\\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\\n\\n        result = new AssetPrice[](assetsEnriched.length);\\n\\n        for(uint i; i<assetsEnriched.length; i++){\\n            result[i] = AssetPrice({\\n                asset: assetsEnriched[i],\\n                price: prices[i]\\n            });\\n        }\\n    }\\n\\n    /**\\n      * Returns an array of bytes32[] symbols of staked positions.\\n    **/\\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n        result = new bytes32[](positions.length);\\n        for(uint i; i<positions.length; i++) {\\n            result[i] = positions[i].symbol;\\n        }\\n    }\\n\\n    /**\\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getAllPricesForLiquidation(bytes32[] calldata assetsToRepay) public view returns (CachedPrices memory result) {\\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsEnriched();\\n        bytes32[] memory debtAssets = getDebtAssets();\\n        bytes32[] memory stakedAssets = getStakedAssets();\\n\\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\\n        uint256 offset;\\n\\n        // Populate allAssetsSymbols with owned assets symbols\\n        for(uint i; i<ownedAssetsEnriched.length; i++){\\n            allAssetsSymbols[i] = ownedAssetsEnriched[i];\\n        }\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate allAssetsSymbols with debt assets symbols\\n        for(uint i; i<debtAssets.length; i++){\\n            allAssetsSymbols[i+offset] = debtAssets[i];\\n        }\\n        offset += debtAssets.length;\\n\\n        // Populate allAssetsSymbols with staked assets symbols\\n        for(uint i; i<stakedAssets.length; i++){\\n            allAssetsSymbols[i+offset] = stakedAssets[i];\\n        }\\n        offset += stakedAssets.length;\\n\\n        // Populate allAssetsSymbols with assets to repay symbols\\n        for(uint i; i<assetsToRepay.length; i++){\\n            allAssetsSymbols[i+offset] = assetsToRepay[i];\\n        }\\n\\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\\n\\n        offset = 0;\\n\\n        // Populate ownedAssetsPrices struct\\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\\n        for(uint i=0; i<ownedAssetsEnriched.length; i++){\\n            ownedAssetsPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n        offset += ownedAssetsEnriched.length;\\n\\n        // Populate debtAssetsPrices struct\\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\\n        for(uint i=0; i<debtAssets.length; i++){\\n            debtAssetsPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n        offset += debtAssetsPrices.length;\\n\\n        // Populate stakedPositionsPrices struct\\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\\n        for(uint i=0; i<stakedAssets.length; i++){\\n            stakedPositionsPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n        offset += stakedAssets.length;\\n\\n        // Populate assetsToRepayPrices struct\\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\\n        for(uint i=0; i<assetsToRepay.length; i++){\\n            assetsToRepayPrices[i] = AssetPrice({\\n            asset: allAssetsSymbols[i+offset],\\n            price: allAssetsPrices[i+offset]\\n            });\\n        }\\n\\n        result = CachedPrices({\\n        ownedAssetsPrices: ownedAssetsPrices,\\n        debtAssetsPrices: debtAssetsPrices,\\n        stakedPositionsPrices: stakedPositionsPrices,\\n        assetsToRepayPrices: assetsToRepayPrices\\n        });\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\\n        return getOracleNumericValuesFromTxMsg(symbols);\\n    }\\n\\n    /**\\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getPrice(bytes32 symbol) external view returns (uint256) {\\n        return getOracleNumericValueFromTxMsg(symbol);\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and maxTokenLeverage\\n    **/\\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n        uint256 weightedValueOfTokens;\\n\\n        if (ownedAssetsPrices.length > 0) {\\n            // TODO: double check the decimals\\n            weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.maxTokenLeverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * 10 ** 10 * token.balanceOf(address(this)) * tokenManager.maxTokenLeverage(address(token)) / (10 ** token.decimals() * 1e18));\\n            }\\n        }\\n        return weightedValueOfTokens;\\n    }\\n\\n    /**\\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and maxTokenLeverage\\n    **/\\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 weightedValueOfStaked;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                weightedValueOfStaked += stakedPositionsPrices[i].price * 10 ** 10 * balance * tokenManager.maxTokenLeverage(positions[i].vault) / (10 ** token.decimals());\\n            }\\n        }\\n        return weightedValueOfStaked;\\n    }\\n\\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsPrices();\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n    /**\\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current debt from all lending pools\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        uint256 debt;\\n\\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\\n\\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\\n            / 10 ** token.decimals();\\n        }\\n\\n        return debt;\\n    }\\n\\n    /**\\n     * Returns the current debt from all lending pools\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getDebt() public view virtual returns (uint256) {\\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current debt from all lending pools\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\\n        return getDebtBase(debtAssetsPrices);\\n    }\\n\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\\n        if (ownedAssetsPrices.length > 0) {\\n            TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n\\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\\n\\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\\n                uint256 assetBalance = token.balanceOf(address(this));\\n\\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\\n            }\\n            return total;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getTotalAssetsValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsPrices();\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\\n    }\\n\\n    /**\\n      * Returns list of owned assets that always included NativeToken at index 0\\n    **/\\n    function getOwnedAssetsEnriched() public view returns(bytes32[] memory){\\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\\n\\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\\n        bytes32[] memory assetsEnriched = new bytes32[](numberOfAssets);\\n\\n        uint256 lastUsedIndex;\\n        assetsEnriched[0] = nativeTokenSymbol; // First asset = NativeToken\\n\\n        for(uint i=0; i< ownedAssets.length; i++){\\n            if(ownedAssets[i] != nativeTokenSymbol){\\n                lastUsedIndex += 1;\\n                assetsEnriched[lastUsedIndex] = ownedAssets[i];\\n            }\\n        }\\n        return assetsEnriched;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\\n\\n        uint256 usdValue;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \\\"Position-price symbol mismatch.\\\");\\n\\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\\n\\n            if (success) {\\n                uint256 balance = abi.decode(result, (uint256));\\n\\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\\n\\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\\n            }\\n        }\\n\\n        return usdValue;\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of staked positions in USD.\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getStakedValue() public view virtual returns (uint256) {\\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\\n        return _getStakedValueBase(stakedPositionsPrices);\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * @dev This function uses the redstone-evm-connector\\n    **/\\n    function getTotalValue() public view virtual returns (uint256) {\\n        return getTotalAssetsValue() + getStakedValue();\\n    }\\n\\n    /**\\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n    **/\\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\\n    }\\n\\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * @dev This function uses the redstone-evm-connector\\n     **/\\n    function getHealthRatio() public view virtual returns (uint256) {\\n        uint256 debt = getDebt();\\n        uint256 thresholdWeightedValue = getThresholdWeightedValue();\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n\\n    /**\\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\\n     * by current debt\\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\\n     **/\\n    function getHealthRatioWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory debtAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\\n        uint256 debt = getDebtWithPrices(debtAssetsPrices);\\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(ownedAssetsPrices, stakedPositionsPrices);\\n\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        } else {\\n            return thresholdWeightedValue * 1e18 / debt;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x116fd0d0aa9965a5b6b468722b686beaf28d2d046ee1c110bce75233cfed2973\",\"license\":\"BUSL-1.1\"},\"contracts/facets/UniswapV2DEXFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../lib/SolvencyMethods.sol\\\";\\nimport {DiamondStorageLib} from \\\"../lib/DiamondStorageLib.sol\\\";\\n\\n//This path is updated during deployment\\nimport \\\"../lib/avalanche/DeploymentConstants.sol\\\";\\nimport \\\"../interfaces/IAssetsExchange.sol\\\";\\n\\ncontract UniswapV2DEXFacet is ReentrancyGuardKeccak, SolvencyMethods {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    function getProtocolID() pure internal virtual returns (bytes32) {\\n        return \\\"\\\";\\n    }\\n\\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\\n        bytes memory tempEmptyStringTest = bytes(source);\\n        if (tempEmptyStringTest.length == 0) {\\n            return 0x0;\\n        }\\n\\n        assembly {\\n            result := mload(add(source, 32))\\n        }\\n    }\\n\\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\\n        uint8 i = 0;\\n        while(i < 32 && _bytes32[i] != 0) {\\n            i++;\\n        }\\n        bytes memory bytesArray = new bytes(i);\\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\\n            bytesArray[i] = _bytes32[i];\\n        }\\n        return string(bytesArray);\\n    }\\n\\n    /**\\n    * Swaps one asset with another\\n    * @param _soldAsset asset to be sold\\n    * @param _boughtAsset asset to be bought\\n    * @param _exactSold exact amount of asset to be sold\\n    * @param _minimumBought minimum amount of asset to be bought\\n    **/\\n    function swapAssets(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) internal remainsSolvent returns (uint256[] memory) {\\n        IERC20Metadata soldToken = getERC20TokenInstance(_soldAsset, true);\\n        IERC20Metadata boughtToken = getERC20TokenInstance(_boughtAsset, false);\\n\\n        require(soldToken.balanceOf(address(this)) >= _exactSold, \\\"Not enough token to sell\\\");\\n        address(soldToken).safeTransfer(getExchangeIntermediaryContract(), _exactSold);\\n\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\n\\n        uint256[] memory amounts = exchange.swap(address(soldToken), address(boughtToken), _exactSold, _minimumBought);\\n\\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\\n        // Add asset to ownedAssets\\n        address boughtAssetAddress = tokenManager.getAssetAddress(_boughtAsset, false);\\n\\n        if (boughtToken.balanceOf(address(this)) > 0) {\\n            DiamondStorageLib.addOwnedAsset(_boughtAsset, boughtAssetAddress);\\n        }\\n\\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\\n        if (soldToken.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_soldAsset);\\n        }\\n\\n        emit Swap(msg.sender, _soldAsset, _boughtAsset, amounts[0], amounts[amounts.length - 1], block.timestamp);\\n\\n        return amounts;\\n    }\\n\\n    /**\\n    * Adds liquidity\\n    **/\\n    function addLiquidity(bytes32 _assetA, bytes32 _assetB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) internal remainsSolvent {\\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\\n\\n        require(tokenA.balanceOf(address(this)) >= amountA, \\\"Not enough tokenA to provide\\\");\\n        require(tokenB.balanceOf(address(this)) >= amountB, \\\"Not enough tokenB to provide\\\");\\n\\n        address(tokenA).safeTransfer(getExchangeIntermediaryContract(), amountA);\\n        address(tokenB).safeTransfer(getExchangeIntermediaryContract(), amountB);\\n\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\n\\n        address lpTokenAddress;\\n        uint liquidity;\\n\\n        (lpTokenAddress, amountA, amountB, liquidity)\\n          = exchange.addLiquidity(address(tokenA), address(tokenB), amountA, amountB, amountAMin, amountBMin);\\n\\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) > 0) {\\n            (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\\n            bytes32 lpToken = stringToBytes32(string.concat(\\n                    bytes32ToString(getProtocolID()),\\n                        '_',\\n                        bytes32ToString(token0),\\n                        '_',\\n                        bytes32ToString(token1),\\n                        '_LP'\\n                )\\n            );\\n            DiamondStorageLib.addOwnedAsset(lpToken, lpTokenAddress);\\n        }\\n\\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\\n        if (tokenA.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_assetA);\\n        }\\n\\n        if (tokenB.balanceOf(address(this)) == 0) {\\n            DiamondStorageLib.removeOwnedAsset(_assetB);\\n        }\\n\\n        emit AddLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\\n    }\\n\\n    /**\\n    * Removes liquidity\\n    **/\\n    function removeLiquidity(bytes32 _assetA, bytes32 _assetB, uint liquidity, uint amountAMin, uint amountBMin) internal remainsSolvent {\\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\\n\\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\\n\\n        address lpTokenAddress = exchange.getPair(address(tokenA), address(tokenB));\\n\\n        lpTokenAddress.safeTransfer(getExchangeIntermediaryContract(), liquidity);\\n\\n        (uint amountA, uint amountB) = exchange.removeLiquidity(address(tokenA), address(tokenB), liquidity, amountAMin, amountBMin);\\n\\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) == 0) {\\n            (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\\n            bytes32 lpToken = stringToBytes32(string.concat(\\n                    bytes32ToString(getProtocolID()),\\n                    '_',\\n                    bytes32ToString(token0),\\n                    '_',\\n                    bytes32ToString(token1)\\n                )\\n            );\\n            DiamondStorageLib.removeOwnedAsset(lpToken);\\n        }\\n\\n        emit RemoveLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\\n    }\\n\\n    /**\\n     * Returns address of DeltaPrime intermediary contract of UniswapV2-like exchange\\n     **/\\n    //TO BE OVERRIDDEN\\n    function getExchangeIntermediaryContract() public virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    modifier onlyOwner() {\\n        DiamondStorageLib.enforceIsContractOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after a swap of assets\\n     * @param user the address of user making the purchase\\n     * @param soldAsset sold by the user\\n     * @param boughtAsset bought by the user\\n     * @param maximumSold maximum to be sold\\n     * @param minimumBought minimum to be bought\\n     * @param timestamp time of the swap\\n     **/\\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 maximumSold, uint256 minimumBought, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after providing liquidity\\n     * @param user the address of user providing liquidity\\n     * @param lpToken the address LP token\\n     * @param firstAsset first asset provided for liquidity\\n     * @param secondAsset second asset provided for liquidity\\n     * @param liquidity amount of liquidity (LP token) added\\n     * @param firstAmount amount of the first asset used\\n     * @param secondAmount amount of the second asset used\\n     * @param timestamp time of the transaction\\n     **/\\n    event AddLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing liquidity\\n     * @param user the address of user providing liquidity\\n     * @param lpToken the address LP token\\n     * @param firstAsset first asset from LP position\\n     * @param secondAsset second asset from LP position\\n     * @param liquidity amount of liquidity (LP token) removed\\n     * @param firstAmount amount of the first asset obtained\\n     * @param secondAmount amount of the second asset obtained\\n     * @param timestamp time of the transaction\\n     **/\\n    event RemoveLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\\n}\",\"keccak256\":\"0xeb3311bc086d1de0d81d26f099785117b23d34be1625bb2efa9e379cd42258a8\",\"license\":\"BUSL-1.1\"},\"contracts/facets/avalanche/TraderJoeDEXFacet.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"../UniswapV2DEXFacet.sol\\\";\\n\\ncontract TraderJoeDEXFacet is UniswapV2DEXFacet {\\n    function getProtocolID() pure internal override returns (bytes32) {\\n        return \\\"TJ\\\";\\n    }\\n\\n    /**\\n      * Swaps one asset to another\\n      * @dev This function uses the redstone-evm-connector\\n      * @param _soldAsset asset to be sold\\n      * @param _boughtAsset asset to be bought\\n      * @param _exactSold exact amount of asset to be sold\\n      * @param _minimumBought minimum amount of asset to be bought\\n    **/\\n    function swapTraderJoe(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public onlyOwner returns (uint256[] memory) {\\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\\n    }\\n\\n    function addLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\\n    }\\n\\n    function removeLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public onlyOwner {\\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\\n    }\\n\\n    /**\\n     * Returns address of UniswapV2-like exchange\\n     **/\\n    function getExchangeIntermediaryContract() public override returns (address) {\\n        return 0xa493b6fF3ea1d0BeD5766DD9F52A5828B6dFC643;\\n    }\\n}\",\"keccak256\":\"0x0b486cd84d2b2ac81be45aee3164361af497973f0e578d74e6c6eb19b935f510\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IAssetExchange\\n * @dev Basic interface for investing into assets\\n * It could be linked either to DEX or to a synthetic assets platform\\n */\\ninterface IAssetsExchange {\\n\\n    /*\\n     * Swaps selected ERC20 token with other ERC20 token\\n     * @param soldToken_ sold ERC20 token's address\\n     * @param boughtToken_ bought ERC20 token's address\\n     * @param _amountSold exact amount of ERC20 token to be sold\\n     * @param _amountBought minimum amount of ERC20 token to be bought\\n     **/\\n    function swap(address soldToken_, address boughtToken_, uint256 _exactAmountIn, uint256 _minAmountOut) external returns (uint256[] memory);\\n\\n    /*\\n     * Adds liquidity of ERC20 tokens\\n     */\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external returns (address, uint, uint, uint);\\n\\n    /*\\n     * Removes liquidity of ERC20 tokens\\n     */\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin) external returns (uint, uint);\\n\\n    /**\\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\\n     **/\\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) external returns (uint256);\\n\\n    /**\\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\\n     **/\\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) external returns (uint256);\\n\\n    /**\\n     * getPair\\n     **/\\n    function getPair(address _tokenA, address _tokenB) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0x4842d61120bf154a22024bf31e7ee68cac0dee2353e8e53175372fc63447bbf8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n    function canBorrow(address _account) external view returns (bool);\\n\\n    function getLoanForOwner(address _owner) external view returns (address);\\n\\n    function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0x05ce704e795295743b6e2da563f4572e43f890f4214fed9ff3e6792bb7ec2f83\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IDiamondBeacon {\\n\\n    function implementation() external view returns (address);\\n\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\\n     */\\n    function implementation(bytes4) external view returns (address);\\n\\n    function getStatus() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x490e0bed4571bb68e15726f9aae72f91b404178d7ab18e3a6ecd376aa444efb7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IPoolRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\ninterface IPoolRewarder {\\n\\n    function stakeFor(uint _amount, address _stakeFor) external;\\n\\n    function withdrawFor(uint _amount, address _unstakeFor) external;\\n\\n    function getRewardsFor(address _user) external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n}\\n\",\"keccak256\":\"0x872c6c2ba149ca3c3e4761047819b4c9dd5b979f572815f56740b40edbf74d01\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        address vault;\\n        bytes32 symbol;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0xe617bf40dd2a59f4dbf9d24696fe931a0247a59dae1ba58ab26ff58518b2c846\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n\\n        bool _initialized;\\n        bool _active;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == position.balanceSelector) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes4 balanceSelector) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == balanceSelector) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0x0f1e8f956a3b0ddab4a81047d99a8cf02cc19211e3c80b9a4a2e1da49d33797b\",\"license\":\"MIT\"},\"contracts/lib/SolvencyMethods.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\\\";\\nimport \\\"../facets/SolvencyFacetProd.sol\\\";\\nimport \\\"../DiamondHelper.sol\\\";\\n\\n// TODO Rename to contract instead of lib\\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\\n    // This function executes SolvencyFacetProd.getDebt()\\n    function _getDebt() internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\\n        debt = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\\n    function _isSolventWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.isSolvent()\\n    function _isSolvent() internal virtual returns (bool solvent){\\n        solvent = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\\n            ),\\n            (bool)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalValue()\\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\\n        assetsValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\\n    function _getHealthRatioWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getHealthRatio()\\n    function _getHealthRatio() public virtual returns (uint256 health) {\\n        health = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\\n        prices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\\n            ),\\n            (uint256[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\\n        result = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\\n            ),\\n            (SolvencyFacetProd.CachedPrices)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getOwnedAssetsPrices()\\n    function _getOwnedAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\\n        ownedAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\\n        debtAssetsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\\n        stakedPositionsPrices = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\\n            ),\\n            (SolvencyFacetProd.AssetPrice[])\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\\n        totalValue = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    // This function executes SolvencyFacetProd.getPrices()\\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\\n        price = abi.decode(\\n            proxyDelegateCalldata(\\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\\n            ),\\n            (uint256)\\n        );\\n    }\\n\\n    /**\\n     * Returns IERC20Metadata instance of a token\\n     * @param _asset the code of an asset\\n     **/\\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\\n    }\\n\\n    /**\\n    * Checks whether account is solvent (health higher than 1)\\n    * @dev This modifier uses the redstone-evm-connector\\n    **/\\n    modifier remainsSolvent() {\\n        _;\\n\\n        require(_isSolvent(), \\\"The action may cause an account to become insolvent\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xbae777fcddf0c5d7ae1eff20c5e6d71201a20359779ccf85e5a3f96b966fd104\",\"license\":\"BUSL-1.1\"},\"contracts/lib/avalanche/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../TokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\nimport \\\"../../RedstoneConfigManager.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x7dBcB7b5019cfD15225E5aDc454B864CA1b7f2d1;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x9FDb3940D8A91E89b4399Fbb0D038DC296A43C42;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB;\\n\\n    address private constant _REDSTONE_CONFIG_MANAGER_ADDRESS = 0x127587D8a188493Cc032A0eC2bd1D559E3A8E275;\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (TokenManager) {\\n        return TokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    function getRedstoneConfigManager() internal pure returns (RedstoneConfigManager) {\\n        return RedstoneConfigManager(_REDSTONE_CONFIG_MANAGER_ADDRESS);\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0x1701f6b8f6ce36d9a4891643bf20eed681ade725d24c625cab7960320bfad777\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/RSOracleProd3Signers.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\\\";\\n\\ncontract RSOracleProd3Signers is AvalancheDataServiceConsumerBase {\\n    function getUniqueSignersThreshold() public view virtual override returns (uint8) {\\n        return 3;\\n    }\\n}\\n\",\"keccak256\":\"0x0a5cfaf780df53bb048ea384736e6ac12721f8876a9f97ac29e664a5c254f68b\",\"license\":\"BUSL-1.1\"},\"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract PriceAware {\\n  using ECDSA for bytes32;\\n\\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\\n\\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\\n\\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_DATA_TIMESTAMP_DELAY;\\n  }\\n\\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\\n  }\\n\\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\\n\\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\\n    // Getting data timestamp from future seems quite unlikely\\n    // But we've already spent too much time with different cases\\n    // Where block.timestamp was less than dataPackage.timestamp.\\n    // Some blockchains may case this problem as well.\\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\\n    // and allow data \\\"from future\\\" but with a small delay\\n    require(\\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\\n      \\\"Data with future timestamps is not allowed\\\");\\n\\n    return block.timestamp < _receivedTimestamp\\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\\n  }\\n\\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\\n\\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\\n    return getPricesFromMsg(symbols)[0];\\n  }\\n\\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\\n    // The structure of calldata witn n - data items:\\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\\n\\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\\n    uint8 dataSize; //Number of data entries\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature\\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\\n      dataSize := calldataload(sub(calldatasize(), 97))\\n    }\\n\\n    // 2. We calculate the size of signable message expressed in bytes\\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\\n\\n    // 3. We extract the signableMessage\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\\n\\n    bytes memory signableMessage;\\n    assembly {\\n      signableMessage := mload(0x40)\\n      mstore(signableMessage, messageLength)\\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\\n      calldatacopy(\\n        add(signableMessage, 0x20),\\n        sub(calldatasize(), add(messageLength, 66)),\\n        messageLength\\n      )\\n      mstore(0x40, add(signableMessage, 0x20))\\n    }\\n\\n    // 4. We first hash the raw message and then hash it again with the prefix\\n    // Following the https://github.com/ethereum/eips/issues/191 standard\\n    bytes32 hash = keccak256(signableMessage);\\n    bytes32 hashWithPrefix = keccak256(\\n      abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash)\\n    );\\n\\n    // 5. We extract the off-chain signature from calldata\\n\\n    // (That's the high level equivalent 2k gas more expensive)\\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\\n    bytes memory signature;\\n    assembly {\\n      signature := mload(0x40)\\n      mstore(signature, 65)\\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\\n      mstore(0x40, add(signature, 0x20))\\n    }\\n\\n    // 6. We verify the off-chain signature against on-chain hashed data\\n\\n    address signer = hashWithPrefix.recover(signature);\\n    require(isSignerAuthorized(signer), \\\"Signer not authorized\\\");\\n\\n    // 7. We extract timestamp from callData\\n\\n    uint256 dataTimestamp;\\n    assembly {\\n      // Calldataload loads slots of 32 bytes\\n      // The last 65 bytes are for signature + 1 for data size\\n      // We load the previous 32 bytes\\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\\n    }\\n\\n    // 8. We validate timestamp\\n    require(isTimestampValid(dataTimestamp), \\\"Data timestamp is invalid\\\");\\n\\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\\n  }\\n\\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\\n    uint256[] memory values;\\n    uint256 i;\\n    uint256 j;\\n    uint256 readyAssets;\\n    bytes32 currentSymbol;\\n\\n    // We iterate directly through call data to extract the values for symbols\\n    assembly {\\n      let start := sub(calldatasize(), add(messageLength, 66))\\n\\n      values := msize()\\n      mstore(values, mload(symbols))\\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\\n\\n      for { i := 0 } lt(i, mload(symbols)) { i := add(i, 1) } {\\n        currentSymbol := mload(add(add(symbols, 32), mul(i, 32)))\\n        for { j := 0 } lt(j, dataSize) { j := add(j, 1) } {\\n          if eq(calldataload(add(start, mul(j, 64))), currentSymbol) {\\n            mstore(\\n              add(add(values, 32), mul(i, 32)),\\n              calldataload(add(add(start, mul(j, 64)), 32))\\n            )\\n            readyAssets := add(readyAssets, 1)\\n          }\\n\\n          if eq(readyAssets, mload(symbols)) {\\n            i := dataSize\\n          }\\n        }\\n      }\\n\\n    }\\n\\n    return (values);\\n  }\\n}\\n\",\"keccak256\":\"0x34db19c2b3faf46d56e9b34c803657cf3774044b202f61a43456f18181f7e382\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600081905550613c44806100286000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638f7ef1f5116100715780638f7ef1f5146101665780639201de5514610196578063b2d40e73146101c6578063ce79b024146101f6578063cfb5192814610212578063d9c2515f14610242576100a9565b806326ee4836146100ae57806331d98b3f146100de57806339e2719e1461010e5780633be4934e1461012c578063640adf7814610148575b600080fd5b6100c860048036038101906100c39190612316565b610272565b6040516100d59190612427565b60405180910390f35b6100f860048036038101906100f39190612449565b61031c565b6040516101059190612485565b60405180910390f35b6101166103c6565b6040516101239190612485565b60405180910390f35b610146600480360381019061014191906124cc565b610463565b005b610150610481565b60405161015d919061259a565b60405180910390f35b610180600480360381019061017b91906126d2565b61049d565b60405161018d9190612485565b60405180910390f35b6101b060048036038101906101ab9190612449565b61054d565b6040516101bd91906127f8565b60405180910390f35b6101e060048036038101906101db9190612316565b6106e8565b6040516101ed919061297f565b60405180910390f35b610210600480360381019061020b91906129a1565b610798565b005b61022c60048036038101906102279190612ad1565b6107b4565b6040516102399190612b29565b60405180910390f35b61025c60048036038101906102579190612b44565b6107dd565b6040516102699190612427565b60405180910390f35b60606103026102876326ee483660e01b6107fd565b6326ee483660e01b846040516024016102a09190612c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610887565b8060200190518101906103159190612d54565b9050919050565b60006103ac6103316331d98b3f60e01b6107fd565b6331d98b3f60e01b8460405160240161034a9190612b29565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610887565b8060200190518101906103bf9190612d9d565b9050919050565b600061044b6103db637914334f60e01b6107fd565b637914334f60e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610887565b80602001905181019061045e9190612d9d565b905090565b61046b610918565b6104798686868686866109b3565b505050505050565b600073a493b6ff3ea1d0bed5766dd9f52a5828b6dfc643905090565b60006105316104b2630d742f6960e01b6107fd565b630d742f6960e01b8686866040516024016104cf93929190612e39565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610887565b8060200190518101906105449190612d9d565b90509392505050565b606060005b60208160ff161080156105a45750600060f81b838260ff166020811061057b5761057a612e85565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156105bc5780806105b490612ef0565b915050610552565b60008160ff1667ffffffffffffffff8111156105db576105da61219d565b5b6040519080825280601f01601f19166020018201604052801561060d5781602001600182028036833780820191505090505b509050600091505b60208260ff161080156106675750600060f81b848360ff166020811061063e5761063d612e85565b5b1a60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614155b156106de57838260ff166020811061068257610681612e85565b5b1a60f81b818360ff168151811061069c5761069b612e85565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535081806106d690612ef0565b925050610615565b8092505050919050565b6106f061214b565b61077e61070363a3aa8d1e60e01b6107fd565b63a3aa8d1e60e01b8460405160240161071c9190612c5a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610887565b80602001905181019061079191906130fd565b9050919050565b6107a0610918565b6107ad8585858585610f22565b5050505050565b60008082905060008151036107cf576000801b9150506107d8565b60208301519150505b919050565b60606107e7610918565b6107f385858585611242565b9050949350505050565b600061080761167a565b73ffffffffffffffffffffffffffffffffffffffff16630d741577836040518263ffffffff1660e01b815260040161083f9190613181565b602060405180830381865afa15801561085c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088091906131c8565b9050919050565b6060600061089483611696565b90506000808573ffffffffffffffffffffffffffffffffffffffff16836040516108be919061323c565b600060405180830381855af49150503d80600081146108f9576040519150601f19603f3d011682016040523d82523d6000602084013e6108fe565b606091505b509150915061090d8282611750565b935050505092915050565b610920611850565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906132c5565b60405180910390fd5b565b60006109c087600161187d565b905060006109cf87600061187d565b9050858273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a0b919061259a565b602060405180830381865afa158015610a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4c9190612d9d565b1015610a8d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8490613331565b60405180910390fd5b848173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ac7919061259a565b602060405180830381865afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b089190612d9d565b1015610b49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b409061339d565b60405180910390fd5b610b7b610b54610481565b878473ffffffffffffffffffffffffffffffffffffffff1661190a9092919063ffffffff16565b610bad610b86610481565b868373ffffffffffffffffffffffffffffffffffffffff1661190a9092919063ffffffff16565b6000610bb7610481565b90506000808273ffffffffffffffffffffffffffffffffffffffff16633351733f86868c8c8c8c6040518763ffffffff1660e01b8152600401610bff969594939291906133bd565b6080604051808303816000875af1158015610c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c42919061341e565b809450819b50829c508395505050505060008273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610c8d919061259a565b602060405180830381865afa158015610caa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cce9190612d9d565b1115610d49576000808b8d10610ce5578b8d610ce8565b8c8c5b915091506000610d39610d01610cfc611a40565b61054d565b610d0a8561054d565b610d138561054d565b604051602001610d259392919061350d565b6040516020818303038152906040526107b4565b9050610d458186611a68565b5050505b60008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d84919061259a565b602060405180830381865afa158015610da1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dc59190612d9d565b03610dd457610dd38b611b3a565b5b60008473ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610e0f919061259a565b602060405180830381865afa158015610e2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e509190612d9d565b03610e5f57610e5e8a611b3a565b5b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fee6437c12e66102495172228742a18765355debe1f046d82bcd14f8dc66f11678d8d858e8e42604051610ec69695949392919061356b565b60405180910390a35050505050610edb611b58565b610f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f119061363e565b60405180910390fd5b505050505050565b6000610f2f86600161187d565b90506000610f3e86600061187d565b90506000610f4a610481565b905060008173ffffffffffffffffffffffffffffffffffffffff1663e6a4390585856040518363ffffffff1660e01b8152600401610f8992919061365e565b6020604051808303816000875af1158015610fa8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fcc91906131c8565b9050611000610fd9610481565b888373ffffffffffffffffffffffffffffffffffffffff1661190a9092919063ffffffff16565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e2dc85dc87878c8c8c6040518663ffffffff1660e01b8152600401611044959493929190613687565b60408051808303816000875af1158015611062573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108691906136da565b9150915060008373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016110c5919061259a565b602060405180830381865afa1580156110e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111069190612d9d565b0361117f576000808b8d1061111c578b8d61111f565b8c8c5b915091506000611170611138611133611a40565b61054d565b6111418561054d565b61114a8561054d565b60405160200161115c9392919061371a565b6040516020818303038152906040526107b4565b905061117b81611b3a565b5050505b8273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f60d6d04a69b63b07bc4612079adf2399fcc2b9da68fe609fe66ffbe16fca76f48d8d8d8787426040516111e69695949392919061356b565b60405180910390a35050505050506111fc611b58565b61123b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112329061363e565b60405180910390fd5b5050505050565b6060600061125186600161187d565b9050600061126086600061187d565b9050848273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161129c919061259a565b602060405180830381865afa1580156112b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112dd9190612d9d565b101561131e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611315906137b5565b60405180910390fd5b611350611329610481565b868473ffffffffffffffffffffffffffffffffffffffff1661190a9092919063ffffffff16565b600061135a610481565b905060008173ffffffffffffffffffffffffffffffffffffffff1663fe02915685858a8a6040518563ffffffff1660e01b815260040161139d94939291906137d5565b6000604051808303816000875af11580156113bc573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906113e59190612d54565b905060006113f1611bf5565b905060008173ffffffffffffffffffffffffffffffffffffffff166325eb876f8b60006040518363ffffffff1660e01b8152600401611431929190613835565b602060405180830381865afa15801561144e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147291906131c8565b905060008573ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016114af919061259a565b602060405180830381865afa1580156114cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f09190612d9d565b1115611501576115008a82611a68565b5b60008673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161153c919061259a565b602060405180830381865afa158015611559573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157d9190612d9d565b0361158c5761158b8b611b3a565b5b898b3373ffffffffffffffffffffffffffffffffffffffff167f4cb7ea834525f7e7be14143ffc68be9c6735559e936d23502fff335d39a2e8e2866000815181106115da576115d9612e85565b5b602002602001015187600189516115f1919061385e565b8151811061160257611601612e85565b5b60200260200101514260405161161a93929190613892565b60405180910390a4829650505050505050611633611b58565b611672576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116699061363e565b60405180910390fd5b949350505050565b6000737dbcb7b5019cfd15225e5adc454b864ca1b7f2d1905090565b606060008251905060006116a8611c11565b9050600081836116b891906138c9565b905060003690508211156116f8576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6060604051905081815285602001848101826020015b8183101561172b578251815260208301925060208101905061170e565b5050508283360385602001830137602084840182010160405280945050505050919050565b606082611847576000825103611792576040517f567fe27a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060208301517f08c379a0000000000000000000000000000000000000000000000000000000008114915050801561180a576060604484019050806040517f0f7e827800000000000000000000000000000000000000000000000000000000815260040161180191906127f8565b60405180910390fd5b826040517ffd36fde300000000000000000000000000000000000000000000000000000000815260040161183e9190613947565b60405180910390fd5b81905092915050565b6000807f8d5bb42e0ac1496a2c326edc9c00758985246e6c2bb146d6c2f4a0d509e0960a90508091505090565b6000611887611bf5565b73ffffffffffffffffffffffffffffffffffffffff166325eb876f84846040518363ffffffff1660e01b81526004016118c1929190613835565b602060405180830381865afa1580156118de573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190291906131c8565b905092915050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161193c929190613969565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161198a919061323c565b6000604051808303816000865af19150503d80600081146119c7576040519150601f19603f3d011682016040523d82523d6000602084013e6119cc565b606091505b50915091508180156119fa57506000815114806119f95750808060200190518101906119f891906139be565b5b5b611a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3090613a5d565b60405180910390fd5b5050505050565b60007f544a000000000000000000000000000000000000000000000000000000000000905090565b60008203611aab576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa290613ac9565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b1190613b35565b60405180910390fd5b6000611b24611850565b9050611b34816002018484611c81565b50505050565b6000611b44611850565b9050611b538160020183611cb3565b505050565b6000611bdd611b6d635ce2395060e01b6107fd565b635ce2395060e01b604051602401604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610887565b806020019051810190611bf091906139be565b905090565b6000739cd7ecff2f5a95c1d6ee2ceb3e53909ebe9d57bb905090565b600080611c1c611cca565b90506000611c2982611ddb565b61ffff169050600282611c3c91906138c9565b915060005b81811015611c78576000611c5484611e37565b90508084611c6291906138c9565b9350508080611c7090613b55565b915050611c41565b50819250505090565b6000611caa84600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611e76565b90509392505050565b6000611cc28360000183611eb1565b905092915050565b60008060203603356602ed57011e000081166602ed57011e00001491505080611d1f576040517fe7764c9e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008036905060291115611d5f576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b602936033590506000600960038362ffffff16611d7c91906138c9565b611d8691906138c9565b90506000369050600282611d9a91906138c9565b1115611dd2576040517fc30a7bd700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80935050505090565b600080602083611deb91906138c9565b90506000369050811115611e2b576040517f5796f78a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80360335915050919050565b6000806000611e4584611eea565b91509150604e816020611e5891906138c9565b83611e639190613b9d565b611e6d91906138c9565b92505050919050565b60008184600201600085815260200190815260200160002081905550611ea88385600001611f6090919063ffffffff16565b90509392505050565b600082600201600083815260200190815260200160002060009055611ee28284600001611f7790919063ffffffff16565b905092915050565b6000806000806000604186611eff91906138c9565b90506000611f26602083611f1391906138c9565b6000369050611f8e90919063ffffffff16565b905080359350611f40600382611f8e90919063ffffffff16565b9050803592508362ffffff1695508263ffffffff16945050505050915091565b6000611f6f8360000183611fa4565b905092915050565b6000611f868360000183612014565b905092915050565b60008183611f9c919061385e565b905092915050565b6000611fb08383612128565b61200957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061200e565b600090505b92915050565b6000808360010160008481526020019081526020016000205490506000811461211c576000600182612046919061385e565b905060006001866000018054905061205e919061385e565b90508181146120cd57600086600001828154811061207f5761207e612e85565b5b90600052602060002001549050808760000184815481106120a3576120a2612e85565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806120e1576120e0613bdf565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612122565b60009150505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280606081526020016060815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6121d58261218c565b810181811067ffffffffffffffff821117156121f4576121f361219d565b5b80604052505050565b6000612207612173565b905061221382826121cc565b919050565b600067ffffffffffffffff8211156122335761223261219d565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b61225c81612249565b811461226757600080fd5b50565b60008135905061227981612253565b92915050565b600061229261228d84612218565b6121fd565b905080838252602082019050602084028301858111156122b5576122b4612244565b5b835b818110156122de57806122ca888261226a565b8452602084019350506020810190506122b7565b5050509392505050565b600082601f8301126122fd576122fc612187565b5b813561230d84826020860161227f565b91505092915050565b60006020828403121561232c5761232b61217d565b5b600082013567ffffffffffffffff81111561234a57612349612182565b5b612356848285016122e8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000819050919050565b61239e8161238b565b82525050565b60006123b08383612395565b60208301905092915050565b6000602082019050919050565b60006123d48261235f565b6123de818561236a565b93506123e98361237b565b8060005b8381101561241a57815161240188826123a4565b975061240c836123bc565b9250506001810190506123ed565b5085935050505092915050565b6000602082019050818103600083015261244181846123c9565b905092915050565b60006020828403121561245f5761245e61217d565b5b600061246d8482850161226a565b91505092915050565b61247f8161238b565b82525050565b600060208201905061249a6000830184612476565b92915050565b6124a98161238b565b81146124b457600080fd5b50565b6000813590506124c6816124a0565b92915050565b60008060008060008060c087890312156124e9576124e861217d565b5b60006124f789828a0161226a565b965050602061250889828a0161226a565b955050604061251989828a016124b7565b945050606061252a89828a016124b7565b935050608061253b89828a016124b7565b92505060a061254c89828a016124b7565b9150509295509295509295565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061258482612559565b9050919050565b61259481612579565b82525050565b60006020820190506125af600083018461258b565b92915050565b600067ffffffffffffffff8211156125d0576125cf61219d565b5b602082029050602081019050919050565b600080fd5b600080fd5b600060408284031215612601576126006125e1565b5b61260b60406121fd565b9050600061261b8482850161226a565b600083015250602061262f848285016124b7565b60208301525092915050565b600061264e612649846125b5565b6121fd565b9050808382526020820190506040840283018581111561267157612670612244565b5b835b8181101561269a578061268688826125eb565b845260208401935050604081019050612673565b5050509392505050565b600082601f8301126126b9576126b8612187565b5b81356126c984826020860161263b565b91505092915050565b6000806000606084860312156126eb576126ea61217d565b5b600084013567ffffffffffffffff81111561270957612708612182565b5b612715868287016126a4565b935050602084013567ffffffffffffffff81111561273657612735612182565b5b612742868287016126a4565b925050604084013567ffffffffffffffff81111561276357612762612182565b5b61276f868287016126a4565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b838110156127b3578082015181840152602081019050612798565b60008484015250505050565b60006127ca82612779565b6127d48185612784565b93506127e4818560208601612795565b6127ed8161218c565b840191505092915050565b6000602082019050818103600083015261281281846127bf565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61284f81612249565b82525050565b60408201600082015161286b6000850182612846565b50602082015161287e6020850182612395565b50505050565b60006128908383612855565b60408301905092915050565b6000602082019050919050565b60006128b48261281a565b6128be8185612825565b93506128c983612836565b8060005b838110156128fa5781516128e18882612884565b97506128ec8361289c565b9250506001810190506128cd565b5085935050505092915050565b6000608083016000830151848203600086015261292482826128a9565b9150506020830151848203602086015261293e82826128a9565b9150506040830151848203604086015261295882826128a9565b9150506060830151848203606086015261297282826128a9565b9150508091505092915050565b600060208201905081810360008301526129998184612907565b905092915050565b600080600080600060a086880312156129bd576129bc61217d565b5b60006129cb8882890161226a565b95505060206129dc8882890161226a565b94505060406129ed888289016124b7565b93505060606129fe888289016124b7565b9250506080612a0f888289016124b7565b9150509295509295909350565b600080fd5b600067ffffffffffffffff821115612a3c57612a3b61219d565b5b612a458261218c565b9050602081019050919050565b82818337600083830152505050565b6000612a74612a6f84612a21565b6121fd565b905082815260208101848484011115612a9057612a8f612a1c565b5b612a9b848285612a52565b509392505050565b600082601f830112612ab857612ab7612187565b5b8135612ac8848260208601612a61565b91505092915050565b600060208284031215612ae757612ae661217d565b5b600082013567ffffffffffffffff811115612b0557612b04612182565b5b612b1184828501612aa3565b91505092915050565b612b2381612249565b82525050565b6000602082019050612b3e6000830184612b1a565b92915050565b60008060008060808587031215612b5e57612b5d61217d565b5b6000612b6c8782880161226a565b9450506020612b7d8782880161226a565b9350506040612b8e878288016124b7565b9250506060612b9f878288016124b7565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000612be38383612846565b60208301905092915050565b6000602082019050919050565b6000612c0782612bab565b612c118185612bb6565b9350612c1c83612bc7565b8060005b83811015612c4d578151612c348882612bd7565b9750612c3f83612bef565b925050600181019050612c20565b5085935050505092915050565b60006020820190508181036000830152612c748184612bfc565b905092915050565b600067ffffffffffffffff821115612c9757612c9661219d565b5b602082029050602081019050919050565b600081519050612cb7816124a0565b92915050565b6000612cd0612ccb84612c7c565b6121fd565b90508083825260208201905060208402830185811115612cf357612cf2612244565b5b835b81811015612d1c5780612d088882612ca8565b845260208401935050602081019050612cf5565b5050509392505050565b600082601f830112612d3b57612d3a612187565b5b8151612d4b848260208601612cbd565b91505092915050565b600060208284031215612d6a57612d6961217d565b5b600082015167ffffffffffffffff811115612d8857612d87612182565b5b612d9484828501612d26565b91505092915050565b600060208284031215612db357612db261217d565b5b6000612dc184828501612ca8565b91505092915050565b600082825260208201905092915050565b6000612de68261281a565b612df08185612dca565b9350612dfb83612836565b8060005b83811015612e2c578151612e138882612884565b9750612e1e8361289c565b925050600181019050612dff565b5085935050505092915050565b60006060820190508181036000830152612e538186612ddb565b90508181036020830152612e678185612ddb565b90508181036040830152612e7b8184612ddb565b9050949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600060ff82169050919050565b6000612efb82612ee3565b915060ff8203612f0e57612f0d612eb4565b5b600182019050919050565b600081519050612f2881612253565b92915050565b600060408284031215612f4457612f436125e1565b5b612f4e60406121fd565b90506000612f5e84828501612f19565b6000830152506020612f7284828501612ca8565b60208301525092915050565b6000612f91612f8c846125b5565b6121fd565b90508083825260208201905060408402830185811115612fb457612fb3612244565b5b835b81811015612fdd5780612fc98882612f2e565b845260208401935050604081019050612fb6565b5050509392505050565b600082601f830112612ffc57612ffb612187565b5b815161300c848260208601612f7e565b91505092915050565b60006080828403121561302b5761302a6125e1565b5b61303560806121fd565b9050600082015167ffffffffffffffff811115613055576130546125e6565b5b61306184828501612fe7565b600083015250602082015167ffffffffffffffff811115613085576130846125e6565b5b61309184828501612fe7565b602083015250604082015167ffffffffffffffff8111156130b5576130b46125e6565b5b6130c184828501612fe7565b604083015250606082015167ffffffffffffffff8111156130e5576130e46125e6565b5b6130f184828501612fe7565b60608301525092915050565b6000602082840312156131135761311261217d565b5b600082015167ffffffffffffffff81111561313157613130612182565b5b61313d84828501613015565b91505092915050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61317b81613146565b82525050565b60006020820190506131966000830184613172565b92915050565b6131a581612579565b81146131b057600080fd5b50565b6000815190506131c28161319c565b92915050565b6000602082840312156131de576131dd61217d565b5b60006131ec848285016131b3565b91505092915050565b600081519050919050565b600081905092915050565b6000613216826131f5565b6132208185613200565b9350613230818560208601612795565b80840191505092915050565b6000613248828461320b565b915081905092915050565b7f4469616d6f6e6453746f726167654c69623a204d75737420626520636f6e747260008201527f616374206f776e65720000000000000000000000000000000000000000000000602082015250565b60006132af602983612784565b91506132ba82613253565b604082019050919050565b600060208201905081810360008301526132de816132a2565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4120746f2070726f7669646500000000600082015250565b600061331b601c83612784565b9150613326826132e5565b602082019050919050565b6000602082019050818103600083015261334a8161330e565b9050919050565b7f4e6f7420656e6f75676820746f6b656e4220746f2070726f7669646500000000600082015250565b6000613387601c83612784565b915061339282613351565b602082019050919050565b600060208201905081810360008301526133b68161337a565b9050919050565b600060c0820190506133d2600083018961258b565b6133df602083018861258b565b6133ec6040830187612476565b6133f96060830186612476565b6134066080830185612476565b61341360a0830184612476565b979650505050505050565b600080600080608085870312156134385761343761217d565b5b6000613446878288016131b3565b945050602061345787828801612ca8565b935050604061346887828801612ca8565b925050606061347987828801612ca8565b91505092959194509250565b600081905092915050565b600061349b82612779565b6134a58185613485565b93506134b5818560208601612795565b80840191505092915050565b7f5f00000000000000000000000000000000000000000000000000000000000000815250565b7f5f4c500000000000000000000000000000000000000000000000000000000000815250565b60006135198286613490565b9150613524826134c1565b6001820191506135348285613490565b915061353f826134c1565b60018201915061354f8284613490565b915061355a826134e7565b600382019150819050949350505050565b600060c0820190506135806000830189612b1a565b61358d6020830188612b1a565b61359a6040830187612476565b6135a76060830186612476565b6135b46080830185612476565b6135c160a0830184612476565b979650505050505050565b7f54686520616374696f6e206d617920636175736520616e206163636f756e742060008201527f746f206265636f6d6520696e736f6c76656e7400000000000000000000000000602082015250565b6000613628603383612784565b9150613633826135cc565b604082019050919050565b600060208201905081810360008301526136578161361b565b9050919050565b6000604082019050613673600083018561258b565b613680602083018461258b565b9392505050565b600060a08201905061369c600083018861258b565b6136a9602083018761258b565b6136b66040830186612476565b6136c36060830185612476565b6136d06080830184612476565b9695505050505050565b600080604083850312156136f1576136f061217d565b5b60006136ff85828601612ca8565b925050602061371085828601612ca8565b9150509250929050565b60006137268286613490565b9150613731826134c1565b6001820191506137418285613490565b915061374c826134c1565b60018201915061375c8284613490565b9150819050949350505050565b7f4e6f7420656e6f75676820746f6b656e20746f2073656c6c0000000000000000600082015250565b600061379f601883612784565b91506137aa82613769565b602082019050919050565b600060208201905081810360008301526137ce81613792565b9050919050565b60006080820190506137ea600083018761258b565b6137f7602083018661258b565b6138046040830185612476565b6138116060830184612476565b95945050505050565b60008115159050919050565b61382f8161381a565b82525050565b600060408201905061384a6000830185612b1a565b6138576020830184613826565b9392505050565b60006138698261238b565b91506138748361238b565b925082820390508181111561388c5761388b612eb4565b5b92915050565b60006060820190506138a76000830186612476565b6138b46020830185612476565b6138c16040830184612476565b949350505050565b60006138d48261238b565b91506138df8361238b565b92508282019050808211156138f7576138f6612eb4565b5b92915050565b600082825260208201905092915050565b6000613919826131f5565b61392381856138fd565b9350613933818560208601612795565b61393c8161218c565b840191505092915050565b60006020820190508181036000830152613961818461390e565b905092915050565b600060408201905061397e600083018561258b565b61398b6020830184612476565b9392505050565b61399b8161381a565b81146139a657600080fd5b50565b6000815190506139b881613992565b92915050565b6000602082840312156139d4576139d361217d565b5b60006139e2848285016139a9565b91505092915050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000613a47602d83612784565b9150613a52826139eb565b604082019050919050565b60006020820190508181036000830152613a7681613a3a565b9050919050565b7f53796d626f6c2063616e6e6f7420626520656d70747900000000000000000000600082015250565b6000613ab3601683612784565b9150613abe82613a7d565b602082019050919050565b60006020820190508181036000830152613ae281613aa6565b9050919050565b7f496e76616c696420416464726573735a65726f00000000000000000000000000600082015250565b6000613b1f601383612784565b9150613b2a82613ae9565b602082019050919050565b60006020820190508181036000830152613b4e81613b12565b9050919050565b6000613b608261238b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613b9257613b91612eb4565b5b600182019050919050565b6000613ba88261238b565b9150613bb38361238b565b9250828202613bc18161238b565b91508282048414831517613bd857613bd7612eb4565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d783311e1aeac51eab692578ab91a8e0eb96f371c5e06eb9314cb41e27e1f58764736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "swapTraderJoe(bytes32,bytes32,uint256,uint256)": {
        "details": "This function uses the redstone-evm-connector",
        "params": {
          "_boughtAsset": "asset to be bought",
          "_exactSold": "exact amount of asset to be sold",
          "_minimumBought": "minimum amount of asset to be bought*",
          "_soldAsset": "asset to be sold"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExchangeIntermediaryContract()": {
        "notice": "Returns address of UniswapV2-like exchange*"
      },
      "swapTraderJoe(bytes32,bytes32,uint256,uint256)": {
        "notice": "Swaps one asset to another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9549,
        "contract": "contracts/facets/avalanche/TraderJoeDEXFacet.sol:TraderJoeDEXFacet",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}