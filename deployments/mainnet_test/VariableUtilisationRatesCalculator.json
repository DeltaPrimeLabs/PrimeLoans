{
  "address": "0x4614Fac912C3eeDEEF63135fd293364FDD39cFBd",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "performer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSpread",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SpreadChanged",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "getPoolUtilisation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_spread",
          "type": "uint256"
        }
      ],
      "name": "setSpread",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "spread",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf6322e42df8bf28a00203fd21bfee8495386145609c89eea45829ffd9ccd48f5",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x4614Fac912C3eeDEEF63135fd293364FDD39cFBd",
    "transactionIndex": 0,
    "gasUsed": "877307",
    "logsBloom": "0x
    "blockHash": "0x79b9e5f6cdfb236a95a36c1b4f2df269cb71456ce9646ddad0dcc4c7996493d1",
    "transactionHash": "0xf6322e42df8bf28a00203fd21bfee8495386145609c89eea45829ffd9ccd48f5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 22331252,
        "transactionHash": "0xf6322e42df8bf28a00203fd21bfee8495386145609c89eea45829ffd9ccd48f5",
        "address": "0x4614Fac912C3eeDEEF63135fd293364FDD39cFBd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x79b9e5f6cdfb236a95a36c1b4f2df269cb71456ce9646ddad0dcc4c7996493d1"
      }
    ],
    "blockNumber": 22331252,
    "cumulativeGasUsed": "877307",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "72350770e29c585e73a3c8ad96024c0f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"performer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSpread\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SpreadChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BREAKPOINT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BREAKPOINT_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"getPoolUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_spread\",\"type\":\"uint256\"}],\"name\":\"setSpread\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spread\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*\",\"events\":{\"SpreadChanged(address,uint256,uint256)\":{\"details\":\"emitted after changing the spread\",\"params\":{\"newSpread\":\"new spread\",\"performer\":\"an address of wallet setting a new spread\",\"timestamp\":\"time of a spread change*\"}}},\"kind\":\"dev\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"calculateDepositRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"getPoolUtilisation(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setSpread(uint256)\":{\"params\":{\"_spread\":\"spread defined by user*\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VariableUtilisationRatesCalculator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"notice\":\"Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\"},\"calculateDepositRate(uint256,uint256)\":{\"notice\":\"Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\"},\"getPoolUtilisation(uint256,uint256)\":{\"notice\":\"Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits\"},\"setSpread(uint256)\":{\"notice\":\"Sets the spread between deposit and borrow rate, number between 0 and 1e18\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VariableUtilisationRatesCalculator.sol\":\"VariableUtilisationRatesCalculator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VariableUtilisationRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 2e9f2aba0ab8e419a7d1bf6e83f967ae0bc9c538;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\n\\n/**\\n * @title VariableUtilisationRatesCalculator\\n * @dev Contract which calculates the interest rates based on pool utilisation.\\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\\n **/\\ncontract VariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\\n    uint256 public constant SLOPE_1 = 0;\\n    uint256 public constant OFFSET_1 = 0.03e18;\\n\\n    uint256 public constant BREAKPOINT_1 = 0.6e18;\\n\\n    uint256 public constant SLOPE_2 = 0.45e18;\\n    //negative, hence minus in calculations\\n    uint256 public constant OFFSET_2 = 0.24e18;\\n\\n    uint256 public constant BREAKPOINT_2 = 0.8e18;\\n\\n    uint256 public constant SLOPE_3 = 3.15e18;\\n    //negative, hence minus in calculations\\n    uint256 public constant OFFSET_3 = 2.4e18;\\n\\n    // BREAKPOINT must be lower than 1e18\\n    uint256 public constant MAX_RATE = 0.75e18;\\n\\n    //residual spread to account for arithmetic inaccuracies in calculation of deposit rate. Does not result in any meaningful\\n    //profit generation\\n    uint256 public spread = 1e12;\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * Returns the pool utilisation, which is a ratio between loans and deposits\\n     * utilisation = value_of_loans / value_of_deposits\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\\n        if (_totalDeposits == 0) return 0;\\n\\n        return (_totalLoans * 1e18) / _totalDeposits;\\n    }\\n\\n    /**\\n     * Returns the current deposit rate\\n     * The value is based on the current borrowing rate and satisfies the invariant:\\n     * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\\n        if (_totalDeposits == 0) return 0;\\n\\n        if (_totalLoans >= _totalDeposits) {\\n            return MAX_RATE * (1e18 - spread) / 1e18;\\n        } else {\\n            uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * (1e18 - spread) * _totalLoans / (_totalDeposits * 1e18);\\n            return rate;\\n        }\\n    }\\n\\n    /**\\n     * Returns the current borrowing rate\\n     * The value is based on the pool utilisation according to the piecewise linear formula:\\n     * 1) for pool utilisation lower than or equal to breakpoint:\\n     * borrowing_rate = SLOPE_1 * utilisation + OFFSET\\n     * 2) for pool utilisation greater than breakpoint:\\n     * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\\n     * @dev _totalLoans total value of loans\\n     * @dev _totalDeposits total value of deposits\\n     **/\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\\n        if (totalDeposits == 0) return OFFSET_1;\\n\\n        uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\\n\\n        if (poolUtilisation >= 1e18) {\\n            return MAX_RATE;\\n        } else if (poolUtilisation <= BREAKPOINT_1) {\\n            return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\\n        } else if (poolUtilisation <= BREAKPOINT_2) {\\n            return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\\n        } else {\\n            // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\\n            // unsigned integer safety check)\\n            return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\\n        }\\n    }\\n\\n    /* ========== SETTERS ========== */\\n    /**\\n     * Sets the spread between deposit and borrow rate, number between 0 and 1e18\\n     * @param _spread spread defined by user\\n     **/\\n    function setSpread(uint256 _spread) external onlyOwner {\\n        require(_spread < 1e18, \\\"Spread must be smaller than 1e18\\\");\\n        spread = _spread;\\n        emit SpreadChanged(msg.sender, _spread, block.timestamp);\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev emitted after changing the spread\\n     * @param performer an address of wallet setting a new spread\\n     * @param newSpread new spread\\n     * @param timestamp time of a spread change\\n     **/\\n    event SpreadChanged(address indexed performer, uint256 newSpread, uint256 timestamp);\\n}\",\"keccak256\":\"0x860e218491e203497fd5a167569ae2fc6ac1bd7aa6107357fc4a9e08f8d2f9c7\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x5b134bca4918b4e379fcb312eada2385e815cd13ef1fbee2fcdc7028cc45d754\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405264e8d4a5100060015534801561001957600080fd5b5061003661002b61003b60201b60201c565b61004360201b60201c565b610107565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610e0e806101166000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063b66a261c11610071578063b66a261c14610288578063bfe7cfd2146102a4578063c24dbebd146102c2578063df841eec146102e0578063f2fde38b146103105761010b565b8063715018a6146102005780637cd083311461020a5780638da5cb5b1461023a5780639ceca965146102585761010b565b806356f21639116100de57806356f21639146101885780635c25c76c146101a65780636e28a05d146101c457806370935a50146101e25761010b565b806301a5e5a01461011057806318c544b11461012e578063321105fb1461014c5780633bf42d4b1461016a575b600080fd5b61011861032c565b604051610125919061094b565b60405180910390f35b610136610338565b604051610143919061094b565b60405180910390f35b610154610343565b604051610161919061094b565b60405180910390f35b610172610348565b60405161017f919061094b565b60405180910390f35b610190610354565b60405161019d919061094b565b60405180910390f35b6101ae610360565b6040516101bb919061094b565b60405180910390f35b6101cc610366565b6040516101d9919061094b565b60405180910390f35b6101ea610372565b6040516101f7919061094b565b60405180910390f35b61020861037e565b005b610224600480360381019061021f9190610997565b610380565b604051610231919061094b565b60405180910390f35b6102426104b0565b60405161024f9190610a18565b60405180910390f35b610272600480360381019061026d9190610997565b6104d9565b60405161027f919061094b565b60405180910390f35b6102a2600480360381019061029d9190610a33565b610513565b005b6102ac610633565b6040516102b9919061094b565b60405180910390f35b6102ca61063f565b6040516102d7919061094b565b60405180910390f35b6102fa60048036038101906102f59190610997565b61064b565b604051610307919061094b565b60405180910390f35b61032a60048036038101906103259190610a8c565b61076f565b005b670853a0d2313c000081565b666a94d74f43000081565b600081565b67063eb89da4ed000081565b67214e8348c4f0000081565b60015481565b670354a6ba7a18000081565b670b1a2bc2ec50000081565b565b600080820361039257600090506104aa565b8183106103dc57670de0b6b3a7640000600154670de0b6b3a76400006103b89190610ae8565b670a688906bd8b00006103cb9190610b1c565b6103d59190610b8d565b90506104aa565b6000670de0b6b3a7640000836103f29190610b1c565b84600154670de0b6b3a76400006104099190610ae8565b3073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b8152600401610444929190610bbe565b602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190610bfc565b61048f9190610b1c565b6104999190610b1c565b6104a39190610b8d565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082036104eb576000905061050d565b81670de0b6b3a7640000846105009190610b1c565b61050a9190610b8d565b90505b92915050565b61051b610866565b73ffffffffffffffffffffffffffffffffffffffff166105396104b0565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058690610c86565b60405180910390fd5b670de0b6b3a764000081106105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610cf2565b60405180910390fd5b806001819055503373ffffffffffffffffffffffffffffffffffffffff167f9e606dc778840dd5372c982cb6a54acae1e2f85905de7f64d37c63a0c5830e228242604051610628929190610bbe565b60405180910390a250565b672bb70c4f827b000081565b670a688906bd8b000081565b600080820361066357666a94d74f4300009050610769565b600061066f84846104d9565b9050670de0b6b3a7640000811061069157670a688906bd8b0000915050610769565b670853a0d2313c000081116106da57666a94d74f430000670de0b6b3a76400006000836106be9190610b1c565b6106c89190610b8d565b6106d29190610d12565b915050610769565b670b1a2bc2ec500000811161072b57670354a6ba7a180000670de0b6b3a764000067063eb89da4ed00008361070f9190610b1c565b6107199190610b8d565b6107239190610ae8565b915050610769565b67214e8348c4f00000670de0b6b3a7640000672bb70c4f827b0000836107519190610b1c565b61075b9190610b8d565b6107659190610ae8565b9150505b92915050565b610777610866565b73ffffffffffffffffffffffffffffffffffffffff166107956104b0565b73ffffffffffffffffffffffffffffffffffffffff16146107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290610c86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361085a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085190610db8565b60405180910390fd5b6108638161086e565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b61094581610932565b82525050565b6000602082019050610960600083018461093c565b92915050565b600080fd5b61097481610932565b811461097f57600080fd5b50565b6000813590506109918161096b565b92915050565b600080604083850312156109ae576109ad610966565b5b60006109bc85828601610982565b92505060206109cd85828601610982565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a02826109d7565b9050919050565b610a12816109f7565b82525050565b6000602082019050610a2d6000830184610a09565b92915050565b600060208284031215610a4957610a48610966565b5b6000610a5784828501610982565b91505092915050565b610a69816109f7565b8114610a7457600080fd5b50565b600081359050610a8681610a60565b92915050565b600060208284031215610aa257610aa1610966565b5b6000610ab084828501610a77565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610af382610932565b9150610afe83610932565b9250828203905081811115610b1657610b15610ab9565b5b92915050565b6000610b2782610932565b9150610b3283610932565b9250828202610b4081610932565b91508282048414831517610b5757610b56610ab9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9882610932565b9150610ba383610932565b925082610bb357610bb2610b5e565b5b828204905092915050565b6000604082019050610bd3600083018561093c565b610be0602083018461093c565b9392505050565b600081519050610bf68161096b565b92915050565b600060208284031215610c1257610c11610966565b5b6000610c2084828501610be7565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c70602083610c29565b9150610c7b82610c3a565b602082019050919050565b60006020820190508181036000830152610c9f81610c63565b9050919050565b7f537072656164206d75737420626520736d616c6c6572207468616e2031653138600082015250565b6000610cdc602083610c29565b9150610ce782610ca6565b602082019050919050565b60006020820190508181036000830152610d0b81610ccf565b9050919050565b6000610d1d82610932565b9150610d2883610932565b9250828201905080821115610d4057610d3f610ab9565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610da2602683610c29565b9150610dad82610d46565b604082019050919050565b60006020820190508181036000830152610dd181610d95565b905091905056fea26469706673582212208ef735f20e5c177d1f34879be236ad4f82fc2485a309738d6e40956022ffdcf264736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063b66a261c11610071578063b66a261c14610288578063bfe7cfd2146102a4578063c24dbebd146102c2578063df841eec146102e0578063f2fde38b146103105761010b565b8063715018a6146102005780637cd083311461020a5780638da5cb5b1461023a5780639ceca965146102585761010b565b806356f21639116100de57806356f21639146101885780635c25c76c146101a65780636e28a05d146101c457806370935a50146101e25761010b565b806301a5e5a01461011057806318c544b11461012e578063321105fb1461014c5780633bf42d4b1461016a575b600080fd5b61011861032c565b604051610125919061094b565b60405180910390f35b610136610338565b604051610143919061094b565b60405180910390f35b610154610343565b604051610161919061094b565b60405180910390f35b610172610348565b60405161017f919061094b565b60405180910390f35b610190610354565b60405161019d919061094b565b60405180910390f35b6101ae610360565b6040516101bb919061094b565b60405180910390f35b6101cc610366565b6040516101d9919061094b565b60405180910390f35b6101ea610372565b6040516101f7919061094b565b60405180910390f35b61020861037e565b005b610224600480360381019061021f9190610997565b610380565b604051610231919061094b565b60405180910390f35b6102426104b0565b60405161024f9190610a18565b60405180910390f35b610272600480360381019061026d9190610997565b6104d9565b60405161027f919061094b565b60405180910390f35b6102a2600480360381019061029d9190610a33565b610513565b005b6102ac610633565b6040516102b9919061094b565b60405180910390f35b6102ca61063f565b6040516102d7919061094b565b60405180910390f35b6102fa60048036038101906102f59190610997565b61064b565b604051610307919061094b565b60405180910390f35b61032a60048036038101906103259190610a8c565b61076f565b005b670853a0d2313c000081565b666a94d74f43000081565b600081565b67063eb89da4ed000081565b67214e8348c4f0000081565b60015481565b670354a6ba7a18000081565b670b1a2bc2ec50000081565b565b600080820361039257600090506104aa565b8183106103dc57670de0b6b3a7640000600154670de0b6b3a76400006103b89190610ae8565b670a688906bd8b00006103cb9190610b1c565b6103d59190610b8d565b90506104aa565b6000670de0b6b3a7640000836103f29190610b1c565b84600154670de0b6b3a76400006104099190610ae8565b3073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b8152600401610444929190610bbe565b602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104859190610bfc565b61048f9190610b1c565b6104999190610b1c565b6104a39190610b8d565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008082036104eb576000905061050d565b81670de0b6b3a7640000846105009190610b1c565b61050a9190610b8d565b90505b92915050565b61051b610866565b73ffffffffffffffffffffffffffffffffffffffff166105396104b0565b73ffffffffffffffffffffffffffffffffffffffff161461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058690610c86565b60405180910390fd5b670de0b6b3a764000081106105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090610cf2565b60405180910390fd5b806001819055503373ffffffffffffffffffffffffffffffffffffffff167f9e606dc778840dd5372c982cb6a54acae1e2f85905de7f64d37c63a0c5830e228242604051610628929190610bbe565b60405180910390a250565b672bb70c4f827b000081565b670a688906bd8b000081565b600080820361066357666a94d74f4300009050610769565b600061066f84846104d9565b9050670de0b6b3a7640000811061069157670a688906bd8b0000915050610769565b670853a0d2313c000081116106da57666a94d74f430000670de0b6b3a76400006000836106be9190610b1c565b6106c89190610b8d565b6106d29190610d12565b915050610769565b670b1a2bc2ec500000811161072b57670354a6ba7a180000670de0b6b3a764000067063eb89da4ed00008361070f9190610b1c565b6107199190610b8d565b6107239190610ae8565b915050610769565b67214e8348c4f00000670de0b6b3a7640000672bb70c4f827b0000836107519190610b1c565b61075b9190610b8d565b6107659190610ae8565b9150505b92915050565b610777610866565b73ffffffffffffffffffffffffffffffffffffffff166107956104b0565b73ffffffffffffffffffffffffffffffffffffffff16146107eb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107e290610c86565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361085a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085190610db8565b60405180910390fd5b6108638161086e565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000819050919050565b61094581610932565b82525050565b6000602082019050610960600083018461093c565b92915050565b600080fd5b61097481610932565b811461097f57600080fd5b50565b6000813590506109918161096b565b92915050565b600080604083850312156109ae576109ad610966565b5b60006109bc85828601610982565b92505060206109cd85828601610982565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a02826109d7565b9050919050565b610a12816109f7565b82525050565b6000602082019050610a2d6000830184610a09565b92915050565b600060208284031215610a4957610a48610966565b5b6000610a5784828501610982565b91505092915050565b610a69816109f7565b8114610a7457600080fd5b50565b600081359050610a8681610a60565b92915050565b600060208284031215610aa257610aa1610966565b5b6000610ab084828501610a77565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610af382610932565b9150610afe83610932565b9250828203905081811115610b1657610b15610ab9565b5b92915050565b6000610b2782610932565b9150610b3283610932565b9250828202610b4081610932565b91508282048414831517610b5757610b56610ab9565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610b9882610932565b9150610ba383610932565b925082610bb357610bb2610b5e565b5b828204905092915050565b6000604082019050610bd3600083018561093c565b610be0602083018461093c565b9392505050565b600081519050610bf68161096b565b92915050565b600060208284031215610c1257610c11610966565b5b6000610c2084828501610be7565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610c70602083610c29565b9150610c7b82610c3a565b602082019050919050565b60006020820190508181036000830152610c9f81610c63565b9050919050565b7f537072656164206d75737420626520736d616c6c6572207468616e2031653138600082015250565b6000610cdc602083610c29565b9150610ce782610ca6565b602082019050919050565b60006020820190508181036000830152610d0b81610ccf565b9050919050565b6000610d1d82610932565b9150610d2883610932565b9250828201905080821115610d4057610d3f610ab9565b5b92915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610da2602683610c29565b9150610dad82610d46565b604082019050919050565b60006020820190508181036000830152610dd181610d95565b905091905056fea26469706673582212208ef735f20e5c177d1f34879be236ad4f82fc2485a309738d6e40956022ffdcf264736f6c63430008110033",
  "devdoc": {
    "details": "Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*",
    "events": {
      "SpreadChanged(address,uint256,uint256)": {
        "details": "emitted after changing the spread",
        "params": {
          "newSpread": "new spread",
          "performer": "an address of wallet setting a new spread",
          "timestamp": "time of a spread change*"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "calculateDepositRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setSpread(uint256)": {
        "params": {
          "_spread": "spread defined by user*"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VariableUtilisationRatesCalculator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "notice": "Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2"
      },
      "calculateDepositRate(uint256,uint256)": {
        "notice": "Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "notice": "Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits"
      },
      "setSpread(uint256)": {
        "notice": "Sets the spread between deposit and borrow rate, number between 0 and 1e18"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 165,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "spread",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}