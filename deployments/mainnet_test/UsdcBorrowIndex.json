{
  "address": "0xc51122a706d4Dae9AF16CB01Da34b076775bE16c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedRate",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RateUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getIndexedValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "index",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "indexUpdateTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rate",
          "type": "uint256"
        }
      ],
      "name": "setRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "updateUser",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a4c0e06baa8be5ca3c6ee1b0b5cb80267a258000da05ca053b552c48c19fea7",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0xc51122a706d4Dae9AF16CB01Da34b076775bE16c",
    "transactionIndex": 0,
    "gasUsed": "883265",
    "logsBloom": "0x
    "blockHash": "0xd829575b5ba5fa716b6270582a666ea0d8235bf53b8f62ebc4ce527dc7a450e3",
    "transactionHash": "0x0a4c0e06baa8be5ca3c6ee1b0b5cb80267a258000da05ca053b552c48c19fea7",
    "logs": [],
    "blockNumber": 22332763,
    "cumulativeGasUsed": "883265",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "48842d4c2ac251fcf3a30091436fd6da",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RateUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getIndexedValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"index\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"indexUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"updateUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setRate(uint256)\":{\"details\":\"_rate the value of updated rate*\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateUser(address)\":{\"details\":\"user address of the index owner*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getIndex()\":{\"notice\":\"Gets current value of the linear index It recalculates the value on-demand without updating the storage*\"},\"getIndexedValue(uint256,address)\":{\"notice\":\"Gets the user value recalculated to the current index It recalculates the value on-demand without updating the storage Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude of 1 Wei)*\"},\"setRate(uint256)\":{\"notice\":\"Sets the new rate Before the new rate is set, the index is updated accumulating interest\"},\"updateUser(address)\":{\"notice\":\"Updates user index It persists the update time and the update index time->index mapping\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/avalanche/UsdcBorrowIndex.sol\":\"UsdcBorrowIndex\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"contracts/LinearIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./interfaces/IIndex.sol\\\";\\n\\n/**\\n * LinearIndex\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\n * The index is updated on a linear basis to the compounding happens when a user decide to accumulate the interests\\n **/\\ncontract LinearIndex is IIndex, OwnableUpgradeable {\\n\\n    uint256 private constant SECONDS_IN_YEAR = 365 days;\\n    uint256 private constant BASE_RATE = 1e18;\\n\\n    uint256 public index;\\n    uint256 public indexUpdateTime;\\n\\n    mapping(uint256 => uint256) prevIndex;\\n    mapping(address => uint256) userUpdateTime;\\n\\n    uint256 public rate;\\n\\n    function initialize(address owner_) external initializer {\\n        index = BASE_RATE;\\n        indexUpdateTime = block.timestamp;\\n\\n        __Ownable_init();\\n        if (address(owner_) != address(0)) {\\n            transferOwnership(owner_);\\n        }\\n    }\\n\\n    /* ========== SETTERS ========== */\\n\\n    /**\\n     * Sets the new rate\\n     * Before the new rate is set, the index is updated accumulating interest\\n     * @dev _rate the value of updated rate\\n   **/\\n    function setRate(uint256 _rate) public override onlyOwner {\\n        updateIndex();\\n        rate = _rate;\\n        emit RateUpdated(rate, block.timestamp);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    /**\\n     * Updates user index\\n     * It persists the update time and the update index time->index mapping\\n     * @dev user address of the index owner\\n   **/\\n    function updateUser(address user) public override onlyOwner {\\n        userUpdateTime[user] = block.timestamp;\\n        prevIndex[block.timestamp] = getIndex();\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * Gets current value of the linear index\\n     * It recalculates the value on-demand without updating the storage\\n     **/\\n    function getIndex() public view override returns (uint256) {\\n        uint256 period = block.timestamp - indexUpdateTime;\\n        if (period > 0) {\\n            return index * getLinearFactor(period) / 1e27;\\n        } else {\\n            return index;\\n        }\\n    }\\n\\n    /**\\n     * Gets the user value recalculated to the current index\\n     * It recalculates the value on-demand without updating the storage\\n     * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\n     * of 1 Wei)\\n     **/\\n    function getIndexedValue(uint256 value, address user) public view override returns (uint256) {\\n        uint256 userTime = userUpdateTime[user];\\n        uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\n\\n        return value * getIndex() / prevUserIndex;\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function updateIndex() internal {\\n        prevIndex[indexUpdateTime] = index;\\n\\n        index = getIndex();\\n        indexUpdateTime = block.timestamp;\\n    }\\n\\n    /**\\n     * Returns a linear factor in Ray\\n     **/\\n    function getLinearFactor(uint256 period) virtual internal view returns (uint256) {\\n        return rate * period * 1e9 / SECONDS_IN_YEAR + 1e27;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    /**\\n     * @dev Emitted after updating the current rate\\n     * @param updatedRate the value of updated rate\\n     * @param timestamp of the rate update\\n     **/\\n    event RateUpdated(uint256 updatedRate, uint256 timestamp);\\n}\",\"keccak256\":\"0x5193b842dec5ad1f512b766c4eed55555f8aff06e5bdb5e876cb3372139a5a70\",\"license\":\"BUSL-1.1\"},\"contracts/deployment/avalanche/UsdcBorrowIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: 08460e894b7cf6e54fc2c081e4604cbebe32c32d;\\npragma solidity 0.8.17;\\n\\nimport \\\"../../LinearIndex.sol\\\";\\n\\ncontract UsdcBorrowIndex is LinearIndex {}\",\"keccak256\":\"0x9fe0fd387677bf5d5d757cd6511800c6a03cb234754613c0e49d662aa4d03ec6\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IIndex.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\ninterface IIndex {\\n\\n    function setRate(uint256 _rate) external;\\n\\n    function updateUser(address user) external;\\n\\n    function getIndex() external view returns (uint256);\\n\\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\\n\\n}\\n\",\"keccak256\":\"0xece2b3edf8b15e90d99c2aeeb4ac40c60d50b20932f0c983d27cf46a38bc4979\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610f18806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806381045ead1161007157806381045ead1461012e5780638da5cb5b1461014c578063966da8891461016a578063c4d66de81461019a578063ed03b336146101b6578063f2fde38b146101d2576100a9565b80632986c0e5146100ae5780632c4e722e146100cc57806334fcf437146100ea578063715018a614610106578063798d1df714610110575b600080fd5b6100b66101ee565b6040516100c391906109df565b60405180910390f35b6100d46101f4565b6040516100e191906109df565b60405180910390f35b61010460048036038101906100ff9190610a2b565b6101fa565b005b61010e6102c3565b005b61011861034b565b60405161012591906109df565b60405180910390f35b610136610351565b60405161014391906109df565b60405180910390f35b6101546103ac565b6040516101619190610a99565b60405180910390f35b610184600480360381019061017f9190610ae0565b6103d6565b60405161019191906109df565b60405180910390f35b6101b460048036038101906101af9190610b20565b610471565b005b6101d060048036038101906101cb9190610b20565b6105b2565b005b6101ec60048036038101906101e79190610b20565b610694565b005b60655481565b60695481565b61020261078b565b73ffffffffffffffffffffffffffffffffffffffff166102206103ac565b73ffffffffffffffffffffffffffffffffffffffff1614610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d90610baa565b60405180910390fd5b61027e610793565b806069819055507fb38780ddde1f073d91c150de2696f3f7085883648ba21cc5ef01029cb21d1916606954426040516102b8929190610bca565b60405180910390a150565b6102cb61078b565b73ffffffffffffffffffffffffffffffffffffffff166102e96103ac565b73ffffffffffffffffffffffffffffffffffffffff161461033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690610baa565b60405180910390fd5b61034960006107c6565b565b60665481565b600080606654426103629190610c22565b905060008111156103a2576b033b2e3c9fd0803ce80000006103838261088c565b6065546103909190610c56565b61039a9190610cc7565b9150506103a9565b6065549150505b90565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080821461043d576067600083815260200190815260200160002054610447565b670de0b6b3a76400005b905080610452610351565b8661045d9190610c56565b6104679190610cc7565b9250505092915050565b600060019054906101000a900460ff166104995760008054906101000a900460ff16156104a2565b6104a16108d8565b5b6104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d890610d6a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610531576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b670de0b6b3a76400006065819055504260668190555061054f6108e9565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461058d5761058c82610694565b5b80156105ae5760008060016101000a81548160ff0219169083151502179055505b5050565b6105ba61078b565b73ffffffffffffffffffffffffffffffffffffffff166105d86103ac565b73ffffffffffffffffffffffffffffffffffffffff161461062e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062590610baa565b60405180910390fd5b42606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061067a610351565b606760004281526020019081526020016000208190555050565b61069c61078b565b73ffffffffffffffffffffffffffffffffffffffff166106ba6103ac565b73ffffffffffffffffffffffffffffffffffffffff1614610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070790610baa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361077f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077690610dfc565b60405180910390fd5b610788816107c6565b50565b600033905090565b606554606760006066548152602001908152602001600020819055506107b7610351565b60658190555042606681905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006b033b2e3c9fd0803ce80000006301e13380633b9aca00846069546108b39190610c56565b6108bd9190610c56565b6108c79190610cc7565b6108d19190610e1c565b9050919050565b60006108e330610942565b15905090565b600060019054906101000a900460ff16610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90610ec2565b60405180910390fd5b610940610965565b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90610ec2565b60405180910390fd5b6109c46109bf61078b565b6107c6565b565b6000819050919050565b6109d9816109c6565b82525050565b60006020820190506109f460008301846109d0565b92915050565b600080fd5b610a08816109c6565b8114610a1357600080fd5b50565b600081359050610a25816109ff565b92915050565b600060208284031215610a4157610a406109fa565b5b6000610a4f84828501610a16565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8382610a58565b9050919050565b610a9381610a78565b82525050565b6000602082019050610aae6000830184610a8a565b92915050565b610abd81610a78565b8114610ac857600080fd5b50565b600081359050610ada81610ab4565b92915050565b60008060408385031215610af757610af66109fa565b5b6000610b0585828601610a16565b9250506020610b1685828601610acb565b9150509250929050565b600060208284031215610b3657610b356109fa565b5b6000610b4484828501610acb565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b94602083610b4d565b9150610b9f82610b5e565b602082019050919050565b60006020820190508181036000830152610bc381610b87565b9050919050565b6000604082019050610bdf60008301856109d0565b610bec60208301846109d0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2d826109c6565b9150610c38836109c6565b9250828203905081811115610c5057610c4f610bf3565b5b92915050565b6000610c61826109c6565b9150610c6c836109c6565b9250828202610c7a816109c6565b91508282048414831517610c9157610c90610bf3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cd2826109c6565b9150610cdd836109c6565b925082610ced57610cec610c98565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610d54602e83610b4d565b9150610d5f82610cf8565b604082019050919050565b60006020820190508181036000830152610d8381610d47565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610de6602683610b4d565b9150610df182610d8a565b604082019050919050565b60006020820190508181036000830152610e1581610dd9565b9050919050565b6000610e27826109c6565b9150610e32836109c6565b9250828201905080821115610e4a57610e49610bf3565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610eac602b83610b4d565b9150610eb782610e50565b604082019050919050565b60006020820190508181036000830152610edb81610e9f565b905091905056fea26469706673582212206747fc07ddc9efce60cc3efbf59b4c7ce989ccbea30b755efbcc6153877d528464736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c806381045ead1161007157806381045ead1461012e5780638da5cb5b1461014c578063966da8891461016a578063c4d66de81461019a578063ed03b336146101b6578063f2fde38b146101d2576100a9565b80632986c0e5146100ae5780632c4e722e146100cc57806334fcf437146100ea578063715018a614610106578063798d1df714610110575b600080fd5b6100b66101ee565b6040516100c391906109df565b60405180910390f35b6100d46101f4565b6040516100e191906109df565b60405180910390f35b61010460048036038101906100ff9190610a2b565b6101fa565b005b61010e6102c3565b005b61011861034b565b60405161012591906109df565b60405180910390f35b610136610351565b60405161014391906109df565b60405180910390f35b6101546103ac565b6040516101619190610a99565b60405180910390f35b610184600480360381019061017f9190610ae0565b6103d6565b60405161019191906109df565b60405180910390f35b6101b460048036038101906101af9190610b20565b610471565b005b6101d060048036038101906101cb9190610b20565b6105b2565b005b6101ec60048036038101906101e79190610b20565b610694565b005b60655481565b60695481565b61020261078b565b73ffffffffffffffffffffffffffffffffffffffff166102206103ac565b73ffffffffffffffffffffffffffffffffffffffff1614610276576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026d90610baa565b60405180910390fd5b61027e610793565b806069819055507fb38780ddde1f073d91c150de2696f3f7085883648ba21cc5ef01029cb21d1916606954426040516102b8929190610bca565b60405180910390a150565b6102cb61078b565b73ffffffffffffffffffffffffffffffffffffffff166102e96103ac565b73ffffffffffffffffffffffffffffffffffffffff161461033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033690610baa565b60405180910390fd5b61034960006107c6565b565b60665481565b600080606654426103629190610c22565b905060008111156103a2576b033b2e3c9fd0803ce80000006103838261088c565b6065546103909190610c56565b61039a9190610cc7565b9150506103a9565b6065549150505b90565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080606860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600080821461043d576067600083815260200190815260200160002054610447565b670de0b6b3a76400005b905080610452610351565b8661045d9190610c56565b6104679190610cc7565b9250505092915050565b600060019054906101000a900460ff166104995760008054906101000a900460ff16156104a2565b6104a16108d8565b5b6104e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d890610d6a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610531576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b670de0b6b3a76400006065819055504260668190555061054f6108e9565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161461058d5761058c82610694565b5b80156105ae5760008060016101000a81548160ff0219169083151502179055505b5050565b6105ba61078b565b73ffffffffffffffffffffffffffffffffffffffff166105d86103ac565b73ffffffffffffffffffffffffffffffffffffffff161461062e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062590610baa565b60405180910390fd5b42606860008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061067a610351565b606760004281526020019081526020016000208190555050565b61069c61078b565b73ffffffffffffffffffffffffffffffffffffffff166106ba6103ac565b73ffffffffffffffffffffffffffffffffffffffff1614610710576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070790610baa565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361077f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077690610dfc565b60405180910390fd5b610788816107c6565b50565b600033905090565b606554606760006066548152602001908152602001600020819055506107b7610351565b60658190555042606681905550565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60006b033b2e3c9fd0803ce80000006301e13380633b9aca00846069546108b39190610c56565b6108bd9190610c56565b6108c79190610cc7565b6108d19190610e1c565b9050919050565b60006108e330610942565b15905090565b600060019054906101000a900460ff16610938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092f90610ec2565b60405180910390fd5b610940610965565b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166109b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ab90610ec2565b60405180910390fd5b6109c46109bf61078b565b6107c6565b565b6000819050919050565b6109d9816109c6565b82525050565b60006020820190506109f460008301846109d0565b92915050565b600080fd5b610a08816109c6565b8114610a1357600080fd5b50565b600081359050610a25816109ff565b92915050565b600060208284031215610a4157610a406109fa565b5b6000610a4f84828501610a16565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8382610a58565b9050919050565b610a9381610a78565b82525050565b6000602082019050610aae6000830184610a8a565b92915050565b610abd81610a78565b8114610ac857600080fd5b50565b600081359050610ada81610ab4565b92915050565b60008060408385031215610af757610af66109fa565b5b6000610b0585828601610a16565b9250506020610b1685828601610acb565b9150509250929050565b600060208284031215610b3657610b356109fa565b5b6000610b4484828501610acb565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610b94602083610b4d565b9150610b9f82610b5e565b602082019050919050565b60006020820190508181036000830152610bc381610b87565b9050919050565b6000604082019050610bdf60008301856109d0565b610bec60208301846109d0565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c2d826109c6565b9150610c38836109c6565b9250828203905081811115610c5057610c4f610bf3565b5b92915050565b6000610c61826109c6565b9150610c6c836109c6565b9250828202610c7a816109c6565b91508282048414831517610c9157610c90610bf3565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610cd2826109c6565b9150610cdd836109c6565b925082610ced57610cec610c98565b5b828204905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000610d54602e83610b4d565b9150610d5f82610cf8565b604082019050919050565b60006020820190508181036000830152610d8381610d47565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610de6602683610b4d565b9150610df182610d8a565b604082019050919050565b60006020820190508181036000830152610e1581610dd9565b9050919050565b6000610e27826109c6565b9150610e32836109c6565b9250828201905080821115610e4a57610e49610bf3565b5b92915050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b6000610eac602b83610b4d565b9150610eb782610e50565b604082019050919050565b60006020820190508181036000830152610edb81610e9f565b905091905056fea26469706673582212206747fc07ddc9efce60cc3efbf59b4c7ce989ccbea30b755efbcc6153877d528464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setRate(uint256)": {
        "details": "_rate the value of updated rate*"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateUser(address)": {
        "details": "user address of the index owner*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getIndex()": {
        "notice": "Gets current value of the linear index It recalculates the value on-demand without updating the storage*"
      },
      "getIndexedValue(uint256,address)": {
        "notice": "Gets the user value recalculated to the current index It recalculates the value on-demand without updating the storage Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude of 1 Wei)*"
      },
      "setRate(uint256)": {
        "notice": "Sets the new rate Before the new rate is set, the index is updated accumulating interest"
      },
      "updateUser(address)": {
        "notice": "Updates user index It persists the update time and the update index time->index mapping"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 481,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 499,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "index",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 501,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "indexUpdateTime",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 505,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "prevIndex",
        "offset": 0,
        "slot": "103",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 509,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "userUpdateTime",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 511,
        "contract": "contracts/deployment/avalanche/UsdcBorrowIndex.sol:UsdcBorrowIndex",
        "label": "rate",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}