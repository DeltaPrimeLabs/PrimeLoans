{
  "address": "0x5d3E1eC30C7Da51600722b881525C7288BE2dAC6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenDelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "TokenWhitelisted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountAMin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountBMin",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensToDelist",
          "type": "address[]"
        }
      ],
      "name": "delistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllWhitelistedTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_soldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boughtToken",
          "type": "address"
        }
      ],
      "name": "getMaximumTokensReceived",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exactAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_soldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boughtToken",
          "type": "address"
        }
      ],
      "name": "getMinimumTokensNeeded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token2",
          "type": "address"
        }
      ],
      "name": "getPair",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_whitelistedTokens",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenA",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenB",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "liquidity",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountB",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_soldToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_boughtToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_exactSold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minimumBought",
          "type": "uint256"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "tokensToWhitelist",
          "type": "address[]"
        }
      ],
      "name": "whitelistTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5df0b30f57b79b0dd458b07807c55b751126b529a604753850c89478e369b025",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x5d3E1eC30C7Da51600722b881525C7288BE2dAC6",
    "transactionIndex": 0,
    "gasUsed": "3858827",
    "logsBloom": "0x
    "blockHash": "0xd0bbf610246cbb5581a8e9624db0a1f26b9faa47278cfb12fa03a41330d2d9cc",
    "transactionHash": "0x5df0b30f57b79b0dd458b07807c55b751126b529a604753850c89478e369b025",
    "logs": [],
    "blockNumber": 22331308,
    "cumulativeGasUsed": "3858827",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8e73999978b983f1a2b8193d45b6a97f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenDelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokenWhitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToDelist\",\"type\":\"address[]\"}],\"name\":\"delistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllWhitelistedTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boughtToken\",\"type\":\"address\"}],\"name\":\"getMaximumTokensReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boughtToken\",\"type\":\"address\"}],\"name\":\"getMinimumTokensNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token2\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_whitelistedTokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_soldToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boughtToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_exactSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBought\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokensToWhitelist\",\"type\":\"address[]\"}],\"name\":\"whitelistTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Contract allows user to swap ERC20 tokens on DEX This implementation uses the Pangolin DEX\",\"kind\":\"dev\",\"methods\":{\"getPair(address,address)\":{\"params\":{\"_token1\":\"ERC20 token's address\",\"_token2\":\"ERC20 token's address*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PangolinIntermediary\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMaximumTokensReceived(uint256,address,address)\":{\"notice\":\"Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.*\"},\"getMinimumTokensNeeded(uint256,address,address)\":{\"notice\":\"Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken. Can revert due to insufficient liquidity*\"},\"getPair(address,address)\":{\"notice\":\"Returns an address of LP token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/avalanche/PangolinIntermediary.sol\":\"PangolinIntermediary\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x8a3c5c449d4b7cd76513ed6995f4b86e4a86f222c770f8442f5fc128ce29b4d2\"},\"contracts/RedstoneConfigManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RedstoneConfigManager is Ownable {\\n    mapping(address => bool) internal signerAuthorized;\\n    address[] public trustedSigners;\\n\\n    constructor(address[] memory _trustedSigners) {\\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\\n            require(!signerExists(_trustedSigners[i]), \\\"Signer already exists\\\");\\n            _addTrustedSigner(_trustedSigners[i]);\\n        }\\n    }\\n\\n    function getTrustedSigners() external view returns (address[] memory) {\\n        return trustedSigners;\\n    }\\n\\n    function signerExists(address signer) public view returns (bool) {\\n        return signerAuthorized[signer];\\n    }\\n\\n    function addTrustedSigners(address[] memory _trustedSigners) public onlyOwner {\\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\\n            require(!signerExists(_trustedSigners[i]), \\\"Signer already exists\\\");\\n            _addTrustedSigner(_trustedSigners[i]);\\n            emit SignerAdded(msg.sender, _trustedSigners[i], block.timestamp);\\n        }\\n    }\\n\\n    function _addTrustedSigner(address newSigner) private {\\n        signerAuthorized[newSigner] = true;\\n        trustedSigners.push(newSigner);\\n    }\\n\\n    function removeTrustedSigners(address[] memory _trustedSigners) public onlyOwner {\\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\\n            require(signerExists(_trustedSigners[i]), \\\"Signer does not exists\\\");\\n            _removeTrustedSigner(_trustedSigners[i]);\\n            emit SignerRemoved(msg.sender, _trustedSigners[i], block.timestamp);\\n        }\\n    }\\n\\n    function _removeTrustedSigner(address signerToRemove) private {\\n        // Signer is no longer authorized\\n        signerAuthorized[signerToRemove] = false;\\n\\n        // Remove signerToRemove from the trustedSigners list\\n        for (uint256 i = 0; i < trustedSigners.length; i++) {\\n            // Lookup signerToRemove position in the trustedSigners list\\n            if (trustedSigners[i] == signerToRemove) {\\n                // If signerToRemove is not at the last place in the list, copy last list's element to it's place\\n                if (i != trustedSigners.length - 1) {\\n                    trustedSigners[i] = trustedSigners[trustedSigners.length - 1];\\n                }\\n                // Remove last list's element\\n                trustedSigners.pop();\\n            }\\n        }\\n    }\\n\\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\\n\\n    function renounceOwnership() public virtual override {}\\n\\n    // EVENTS\\n    /**\\n    * @dev emitted after adding a signer\\n    * @param user performing the transaction\\n    * @param signer address of added signer\\n    * @param timestamp of change\\n    **/\\n    event SignerAdded(address indexed user, address signer, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after removing a signer\\n    * @param user performing the transaction\\n    * @param signer address of removed signer\\n    * @param timestamp of change\\n    **/\\n    event SignerRemoved(address indexed user, address signer, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x1933659327c4d7d4160060efd83f49783c79b07ab59543e2ecf9e6e896198dac\",\"license\":\"BUSL-1.1\"},\"contracts/ReentrancyGuardKeccak.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\\n// contract that uses keccak slots instead of the standard storage layout.\\n\\nimport {DiamondStorageLib} from \\\"./lib/DiamondStorageLib.sol\\\";\\n\\npragma solidity 0.8.17;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n */\\nabstract contract ReentrancyGuardKeccak {\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(rgs._status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        rgs._status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        rgs._status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xff292b8761ea7ade758ddc700e6e8b8727210285859db6a48d7bba1778ab7e1a\",\"license\":\"MIT\"},\"contracts/TokenList.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\ncontract TokenListOwnableUpgreadable is OwnableUpgradeable {\\n    mapping(address => bool) isTokenWhitelisted;\\n    mapping(address => uint256) tokenPositionInList;\\n    address[] whitelistedTokensList;\\n\\n    function __TokenList_init(address[] memory _whitelistedTokens) internal onlyInitializing {\\n        for (uint256 i = 0; i < _whitelistedTokens.length; i++) {\\n            require(_whitelistToken(_whitelistedTokens[i], false), \\\"Whitelisting token failed\\\");\\n        }\\n\\n        __Ownable_init();\\n    }\\n\\n    // PUBLIC MUTATIVE FUNCTIONS\\n\\n    function whitelistTokens(address[] memory tokensToWhitelist) public onlyOwner {\\n        for (uint256 i = 0; i < tokensToWhitelist.length; i++) {\\n            require(_whitelistToken(tokensToWhitelist[i], true), \\\"Whitelisting token failed\\\");\\n        }\\n    }\\n\\n    function delistTokens(address[] memory tokensToDelist) public onlyOwner {\\n        for (uint256 i = 0; i < tokensToDelist.length; i++) {\\n            require(_delistToken(tokensToDelist[i], true), \\\"Delisting token failed\\\");\\n        }\\n    }\\n\\n    // PUBLIC VIEW FUNCTIONS\\n\\n    function getAllWhitelistedTokens() public view returns (address[] memory) {\\n        return whitelistedTokensList;\\n    }\\n\\n    // Already auto-generated because of the public visibility modifier\\n    // function isTokenWhitelisted(address token) public view returns (bool) {\\n    //     return isTokenWhitelisted[token];\\n    // }\\n\\n    // INTERNAL MUTATIVE FUNCTIONS\\n\\n    function _whitelistToken(address token, bool revertOnDuplicates) internal returns (bool){\\n        require(token != address(0), \\\"Cannot whitelist a zero address\\\");\\n\\n        if (!isTokenWhitelisted[token]) {\\n            whitelistedTokensList.push(token);\\n            tokenPositionInList[token] = whitelistedTokensList.length - 1;\\n            isTokenWhitelisted[token] = true;\\n            emit TokenWhitelisted(msg.sender, token, block.timestamp);\\n            return true;\\n\\n        } else if (revertOnDuplicates) {\\n            revert(\\\"Token already whitelisted\\\");\\n        }\\n        return false;\\n    }\\n\\n    function _delistToken(address token, bool revertOnNonListedTokens) internal returns (bool){\\n        if (isTokenWhitelisted[token]) {\\n            _removeTokenFromList(token);\\n            isTokenWhitelisted[token] = false;\\n            emit TokenDelisted(msg.sender, token, block.timestamp);\\n            return true;\\n\\n        } else if (revertOnNonListedTokens) {\\n            revert(\\\"Token was not whitelisted before\\\");\\n        }\\n        return false;\\n    }\\n\\n    // INTERNAL HELPER MUTATIVE FUNCTIONS\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] whitelistedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        if (tokenToRemoveIndex != (whitelistedTokensList.length - 1)) {\\n            address currentLastToken = whitelistedTokensList[whitelistedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            whitelistedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        whitelistedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    // EVENTS\\n    /**\\n    * @dev emitted after whitelisting a token\\n    * @param user performing the transaction\\n    * @param token address of whitelisted token\\n    * @param timestamp of change\\n    **/\\n    event TokenWhitelisted(address indexed user, address token, uint256 timestamp);\\n\\n    /**\\n    * @dev emitted after delisting a token\\n    * @param user performing the transaction\\n    * @param token address of delisted token\\n    * @param timestamp of change\\n    **/\\n    event TokenDelisted(address indexed user, address token, uint256 timestamp);\\n}\",\"keccak256\":\"0xa6d09e033929dadefd3426d7ee722279d1ee856e101f2de12dc2d1b19186e444\",\"license\":\"BUSL-1.1\"},\"contracts/TokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ncontract TokenManager {\\n    /**\\n     * For adding supported assets\\n     **/\\n    struct Asset {\\n        bytes32 asset;\\n        address assetAddress;\\n        uint256 maxLeverage;\\n    }\\n\\n    /**\\n     * For adding supported lending pools\\n     **/\\n    struct poolAsset {\\n        bytes32 asset;\\n        address poolAddress;\\n    }\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    uint256 private constant _NOT_SUPPORTED = 0;\\n    uint256 private constant _INACTIVE = 1;\\n    uint256 private constant _ACTIVE = 2;\\n\\n    address public admin;\\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\\n    mapping(address => bytes32) public tokenAddressToSymbol;\\n    mapping(address => uint256) private tokenPositionInList;\\n    // used for defining different leverage ratios for tokens\\n    mapping(address => uint256) public maxTokenLeverage;\\n    address[] public supportedTokensList;\\n\\n    address public adminTransferProposal;\\n\\n    mapping(address => uint256) public tokenToStatus;\\n\\n    constructor(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) {\\n        admin = msg.sender;\\n        emit AdminChanged(address(0), msg.sender, block.timestamp);\\n        addTokenAssets(tokenAssets);\\n        addPoolAssets(poolAssets);\\n    }\\n\\n    // Set to address(0) to reset proposal\\n    function proposeAdminTransfer(address _newOwner) onlyAdmin public {\\n        require(_newOwner != msg.sender, \\\"Can't propose oneself as a contract owner\\\");\\n        adminTransferProposal = _newOwner;\\n        emit AdminProposed(msg.sender, _newOwner, block.timestamp);\\n    }\\n\\n    function executeAdminTransfer() public {\\n        require(adminTransferProposal != address(0), \\\"There is no active admin transfer proposal\\\");\\n        require(adminTransferProposal == msg.sender, \\\"Only the proposed new admin can execute admin transfer proposal\\\");\\n        address oldAdmin = admin;\\n        admin = adminTransferProposal;\\n        adminTransferProposal = address(0);\\n        emit AdminChanged(oldAdmin, msg.sender, block.timestamp);\\n    }\\n\\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\\n        return assetToPoolAddress._inner._keys._inner._values;\\n    }\\n\\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\\n        return supportedTokensList;\\n    }\\n\\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\\n        return assetToTokenAddress._inner._keys._inner._values;\\n    }\\n\\n    /**\\n    * Returns address of an asset\\n    **/\\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n        if (!allowInactive) {\\n            require(tokenToStatus[assetAddress] == _ACTIVE, \\\"Asset inactive\\\");\\n        }\\n\\n        return assetAddress;\\n    }\\n\\n    /**\\n    * Returns address of an asset's lending pool\\n    **/\\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\\n        require(assetAddress != address(0), \\\"Pool asset not supported.\\\");\\n\\n        return assetAddress;\\n    }\\n\\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < poolAssets.length; i++) {\\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\\n        }\\n    }\\n\\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\\n        require(Address.isContract(_poolAddress), \\\"TokenManager: Pool must be a contract\\\");\\n        require(!assetToPoolAddress.contains(_asset), \\\"Asset's pool already exists\\\");\\n        assetToPoolAddress.set(_asset, _poolAddress);\\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\\n    }\\n\\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].maxLeverage);\\n        }\\n    }\\n\\n    function activateToken(address token) public onlyAdmin {\\n        require(tokenToStatus[token] == _INACTIVE, \\\"Must be inactive\\\");\\n        tokenToStatus[token] = _ACTIVE;\\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function deactivateToken(address token) public onlyAdmin {\\n        require(tokenToStatus[token] == _ACTIVE, \\\"Must be active\\\");\\n        tokenToStatus[token] = _INACTIVE;\\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\\n    }\\n\\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _maxLeverage) internal {\\n        require(_asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n        require(_tokenAddress != address(0), \\\"Cannot set an empty address.\\\");\\n        require(!assetToTokenAddress.contains(_asset), \\\"Asset's token already exists\\\");\\n        setMaxTokenLeverage(_tokenAddress, _maxLeverage);\\n\\n        assetToTokenAddress.set(_asset, _tokenAddress);\\n        tokenAddressToSymbol[_tokenAddress] = _asset;\\n        tokenToStatus[_tokenAddress] = _ACTIVE;\\n\\n        supportedTokensList.push(_tokenAddress);\\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\\n\\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\\n    }\\n\\n    function _removeTokenFromList(address tokenToRemove) internal {\\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\\n        }\\n        // Remove last element - that is either the token that is being removed (if was already at the end)\\n        // or some other asset that at this point was already copied to the `index` positon\\n        supportedTokensList.pop();\\n        tokenPositionInList[tokenToRemove] = 0;\\n    }\\n\\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\\n            _removeTokenAsset(_tokenAssets[i]);\\n        }\\n    }\\n\\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\\n        tokenAddressToSymbol[tokenAddress] = 0;\\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\\n        maxTokenLeverage[tokenAddress] = 0;\\n        _removeTokenFromList(tokenAddress);\\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\\n    }\\n\\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyAdmin {\\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\\n            _removePoolAsset(_poolAssets[i]);\\n        }\\n    }\\n\\n    function _removePoolAsset(bytes32 _poolAsset) internal {\\n        address poolAddress = getPoolAddress(_poolAsset);\\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\\n    }\\n\\n    function setMaxTokenLeverage(address token, uint256 maxLeverage) public onlyAdmin {\\n        //LTV must be lower than 5\\n        require(maxLeverage <= 0.833333333333333333e18, 'Leverage higher than maximum acceptable');\\n        maxTokenLeverage[token] = maxLeverage;\\n    }\\n\\n    modifier onlyAdmin {\\n        require(msg.sender == admin, \\\"Admin only\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev emitted after proposing a new admin\\n     * @param oldAdmin current admin\\n     * @param newAdmin new admin proposed\\n     * @param timestamp time of proposal\\n     **/\\n    event AdminProposed(address indexed oldAdmin, address newAdmin, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after changing an admin\\n     * @param oldAdmin previous admin\\n     * @param newAdmin new admin being set\\n     * @param timestamp time of changing an admin\\n     **/\\n    event AdminChanged(address indexed oldAdmin, address newAdmin, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a token asset\\n     * @param performer an address of the wallet adding a token asset\\n     * @param tokenAsset token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of adding a token asset\\n     **/\\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after activating a token asset\\n     * @param performer an address of the wallet activating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of activating a token asset\\n     **/\\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after deactivating a token asset\\n     * @param performer an address of the wallet deactivating a token asset\\n     * @param assetAddress an address of the token asset\\n     * @param timestamp time of deactivating a token asset\\n     **/\\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a token asset\\n     * @param performer an address of the wallet removing a token asset\\n     * @param tokenAsset token asset\\n     * @param timestamp time a token asset removal\\n     **/\\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after adding a pool asset\\n     * @param performer an address of wallet adding the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of the pool asset addition\\n     **/\\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n\\n    /**\\n     * @dev emitted after removing a pool asset\\n     * @param performer an address of wallet removing the pool asset\\n     * @param poolAsset pool asset\\n     * @param poolAddress an address of the pool asset\\n     * @param timestamp time of a pool asset removal\\n     **/\\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\\n}\\n\",\"keccak256\":\"0x632a685fd69e97f3d9d086dc623d0eb1fddc1ce2c3debc6a5fc79ce1c4828f9b\",\"license\":\"BUSL-1.1\"},\"contracts/integrations/UniswapV2Intermediary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity 0.8.17;\\n\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\\\";\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"../ReentrancyGuardKeccak.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../interfaces/IAssetsExchange.sol\\\";\\nimport \\\"../TokenList.sol\\\";\\n\\n/**\\n * @title UniswapV2Intermediary\\n * @dev Contract allows user to swap ERC20 tokens on DEX\\n * This implementation supports UniswapV2-like DEXs\\n */\\ncontract UniswapV2Intermediary is TokenListOwnableUpgreadable, IAssetsExchange, ReentrancyGuardKeccak {\\n    using TransferHelper for address payable;\\n    using TransferHelper for address;\\n\\n    /* ========= STATE VARIABLES ========= */\\n    IUniswapV2Router01 router;\\n    IUniswapV2Factory factory;\\n\\n    function initialize(address _router, address[] memory _whitelistedTokens) external initializer {\\n        router = IUniswapV2Router01(_router);\\n        factory = IUniswapV2Factory(router.factory());\\n\\n        __TokenList_init(_whitelistedTokens);\\n    }\\n\\n    /*\\n     * Swaps selected ERC20 token with other ERC20 token\\n     * @param soldToken_ sold ERC20 token's address\\n     * @param boughtToken_ bought ERC20 token's address\\n     * @param _exactSold exact amount of ERC20 token to be sold\\n     * @param _minimumBought minimum amount of ERC20 token to be bought\\n     **/\\n    function swap(address _soldToken, address _boughtToken, uint256 _exactSold, uint256 _minimumBought) external override nonReentrant returns (uint256[] memory amounts) {\\n        require(_exactSold > 0, \\\"Amount of tokens to sell has to be greater than 0\\\");\\n\\n        _soldToken.safeApprove(address(router), 0);\\n        _soldToken.safeApprove(address(router), _exactSold);\\n\\n        require(isTokenWhitelisted[_boughtToken], 'Trying to buy unsupported token');\\n\\n        if (_minimumBought > 0) {\\n            require(_exactSold >= getMinimumTokensNeeded(_minimumBought, _soldToken, _boughtToken), \\\"Not enough funds were provided\\\");\\n        }\\n\\n        amounts = router.swapExactTokensForTokens(_exactSold, _minimumBought, getPath(_soldToken, _boughtToken), msg.sender, block.timestamp);\\n\\n        _soldToken.safeTransfer(msg.sender, IERC20Metadata(_soldToken).balanceOf(address(this)));\\n\\n        return amounts;\\n    }\\n\\n\\n    /*\\n     * addLiquidity selected ERC20 tokens\\n     **/\\n    function addLiquidity(address tokenA, address tokenB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) external override nonReentrant returns (address, uint, uint, uint) {\\n        require(amountA > 0, \\\"amountADesired has to be greater than 0\\\");\\n        require(amountB > 0, \\\"amountBDesired to sell has to be greater than 0\\\");\\n        require(amountAMin > 0, \\\"amountAMin has to be greater than 0\\\");\\n        require(amountBMin > 0, \\\"amountBMin has to be greater than 0\\\");\\n\\n        tokenA.safeApprove(address(router), amountA);\\n        tokenB.safeApprove(address(router), amountB);\\n\\n        address lpTokenAddress = getPair(tokenA, tokenB);\\n\\n        require(isTokenWhitelisted[tokenA], 'Trying to LP unsupported token');\\n        require(isTokenWhitelisted[tokenB], 'Trying to LP unsupported token');\\n        require(isTokenWhitelisted[lpTokenAddress], 'Trying to add unsupported LP token');\\n\\n        uint liquidity;\\n        (amountA, amountB, liquidity) =\\n           router.addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin, address(this), block.timestamp);\\n\\n        lpTokenAddress.safeTransfer(msg.sender, IERC20Metadata(lpTokenAddress).balanceOf(address(this)));\\n        tokenA.safeTransfer(msg.sender, IERC20Metadata(tokenA).balanceOf(address(this)));\\n        tokenB.safeTransfer(msg.sender, IERC20Metadata(tokenB).balanceOf(address(this)));\\n\\n        return (lpTokenAddress, amountA, amountB, liquidity);\\n    }\\n\\n\\n    /*\\n     *  removeLiquidity selected ERC20 tokens\\n     **/\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountA, uint amountB) external override nonReentrant returns (uint, uint) {\\n        require(amountA > 0, \\\"amountA has to be greater than 0\\\");\\n        require(amountB > 0, \\\"amountB has to be greater than 0\\\");\\n\\n        address lpTokenAddress = getPair(tokenA, tokenB);\\n\\n        lpTokenAddress.safeApprove(address(router), liquidity);\\n\\n        require(isTokenWhitelisted[tokenA], 'Trying to remove LP of unsupported token');\\n        require(isTokenWhitelisted[tokenB], 'Trying to remove LP of unsupported token');\\n        //TODO: handle paused LP tokens\\n        require(isTokenWhitelisted[lpTokenAddress], 'Trying to remove unsupported LP token');\\n\\n        (amountA, amountB) =\\n         router.removeLiquidity(tokenA, tokenB, liquidity, amountA, amountB, address(this), block.timestamp);\\n\\n        lpTokenAddress.safeTransfer(msg.sender, IERC20Metadata(lpTokenAddress).balanceOf(address(this)));\\n        tokenA.safeTransfer(msg.sender, IERC20Metadata(tokenA).balanceOf(address(this)));\\n        tokenB.safeTransfer(msg.sender, IERC20Metadata(tokenB).balanceOf(address(this)));\\n\\n        return (amountA, amountB);\\n    }\\n\\n\\n    /* ========== RECEIVE AVAX FUNCTION ========== */\\n    receive() external payable {}\\n\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    /**\\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\\n     * Can revert due to insufficient liquidity\\n     **/\\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) public view override returns (uint256) {\\n        address[] memory path = getPath(_soldToken, _boughtToken);\\n\\n        (bool success, bytes memory result) = address(router).staticcall(\\n            abi.encodeWithSignature(\\\"getAmountsIn(uint256,address[])\\\", _exactAmountOut, path)\\n        );\\n\\n        require(success, \\\"Error when calculating amounts needed\\\");\\n\\n        uint256[] memory amounts = abi.decode(result, (uint256[]));\\n\\n        return amounts[0];\\n    }\\n\\n    /**\\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\\n     **/\\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) public view override returns (uint256) {\\n        address[] memory path = getPath(_soldToken, _boughtToken);\\n\\n        return router.getAmountsOut(_amountIn, path)[1];\\n    }\\n\\n    /**\\n     * Returns a path containing tokens' addresses\\n     * @param _token1 ERC20 token's address\\n     * @param _token2 ERC20 token's address\\n     **/\\n    function getPath(address _token1, address _token2) internal virtual view returns (address[] memory) {\\n        address[] memory path;\\n\\n        if (_token1 != getNativeTokenAddress() && _token2 != getNativeTokenAddress()) {\\n            path = new address[](3);\\n            path[0] = _token1;\\n            path[1] = getNativeTokenAddress();\\n            path[2] = _token2;\\n        } else {\\n            path = new address[](2);\\n            path[0] = _token1;\\n            path[1] = _token2;\\n        }\\n\\n        return path;\\n    }\\n\\n    /**\\n     * Returns an address of LP token\\n     * @param _token1 ERC20 token's address\\n     * @param _token2 ERC20 token's address\\n     **/\\n    function getPair(address _token1, address _token2) public virtual view returns (address) {\\n        return factory.getPair(_token1, _token2);\\n    }\\n\\n    function getNativeTokenAddress() virtual internal view returns (address) {\\n        //address of WETH9 on Ethereum network. Must be overriden in implementations on other chains\\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    }\\n}\",\"keccak256\":\"0x344162a5317a1a10f3b42fc10a054962def812f7faa7cdbe1ebff8beb7bead0c\",\"license\":\"BUSL-1.1\"},\"contracts/integrations/avalanche/PangolinIntermediary.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\\npragma solidity 0.8.17;\\n\\nimport \\\"../UniswapV2Intermediary.sol\\\";\\nimport \\\"../../lib/local/DeploymentConstants.sol\\\";\\n\\n/**\\n * @title PangolinIntermediary\\n * @dev Contract allows user to swap ERC20 tokens on DEX\\n * This implementation uses the Pangolin DEX\\n */\\ncontract PangolinIntermediary is UniswapV2Intermediary {\\n\\n    function getNativeTokenAddress() override internal pure returns (address) {\\n        return DeploymentConstants.getNativeToken();\\n    }\\n}\",\"keccak256\":\"0xd954d3df2dc7a2966edb5d3f2995234d3ea9af41c557d102dec8a380a3abd8c9\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IAssetExchange\\n * @dev Basic interface for investing into assets\\n * It could be linked either to DEX or to a synthetic assets platform\\n */\\ninterface IAssetsExchange {\\n\\n    /*\\n     * Swaps selected ERC20 token with other ERC20 token\\n     * @param soldToken_ sold ERC20 token's address\\n     * @param boughtToken_ bought ERC20 token's address\\n     * @param _amountSold exact amount of ERC20 token to be sold\\n     * @param _amountBought minimum amount of ERC20 token to be bought\\n     **/\\n    function swap(address soldToken_, address boughtToken_, uint256 _exactAmountIn, uint256 _minAmountOut) external returns (uint256[] memory);\\n\\n    /*\\n     * Adds liquidity of ERC20 tokens\\n     */\\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external returns (address, uint, uint, uint);\\n\\n    /*\\n     * Removes liquidity of ERC20 tokens\\n     */\\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin) external returns (uint, uint);\\n\\n    /**\\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\\n     **/\\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) external returns (uint256);\\n\\n    /**\\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\\n     **/\\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) external returns (uint256);\\n\\n    /**\\n     * getPair\\n     **/\\n    function getPair(address _tokenA, address _tokenB) external returns (address);\\n\\n}\\n\",\"keccak256\":\"0x4842d61120bf154a22024bf31e7ee68cac0dee2353e8e53175372fc63447bbf8\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {Add, Replace, Remove}\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(\\n        FacetCut[] calldata _diamondCut,\\n        address _init,\\n        bytes calldata _calldata\\n    ) external;\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\\n}\",\"keccak256\":\"0xdabe34201dcc6fd64a1cf484d16f031d6d64e39ebdcae7cc63e7c525c8beecc7\",\"license\":\"MIT\"},\"contracts/interfaces/IStakingPositions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStakingPositions\\n * Types for staking\\n */\\ninterface IStakingPositions {\\n    struct StakedPosition {\\n        address vault;\\n        bytes32 symbol;\\n        bytes4 balanceSelector;\\n        bytes4 unstakeSelector;\\n    }\\n}\\n\",\"keccak256\":\"0xe617bf40dd2a59f4dbf9d24696fe931a0247a59dae1ba58ab26ff58518b2c846\",\"license\":\"BUSL-1.1\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.Bytes32Set _keys;\\n        mapping(bytes32 => bytes32) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        bytes32 key,\\n        bytes32 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        bytes32 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        bytes32 value = map._values[key];\\n        if (value == bytes32(0)) {\\n            return (_contains(map, key), bytes32(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) private view returns (bytes32) {\\n        bytes32 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    // Bytes32ToAddressMap\\n\\n    struct Bytes32ToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        address value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (key, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        Bytes32ToAddressMap storage map,\\n        bytes32 key,\\n        string memory errorMessage\\n    ) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x74c86dcb231a31355e8947aea10f3c94eb5f1656b000ce90d18f5a48fcb98b4a\",\"license\":\"MIT\"},\"contracts/lib/DiamondStorageLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\nimport \\\"../lib/Bytes32EnumerableMap.sol\\\";\\nimport \\\"../interfaces/IStakingPositions.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nlibrary DiamondStorageLib {\\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\\\"diamond.standard.smartloan.storage\\\");\\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\\\"diamond.standard.reentrancy.guard.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n\\n        bool _initialized;\\n        bool _active;\\n    }\\n\\n    struct SmartLoanStorage {\\n        // Owner of the contract\\n        address contractOwner;\\n        // Proposed owner of the contract\\n        address proposedOwner;\\n        // Is contract initialized?\\n        bool _initialized;\\n        // TODO: mock staking tokens until redstone oracle supports them\\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\\n        // Staked positions of the contract\\n        IStakingPositions.StakedPosition[] currentStakedPositions;\\n    }\\n\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\\n        assembly {\\n            rgs.slot := position\\n        }\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\\n        assembly {\\n            sls.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        address previousOwner = sls.contractOwner;\\n        sls.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = smartLoanStorage().contractOwner;\\n    }\\n\\n    function setProposedOwner(address _newOwner) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        sls.proposedOwner = _newOwner;\\n    }\\n\\n    function proposedOwner() internal view returns (address proposedOwner_) {\\n        proposedOwner_ = smartLoanStorage().proposedOwner;\\n    }\\n\\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\\n        _positions = smartLoanStorage().currentStakedPositions;\\n    }\\n\\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        bool found;\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == position.balanceSelector) {\\n                found = true;\\n                break;\\n            }\\n        }\\n\\n        if (!found) {\\n            positions.push(position);\\n        }\\n    }\\n\\n    function removeStakedPosition(bytes4 balanceSelector) internal {\\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\\n\\n        for (uint256 i; i < positions.length; i++) {\\n            if (positions[i].balanceSelector == balanceSelector) {\\n                positions[i] = positions[positions.length - 1];\\n                positions.pop();\\n            }\\n        }\\n    }\\n\\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\\n        require(_symbol != \\\"\\\", \\\"Symbol cannot be empty\\\");\\n        require(_address != address(0), \\\"Invalid AddressZero\\\");\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\\n    }\\n\\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        return sls.ownedAssets.contains(_symbol);\\n    }\\n\\n    function removeOwnedAsset(bytes32 _symbol) internal {\\n        SmartLoanStorage storage sls = smartLoanStorage();\\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == smartLoanStorage().contractOwner, \\\"DiamondStorageLib: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(\\n        IDiamondCut.FacetCut[] memory _diamondCut,\\n        address _init,\\n        bytes memory _calldata\\n    ) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"DiamondStorageLibCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"DiamondStorageLibCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"DiamondStorageLibCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"DiamondStorageLibCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"DiamondStorageLibCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"DiamondStorageLibCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"DiamondStorageLibCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"DiamondStorageLibCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            require(_calldata.length > 0, \\\"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"DiamondStorageLibCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"DiamondStorageLibCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\",\"keccak256\":\"0x0f1e8f956a3b0ddab4a81047d99a8cf02cc19211e3c80b9a4a2e1da49d33797b\",\"license\":\"MIT\"},\"contracts/lib/local/DeploymentConstants.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Last deployed from commit: ;\\npragma solidity ^0.8.17;\\n\\nimport \\\"../../TokenManager.sol\\\";\\nimport {DiamondStorageLib} from \\\"../../lib/DiamondStorageLib.sol\\\";\\nimport \\\"../../RedstoneConfigManager.sol\\\";\\n\\n/**\\n * DeploymentConstants\\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\\n * to decrease gas costs. Not meant to be updated unless really necessary.\\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\\n **/\\nlibrary DeploymentConstants {\\n\\n    // Used for LiquidationBonus calculations\\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\\n\\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\\n\\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x0ed64d01D0B4B655E410EF1441dD677B695639E7;\\n\\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0x9385556B571ab92bf6dC9a0DbD75429Dd4d56F91;\\n\\n    address private constant _TOKEN_MANAGER_ADDRESS = 0xa6e99A4ED7498b3cdDCBB61a6A607a4925Faa1B7;\\n\\n    address private constant _REDSTONE_CONFIG_MANAGER_ADDRESS = 0x40918Ba7f132E0aCba2CE4de4c4baF9BD2D7D849;\\n\\n    //implementation-specific\\n\\n    function getPercentagePrecision() internal pure returns (uint256) {\\n        return _PERCENTAGE_PRECISION;\\n    }\\n\\n    //blockchain-specific\\n\\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\\n        return _NATIVE_TOKEN_SYMBOL;\\n    }\\n\\n    function getNativeToken() internal pure returns (address payable) {\\n        return payable(_NATIVE_ADDRESS);\\n    }\\n\\n    //deployment-specific\\n\\n    function getDiamondAddress() internal pure returns (address) {\\n        return _DIAMOND_BEACON_ADDRESS;\\n    }\\n\\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\\n        return _SMART_LOANS_FACTORY_ADDRESS;\\n    }\\n\\n    function getTokenManager() internal pure returns (TokenManager) {\\n        return TokenManager(_TOKEN_MANAGER_ADDRESS);\\n    }\\n\\n    function getRedstoneConfigManager() internal pure returns (RedstoneConfigManager) {\\n        return RedstoneConfigManager(_REDSTONE_CONFIG_MANAGER_ADDRESS);\\n    }\\n\\n    /**\\n    * Returns all owned assets keys\\n    **/\\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\\n        return sls.ownedAssets._inner._keys._inner._values;\\n    }\\n}\",\"keccak256\":\"0xd93e5c5d2e1e0f8b8d2f7d1bcd1c5a2b6c4e9d4e842328c04993d934a7448bb2\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060016068819055506144c7806100286000396000f3fe6080604052600436106100c65760003560e01c806390e292fd1161007f578063e2dc85dc11610059578063e2dc85dc14610274578063e6a43905146102b2578063f2fde38b146102ef578063fe02915614610318576100cd565b806390e292fd146101f7578063946d9204146102205780639991033c14610249576100cd565b80631197e9c7146100d257806319b9fbbf1461010f5780633351733f1461014c5780634cb1e9e31461018c578063715018a6146101b55780638da5cb5b146101cc576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100f960048036038101906100f49190612ae3565b610355565b6040516101069190612b45565b60405180910390f35b34801561011b57600080fd5b5061013660048036038101906101319190612ae3565b610503565b6040516101439190612b45565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e9190612b60565b6105da565b6040516101839493929190612bfc565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190612d9a565b610c61565b005b3480156101c157600080fd5b506101ca610d64565b005b3480156101d857600080fd5b506101e1610dec565b6040516101ee9190612de3565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190612d9a565b610e16565b005b34801561022c57600080fd5b5061024760048036038101906102429190612dfe565b610f19565b005b34801561025557600080fd5b5061025e61111a565b60405161026b9190612f18565b60405180910390f35b34801561028057600080fd5b5061029b60048036038101906102969190612f3a565b6111a8565b6040516102a9929190612fb5565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190612fde565b611746565b6040516102e69190612de3565b60405180910390f35b3480156102fb57600080fd5b506103166004803603810190610311919061301e565b6117ee565b005b34801561032457600080fd5b5061033f600480360381019061033a919061304b565b6118e5565b60405161034c9190613170565b60405180910390f35b6000806103628484611c72565b9050600080606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1687846040516024016103b3929190613192565b6040516020818303038152906040527f1f00ca74000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161043d9190613233565b600060405180830381855afa9150503d8060008114610478576040519150601f19603f3d011682016040523d82523d6000602084013e61047d565b606091505b5091509150816104c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b9906132cd565b60405180910390fd5b6000818060200190518101906104d891906133c5565b9050806000815181106104ee576104ed61340e565b5b60200260200101519450505050509392505050565b6000806105108484611c72565b9050606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f86836040518363ffffffff1660e01b815260040161056f929190613192565b600060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105b591906133c5565b6001815181106105c8576105c761340e565b5b60200260200101519150509392505050565b60008060008060006105ea611f2a565b90506002816000015403610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90613489565b60405180910390fd5b6002816000018190555060008911610680576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106779061351b565b60405180910390fd5b600088116106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba906135ad565b60405180910390fd5b60008711610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd9061363f565b60405180910390fd5b60008611610749576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610740906136d1565b60405180910390fd5b610796606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a8d73ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b6107e3606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16898c73ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b60006107ef8c8c611746565b9050606560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661087d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108749061373d565b60405180910390fd5b606560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610909576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109009061373d565b60405180910390fd5b606560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098c906137cf565b60405180910390fd5b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e337008e8e8e8e8e8e30426040518963ffffffff1660e01b8152600401610a009897969594939291906137ef565b6060604051808303816000875af1158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a43919061386d565b809350819c50829d50505050610af3338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8c9190612de3565b602060405180830381865afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906138c0565b8473ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b610b97338e73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b309190612de3565b602060405180830381865afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7191906138c0565b8f73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b610c3b338d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bd49190612de3565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906138c0565b8e73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b818b8b839650965096509650505060018160000181905550509650965096509692505050565b610c696121c3565b73ffffffffffffffffffffffffffffffffffffffff16610c87610dec565b73ffffffffffffffffffffffffffffffffffffffff1614610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490613939565b60405180910390fd5b60005b8151811015610d6057610d0e828281518110610cff57610cfe61340e565b5b602002602001015160016121cb565b610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906139a5565b60405180910390fd5b8080610d58906139f4565b915050610ce0565b5050565b610d6c6121c3565b73ffffffffffffffffffffffffffffffffffffffff16610d8a610dec565b73ffffffffffffffffffffffffffffffffffffffff1614610de0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd790613939565b60405180910390fd5b610dea6000612441565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e1e6121c3565b73ffffffffffffffffffffffffffffffffffffffff16610e3c610dec565b73ffffffffffffffffffffffffffffffffffffffff1614610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8990613939565b60405180910390fd5b60005b8151811015610f1557610ec3828281518110610eb457610eb361340e565b5b60200260200101516001612507565b610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef990613a88565b60405180910390fd5b8080610f0d906139f4565b915050610e95565b5050565b600060019054906101000a900460ff16610f415760008054906101000a900460ff1615610f4a565b610f49612661565b5b610f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8090613b1a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fd9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab9190613b4f565b606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110f482612672565b80156111155760008060016101000a81548160ff0219169083151502179055505b505050565b6060606780548060200260200160405190810160405280929190818152602001828054801561119e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611154575b5050505050905090565b60008060006111b5611f2a565b905060028160000154036111fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f590613489565b60405180910390fd5b600281600001819055506000851161124b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124290613bc8565b60405180910390fd5b6000841161128e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128590613c34565b60405180910390fd5b600061129a8989611746565b90506112e9606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16888373ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b606560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136c90613cc6565b60405180910390fd5b606560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890613cc6565b60405180910390fd5b606560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148490613d58565b60405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa2abde8a8a8a8a8a30426040518863ffffffff1660e01b81526004016114f49796959493929190613d78565b60408051808303816000875af1158015611512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115369190613de7565b80965081975050506115e2338273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161157b9190612de3565b602060405180830381865afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc91906138c0565b8373ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b611686338a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161161f9190612de3565b602060405180830381865afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166091906138c0565b8b73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b61172a338973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116c39190612de3565b602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170491906138c0565b8a73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b8585935093505060018160000181905550509550959350505050565b6000606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b81526004016117a5929190613e27565b602060405180830381865afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e69190613b4f565b905092915050565b6117f66121c3565b73ffffffffffffffffffffffffffffffffffffffff16611814610dec565b73ffffffffffffffffffffffffffffffffffffffff161461186a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186190613939565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d090613ec2565b60405180910390fd5b6118e281612441565b50565b606060006118f1611f2a565b9050600281600001540361193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193190613489565b60405180910390fd5b6002816000018190555060008411611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e90613f54565b60405180910390fd5b6119d5606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008873ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b611a22606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858873ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b606560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa590613fc0565b60405180910390fd5b6000831115611b0557611ac2838787610355565b841015611b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb9061402c565b60405180910390fd5b5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398585611b4f8a8a611c72565b33426040518663ffffffff1660e01b8152600401611b7195949392919061404c565b6000604051808303816000875af1158015611b90573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bb991906133c5565b9150611c5f338773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bf89190612de3565b602060405180830381865afa158015611c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3991906138c0565b8873ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b6001816000018190555050949350505050565b606080611c7d612750565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611ceb5750611cbb612750565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611e3557600367ffffffffffffffff811115611d0b57611d0a612c57565b5b604051908082528060200260200182016040528015611d395781602001602082028036833780820191505090505b5090508381600081518110611d5157611d5061340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611d93612750565b81600181518110611da757611da661340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600281518110611df657611df561340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611f20565b600267ffffffffffffffff811115611e5057611e4f612c57565b5b604051908082528060200260200182016040528015611e7e5781602001602082028036833780820191505090505b5090508381600081518110611e9657611e9561340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110611ee557611ee461340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8091505092915050565b6000807f1c85eba10a4cf2d29c83fc15f97931886b9fd3caeb70d8c377aeedc58b919e3b90508091505090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401611f899291906140a6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611fd79190613233565b6000604051808303816000865af19150503d8060008114612014576040519150601f19603f3d011682016040523d82523d6000602084013e612019565b606091505b509150915081801561204757506000815114806120465750808060200190518101906120459190614107565b5b5b612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207d906141a6565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016120bf9291906140a6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161210d9190613233565b6000604051808303816000865af19150503d806000811461214a576040519150601f19603f3d011682016040523d82523d6000602084013e61214f565b606091505b509150915081801561217d575060008151148061217c57508080602001905181019061217b9190614107565b5b5b6121bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b390614238565b60405180910390fd5b5050505050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361223b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612232906142a4565b60405180910390fd5b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166123f5576067839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160678054905061230191906142c4565b606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f25c34e2a97ecce6a643e2876ba21f43208b744c0a1f017fe999208638c7fecdc84426040516123e49291906140a6565b60405180910390a26001905061243b565b8115612436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242d90614344565b60405180910390fd5b600090505b92915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612615576125648361275f565b6000606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f8b0c6321e5164295041a4799b97bc74477465912d8e906efc761ff81bf530b2784426040516126049291906140a6565b60405180910390a26001905061265b565b8115612656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264d906143b0565b60405180910390fd5b600090505b92915050565b600061266c30612942565b15905090565b600060019054906101000a900460ff166126c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b890614442565b60405180910390fd5b60005b8151811015612744576126f28282815181106126e3576126e261340e565b5b602002602001015160006121cb565b612731576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612728906139a5565b60405180910390fd5b808061273c906139f4565b9150506126c4565b5061274d612965565b50565b600061275a6129be565b905090565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060016067805490506127b591906142c4565b81146128b2576000606760016067805490506127d191906142c4565b815481106127e2576127e161340e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606783815481106128685761286761340e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b60678054806128c4576128c3614462565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166129b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ab90614442565b60405180910390fd5b6129bc6129da565b565b600073b31f66aa3c1e785363f0875a1b74e27b85fd66c7905090565b600060019054906101000a900460ff16612a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2090614442565b60405180910390fd5b612a39612a346121c3565b612441565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612a6281612a4f565b8114612a6d57600080fd5b50565b600081359050612a7f81612a59565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ab082612a85565b9050919050565b612ac081612aa5565b8114612acb57600080fd5b50565b600081359050612add81612ab7565b92915050565b600080600060608486031215612afc57612afb612a45565b5b6000612b0a86828701612a70565b9350506020612b1b86828701612ace565b9250506040612b2c86828701612ace565b9150509250925092565b612b3f81612a4f565b82525050565b6000602082019050612b5a6000830184612b36565b92915050565b60008060008060008060c08789031215612b7d57612b7c612a45565b5b6000612b8b89828a01612ace565b9650506020612b9c89828a01612ace565b9550506040612bad89828a01612a70565b9450506060612bbe89828a01612a70565b9350506080612bcf89828a01612a70565b92505060a0612be089828a01612a70565b9150509295509295509295565b612bf681612aa5565b82525050565b6000608082019050612c116000830187612bed565b612c1e6020830186612b36565b612c2b6040830185612b36565b612c386060830184612b36565b95945050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c8f82612c46565b810181811067ffffffffffffffff82111715612cae57612cad612c57565b5b80604052505050565b6000612cc1612a3b565b9050612ccd8282612c86565b919050565b600067ffffffffffffffff821115612ced57612cec612c57565b5b602082029050602081019050919050565b600080fd5b6000612d16612d1184612cd2565b612cb7565b90508083825260208201905060208402830185811115612d3957612d38612cfe565b5b835b81811015612d625780612d4e8882612ace565b845260208401935050602081019050612d3b565b5050509392505050565b600082601f830112612d8157612d80612c41565b5b8135612d91848260208601612d03565b91505092915050565b600060208284031215612db057612daf612a45565b5b600082013567ffffffffffffffff811115612dce57612dcd612a4a565b5b612dda84828501612d6c565b91505092915050565b6000602082019050612df86000830184612bed565b92915050565b60008060408385031215612e1557612e14612a45565b5b6000612e2385828601612ace565b925050602083013567ffffffffffffffff811115612e4457612e43612a4a565b5b612e5085828601612d6c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e8f81612aa5565b82525050565b6000612ea18383612e86565b60208301905092915050565b6000602082019050919050565b6000612ec582612e5a565b612ecf8185612e65565b9350612eda83612e76565b8060005b83811015612f0b578151612ef28882612e95565b9750612efd83612ead565b925050600181019050612ede565b5085935050505092915050565b60006020820190508181036000830152612f328184612eba565b905092915050565b600080600080600060a08688031215612f5657612f55612a45565b5b6000612f6488828901612ace565b9550506020612f7588828901612ace565b9450506040612f8688828901612a70565b9350506060612f9788828901612a70565b9250506080612fa888828901612a70565b9150509295509295909350565b6000604082019050612fca6000830185612b36565b612fd76020830184612b36565b9392505050565b60008060408385031215612ff557612ff4612a45565b5b600061300385828601612ace565b925050602061301485828601612ace565b9150509250929050565b60006020828403121561303457613033612a45565b5b600061304284828501612ace565b91505092915050565b6000806000806080858703121561306557613064612a45565b5b600061307387828801612ace565b945050602061308487828801612ace565b935050604061309587828801612a70565b92505060606130a687828801612a70565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130e781612a4f565b82525050565b60006130f983836130de565b60208301905092915050565b6000602082019050919050565b600061311d826130b2565b61312781856130bd565b9350613132836130ce565b8060005b8381101561316357815161314a88826130ed565b975061315583613105565b925050600181019050613136565b5085935050505092915050565b6000602082019050818103600083015261318a8184613112565b905092915050565b60006040820190506131a76000830185612b36565b81810360208301526131b98184612eba565b90509392505050565b600081519050919050565b600081905092915050565b60005b838110156131f65780820151818401526020810190506131db565b60008484015250505050565b600061320d826131c2565b61321781856131cd565b93506132278185602086016131d8565b80840191505092915050565b600061323f8284613202565b915081905092915050565b600082825260208201905092915050565b7f4572726f72207768656e2063616c63756c6174696e6720616d6f756e7473206e60008201527f6565646564000000000000000000000000000000000000000000000000000000602082015250565b60006132b760258361324a565b91506132c28261325b565b604082019050919050565b600060208201905081810360008301526132e6816132aa565b9050919050565b600067ffffffffffffffff82111561330857613307612c57565b5b602082029050602081019050919050565b60008151905061332881612a59565b92915050565b600061334161333c846132ed565b612cb7565b9050808382526020820190506020840283018581111561336457613363612cfe565b5b835b8181101561338d57806133798882613319565b845260208401935050602081019050613366565b5050509392505050565b600082601f8301126133ac576133ab612c41565b5b81516133bc84826020860161332e565b91505092915050565b6000602082840312156133db576133da612a45565b5b600082015167ffffffffffffffff8111156133f9576133f8612a4a565b5b61340584828501613397565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613473601f8361324a565b915061347e8261343d565b602082019050919050565b600060208201905081810360008301526134a281613466565b9050919050565b7f616d6f756e7441446573697265642068617320746f206265206772656174657260008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b600061350560278361324a565b9150613510826134a9565b604082019050919050565b60006020820190508181036000830152613534816134f8565b9050919050565b7f616d6f756e74424465736972656420746f2073656c6c2068617320746f20626560008201527f2067726561746572207468616e20300000000000000000000000000000000000602082015250565b6000613597602f8361324a565b91506135a28261353b565b604082019050919050565b600060208201905081810360008301526135c68161358a565b9050919050565b7f616d6f756e74414d696e2068617320746f20626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b600061362960238361324a565b9150613634826135cd565b604082019050919050565b600060208201905081810360008301526136588161361c565b9050919050565b7f616d6f756e74424d696e2068617320746f20626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b60006136bb60238361324a565b91506136c68261365f565b604082019050919050565b600060208201905081810360008301526136ea816136ae565b9050919050565b7f547279696e6720746f204c5020756e737570706f7274656420746f6b656e0000600082015250565b6000613727601e8361324a565b9150613732826136f1565b602082019050919050565b600060208201905081810360008301526137568161371a565b9050919050565b7f547279696e6720746f2061646420756e737570706f72746564204c5020746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b60006137b960228361324a565b91506137c48261375d565b604082019050919050565b600060208201905081810360008301526137e8816137ac565b9050919050565b600061010082019050613805600083018b612bed565b613812602083018a612bed565b61381f6040830189612b36565b61382c6060830188612b36565b6138396080830187612b36565b61384660a0830186612b36565b61385360c0830185612bed565b61386060e0830184612b36565b9998505050505050505050565b60008060006060848603121561388657613885612a45565b5b600061389486828701613319565b93505060206138a586828701613319565b92505060406138b686828701613319565b9150509250925092565b6000602082840312156138d6576138d5612a45565b5b60006138e484828501613319565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061392360208361324a565b915061392e826138ed565b602082019050919050565b6000602082019050818103600083015261395281613916565b9050919050565b7f57686974656c697374696e6720746f6b656e206661696c656400000000000000600082015250565b600061398f60198361324a565b915061399a82613959565b602082019050919050565b600060208201905081810360008301526139be81613982565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139ff82612a4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a3157613a306139c5565b5b600182019050919050565b7f44656c697374696e6720746f6b656e206661696c656400000000000000000000600082015250565b6000613a7260168361324a565b9150613a7d82613a3c565b602082019050919050565b60006020820190508181036000830152613aa181613a65565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613b04602e8361324a565b9150613b0f82613aa8565b604082019050919050565b60006020820190508181036000830152613b3381613af7565b9050919050565b600081519050613b4981612ab7565b92915050565b600060208284031215613b6557613b64612a45565b5b6000613b7384828501613b3a565b91505092915050565b7f616d6f756e74412068617320746f2062652067726561746572207468616e2030600082015250565b6000613bb260208361324a565b9150613bbd82613b7c565b602082019050919050565b60006020820190508181036000830152613be181613ba5565b9050919050565b7f616d6f756e74422068617320746f2062652067726561746572207468616e2030600082015250565b6000613c1e60208361324a565b9150613c2982613be8565b602082019050919050565b60006020820190508181036000830152613c4d81613c11565b9050919050565b7f547279696e6720746f2072656d6f7665204c50206f6620756e737570706f727460008201527f656420746f6b656e000000000000000000000000000000000000000000000000602082015250565b6000613cb060288361324a565b9150613cbb82613c54565b604082019050919050565b60006020820190508181036000830152613cdf81613ca3565b9050919050565b7f547279696e6720746f2072656d6f766520756e737570706f72746564204c502060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b6000613d4260258361324a565b9150613d4d82613ce6565b604082019050919050565b60006020820190508181036000830152613d7181613d35565b9050919050565b600060e082019050613d8d600083018a612bed565b613d9a6020830189612bed565b613da76040830188612b36565b613db46060830187612b36565b613dc16080830186612b36565b613dce60a0830185612bed565b613ddb60c0830184612b36565b98975050505050505050565b60008060408385031215613dfe57613dfd612a45565b5b6000613e0c85828601613319565b9250506020613e1d85828601613319565b9150509250929050565b6000604082019050613e3c6000830185612bed565b613e496020830184612bed565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613eac60268361324a565b9150613eb782613e50565b604082019050919050565b60006020820190508181036000830152613edb81613e9f565b9050919050565b7f416d6f756e74206f6620746f6b656e7320746f2073656c6c2068617320746f2060008201527f62652067726561746572207468616e2030000000000000000000000000000000602082015250565b6000613f3e60318361324a565b9150613f4982613ee2565b604082019050919050565b60006020820190508181036000830152613f6d81613f31565b9050919050565b7f547279696e6720746f2062757920756e737570706f7274656420746f6b656e00600082015250565b6000613faa601f8361324a565b9150613fb582613f74565b602082019050919050565b60006020820190508181036000830152613fd981613f9d565b9050919050565b7f4e6f7420656e6f7567682066756e647320776572652070726f76696465640000600082015250565b6000614016601e8361324a565b915061402182613fe0565b602082019050919050565b6000602082019050818103600083015261404581614009565b9050919050565b600060a0820190506140616000830188612b36565b61406e6020830187612b36565b81810360408301526140808186612eba565b905061408f6060830185612bed565b61409c6080830184612b36565b9695505050505050565b60006040820190506140bb6000830185612bed565b6140c86020830184612b36565b9392505050565b60008115159050919050565b6140e4816140cf565b81146140ef57600080fd5b50565b600081519050614101816140db565b92915050565b60006020828403121561411d5761411c612a45565b5b600061412b848285016140f2565b91505092915050565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b6000614190602b8361324a565b915061419b82614134565b604082019050919050565b600060208201905081810360008301526141bf81614183565b9050919050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000614222602d8361324a565b915061422d826141c6565b604082019050919050565b6000602082019050818103600083015261425181614215565b9050919050565b7f43616e6e6f742077686974656c6973742061207a65726f206164647265737300600082015250565b600061428e601f8361324a565b915061429982614258565b602082019050919050565b600060208201905081810360008301526142bd81614281565b9050919050565b60006142cf82612a4f565b91506142da83612a4f565b92508282039050818111156142f2576142f16139c5565b5b92915050565b7f546f6b656e20616c72656164792077686974656c697374656400000000000000600082015250565b600061432e60198361324a565b9150614339826142f8565b602082019050919050565b6000602082019050818103600083015261435d81614321565b9050919050565b7f546f6b656e20776173206e6f742077686974656c6973746564206265666f7265600082015250565b600061439a60208361324a565b91506143a582614364565b602082019050919050565b600060208201905081810360008301526143c98161438d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061442c602b8361324a565b9150614437826143d0565b604082019050919050565b6000602082019050818103600083015261445b8161441f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b19e0c88463814a1d639251cf05df7f20292106fe7027ff18e8fee57f12be8da64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c806390e292fd1161007f578063e2dc85dc11610059578063e2dc85dc14610274578063e6a43905146102b2578063f2fde38b146102ef578063fe02915614610318576100cd565b806390e292fd146101f7578063946d9204146102205780639991033c14610249576100cd565b80631197e9c7146100d257806319b9fbbf1461010f5780633351733f1461014c5780634cb1e9e31461018c578063715018a6146101b55780638da5cb5b146101cc576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100f960048036038101906100f49190612ae3565b610355565b6040516101069190612b45565b60405180910390f35b34801561011b57600080fd5b5061013660048036038101906101319190612ae3565b610503565b6040516101439190612b45565b60405180910390f35b34801561015857600080fd5b50610173600480360381019061016e9190612b60565b6105da565b6040516101839493929190612bfc565b60405180910390f35b34801561019857600080fd5b506101b360048036038101906101ae9190612d9a565b610c61565b005b3480156101c157600080fd5b506101ca610d64565b005b3480156101d857600080fd5b506101e1610dec565b6040516101ee9190612de3565b60405180910390f35b34801561020357600080fd5b5061021e60048036038101906102199190612d9a565b610e16565b005b34801561022c57600080fd5b5061024760048036038101906102429190612dfe565b610f19565b005b34801561025557600080fd5b5061025e61111a565b60405161026b9190612f18565b60405180910390f35b34801561028057600080fd5b5061029b60048036038101906102969190612f3a565b6111a8565b6040516102a9929190612fb5565b60405180910390f35b3480156102be57600080fd5b506102d960048036038101906102d49190612fde565b611746565b6040516102e69190612de3565b60405180910390f35b3480156102fb57600080fd5b506103166004803603810190610311919061301e565b6117ee565b005b34801561032457600080fd5b5061033f600480360381019061033a919061304b565b6118e5565b60405161034c9190613170565b60405180910390f35b6000806103628484611c72565b9050600080606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1687846040516024016103b3929190613192565b6040516020818303038152906040527f1f00ca74000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161043d9190613233565b600060405180830381855afa9150503d8060008114610478576040519150601f19603f3d011682016040523d82523d6000602084013e61047d565b606091505b5091509150816104c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104b9906132cd565b60405180910390fd5b6000818060200190518101906104d891906133c5565b9050806000815181106104ee576104ed61340e565b5b60200260200101519450505050509392505050565b6000806105108484611c72565b9050606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f86836040518363ffffffff1660e01b815260040161056f929190613192565b600060405180830381865afa15801561058c573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105b591906133c5565b6001815181106105c8576105c761340e565b5b60200260200101519150509392505050565b60008060008060006105ea611f2a565b90506002816000015403610633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161062a90613489565b60405180910390fd5b6002816000018190555060008911610680576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106779061351b565b60405180910390fd5b600088116106c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106ba906135ad565b60405180910390fd5b60008711610706576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fd9061363f565b60405180910390fd5b60008611610749576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610740906136d1565b60405180910390fd5b610796606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168a8d73ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b6107e3606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16898c73ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b60006107ef8c8c611746565b9050606560008d73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661087d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108749061373d565b60405180910390fd5b606560008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610909576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109009061373d565b60405180910390fd5b606560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610995576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098c906137cf565b60405180910390fd5b6000606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e337008e8e8e8e8e8e30426040518963ffffffff1660e01b8152600401610a009897969594939291906137ef565b6060604051808303816000875af1158015610a1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a43919061386d565b809350819c50829d50505050610af3338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a8c9190612de3565b602060405180830381865afa158015610aa9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610acd91906138c0565b8473ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b610b97338e73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b309190612de3565b602060405180830381865afa158015610b4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7191906138c0565b8f73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b610c3b338d73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610bd49190612de3565b602060405180830381865afa158015610bf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1591906138c0565b8e73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b818b8b839650965096509650505060018160000181905550509650965096509692505050565b610c696121c3565b73ffffffffffffffffffffffffffffffffffffffff16610c87610dec565b73ffffffffffffffffffffffffffffffffffffffff1614610cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cd490613939565b60405180910390fd5b60005b8151811015610d6057610d0e828281518110610cff57610cfe61340e565b5b602002602001015160016121cb565b610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906139a5565b60405180910390fd5b8080610d58906139f4565b915050610ce0565b5050565b610d6c6121c3565b73ffffffffffffffffffffffffffffffffffffffff16610d8a610dec565b73ffffffffffffffffffffffffffffffffffffffff1614610de0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd790613939565b60405180910390fd5b610dea6000612441565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610e1e6121c3565b73ffffffffffffffffffffffffffffffffffffffff16610e3c610dec565b73ffffffffffffffffffffffffffffffffffffffff1614610e92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8990613939565b60405180910390fd5b60005b8151811015610f1557610ec3828281518110610eb457610eb361340e565b5b60200260200101516001612507565b610f02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef990613a88565b60405180910390fd5b8080610f0d906139f4565b915050610e95565b5050565b600060019054906101000a900460ff16610f415760008054906101000a900460ff1615610f4a565b610f49612661565b5b610f89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8090613b1a565b60405180910390fd5b60008060019054906101000a900460ff161590508015610fd9576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82606960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611087573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ab9190613b4f565b606a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506110f482612672565b80156111155760008060016101000a81548160ff0219169083151502179055505b505050565b6060606780548060200260200160405190810160405280929190818152602001828054801561119e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611154575b5050505050905090565b60008060006111b5611f2a565b905060028160000154036111fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111f590613489565b60405180910390fd5b600281600001819055506000851161124b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124290613bc8565b60405180910390fd5b6000841161128e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128590613c34565b60405180910390fd5b600061129a8989611746565b90506112e9606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16888373ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b606560008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136c90613cc6565b60405180910390fd5b606560008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611401576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f890613cc6565b60405180910390fd5b606560008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1661148d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148490613d58565b60405180910390fd5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663baa2abde8a8a8a8a8a30426040518863ffffffff1660e01b81526004016114f49796959493929190613d78565b60408051808303816000875af1158015611512573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115369190613de7565b80965081975050506115e2338273ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161157b9190612de3565b602060405180830381865afa158015611598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115bc91906138c0565b8373ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b611686338a73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161161f9190612de3565b602060405180830381865afa15801561163c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061166091906138c0565b8b73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b61172a338973ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016116c39190612de3565b602060405180830381865afa1580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061170491906138c0565b8a73ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b8585935093505060018160000181905550509550959350505050565b6000606a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e6a4390584846040518363ffffffff1660e01b81526004016117a5929190613e27565b602060405180830381865afa1580156117c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117e69190613b4f565b905092915050565b6117f66121c3565b73ffffffffffffffffffffffffffffffffffffffff16611814610dec565b73ffffffffffffffffffffffffffffffffffffffff161461186a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186190613939565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036118d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d090613ec2565b60405180910390fd5b6118e281612441565b50565b606060006118f1611f2a565b9050600281600001540361193a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193190613489565b60405180910390fd5b6002816000018190555060008411611987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197e90613f54565b60405180910390fd5b6119d5606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008873ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b611a22606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16858873ffffffffffffffffffffffffffffffffffffffff16611f579092919063ffffffff16565b606560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16611aae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa590613fc0565b60405180910390fd5b6000831115611b0557611ac2838787610355565b841015611b04576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611afb9061402c565b60405180910390fd5b5b606960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed17398585611b4f8a8a611c72565b33426040518663ffffffff1660e01b8152600401611b7195949392919061404c565b6000604051808303816000875af1158015611b90573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190611bb991906133c5565b9150611c5f338773ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bf89190612de3565b602060405180830381865afa158015611c15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3991906138c0565b8873ffffffffffffffffffffffffffffffffffffffff1661208d9092919063ffffffff16565b6001816000018190555050949350505050565b606080611c7d612750565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614158015611ceb5750611cbb612750565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b15611e3557600367ffffffffffffffff811115611d0b57611d0a612c57565b5b604051908082528060200260200182016040528015611d395781602001602082028036833780820191505090505b5090508381600081518110611d5157611d5061340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611d93612750565b81600181518110611da757611da661340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600281518110611df657611df561340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050611f20565b600267ffffffffffffffff811115611e5057611e4f612c57565b5b604051908082528060200260200182016040528015611e7e5781602001602082028036833780820191505090505b5090508381600081518110611e9657611e9561340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110611ee557611ee461340e565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250505b8091505092915050565b6000807f1c85eba10a4cf2d29c83fc15f97931886b9fd3caeb70d8c377aeedc58b919e3b90508091505090565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b38585604051602401611f899291906140a6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611fd79190613233565b6000604051808303816000865af19150503d8060008114612014576040519150601f19603f3d011682016040523d82523d6000602084013e612019565b606091505b509150915081801561204757506000815114806120465750808060200190518101906120459190614107565b5b5b612086576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161207d906141a6565b60405180910390fd5b5050505050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb85856040516024016120bf9291906140a6565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161210d9190613233565b6000604051808303816000865af19150503d806000811461214a576040519150601f19603f3d011682016040523d82523d6000602084013e61214f565b606091505b509150915081801561217d575060008151148061217c57508080602001905181019061217b9190614107565b5b5b6121bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121b390614238565b60405180910390fd5b5050505050565b600033905090565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361223b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612232906142a4565b60405180910390fd5b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166123f5576067839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160678054905061230191906142c4565b606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506001606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f25c34e2a97ecce6a643e2876ba21f43208b744c0a1f017fe999208638c7fecdc84426040516123e49291906140a6565b60405180910390a26001905061243b565b8115612436576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161242d90614344565b60405180910390fd5b600090505b92915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612615576125648361275f565b6000606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f8b0c6321e5164295041a4799b97bc74477465912d8e906efc761ff81bf530b2784426040516126049291906140a6565b60405180910390a26001905061265b565b8115612656576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161264d906143b0565b60405180910390fd5b600090505b92915050565b600061266c30612942565b15905090565b600060019054906101000a900460ff166126c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126b890614442565b60405180910390fd5b60005b8151811015612744576126f28282815181106126e3576126e261340e565b5b602002602001015160006121cb565b612731576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612728906139a5565b60405180910390fd5b808061273c906139f4565b9150506126c4565b5061274d612965565b50565b600061275a6129be565b905090565b6000606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060016067805490506127b591906142c4565b81146128b2576000606760016067805490506127d191906142c4565b815481106127e2576127e161340e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081606660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080606783815481106128685761286761340e565b5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505b60678054806128c4576128c3614462565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590556000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600060019054906101000a900460ff166129b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129ab90614442565b60405180910390fd5b6129bc6129da565b565b600073b31f66aa3c1e785363f0875a1b74e27b85fd66c7905090565b600060019054906101000a900460ff16612a29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a2090614442565b60405180910390fd5b612a39612a346121c3565b612441565b565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612a6281612a4f565b8114612a6d57600080fd5b50565b600081359050612a7f81612a59565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612ab082612a85565b9050919050565b612ac081612aa5565b8114612acb57600080fd5b50565b600081359050612add81612ab7565b92915050565b600080600060608486031215612afc57612afb612a45565b5b6000612b0a86828701612a70565b9350506020612b1b86828701612ace565b9250506040612b2c86828701612ace565b9150509250925092565b612b3f81612a4f565b82525050565b6000602082019050612b5a6000830184612b36565b92915050565b60008060008060008060c08789031215612b7d57612b7c612a45565b5b6000612b8b89828a01612ace565b9650506020612b9c89828a01612ace565b9550506040612bad89828a01612a70565b9450506060612bbe89828a01612a70565b9350506080612bcf89828a01612a70565b92505060a0612be089828a01612a70565b9150509295509295509295565b612bf681612aa5565b82525050565b6000608082019050612c116000830187612bed565b612c1e6020830186612b36565b612c2b6040830185612b36565b612c386060830184612b36565b95945050505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c8f82612c46565b810181811067ffffffffffffffff82111715612cae57612cad612c57565b5b80604052505050565b6000612cc1612a3b565b9050612ccd8282612c86565b919050565b600067ffffffffffffffff821115612ced57612cec612c57565b5b602082029050602081019050919050565b600080fd5b6000612d16612d1184612cd2565b612cb7565b90508083825260208201905060208402830185811115612d3957612d38612cfe565b5b835b81811015612d625780612d4e8882612ace565b845260208401935050602081019050612d3b565b5050509392505050565b600082601f830112612d8157612d80612c41565b5b8135612d91848260208601612d03565b91505092915050565b600060208284031215612db057612daf612a45565b5b600082013567ffffffffffffffff811115612dce57612dcd612a4a565b5b612dda84828501612d6c565b91505092915050565b6000602082019050612df86000830184612bed565b92915050565b60008060408385031215612e1557612e14612a45565b5b6000612e2385828601612ace565b925050602083013567ffffffffffffffff811115612e4457612e43612a4a565b5b612e5085828601612d6c565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612e8f81612aa5565b82525050565b6000612ea18383612e86565b60208301905092915050565b6000602082019050919050565b6000612ec582612e5a565b612ecf8185612e65565b9350612eda83612e76565b8060005b83811015612f0b578151612ef28882612e95565b9750612efd83612ead565b925050600181019050612ede565b5085935050505092915050565b60006020820190508181036000830152612f328184612eba565b905092915050565b600080600080600060a08688031215612f5657612f55612a45565b5b6000612f6488828901612ace565b9550506020612f7588828901612ace565b9450506040612f8688828901612a70565b9350506060612f9788828901612a70565b9250506080612fa888828901612a70565b9150509295509295909350565b6000604082019050612fca6000830185612b36565b612fd76020830184612b36565b9392505050565b60008060408385031215612ff557612ff4612a45565b5b600061300385828601612ace565b925050602061301485828601612ace565b9150509250929050565b60006020828403121561303457613033612a45565b5b600061304284828501612ace565b91505092915050565b6000806000806080858703121561306557613064612a45565b5b600061307387828801612ace565b945050602061308487828801612ace565b935050604061309587828801612a70565b92505060606130a687828801612a70565b91505092959194509250565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6130e781612a4f565b82525050565b60006130f983836130de565b60208301905092915050565b6000602082019050919050565b600061311d826130b2565b61312781856130bd565b9350613132836130ce565b8060005b8381101561316357815161314a88826130ed565b975061315583613105565b925050600181019050613136565b5085935050505092915050565b6000602082019050818103600083015261318a8184613112565b905092915050565b60006040820190506131a76000830185612b36565b81810360208301526131b98184612eba565b90509392505050565b600081519050919050565b600081905092915050565b60005b838110156131f65780820151818401526020810190506131db565b60008484015250505050565b600061320d826131c2565b61321781856131cd565b93506132278185602086016131d8565b80840191505092915050565b600061323f8284613202565b915081905092915050565b600082825260208201905092915050565b7f4572726f72207768656e2063616c63756c6174696e6720616d6f756e7473206e60008201527f6565646564000000000000000000000000000000000000000000000000000000602082015250565b60006132b760258361324a565b91506132c28261325b565b604082019050919050565b600060208201905081810360008301526132e6816132aa565b9050919050565b600067ffffffffffffffff82111561330857613307612c57565b5b602082029050602081019050919050565b60008151905061332881612a59565b92915050565b600061334161333c846132ed565b612cb7565b9050808382526020820190506020840283018581111561336457613363612cfe565b5b835b8181101561338d57806133798882613319565b845260208401935050602081019050613366565b5050509392505050565b600082601f8301126133ac576133ab612c41565b5b81516133bc84826020860161332e565b91505092915050565b6000602082840312156133db576133da612a45565b5b600082015167ffffffffffffffff8111156133f9576133f8612a4a565b5b61340584828501613397565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000613473601f8361324a565b915061347e8261343d565b602082019050919050565b600060208201905081810360008301526134a281613466565b9050919050565b7f616d6f756e7441446573697265642068617320746f206265206772656174657260008201527f207468616e203000000000000000000000000000000000000000000000000000602082015250565b600061350560278361324a565b9150613510826134a9565b604082019050919050565b60006020820190508181036000830152613534816134f8565b9050919050565b7f616d6f756e74424465736972656420746f2073656c6c2068617320746f20626560008201527f2067726561746572207468616e20300000000000000000000000000000000000602082015250565b6000613597602f8361324a565b91506135a28261353b565b604082019050919050565b600060208201905081810360008301526135c68161358a565b9050919050565b7f616d6f756e74414d696e2068617320746f20626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b600061362960238361324a565b9150613634826135cd565b604082019050919050565b600060208201905081810360008301526136588161361c565b9050919050565b7f616d6f756e74424d696e2068617320746f20626520677265617465722074686160008201527f6e20300000000000000000000000000000000000000000000000000000000000602082015250565b60006136bb60238361324a565b91506136c68261365f565b604082019050919050565b600060208201905081810360008301526136ea816136ae565b9050919050565b7f547279696e6720746f204c5020756e737570706f7274656420746f6b656e0000600082015250565b6000613727601e8361324a565b9150613732826136f1565b602082019050919050565b600060208201905081810360008301526137568161371a565b9050919050565b7f547279696e6720746f2061646420756e737570706f72746564204c5020746f6b60008201527f656e000000000000000000000000000000000000000000000000000000000000602082015250565b60006137b960228361324a565b91506137c48261375d565b604082019050919050565b600060208201905081810360008301526137e8816137ac565b9050919050565b600061010082019050613805600083018b612bed565b613812602083018a612bed565b61381f6040830189612b36565b61382c6060830188612b36565b6138396080830187612b36565b61384660a0830186612b36565b61385360c0830185612bed565b61386060e0830184612b36565b9998505050505050505050565b60008060006060848603121561388657613885612a45565b5b600061389486828701613319565b93505060206138a586828701613319565b92505060406138b686828701613319565b9150509250925092565b6000602082840312156138d6576138d5612a45565b5b60006138e484828501613319565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061392360208361324a565b915061392e826138ed565b602082019050919050565b6000602082019050818103600083015261395281613916565b9050919050565b7f57686974656c697374696e6720746f6b656e206661696c656400000000000000600082015250565b600061398f60198361324a565b915061399a82613959565b602082019050919050565b600060208201905081810360008301526139be81613982565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006139ff82612a4f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a3157613a306139c5565b5b600182019050919050565b7f44656c697374696e6720746f6b656e206661696c656400000000000000000000600082015250565b6000613a7260168361324a565b9150613a7d82613a3c565b602082019050919050565b60006020820190508181036000830152613aa181613a65565b9050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000613b04602e8361324a565b9150613b0f82613aa8565b604082019050919050565b60006020820190508181036000830152613b3381613af7565b9050919050565b600081519050613b4981612ab7565b92915050565b600060208284031215613b6557613b64612a45565b5b6000613b7384828501613b3a565b91505092915050565b7f616d6f756e74412068617320746f2062652067726561746572207468616e2030600082015250565b6000613bb260208361324a565b9150613bbd82613b7c565b602082019050919050565b60006020820190508181036000830152613be181613ba5565b9050919050565b7f616d6f756e74422068617320746f2062652067726561746572207468616e2030600082015250565b6000613c1e60208361324a565b9150613c2982613be8565b602082019050919050565b60006020820190508181036000830152613c4d81613c11565b9050919050565b7f547279696e6720746f2072656d6f7665204c50206f6620756e737570706f727460008201527f656420746f6b656e000000000000000000000000000000000000000000000000602082015250565b6000613cb060288361324a565b9150613cbb82613c54565b604082019050919050565b60006020820190508181036000830152613cdf81613ca3565b9050919050565b7f547279696e6720746f2072656d6f766520756e737570706f72746564204c502060008201527f746f6b656e000000000000000000000000000000000000000000000000000000602082015250565b6000613d4260258361324a565b9150613d4d82613ce6565b604082019050919050565b60006020820190508181036000830152613d7181613d35565b9050919050565b600060e082019050613d8d600083018a612bed565b613d9a6020830189612bed565b613da76040830188612b36565b613db46060830187612b36565b613dc16080830186612b36565b613dce60a0830185612bed565b613ddb60c0830184612b36565b98975050505050505050565b60008060408385031215613dfe57613dfd612a45565b5b6000613e0c85828601613319565b9250506020613e1d85828601613319565b9150509250929050565b6000604082019050613e3c6000830185612bed565b613e496020830184612bed565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000613eac60268361324a565b9150613eb782613e50565b604082019050919050565b60006020820190508181036000830152613edb81613e9f565b9050919050565b7f416d6f756e74206f6620746f6b656e7320746f2073656c6c2068617320746f2060008201527f62652067726561746572207468616e2030000000000000000000000000000000602082015250565b6000613f3e60318361324a565b9150613f4982613ee2565b604082019050919050565b60006020820190508181036000830152613f6d81613f31565b9050919050565b7f547279696e6720746f2062757920756e737570706f7274656420746f6b656e00600082015250565b6000613faa601f8361324a565b9150613fb582613f74565b602082019050919050565b60006020820190508181036000830152613fd981613f9d565b9050919050565b7f4e6f7420656e6f7567682066756e647320776572652070726f76696465640000600082015250565b6000614016601e8361324a565b915061402182613fe0565b602082019050919050565b6000602082019050818103600083015261404581614009565b9050919050565b600060a0820190506140616000830188612b36565b61406e6020830187612b36565b81810360408301526140808186612eba565b905061408f6060830185612bed565b61409c6080830184612b36565b9695505050505050565b60006040820190506140bb6000830185612bed565b6140c86020830184612b36565b9392505050565b60008115159050919050565b6140e4816140cf565b81146140ef57600080fd5b50565b600081519050614101816140db565b92915050565b60006020828403121561411d5761411c612a45565b5b600061412b848285016140f2565b91505092915050565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b6000614190602b8361324a565b915061419b82614134565b604082019050919050565b600060208201905081810360008301526141bf81614183565b9050919050565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b6000614222602d8361324a565b915061422d826141c6565b604082019050919050565b6000602082019050818103600083015261425181614215565b9050919050565b7f43616e6e6f742077686974656c6973742061207a65726f206164647265737300600082015250565b600061428e601f8361324a565b915061429982614258565b602082019050919050565b600060208201905081810360008301526142bd81614281565b9050919050565b60006142cf82612a4f565b91506142da83612a4f565b92508282039050818111156142f2576142f16139c5565b5b92915050565b7f546f6b656e20616c72656164792077686974656c697374656400000000000000600082015250565b600061432e60198361324a565b9150614339826142f8565b602082019050919050565b6000602082019050818103600083015261435d81614321565b9050919050565b7f546f6b656e20776173206e6f742077686974656c6973746564206265666f7265600082015250565b600061439a60208361324a565b91506143a582614364565b602082019050919050565b600060208201905081810360008301526143c98161438d565b9050919050565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b600061442c602b8361324a565b9150614437826143d0565b604082019050919050565b6000602082019050818103600083015261445b8161441f565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220b19e0c88463814a1d639251cf05df7f20292106fe7027ff18e8fee57f12be8da64736f6c63430008110033",
  "devdoc": {
    "details": "Contract allows user to swap ERC20 tokens on DEX This implementation uses the Pangolin DEX",
    "kind": "dev",
    "methods": {
      "getPair(address,address)": {
        "params": {
          "_token1": "ERC20 token's address",
          "_token2": "ERC20 token's address*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PangolinIntermediary",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getMaximumTokensReceived(uint256,address,address)": {
        "notice": "Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.*"
      },
      "getMinimumTokensNeeded(uint256,address,address)": {
        "notice": "Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken. Can revert due to insufficient liquidity*"
      },
      "getPair(address,address)": {
        "notice": "Returns an address of LP token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 481,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2464,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "isTokenWhitelisted",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2468,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "tokenPositionInList",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2471,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "whitelistedTokensList",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2412,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_status",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 3620,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "router",
        "offset": 0,
        "slot": "105",
        "type": "t_contract(IUniswapV2Router01)2137"
      },
      {
        "astId": 3623,
        "contract": "contracts/integrations/avalanche/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "factory",
        "offset": 0,
        "slot": "106",
        "type": "t_contract(IUniswapV2Factory)1829"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Factory)1829": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Factory",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router01)2137": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router01",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}