# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: deltaprime-cloud
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, "dev"}
  region: us-east-1
  environment:
    SPRIME_AVA_TABLE: sprime-ava-${opt:stage, "dev"}
    SPRIME_ARB_TABLE: sprime-arb-${opt:stage, "dev"}
    LOAN_AVA_TABLE: loans-ava-${opt:stage, "dev"}
    LOAN_ARB_TABLE: loans-arb-${opt:stage, "dev"}
    APY_TABLE: apys-${opt:stage, "dev"}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: "*"
  # you can add statements to the Lambda function's IAM Role here

# you can define service wide environment variables here
#  environment:
#    variable1: value1

functions:
  sPrimeCalculatorAva:
    handler: sPrime/sPrimeCalculatorAva.handler
    memorySize: 1024
    timeout: 600
    description: Calculate sPRIME Value for depositors on Avalanche.
    events:
      - schedule: rate(5 minutes)
  sPrimeCalculatorArb:
    handler: sPrime/sPrimeCalculatorArb.handler
    memorySize: 1024
    timeout: 600
    description: Calculate sPRIME Value for depositors on Arbitrum.
    events:
      - schedule: rate(5 minutes)
  sPrimeAggregator:
    handler: apis/sPrimeValue.sPrimeAggregator
    memorySize: 512
    description: Fetch sPRIME value for a depositor
    events:
      - httpApi:
          method: get
          path: /sprime/{id}
  levelTvlAggregator:
    handler: aggregators/apy.levelTvlAggregator
    memorySize: 512
    timeout: 600
    description: Fetch TVL from Level Finance.
    events:
      - schedule: rate(2 minutes)
  levelTvlApi:
    handler: apis/apy.levelTvlApi
    memorySize: 512
    description: Return TVL of Level pool
    events:
      - httpApi:
          method: get
          path: /levelTvl/{id}
  glpAprAggregator:
    handler: aggregators/apy.glpAprAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch GLP Apr from GMX website.
    events:
      - schedule: rate(2 minutes)
  vectorApyAggregator:
    handler: aggregators/apy.vectorApyAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch auto-compounding APYs from Vector website.
    events:
      - schedule: rate(2 minutes)
  lpAndFarmApyAggregator:
    handler: aggregators/apy.lpAndFarmApyAggregator
    memorySize: 512
    timeout: 120
    description: Fetch LP and Farm APYs from Pangolin and TraderJoe V1
    events:
      - schedule: rate(2 minutes)
  steakHutApyAggregator:
    handler: aggregators/apy.steakHutApyAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch APYs from StackHut website.
    events:
      - schedule: rate(2 minutes)
  traderJoeApyAggregator:
    handler: aggregators/apy.traderJoeApyAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch APYs from TraderJoe website.
    events:
      - schedule: rate(10 minutes)
  sushiApyAggregator:
    handler: aggregators/apy.sushiApyAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch APYs from Sushi website.
    events:
      - schedule: rate(2 minutes)
  beefyApyAggregator:
    handler: aggregators/apy.beefyApyAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch APYs from Beefy website.
    events:
      - schedule: rate(3 minutes)
  levelApyAggregator:
    handler: aggregators/apy.levelApyAggregator
    memorySize: 2048
    timeout: 300
    description: Fetch APYs from Level website.
    events:
      - schedule: rate(2 minutes)
  # loanAggregatorAva:
  #   handler: aggregators/loan.loanAggregatorAva
  #   memorySize: 1024
  #   timeout: 600
  #   description: upload loan addresses on Avalanche
  #   events:
  #     - schedule: rate(5 minutes)
  # loanAggregatorArb:
  #   handler: aggregators/loan.loanAggregatorArb
  #   memorySize: 1024
  #   timeout: 600
  #   description: upload loan addresses on Arbitrum
  #   events:
  #     - schedule: rate(5 minutes)

resources:
  Resources:
    sPrimeValuesAvaTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.SPRIME_AVA_TABLE}
    sPrimeValuesArbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.SPRIME_ARB_TABLE}
    # loansAvaTable:
    #   Type: AWS::DynamoDB::Table
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: "id"
    #         AttributeType: "S"
    #     KeySchema:
    #       -
    #         AttributeName: "id"
    #         KeyType: "HASH"
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5
    #     StreamSpecification:
    #       StreamViewType: "NEW_AND_OLD_IMAGES"
    #     TableName: ${self:provider.environment.LOAN_AVA_TABLE}
    # loansArbTable:
    #   Type: AWS::DynamoDB::Table
    #   DeletionPolicy: Retain
    #   Properties:
    #     AttributeDefinitions:
    #       -
    #         AttributeName: "id"
    #         AttributeType: "S"
    #     KeySchema:
    #       -
    #         AttributeName: "id"
    #         KeyType: "HASH"
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 5
    #       WriteCapacityUnits: 5
    #     StreamSpecification:
    #       StreamViewType: "NEW_AND_OLD_IMAGES"
    #     TableName: ${self:provider.environment.LOAN_ARB_TABLE}
    ApysTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.APY_TABLE}

