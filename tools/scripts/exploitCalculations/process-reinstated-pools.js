import {createHttpLink} from "apollo-link-http";
import fetch from "node-fetch";
import {ApolloClient} from "apollo-client";
import {InMemoryCache} from "apollo-cache-inmemory";
import fs from "fs";
const key = fs.readFileSync(`./.secrets/yieldyak/subgraph`).toString().trim();
const ethers = require('ethers');
import POOL from '../../../artifacts/contracts/WrappedNativeTokenPool.sol/WrappedNativeTokenPool.json';

const gql = require("graphql-tag");
const jsonHistoricalRpc = "https://nd-767-190-280.p2pify.com/8d546b2f3519965f0f1cb4332abe96b3";

const YIELD_YAK_VAULTS = [
    "0x5847EB0aC310845510880c6871E0cE6d8b0f57Fc",
    "0x3B85d87104091FAC2940C3d5BDA44748c5fEA946",
    "0x2Fc8e171b2688832b41881aAf3Da4D180bDa1F33",
    "0xf0a020e34F3478F663c8F8fcBDD7f1B5957403EA",
    "0xf5802415161A7a331e44EB63D52514F365232ed8"
]

const VAULT_TO_TOKEN = {
    "0x5847EB0aC310845510880c6871E0cE6d8b0f57Fc": "USDC",
    "0x3B85d87104091FAC2940C3d5BDA44748c5fEA946": "BTC",
    "0x2Fc8e171b2688832b41881aAf3Da4D180bDa1F33": "WETH",
    "0xf0a020e34F3478F663c8F8fcBDD7f1B5957403EA": "DAI",
    "0xf5802415161A7a331e44EB63D52514F365232ed8": "ARB"
}

const TOKEN_TO_PRICE = {
    USDC: 1,
    BTC: 58672.48,
    WETH: 2310,
    ARB: 0.5117,
    DAI: 1
}


const R_TOKEN_RATIO = 1.4;


const DELTAPRIME_POOLS = {
    "USDC": {
        decimals: 6,
        reimbursedFromStabilityPool: 164191.9862,
        address: "0x8FE3842e0B7472a57f2A2D56cF6bCe08517A1De0"
    },
    "DAI": {
        decimals: 18,
        reimbursedFromStabilityPool: 0,
        address: "0xd5E8f691756c3d7b86FD8A89A06497D38D362540"
    },
    "BTC": {
        decimals: 8,
        reimbursedFromStabilityPool: 0,
        address: "0x5CdE36c23f0909960BA4D6E8713257C6191f8C35"
    },
    "ARB": {
        decimals: 18,
        reimbursedFromStabilityPool: 235744.0044,
        address: "0x2B8C610F3fC6F883817637d15514293565C3d08A"
    },
    "WETH": {
        decimals: 18,
        reimbursedFromStabilityPool: 188.868323,
        address: "0x0BeBEB5679115f143772CfD97359BBcc393d46b3"
    },
}

const YIELD_YAK_SUBGRAPH = `https://gateway.thegraph.com/api/${key}/subgraphs/id/ErmY7qLRQVTWgsTxAxz1xYqLU985nvnRXkTEjcHUxyLM`;

const BLOCK_NUMBER = 254085962;

async function processDepositors(vaultAddress, blockNumber, rTokens) {

    console.log(`\n\nvaultAddress: ${vaultAddress}, blockNumber: ${blockNumber}`)

    const pairQuery = gql(`
    {
      strategies(
        block: {number: ${blockNumber}}
        first: 10
        where: {id: "${vaultAddress}"}
      ) {
        id
        name
        depositTokenBalance
        totalSupply
        users(
          first: 1000
          orderBy: yrtBalance
          orderDirection: desc
          where: {yrtBalance_not: "0"}
        ) {
          user {
            id
          }
          yrtBalance
        }
      }
    }
`);

    const httpLink = createHttpLink({
        uri: YIELD_YAK_SUBGRAPH,
        fetch: fetch
    });

    const client = new ApolloClient({
        link: httpLink,
        cache: new InMemoryCache()
    });

    const response = await client.query({query: pairQuery});

    const users = response.data.strategies[0].users;

    const json = {};

    const symbol = VAULT_TO_TOKEN[vaultAddress];
    const camelizedSymbol = camelize(symbol);
    const poolInfo = DELTAPRIME_POOLS[symbol];
    const decimals = poolInfo.decimals;

    for (let user of users) {
        json[user.user.id] = user.yrtBalance / 10 ** decimals;
    }

    fs.writeFileSync(`tools/scripts/exploitCalculations/yieldYakDeposits-${camelizedSymbol}PoolTUP-block-${BLOCK_NUMBER}.json`, JSON.stringify(json));

    const correctedDeposits = JSON.parse(fs.readFileSync(`tools/scripts/exploitCalculations/originalDeposits-${camelizedSymbol}PoolTUP-block-${BLOCK_NUMBER}.json`));

    for (let [address, value] of Object.entries(correctedDeposits.deposits)) {
        correctedDeposits.deposits[address] = Number(value);
    }

    let vaultTokenBalance = correctedDeposits.deposits[vaultAddress.toLowerCase()];
    let poolInitialSumOfDeposits = Object.values(correctedDeposits.deposits).reduce((sum, deposit) => sum + deposit, 0)

    const yrtTotalSupply = Number(response.data.strategies[0].totalSupply) / 10**decimals;
    delete correctedDeposits.deposits[vaultAddress.toLowerCase()];

    // const ratio = Number(response.data.strategies[0].depositTokenBalance) / Number(response.data.strategies[0].totalSupply);
    const ratio = Number(vaultTokenBalance) / yrtTotalSupply;

    if (Object.entries(json) > 1000) {
        throw Error('Too many Yield yak deposits.')
    }

    let sumOfUsers = 0;
    let sumOfYY = 0;
    for (let [user, yyDeposit] of Object.entries(json)) {
        const usdc = ratio * yyDeposit;
        correctedDeposits.deposits[user] = correctedDeposits.deposits[user] ? correctedDeposits.deposits[user] + usdc : usdc;

        sumOfUsers += usdc;
        sumOfYY += yyDeposit;
    }

    let poolCorrectedSumOfDeposits = Object.values(correctedDeposits.deposits).reduce((sum, deposit) => sum + Number(deposit), 0)

    fs.writeFileSync(`tools/scripts/exploitCalculations/adjustedForYieldYakDeposits-${camelizedSymbol}PoolTUP-block-${BLOCK_NUMBER}.json`, JSON.stringify(correctedDeposits));

    console.log(`Check #1 for ${camelizedSymbol}, Vault: ${vaultTokenBalance}, Users: ${sumOfUsers}, Passed: ${compareNumbers(vaultTokenBalance, sumOfUsers, 0.00001)}`)
    console.log(`Check #2 for ${camelizedSymbol}, Pool initial: ${poolInitialSumOfDeposits}, Pool corrected: ${poolCorrectedSumOfDeposits}, Passed: ${compareNumbers(poolInitialSumOfDeposits, poolCorrectedSumOfDeposits, 0.00001)}`)

    const borrows = JSON.parse(fs.readFileSync(`tools/scripts/exploitCalculations/originalBorrows-${camelizedSymbol}PoolTUP-block-${BLOCK_NUMBER}.json`));

    const sumOfBorrows = Object.values(borrows.borrows).reduce((sum, borrow) => sum + Number(borrow), 0);

    const totalReimbursement = sumOfBorrows + poolInfo.reimbursedFromStabilityPool;

    console.log(`totalReimbursement: ${totalReimbursement}, sumOfBorrows: ${sumOfBorrows}, fromSP: ${poolInfo.reimbursedFromStabilityPool}`)

    const reimbursementRatio = totalReimbursement / poolCorrectedSumOfDeposits;

    const reimbursedDeposits = {};

    for (let [address, value] of Object.entries(correctedDeposits.deposits)) {
        reimbursedDeposits[address] = (reimbursementRatio * correctedDeposits.deposits[address]).toFixed(decimals);
    }

    fs.writeFileSync(`tools/scripts/exploitCalculations/reimbursedDeposits-${camelizedSymbol}PoolTUP-block-${BLOCK_NUMBER}.json`, JSON.stringify(correctedDeposits));


    for (let [address, value] of Object.entries(correctedDeposits.deposits)) {
        const toReimburse = correctedDeposits.deposits[address] - reimbursedDeposits[address];
        const toReimburseInUsd = toReimburse * TOKEN_TO_PRICE[symbol];
        console.log('toReimburse: ', toReimburse)
        console.log('toReimburseInUsd: ', toReimburseInUsd)
        const rTokensFromThisPool = R_TOKEN_RATIO * toReimburseInUsd;
        rTokens[address] = rTokens[address] ? rTokens[address] + rTokensFromThisPool : rTokensFromThisPool;
        console.log('rTokens[address]: ', rTokens[address])

    }
}

async function calculateFinalDeposits() {
    const rTokens = {};

    for (let vault of YIELD_YAK_VAULTS) {
        await processDepositors(vault, BLOCK_NUMBER, rTokens);
    }

    fs.writeFileSync(`tools/scripts/exploitCalculations/rTokens.json`, JSON.stringify(rTokens));

    const totalRTokens = Object.values(rTokens).reduce((sum, tokens) => sum + Number(tokens), 0);

    console.log(`Total rTokens = ${totalRTokens}`)
}

function camelize(str) {
    return str.replace(/(?:^\w|[A-Z]|\b\w)/g, function(word, index) {
        return index === 0 ? word.toUpperCase() : word.toLowerCase();
    }).replace(/\s+/g, '');
}

function compareNumbers(n1, n2, precision) {
    return Math.abs(n1 - n2) <= precision;
}

async function getPoolHistoricalInterestRate(poolName, poolAddress, blockNumber){
    const provider = new ethers.providers.JsonRpcProvider(jsonHistoricalRpc);
    const poolContract = new ethers.Contract(poolAddress, POOL.abi, provider);
    let historicalRate = await poolContract.getBorrowingRate({blockTag: blockNumber});
    historicalRate = ethers.utils.formatUnits(historicalRate, 18);

    console.log(`Name: ${poolName}, Borrowing interest rate: ${historicalRate}`);

    return historicalRate;
}


async function getHistoricalRates() {
    for (let [symbol, data] of Object.entries(DELTAPRIME_POOLS)) {
        await getPoolHistoricalInterestRate(symbol, data.address, 253980000)
    }
}

// getHistoricalRates();
calculateFinalDeposits()
