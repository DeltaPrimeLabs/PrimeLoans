import {createHttpLink} from "apollo-link-http";
import fetch from "node-fetch";
import {ApolloClient} from "apollo-client";
import {InMemoryCache} from "apollo-cache-inmemory";
import fs from "fs";
const key = fs.readFileSync(`./.secrets/yieldyak/subgraph`).toString().trim();
const ethers = require('ethers');
const parseUnits = ethers.utils.parseUnits;



const TOKEN_TO_PRICE = {
    USDC: 1,
    USDT: 1,
    BTC: 81191.12,
    ETH: 3144.41,
    AVAX: 31.20,
    ARB: 0.622695,
    DAI: 1
}

const POOLS_AVALANCHE = [
    { symbol: 'AVAX', address: '0xD26E504fc642B96751fD55D3E68AF295806542f5', decimals: 18},
    { symbol: 'USDC', address: '0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b', decimals: 6},
    { symbol: 'BTC', address: '0x475589b0Ed87591A893Df42EC6076d2499bB63d0', decimals: 8},
    { symbol: 'ETH', address: '0xD7fEB276ba254cD9b34804A986CE9a8C3E359148', decimals: 18},
    { symbol: 'USDT', address: '0xd222e10D7Fe6B7f9608F14A8B5Cf703c74eFBcA1', decimals: 6}
]

const POOLS_ARBITRUM = [
    { symbol: 'USDC', address: '0x5f3DB5899a7937c9ABF0A5Fc91718E6F813e4195', decimals: 6},
    { symbol: 'DAI', address: '0x7Dcf909B1E4b280bEe72C6A69b3a7Ed8adfb63f0', decimals: 18},
    { symbol: 'BTC', address: '0x275Caecf5542bF4a3CF64aa78a3f57dc9939675C', decimals: 8},
    { symbol: 'ARB', address: '0x14c82CFc2c651700a66aBDd7dC375c9CeEFDDD72', decimals: 18},
    { symbol: 'ETH', address: '0x2E2fE9Bc7904649b65B6373bAF40F9e2E0b883c5', decimals: 18}
]

const AVALANCHE_POOL_LOSSES = {
    AVAX: ,
    USDC: ,
    BTC: ,
    ETH: ,
    USDT:
};

const ARBITRUM_POOL_LOSSES = {
    USDC: 	,
    DAI: 	,
    BTC: 	,
    ARB: 	,
    ETH:
};

const R_TOKEN_RATIO = 1.4;

async function calculateFinalDeposits(pools, network) {
    for (let pool of pools) {
        let yyCorrectedWallets = [];
        let yyCorrectedBalances = [];
        let mintedBalances = {};
        let correctedBalances = {};
        let finalBalances = {};

        mintedBalances = JSON.parse(fs.readFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/${network}/${pool.symbol}.json`));
        correctedBalances = JSON.parse(fs.readFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/corrected/${network}/${pool.symbol}.json`));

        if (network == 'avalanche' && (pool.symbol == 'AVAX' || pool.symbol == 'USDC')) {
            yyCorrectedWallets = JSON.parse(fs.readFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/yy-corrected/${pool.symbol.toLowerCase()}Depositors.json`));
            yyCorrectedBalances = JSON.parse(fs.readFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/yy-corrected/${pool.symbol.toLowerCase()}Balances.json`));
        }

        for (let user of Object.keys(mintedBalances)) {
            let postHackBalance = mintedBalances[user];

            if (correctedBalances[user]) {
                postHackBalance = correctedBalances[user];
            }

            let index = yyCorrectedWallets.indexOf(user);
            if (index !== -1) {
                postHackBalance = yyCorrectedBalances[index];
            }

            finalBalances[user] = postHackBalance;
        }

        fs.writeFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/final/${network}/${pool.symbol}.json`, JSON.stringify(finalBalances));

    }
}

async function calculateRtkns(pools, network) {
    const rTokens = {};

    for (let pool of pools) {
        fs.readFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/${network}/rTokens-${network}.json`, JSON.stringify(rTokensInWei));

    }

    fs.writeFileSync(`tools/scripts/exploitCalculations2/after-hack/savings/rtkn/rTokens-${network}.json`, JSON.stringify(rTokensInWei));
}


calculateFinalDeposits(POOLS_AVALANCHE, 'avalanche')
// calculateFinalDeposits(POOLS_ARBITRUM, 'arbitrum')
