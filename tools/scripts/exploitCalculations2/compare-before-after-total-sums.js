const ethers = require('ethers');
const fs = require('fs');
const path = require('path');

const DECIMALS = {
    BTC: 8,
    DAI: 18,
    USDC: 6,
    ETH: 18,
    ARB: 18,
    AVAX: 18,
    USDT: 6
};

const paths = {
    arbitrum: {
        before: 'before-hack/including-yy-fortifi/arbitrum',
        after: 'after-hack/savings/arbitrum',
        pools: ['ARB', 'BTC', 'DAI', 'ETH', 'USDC']
    },
    avalanche: {
        before: 'before-hack/including-yy-fortifi/avalanche',
        after: 'after-hack/savings/avalanche',
        pools: ['AVAX', 'BTC', 'ETH', 'USDC', 'USDT']
    }
};

function parseScientificNotation(value) {
    // Convert scientific notation to regular string
    const str = Number(value).toLocaleString('fullwide', { useGrouping: false });
    return ethers.BigNumber.from(str);
}

function sumJsonValues(filePath) {
    try {
        const jsonData = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        return Object.values(jsonData).reduce((acc, val) => {
            try {
                const bigNum = parseScientificNotation(val);
                return acc.add(bigNum);
            } catch (error) {
                console.error(`Error parsing value ${val} in ${filePath}:`, error);
                return acc;
            }
        }, ethers.BigNumber.from(0));
    } catch (error) {
        console.error(`Error reading/processing ${filePath}:`, error);
        return ethers.BigNumber.from(0);
    }
}

function compareBalances() {
    for (const [network, networkConfig] of Object.entries(paths)) {
        console.log(`\n=== ${network.toUpperCase()} ===`);

        for (const pool of networkConfig.pools) {
            const tokenSuffix = pool === 'AVAX' ? 'AVAX' : pool;
            const beforeFile = path.join(__dirname, networkConfig.before, `${tokenSuffix}.json`);
            const afterFile = path.join(__dirname, networkConfig.after, `${tokenSuffix}.json`);

            console.log(`\n${pool} Pool:`);

            try {
                const beforeSum = sumJsonValues(beforeFile);
                const afterSum = sumJsonValues(afterFile);

                const diff = afterSum.sub(beforeSum);
                const percentDiff = beforeSum.isZero() ?
                    0 :
                    diff.mul(10000).div(beforeSum).toNumber() / 100;

                const decimals = DECIMALS[pool];

                console.log(`Before hack: ${ethers.utils.formatUnits(beforeSum, decimals)}`);
                console.log(`After hack: ${ethers.utils.formatUnits(afterSum, decimals)}`);
                console.log(`Absolute difference: ${ethers.utils.formatUnits(diff.abs(), decimals)}`);
                console.log(`Percentage difference: ${percentDiff}%`);
            } catch (error) {
                console.error(`Error processing ${pool} pool:`, error);
            }
        }
    }
}

compareBalances();