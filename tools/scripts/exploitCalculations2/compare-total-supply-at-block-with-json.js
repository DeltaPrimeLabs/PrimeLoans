const ethers = require('ethers');
const fs = require('fs');
const path = require('path');

// ABI for totalSupply function
const abi = [
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address) view returns (uint256)"
];

// Pool configurations
const pools = {
    arbitrum: {
        rpcUrl: "https://arb.nirvanalabs.xyz/arbitrum_aws?apikey=284d7cde-5c20-46a9-abee-2e3932cdb771",
        blockNumber: 273282892,
        basePath: "after-hack/savings/arbitrum",
        pools: {
            BTC: {
                address: "0x275Caecf5542bF4a3CF64aa78a3f57dc9939675C",
                decimals: 8,
                jsonFile: "BTC.json"
            },
            DAI: {
                address: "0x7Dcf909B1E4b280bEe72C6A69b3a7Ed8adfb63f0",
                decimals: 18,
                jsonFile: "DAI.json"
            },
            USDC: {
                address: "0x5f3DB5899a7937c9ABF0A5Fc91718E6F813e4195",
                decimals: 6,
                jsonFile: "USDC.json"
            },
            WETH: {
                address: "0x2E2fE9Bc7904649b65B6373bAF40F9e2E0b883c5",
                decimals: 18,
                jsonFile: "ETH.json"
            },
            ARB: {
                address: "0x14c82CFc2c651700a66aBDd7dC375c9CeEFDDD72",
                decimals: 18,
                jsonFile: "ARB.json"
            }
        }
    },
    avalanche: {
        rpcUrl: "https://avax.nirvanalabs.xyz/avalanche_aws/ext/bc/C/rpc?apikey=284d7cde-5c20-46a9-abee-2e3932cdb771",
        blockNumber: 52928212,
        basePath: "after-hack/savings/avalanche",
        pools: {
            WAVAX: {
                address: "0xD26E504fc642B96751fD55D3E68AF295806542f5",
                decimals: 18,
                jsonFile: "AVAX.json"
            },
            USDC: {
                address: "0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b",
                decimals: 6,
                jsonFile: "USDC.json"
            },
            BTC: {
                address: "0x475589b0Ed87591A893Df42EC6076d2499bB63d0",
                decimals: 8,
                jsonFile: "BTC.json"
            },
            ETH: {
                address: "0xD7fEB276ba254cD9b34804A986CE9a8C3E359148",
                decimals: 18,
                jsonFile: "ETH.json"
            },
            USDT: {
                address: "0xd222e10D7Fe6B7f9608F14A8B5Cf703c74eFBcA1",
                decimals: 6,
                jsonFile: "USDT.json"
            }
        }
    }
};

async function analyzePoolDiscrepancy(network, symbol, provider) {
    const networkConfig = pools[network];
    const poolConfig = networkConfig.pools[symbol];

    console.log(`\n=== Detailed analysis for ${symbol} pool on ${network} ===`);

    try {
        const jsonPath = path.join(__dirname, networkConfig.basePath, poolConfig.jsonFile);
        const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));

        const contract = new ethers.Contract(poolConfig.address, abi, provider);

        console.log(`Analyzing ${Object.keys(jsonData).length} addresses...`);

        let totalDiscrepancy = ethers.BigNumber.from(0);
        let discrepancyCount = 0;
        let significantDiscrepancyCount = 0;

        for (const [address, jsonBalance] of Object.entries(jsonData)) {
            const historicalBalance = await contract.balanceOf(address, {
                blockTag: networkConfig.blockNumber
            });

            const jsonBalanceBN = ethers.BigNumber.from(jsonBalance);

            if (!historicalBalance.eq(jsonBalanceBN)) {
                discrepancyCount++;
                const diff = historicalBalance.sub(jsonBalanceBN);
                totalDiscrepancy = totalDiscrepancy.add(diff);

                // Calculate percentage difference
                const percentDiff = historicalBalance.isZero() ?
                    100 : // If historical balance is zero, treat any difference as 100%
                    diff.abs().mul(10000).div(historicalBalance).toNumber() / 100;

                // Only log if difference is >= 0.01%
                if (percentDiff >= 0.01) {
                    significantDiscrepancyCount++;
                    console.log(`\nDiscrepancy found for address: ${address}`);
                    console.log(`JSON balance: ${ethers.utils.formatUnits(jsonBalanceBN, poolConfig.decimals)}`);
                    console.log(`Historical balance: ${ethers.utils.formatUnits(historicalBalance, poolConfig.decimals)}`);
                    console.log(`Difference: ${ethers.utils.formatUnits(diff, poolConfig.decimals)}`);
                    console.log(`Difference %: ${percentDiff}%`);
                }
            }
        }

        console.log(`\n=== Summary ===`);
        console.log(`Total addresses checked: ${Object.keys(jsonData).length}`);
        console.log(`Total addresses with any discrepancy: ${discrepancyCount}`);
        console.log(`Addresses with significant discrepancy (â‰¥0.01%): ${significantDiscrepancyCount}`);
        console.log(`Total discrepancy: ${ethers.utils.formatUnits(totalDiscrepancy, poolConfig.decimals)}`);

    } catch (error) {
        console.error('Analysis error:', error);
    }
}

async function checkSupplies() {
    for (const [network, networkConfig] of Object.entries(pools)) {
        console.log(`\nChecking ${network.toUpperCase()} pools...`);

        const provider = new ethers.providers.JsonRpcProvider(networkConfig.rpcUrl);

        for (const [symbol, poolConfig] of Object.entries(networkConfig.pools)) {
            try {
                // Read JSON file with updated path
                const jsonPath = path.join(__dirname, networkConfig.basePath, poolConfig.jsonFile);
                const jsonData = JSON.parse(fs.readFileSync(jsonPath, 'utf8'));

                // Sum values from JSON
                const sumFromJson = Object.values(jsonData).reduce((acc, val) => {
                    return acc.add(ethers.BigNumber.from(val));
                }, ethers.BigNumber.from(0));

                // Query totalSupply
                const contract = new ethers.Contract(poolConfig.address, abi, provider);
                const totalSupply = await contract.totalSupply({
                    blockTag: networkConfig.blockNumber
                });

                // Calculate differences
                const diff = totalSupply.sub(sumFromJson);
                const diffPercentage = diff.mul(10000).div(totalSupply).toNumber() / 100;

                // Format amounts based on decimals
                const formatAmount = (amount) => {
                    return ethers.utils.formatUnits(amount, poolConfig.decimals);
                };

                console.log(`\n${symbol} Pool:`);
                console.log(`Sum from JSON: ${formatAmount(sumFromJson)}`);
                console.log(`Total Supply: ${formatAmount(totalSupply)}`);
                console.log(`Absolute difference: ${formatAmount(diff.abs())}`);
                console.log(`Percentage difference: ${diffPercentage}%`);
            } catch (error) {
                console.error(`Error processing ${symbol} pool:`, error);
            }
        }
    }
}

// Function to analyze a specific pool
async function analyzeSpecificPool(network, symbol) {
    const networkConfig = pools[network];
    const provider = new ethers.providers.JsonRpcProvider(networkConfig.rpcUrl);
    await analyzePoolDiscrepancy(network, symbol, provider);
}

// Run the check
checkSupplies()
    .then(() => process.exit(0))
    .catch(error => {
        console.error('Error:', error);
        process.exit(1);
    });

// analyzeSpecificPool('avalanche', 'BTC')
//     .then(() => process.exit(0))
//     .catch(error => {
//         console.error('Error:', error);
//         process.exit(1);
//     });