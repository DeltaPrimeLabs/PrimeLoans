const { ethers } = require('ethers');

// Configuration
// const RPC_URL = 'https://arb.nirvanalabs.xyz/arbitrum_aws?apikey=284d7cde-5c20-46a9-abee-2e3932cdb771'; // Arbitrum RPC
const RPC_URL = 'https://avax.nirvanalabs.xyz/avalanche_aws/ext/bc/C/rpc?apikey=284d7cde-5c20-46a9-abee-2e3932cdb771'; // Avalanche RPC
// const BLOCK_NUMBER = 273282893 - 1; // ARBITRUM
const BLOCK_NUMBER = 52928213 - 1; // AVALANCHE
const TARGET_ADDRESS = '0xA587Ca1DB5C5d68e4BE27035e0E5CAf302065D28'; // Replace with the address you want to query for

const ARBITRUM_POOLS = [
    '0x14c82CFc2c651700a66aBDd7dC375c9CeEFDDD72',  // ARB
    '0x275Caecf5542bF4a3CF64aa78a3f57dc9939675C', // BTC
    '0x7Dcf909B1E4b280bEe72C6A69b3a7Ed8adfb63f0', // DAI
    '0x2E2fE9Bc7904649b65B6373bAF40F9e2E0b883c5', // WETH
    '0x5f3DB5899a7937c9ABF0A5Fc91718E6F813e4195', // USDC
];

const AVALANCHE_POOLS = [
    '0xD26E504fc642B96751fD55D3E68AF295806542f5',  // WAVAX
    '0x475589b0Ed87591A893Df42EC6076d2499bB63d0', // BTC
    '0xD7fEB276ba254cD9b34804A986CE9a8C3E359148', // ETH
    '0x2323dAC85C6Ab9bd6a8B5Fb75B0581E31232d12b', // USDC
    '0xd222e10D7Fe6B7f9608F14A8B5Cf703c74eFBcA1', // USDT
];

const CONTRACT_ADDRESSES = AVALANCHE_POOLS; // Replace with the contracts you want to query

// ABI for the getBorrowed method
const ABI = [
    'function getBorrowed(address _user) view returns (uint256)'
];

async function queryBorrowed() {
    // Create provider
    const provider = new ethers.providers.JsonRpcProvider(RPC_URL);

    // Create contract instances
    const contracts = CONTRACT_ADDRESSES.map(address =>
        new ethers.Contract(address, ABI, provider)
    );

    try {
        // Query all contracts
        const results = await Promise.all(
            contracts.map(async (contract, index) => {
                try {
                    const borrowed = await contract.getBorrowed(
                        TARGET_ADDRESS,
                        { blockTag: BLOCK_NUMBER }
                    );

                    return {
                        contract: CONTRACT_ADDRESSES[index],
                        borrowed: borrowed.toString()
                    };
                } catch (error) {
                    return {
                        contract: CONTRACT_ADDRESSES[index],
                        error: error.message
                    };
                }
            })
        );

        // Print results
        console.log(`\nResults at block ${BLOCK_NUMBER}:`);
        results.forEach(result => {
            if (result.borrowed) {
                console.log(`Contract ${result.contract}: ${result.borrowed}`);
            } else {
                console.log(`Contract ${result.contract}: Error - ${result.error}`);
            }
        });

    } catch (error) {
        console.error('Error:', error);
    }
}

// Run the script
queryBorrowed().catch(console.error);