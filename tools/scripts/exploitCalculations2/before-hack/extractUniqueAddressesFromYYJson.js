const fs = require('fs');
const { ethers } = require('ethers');

function processPoolAddresses(inputFilePath) {
    try {
        // Read and parse the input JSON file
        const rawData = fs.readFileSync(inputFilePath, 'utf8');
        const data = JSON.parse(rawData);

        // Object to store addresses by pool
        const pools = {};

        // Process each entry
        for (const entry of data) {
            // Extract pool name (last word from the name field)
            const poolName = entry.name.split(' ').pop();

            // Initialize pool array if it doesn't exist
            if (!pools[poolName]) {
                pools[poolName] = new Set();
            }

            // Add checksummed address to the pool's set
            const checksumAddress = ethers.utils.getAddress(entry.user_address);
            pools[poolName].add(checksumAddress);
        }

        // Save each pool's addresses to a separate JSON file
        for (const [poolName, addresses] of Object.entries(pools)) {
            const outputFilename = `${poolName.toLowerCase()}_addresses.json`;

            // Convert set to array and sort for consistent output
            const addressesArray = Array.from(addresses).sort();

            // Write to file with pretty formatting
            fs.writeFileSync(
                outputFilename,
                JSON.stringify(addressesArray, null, 4)
            );

            console.log(`Created ${outputFilename} with ${addressesArray.length} unique addresses`);
        }

        console.log('Processing complete!');
    } catch (error) {
        console.error('Error processing pools:', error);
        throw error;
    }
}

// Use the correct input file name
processPoolAddresses('yield-yak-and-fortifi.json');