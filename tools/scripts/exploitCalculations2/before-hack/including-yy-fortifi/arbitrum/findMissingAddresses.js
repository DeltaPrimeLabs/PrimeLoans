const fs = require('fs');
const csv = require('csv-parse/sync');

// Function to process CSV data
function processCSV(csvContent) {
    const records = csv.parse(csvContent, {
        columns: true,
        skip_empty_lines: true
    });

    // Extract addresses from CSV
    return new Set(records.map(record => record.HolderAddress.toLowerCase()));
}

// Function to process JSON data
function processJSON(jsonContent) {
    const data = JSON.parse(jsonContent);
    // Extract addresses from JSON (convert to lowercase for case-insensitive comparison)
    return new Set(Object.keys(data).map(address => address.toLowerCase()));
}

// Main function to find missing addresses
function compareAddresses(csvPath, jsonPath) {
    try {
        // Read files
        const csvContent = fs.readFileSync(csvPath, 'utf-8');
        const jsonContent = fs.readFileSync(jsonPath, 'utf-8');

        // Process data
        const csvAddresses = processCSV(csvContent);
        const jsonAddresses = processJSON(jsonContent);

        // Find addresses in CSV but not in JSON
        const missingFromJson = new Set();
        for (const address of csvAddresses) {
            if (!jsonAddresses.has(address)) {
                missingFromJson.add(address);
            }
        }

        // Find addresses in JSON but not in CSV
        const missingFromCsv = new Set();
        for (const address of jsonAddresses) {
            if (!csvAddresses.has(address)) {
                missingFromCsv.add(address);
            }
        }

        return {
            missingFromJson,
            missingFromCsv,
            csvCount: csvAddresses.size,
            jsonCount: jsonAddresses.size
        };
    } catch (error) {
        console.error('Error processing files:', error);
        return {
            missingFromJson: new Set(),
            missingFromCsv: new Set(),
            csvCount: 0,
            jsonCount: 0
        };
    }
}

const pools = ['ARB', 'BTC', 'DAI', 'ETH', 'USDC']; // Add all your pool names here

for (const pool of pools) {
    console.log(`\n=== Processing ${pool} ===`);

    const csvPath = `./explorer/export-tokenholders-for-contract-${pool}.csv`;
    const jsonPath = `${pool}.json`;

    // Check if files exist before processing
    if (!fs.existsSync(csvPath)) {
        console.log(`CSV file for ${pool} not found: ${csvPath}`);
        continue;
    }
    if (!fs.existsSync(jsonPath)) {
        console.log(`JSON file for ${pool} not found: ${jsonPath}`);
        continue;
    }

    const result = compareAddresses(csvPath, jsonPath);

    console.log('\nFile Statistics:');
    console.log(`CSV file address count: ${result.csvCount}`);
    console.log(`JSON file address count: ${result.jsonCount}`);

    console.log('\nAddresses present in CSV but missing from JSON:');
    result.missingFromJson.forEach(address => console.log(address));
    console.log(`\nTotal addresses missing from JSON: ${result.missingFromJson.size}`);

    console.log('\nAddresses present in JSON but missing from CSV:');
    result.missingFromCsv.forEach(address => console.log(address));
    console.log(`\nTotal addresses missing from CSV: ${result.missingFromCsv.size}`);
}